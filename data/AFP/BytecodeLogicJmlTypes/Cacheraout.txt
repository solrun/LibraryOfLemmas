Loading theory "Draft.AssocLists" (required by "Draft.CacheraMoreTemplates" via "Draft.Cachera" via "Draft.Logic" via "Draft.Language")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ambiguous input (line 26 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b)))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b))))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### Ambiguous input (line 29 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ambiguous input (line 33 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  delete :: "('a * 'b) list => 'a => ('a * 'b) list"
### Ambiguous input (line 50 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC" ("_position" delete)
###       ("_cargs" ("_position" L) ("_position" a)))
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" l)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a)))
###           ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a))))))
###     ("_position" L)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 84 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("\<^const>AssocLists.upd"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_position" a) ("_position" b))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" b))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.583s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 95 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" emp)
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" emp) ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>AssocLists.lookup" ("_position" l)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" a))
###         ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" L)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("_position" M)))
###           ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("_position" M)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.028s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
### Ambiguous input (line 129 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b)))
###           ("_applC" ("_position" Suc)
###             ("\<^const>AssocLists.AL_Size" ("_position" L))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b))))))
###     ("_applC" ("_position" Suc)
###       ("\<^const>AssocLists.AL_Size" ("_position" L)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.436s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 147 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 45 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup"
###                 ("\<^const>AssocLists.lookup" ("_position" M)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                     ("_position" L)))
###                 ("_position" a))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("\<^const>AssocLists.lookup" ("_position" L)
###                     ("_position" a))))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("_position" L)))
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###               ("_position" None))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("_position" L)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>AssocLists.lookup" ("_position" L)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b)))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b)))
###                   ("\<^const>HOL.All_binder" ("_position" c)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal" ("_position" c)
###                         ("_position" a))
###                       ("\<^const>AssocLists.lookup"
###                         ("\<^const>AssocLists.lookup" ("_position" M)
###                           ("\<^const>HOL.eq" ("_position" c)
###                             ("_position" L)))
###                         ("_position" c)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" obj)))
###             ("\<^const>AssocLists.AL_Size" ("_position" h))))
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###             ("_position" n)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" obj))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1)))
###           ("\<^const>AssocLists.AL_Size" ("_position" h)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" Some) ("_position" obj)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some) ("_position" obj))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1))))))
###     ("\<^const>AssocLists.AL_Size" ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AssocLists"
### 0.442s elapsed time, 1.767s cpu time, 0.118s GC time
Loading theory "Draft.Language" (required by "Draft.CacheraMoreTemplates" via "Draft.Cachera" via "Draft.Logic")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.067s elapsed time, 4.033s cpu time, 0.859s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.059s elapsed time, 3.930s cpu time, 0.779s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 143 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" P)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" C)
###                 ("_applC" ("_position" Some) ("_position" CD)))
###               ("_position" CD)))
###           ("_position" m))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("\<^const>AssocLists.lookup" ("_position" CD)
###               ("_position" m))))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("_position" CD)))
###         ("\<^const>HOL.eq" ("_position" m)
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>AssocLists.lookup" ("_position" CD)
###             ("\<^const>HOL.eq" ("_position" m)
###               ("_applC" ("_position" Some) ("_position" M)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("_applC" ("_position" S)
###             ("_Map" ("_maplet" ("_position" x) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###             ("_position" v))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Framep"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 178 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>HOL.eq" ("_applC" ("_position" nextLoc) ("_position" h))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("_applC" ("_position" nextLoc) ("_position" h)))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" s) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" s)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("\<^const>AssocLists.upd" ("_position" s) ("_position" x)
###                 ("_position" v))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("_applC" ("_position" s)
###                 ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 246 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 250 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Stepp", "Execp"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.036s elapsed time, 6.451s cpu time, 1.070s GC time
Loading theory "Draft.Templates" (required by "Draft.CacheraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CacheraMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.110s cpu time, 0.077s GC time
### Ambiguous input (line 335 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_position" t))))
###           ("_tuple"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_position" n)))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>AssocLists.lookup" ("_position" S)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll) ("_position" l))))))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 339 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("_applC" ("_position" S)
###                     ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###                     ("_position" v))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg" ("_position" emp))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg" ("_position" emp))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 114 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Suc)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_position" t)))))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("_position" ll))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("_position" n))))
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("_position" os)))
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("_position" F))
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" Flds)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" Flds)
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 52 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Flds)
### ("_Map" ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("\<^const>AssocLists.upd"
### ("_position" Flds) ("_position" F) ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("\<^const>AssocLists.upd"
###                                   ("_position" Flds) ("_position" F)
###                                   ("_position" v)))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple" ("_position" ops)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg"
###                 ("_applC" ("_position" h)
###                   ("_Map"
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Flds)
###                             ("_Map"
###                               ("_maplet" ("_position" F)
###                                 ("_position" v)))))))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple" ("_position" ops)
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" h)
###                     ("_Map"
###                       ("_maplet" ("_position" a)
###                         ("_tuple" ("_position" d)
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Flds)
###                               ("_Map"
###                                 ("_maplet" ("_position" F)
###                                   ("_position" v)))))))))))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons" ("_position" v)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Flds)
###                                 ("_Map"
###                                   ("_maplet" ("_position" F)
###                                     ("_position" v)))))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple" ("_position" ops)
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" h)
###                           ("_Map"
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" d)
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" Flds)
###                                     ("_Map"
### ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons"
###                         ("_applC" ("_position" RVal)
###                           ("_applC" ("_position" Loc) ("_position" a)))
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple"
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" RVal)
###               ("_applC" ("_position" Loc) ("_position" a)))
###             ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>List.list.Cons"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a))))))
###           ("_position" ops))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero"))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 3.004s elapsed time, 7.305s cpu time, 1.139s GC time
Loading theory "Draft.Logic" (required by "Draft.CacheraMoreTemplates" via "Draft.Cachera")
### Ambiguous input (line 204 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 242 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" Anno)
###                         ("_position" l))
###                       ("_applC" ("_position" Some) ("_position" Q)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" Anno)
###                         ("_position" l))
###                       ("_applC" ("_position" Some) ("_position" Q)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SP_Judgementp"
  Proving monotonicity ...
### Ambiguous input (line 273 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0)
###                           ("_position" s))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_applC" ("_position" Some) ("_position" Q))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_applC" ("_position" Some) ("_position" Q))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l)
###               ("_applC" ("_position" Some) ("_position" Q)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l)
###               ("_applC" ("_position" Some) ("_position" Q)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Logic"
### 2.558s elapsed time, 3.161s cpu time, 0.832s GC time
Loading theory "Draft.Cachera" (required by "Draft.CacheraMoreTemplates")
### Ambiguous input (line 112 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" new) ("_position" c)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus" ("_position" k)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" new) ("_position" c)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus" ("_position" k)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" new) ("_position" c)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus" ("_position" k)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" new) ("_position" c)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.plus_class.plus" ("_position" k)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" I))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" I)
###           ("_Finset"
###             ("_args" ("_applC" ("_position" const) ("_position" c))
###               ("_args" ("_position" dup)
###                 ("_args" ("_position" pop)
###                   ("_args" ("_position" swap)
###                     ("_args" ("_applC" ("_position" load) ("_position" x))
###                       ("_args"
###                         ("_applC" ("_position" store) ("_position" x))
###                         ("_args"
###                           ("_applC" ("_position" binop) ("_position" f))
###                           ("_args"
###                             ("_applC" ("_position" unop) ("_position" g))
###                             ("_args"
###                               ("_applC" ("_position" getfield)
###                                 ("_cargs" ("_position" d) ("_position" F)))
###                               ("_args"
###                                 ("_applC" ("_position" putfield)
###                                   ("_cargs" ("_position" d)
###                                     ("_position" F)))
###                                 ("_applC" ("_position" checkcast)
###                                   ("_position" d)))))))))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" I))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" I)
###           ("_Finset"
###             ("_args" ("_applC" ("_position" const) ("_position" c))
###               ("_args" ("_position" dup)
###                 ("_args" ("_position" pop)
###                   ("_args" ("_position" swap)
###                     ("_args" ("_applC" ("_position" load) ("_position" x))
###                       ("_args"
###                         ("_applC" ("_position" store) ("_position" x))
###                         ("_args"
###                           ("_applC" ("_position" binop) ("_position" f))
###                           ("_args"
###                             ("_applC" ("_position" unop) ("_position" g))
###                             ("_args"
###                               ("_applC" ("_position" getfield)
###                                 ("_cargs" ("_position" d) ("_position" F)))
###                               ("_args"
###                                 ("_applC" ("_position" putfield)
###                                   ("_cargs" ("_position" d)
###                                     ("_position" F)))
###                                 ("_applC" ("_position" checkcast)
###                                   ("_position" d)))))))))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" I))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" I)
###           ("_Finset"
###             ("_args" ("_applC" ("_position" const) ("_position" c))
###               ("_args" ("_position" dup)
###                 ("_args" ("_position" pop)
###                   ("_args" ("_position" swap)
###                     ("_args" ("_applC" ("_position" load) ("_position" x))
###                       ("_args"
###                         ("_applC" ("_position" store) ("_position" x))
###                         ("_args"
###                           ("_applC" ("_position" binop) ("_position" f))
###                           ("_args"
###                             ("_applC" ("_position" unop) ("_position" g))
###                             ("_args"
###                               ("_applC" ("_position" getfield)
###                                 ("_cargs" ("_position" d) ("_position" F)))
###                               ("_args"
###                                 ("_applC" ("_position" putfield)
###                                   ("_cargs" ("_position" d)
###                                     ("_position" F)))
###                                 ("_applC" ("_position" checkcast)
###                                   ("_position" d)))))))))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" I))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" I)
###           ("_Finset"
###             ("_args" ("_applC" ("_position" const) ("_position" c))
###               ("_args" ("_position" dup)
###                 ("_args" ("_position" pop)
###                   ("_args" ("_position" swap)
###                     ("_args" ("_applC" ("_position" load) ("_position" x))
###                       ("_args"
###                         ("_applC" ("_position" store) ("_position" x))
###                         ("_args"
###                           ("_applC" ("_position" binop) ("_position" f))
###                           ("_args"
###                             ("_applC" ("_position" unop) ("_position" g))
###                             ("_args"
###                               ("_applC" ("_position" getfield)
###                                 ("_cargs" ("_position" d) ("_position" F)))
###                               ("_args"
###                                 ("_applC" ("_position" putfield)
###                                   ("_cargs" ("_position" d)
###                                     ("_position" F)))
###                                 ("_applC" ("_position" checkcast)
###                                   ("_position" d)))))))))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 182 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" vreturn))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera)
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" vreturn))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera)
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" vreturn))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera)
###                 ("\<^const>Groups.zero_class.zero")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l) ("_position" vreturn))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera)
###                 ("\<^const>Groups.zero_class.zero")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" goto) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" n))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" goto) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" n))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" goto) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" n))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" goto) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" n))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" iftrue) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera) ("_position" n))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" iftrue) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera) ("_position" n))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" iftrue) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera) ("_position" n))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" iftrue) ("_position" pc)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" pc)
###                       ("_applC" ("_position" Cachera) ("_position" n))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 229 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" D)
###                     ("_tuple_arg" ("_position" m'))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" k))
###                       ("_position" Anno2))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" D)
###                     ("_tuple_arg" ("_position" m'))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" k))
###                       ("_position" Anno2))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" D)
###                     ("_tuple_arg" ("_position" m'))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" k))
###                       ("_position" Anno2))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" D)
###                     ("_tuple_arg" ("_position" m'))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" k))
###                       ("_position" Anno2))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" k))
###                         ("_position" Anno2)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("_position" l))
###               ("_position" None)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" k))
###                         ("_position" Anno2)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" k))
###                         ("_position" Anno2)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ins_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m'))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" D)
###             ("_cargs" ("_position" m')
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.eq" ("_position" l) ("_position" None))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" k))
###                         ("_position" Anno2)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" nk)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" k))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" nk)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Cachera) ("_position" n)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" Cachera) ("_position" n))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Cachera) ("_position" n)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" Cachera) ("_position" n))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_position" None))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Cachera) ("_position" n)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" Cachera) ("_position" n))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" Cachera) ("_position" n)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" Cachera) ("_position" n))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l) ("_position" None)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" derivAssum)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" Anno)))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I)))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno)))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l0)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n)))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I)))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I)))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" Anno)))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" A)
###                       ("_tuple_args" ("_position" B)
###                         ("_tuple_arg" ("_position" I))))
###                     ("_applC" ("_position" Cachera) ("_position" n)))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" c)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno)))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l0)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n)))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" A)
###                       ("_tuple_args" ("_position" B)
###                         ("_tuple_arg" ("_position" I))))
###                     ("_applC" ("_position" Cachera) ("_position" n)))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" c)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" A)
###                       ("_tuple_args" ("_position" B)
###                         ("_tuple_arg" ("_position" I))))
###                     ("_applC" ("_position" Cachera) ("_position" n)))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" c)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" n)))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m))))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" Anno)))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" G)
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l)))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno)))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l0)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n)))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" G)
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l)))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" c)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" n) ("_position" Anno))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" c) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" Anno))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" c)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l0)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" m)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" A)
###                   ("_idts" ("_position" B) ("_position" I))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" G)
###                 ("_tuple" ("_position" c)
###                   ("_tuple_args" ("_position" m)
###                     ("_tuple_arg" ("_position" l)))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>HOL.Ex_binder" ("_position" n)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" A)
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" I))))
###                   ("_applC" ("_position" Cachera) ("_position" n)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" c)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n))))))))))))))
###   ("\<^const>HOL.Trueprop" ("_position" VP)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 370 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("_position" f))
###         ("_applC" ("_position" Some) ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args"
###           ("_applC" ("_position" CallPrim)
###             ("_cargs" ("_position" f) ("_position" args)))
###           ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###         ("\<^const>HOL.eq" ("_position" f)
###           ("_applC" ("_position" Some) ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args"
###           ("_applC" ("_position" CallPrim)
###             ("_cargs" ("_position" f) ("_position" args)))
###           ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "TP_primp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "TP_exprp"
  Proving monotonicity ...
### Ambiguous input (line 394 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 88 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_position" None))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_position" None))
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_position" None))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n)))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" F)
###                   ("_position" f))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_arg" ("_position" e)))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" \<Sigma>)
###                   ("_tuple_args" ("_position" e)
###                     ("_tuple_arg" ("_position" n))))
###                 ("_position" TP_expr)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n)))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" F)
###                   ("_position" f))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_arg" ("_position" e)))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" \<Sigma>)
###                   ("_tuple_args" ("_position" e)
###                     ("_tuple_arg" ("_position" n))))
###                 ("_position" TP_expr)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_position" None))
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n)))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" F)
###                   ("_position" f))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_arg" ("_position" e)))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" \<Sigma>)
###                   ("_tuple_args" ("_position" e)
###                     ("_tuple_arg" ("_position" n))))
###                 ("_position" TP_expr)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n)))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" F)
###                   ("_position" f))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_arg" ("_position" e)))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" \<Sigma>)
###                   ("_tuple_args" ("_position" e)
###                     ("_tuple_arg" ("_position" n))))
###                 ("_position" TP_expr)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("_position" f))
###             ("_position" None))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" TP)
###       ("_cargs" ("_position" \<Sigma>) ("_position" F)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder" ("_position" f)
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f) ("_position" None)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###             ("_position" None))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" f)
###           ("_idts" ("_position" n)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("\<^const>HOL.eq" ("_position" f)
###               ("_applC" ("_position" Some) ("_position" n))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F) ("_position" f))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" \<Sigma>)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" n))))
###               ("_position" TP_expr))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args" ("_applC" ("_position" IntPrim) ("_position" i))
###           ("_tuple_arg"
###             ("_tuple"
###               ("\<^const>AssocLists.upd" ("_position" code) ("_position" l)
###                 ("_applC" ("_position" const)
###                   ("_applC" ("_position" IVal) ("_position" i))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args" ("_applC" ("_position" IntPrim) ("_position" i))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_Map"
###                   ("_maplet" ("_position" l)
###                     ("_applC" ("_position" const)
###                       ("_applC" ("_position" IVal) ("_position" i))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" UnPrim)
###             ("_cargs" ("_position" f) ("_position" x)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("\<^const>AssocLists.upd"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_applC" ("_position" unop) ("_position" f)))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 2))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" UnPrim)
###             ("_cargs" ("_position" f) ("_position" x)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_Map"
###                   ("_maplet"
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" unop) ("_position" f)))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 2))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" UnPrim)
###             ("_cargs" ("_position" f) ("_position" x)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" unop) ("_position" f))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 2))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" UnPrim)
###             ("_cargs" ("_position" f) ("_position" x)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("\<^const>AssocLists.upd"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" unop) ("_position" f))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 2))))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet" ("_position" l)
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" load) ("_position" y)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_applC" ("_position" binop) ("_position" f))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet" ("_position" l)
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" load) ("_position" y)))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 2))))
###                       ("_applC" ("_position" binop) ("_position" f))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd" ("_position" code)
###                     ("_position" l)
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" load) ("_position" y)))
###                 ("_Map"
###                   ("_maplet"
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" binop) ("_position" f)))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" load) ("_position" y))))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 2))))
###                       ("_applC" ("_position" binop) ("_position" f))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("_cargs"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" load) ("_position" y))))
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_applC" ("_position" binop) ("_position" f)))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("\<^const>AssocLists.upd"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd" ("_position" code)
###                     ("_position" l)
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" load) ("_position" y)))
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 2))))
###                 ("_applC" ("_position" binop) ("_position" f)))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("\<^const>AssocLists.upd"
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" load) ("_position" y))))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 2))))
###                   ("_applC" ("_position" binop) ("_position" f))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" BinPrim)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" x) ("_position" y))))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" load) ("_position" y))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" binop) ("_position" f)))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 3))))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 424 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args" ("_position" NilPrim)
###           ("_tuple_arg"
###             ("_tuple"
###               ("\<^const>AssocLists.upd" ("_position" code) ("_position" l)
###                 ("_applC" ("_position" const)
###                   ("_applC" ("_position" RVal) ("_position" Nullref))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args" ("_position" NilPrim)
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_Map"
###                   ("_maplet" ("_position" l)
###                     ("_applC" ("_position" const)
###                       ("_applC" ("_position" RVal)
###                         ("_position" Nullref))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 427 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 512 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("\<^const>AssocLists.upd"
###                               ("\<^const>AssocLists.upd"
###                                 ("_Map"
###                                   ("_maplet" ("_position" l)
###                                     ("_applC" ("_position" load)
### ("_position" y))))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("\<^const>Groups.one_class.one"))
###                                 ("_applC" ("_position" load)
###                                   ("_position" x)))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_applC" ("_position" new)
###                                 ("_position" LIST)))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 3))))
###                             ("_applC" ("_position" store)
###                               ("_position" tmp)))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" load) ("_position" tmp)))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 6))))
###                       ("_applC" ("_position" load) ("_position" tmp)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 7))))
###                     ("_applC" ("_position" putfield)
###                       ("_cargs" ("_position" LIST) ("_position" TL))))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 8))))
###                   ("_applC" ("_position" load) ("_position" tmp))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("\<^const>AssocLists.upd"
###                               ("\<^const>AssocLists.upd"
###                                 ("_Map"
###                                   ("_maplet" ("_position" l)
###                                     ("_applC" ("_position" load)
### ("_position" y))))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("\<^const>Groups.one_class.one"))
###                                 ("_applC" ("_position" load)
###                                   ("_position" x)))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_applC" ("_position" new)
###                                 ("_position" LIST)))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 3))))
###                             ("_applC" ("_position" store)
###                               ("_position" tmp)))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" load) ("_position" tmp)))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 6))))
###                       ("_applC" ("_position" load) ("_position" tmp)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 7))))
###                     ("_applC" ("_position" putfield)
###                       ("_cargs" ("_position" LIST) ("_position" TL))))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 8))))
###                       ("_applC" ("_position" load) ("_position" tmp))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("_Map"
###                               ("_maplet" ("_position" l)
###                                 ("_applC" ("_position" load)
###                                   ("_position" y))))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" load) ("_position" x)))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" new) ("_position" LIST)))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" store) ("_position" tmp)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 4))))
###                       ("_applC" ("_position" load) ("_position" tmp)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 5))))
###                     ("_applC" ("_position" putfield)
###                       ("_cargs" ("_position" LIST) ("_position" HD))))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 6))))
###                           ("_applC" ("_position" load) ("_position" tmp))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 7))))
###                       ("_applC" ("_position" putfield)
###                         ("_cargs" ("_position" LIST) ("_position" TL))))
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 8))))
###                         ("_applC" ("_position" load) ("_position" tmp)))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet" ("_position" l)
###                             ("_applC" ("_position" load) ("_position" y))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" load) ("_position" x)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 2))))
###                       ("_applC" ("_position" new) ("_position" LIST)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 3))))
###                     ("_applC" ("_position" store) ("_position" tmp)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" load) ("_position" tmp))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 5))))
###                       ("_applC" ("_position" putfield)
###                         ("_cargs" ("_position" LIST) ("_position" HD))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 6))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 7))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" TL))))
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 8))))
###                           ("_applC" ("_position" load)
###                             ("_position" tmp))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet" ("_position" l)
###                         ("_applC" ("_position" load) ("_position" y))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" new) ("_position" LIST))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 3))))
###                       ("_applC" ("_position" store) ("_position" tmp)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD))))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" tmp))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" putfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp)))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd" ("_position" code)
###                     ("_position" l)
###                     ("_applC" ("_position" load) ("_position" y)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_applC" ("_position" new) ("_position" LIST))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 3))))
###                     ("_applC" ("_position" store) ("_position" tmp)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" load) ("_position" tmp))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 5))))
###                       ("_applC" ("_position" putfield)
###                         ("_cargs" ("_position" LIST) ("_position" HD))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 6))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 7))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" TL))))
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 8))))
###                           ("_applC" ("_position" load)
###                             ("_position" tmp))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" y)))
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" new) ("_position" LIST))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 3))))
###                       ("_applC" ("_position" store) ("_position" tmp)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD))))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" tmp))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" putfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp)))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" y))))
###                   ("_cargs"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_applC" ("_position" new)
###                               ("_position" LIST))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" store) ("_position" tmp)))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 4))))
###                               ("_applC" ("_position" load)
###                                 ("_position" tmp))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 5))))
###                           ("_applC" ("_position" putfield)
###                             ("_cargs" ("_position" LIST) ("_position" HD))))
###                         ("_cargs"
###                           ("\<^const>AssocLists.upd"
###                             ("_Map"
###                               ("_maplet"
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("_Numeral"
###                                     ("_constify" ("_position" 6))))
###                                 ("_applC" ("_position" load)
###                                   ("_position" tmp))))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 7))))
###                             ("_applC" ("_position" putfield)
###                               ("_cargs" ("_position" LIST)
###                                 ("_position" TL))))
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 8))))
###                               ("_applC" ("_position" load)
###                                 ("_position" tmp))))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd" ("_position" code)
###                         ("_position" l)
###                         ("_applC" ("_position" load) ("_position" y)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" load) ("_position" x)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" new) ("_position" LIST)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 3))))
###                   ("_applC" ("_position" store) ("_position" tmp)))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 4))))
###                         ("_applC" ("_position" load) ("_position" tmp))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 5))))
###                     ("_applC" ("_position" putfield)
###                       ("_cargs" ("_position" LIST) ("_position" HD))))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 6))))
###                           ("_applC" ("_position" load) ("_position" tmp))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 7))))
###                       ("_applC" ("_position" putfield)
###                         ("_cargs" ("_position" LIST) ("_position" TL))))
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 8))))
###                         ("_applC" ("_position" load) ("_position" tmp)))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" ConsPrim)
###             ("_cargs" ("_position" x) ("_position" y)))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" code)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" y)))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" new) ("_position" LIST)))
###                   ("_cargs"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" store) ("_position" tmp))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" putfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD))))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" tmp))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" putfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" load)
###                               ("_position" tmp)))))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("_Numeral" ("_constify" ("_position" 9))))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 435 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" CallPrim)
###             ("_cargs" ("_position" f) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_tuple"
###               ("\<^const>AssocLists.upd" ("_position" code) ("_position" l)
###                 ("_applC" ("_position" invokeS)
###                   ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                     ("_applC" ("_position" snd) ("_position" f)))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" l)
###       ("_tuple_args" ("_position" code)
###         ("_tuple_args"
###           ("_applC" ("_position" CallPrim)
###             ("_cargs" ("_position" f) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_tuple"
###               ("_applC" ("_position" code)
###                 ("_Map"
###                   ("_maplet" ("_position" l)
###                     ("_applC" ("_position" invokeS)
###                       ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                         ("_applC" ("_position" snd) ("_position" f)))))))
###               ("_tuple_arg"
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))
###     ("_position" compilePrim)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 438 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one"))
###           ("_tuple_args"
###             ("\<^const>AssocLists.upd" ("_position" code) ("_position" l)
###               ("_applC" ("_position" load) ("_position" x)))
###             ("_tuple_args"
###               ("_applC" ("_position" CallPrim)
###                 ("_cargs" ("_position" f) ("_position" args)))
###               ("_tuple_arg" ("_position" OUT)))))
###         ("_position" compilePrim))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CallPrim)
###               ("_cargs" ("_position" f)
###                 ("\<^const>List.list.Cons" ("_position" x)
###                   ("_position" args))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one"))
###           ("_tuple_args"
###             ("_applC" ("_position" code)
###               ("_Map"
###                 ("_maplet" ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))))
###             ("_tuple_args"
###               ("_applC" ("_position" CallPrim)
###                 ("_cargs" ("_position" f) ("_position" args)))
###               ("_tuple_arg" ("_position" OUT)))))
###         ("_position" compilePrim))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CallPrim)
###               ("_cargs" ("_position" f)
###                 ("\<^const>List.list.Cons" ("_position" x)
###                   ("_position" args))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "compilePrimp"
  Proving monotonicity ...
### Ambiguous input (line 446 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup" ("_position" code1)
###                   ("\<^const>HOL.eq" ("_position" ll)
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("_position" ll))))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("_position" ll))
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" ll)))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" code)))
###                   ("_position" ll))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup" ("_position" code1)
###                   ("\<^const>HOL.eq" ("_position" ll)
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("_position" ll))))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("_position" ll))
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" ll)))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compilePrim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" code1l1)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" code)))
###                   ("_position" ll))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 598 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n))))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" mkSPEC)
###                   ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                     ("_position" emp)))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" emp)))))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("_applC" ("_position" mbody_is)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_tuple" ("_position" par)
###                         ("_tuple_args" ("_position" code)
###                           ("_tuple_arg" ("_position" l0)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" mkSPEC)
###                   ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                     ("_position" emp)))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n))))
###         ("\<^const>HOL.conj"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" mkSPEC)
###                   ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                     ("_position" emp))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" emp))))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("\<^const>HOL.conj"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" mkSPEC)
###                   ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                     ("_position" emp))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" emp)))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" mkSPEC)
###                   ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                     ("_position" emp)))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" m) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" emp)))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 617 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 18 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" ll))
###                   ("_position" None))
###                 ("\<^const>HOL.Ex_binder" ("_position" ins)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" ins_is)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" ll) ("_position" ins)))))
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>AssocLists.lookup" ("_position" MST)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" ll)
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                 ("_position" ll))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l1))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("_position" ll))
###                     ("_position" None))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" ins_is)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" ll) ("_position" ins)))))
###                       ("\<^const>AssocLists.lookup" ("_position" code)
###                         ("\<^const>HOL.eq" ("_position" ll)
###                           ("_applC" ("_position" Some)
###                             ("_position" ins)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" ll))
###                   ("_position" None))
###                 ("\<^const>HOL.Ex_binder" ("_position" ins)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" ins_is)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" ll) ("_position" ins)))))
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" ll) ("_position" None))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" ins_is)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" ll) ("_position" ins)))))
###                       ("\<^const>AssocLists.lookup" ("_position" code)
###                         ("\<^const>HOL.eq" ("_position" ll)
###                           ("_applC" ("_position" Some)
###                             ("_position" ins)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>AssocLists.lookup" ("_position" MST)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" ll)
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                 ("_position" ll))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l1))
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" None))
###                     ("\<^const>HOL.Ex_binder" ("_position" ins)
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" ins_is)
###                           ("_cargs" ("_position" C)
###                             ("_cargs" ("_position" m)
###                               ("_cargs" ("_position" ll)
###                                 ("_position" ins)))))
###                         ("\<^const>AssocLists.lookup" ("_position" code)
###                           ("\<^const>HOL.eq" ("_position" ll)
###                             ("_applC" ("_position" Some)
###                               ("_position" ins))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" ll) ("_position" None))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" ins_is)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" ll) ("_position" ins)))))
###                       ("\<^const>AssocLists.lookup" ("_position" code)
###                         ("\<^const>HOL.eq" ("_position" ll)
###                           ("_applC" ("_position" Some)
###                             ("_position" ins)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###                 ("\<^const>HOL.Ex_binder" ("_position" ins)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" ins_is)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" ll) ("_position" ins)))))
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>AssocLists.lookup" ("_position" MST)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" ll)
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                 ("_position" ll))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l1))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" ins_is)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" ll) ("_position" ins)))))
###                       ("\<^const>AssocLists.lookup" ("_position" code)
###                         ("\<^const>HOL.eq" ("_position" ll)
###                           ("_applC" ("_position" Some)
###                             ("_position" ins)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###                 ("\<^const>HOL.Ex_binder" ("_position" ins)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" ins_is)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" ll) ("_position" ins)))))
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Segment)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" l1) ("_position" code))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Mspec)
###         ("_idts" ("_position" Minv) ("_position" Anno)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("\<^const>HOL.All_binder" ("_position" ll)
###           ("\<^const>HOL.implies"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###               ("_position" ll))
###             ("\<^const>HOL.implies"
###               ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                 ("_position" l1))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" ll))
###                   ("_position" None))
###                 ("\<^const>HOL.Ex_binder" ("_position" ins)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" ins_is)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" ll) ("_position" ins)))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###         ("_position" None))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" code)
###               ("_position" ll))
###             ("_applC" ("_position" Some) ("_position" ins))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###         ("_position" None))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" code)
###               ("_position" ll))
###             ("_applC" ("_position" Some) ("_position" ins))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AssocLists.lookup" ("_position" Anno)
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" code)
###               ("_position" ll))
###             ("_applC" ("_position" Some) ("_position" ins))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AssocLists.lookup" ("_position" Anno)
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" code)
###               ("_position" ll))
###             ("_applC" ("_position" Some) ("_position" ins))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" Anno)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None))
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" ins_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_cargs" ("_position" ll) ("_position" ins)))))
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" code)
###                 ("_position" ll))
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" Anno)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None))
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" ins_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_cargs" ("_position" ll) ("_position" ins)))))
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" code)
###                 ("_position" ll))
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###         ("_position" None))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>AssocLists.lookup" ("_position" code)
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###         ("_position" None))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>AssocLists.lookup" ("_position" code)
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AssocLists.lookup" ("_position" Anno)
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>AssocLists.lookup" ("_position" code)
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>AssocLists.lookup" ("_position" Anno)
###         ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))
###       ("\<^const>HOL.Ex_binder" ("_position" ins)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" ins_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" ll) ("_position" ins)))))
###           ("\<^const>AssocLists.lookup" ("_position" code)
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("_applC" ("_position" Some) ("_position" ins)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 629 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" Anno)
###       ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" Anno)
###       ("\<^const>HOL.eq" ("_position" ll) ("_position" None)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###       ("_position" None))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" ll)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" ll)
###               ("_position" l1)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 633 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###           ("_position" ll)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" ll)
###             ("_position" l1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" ins)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" ins_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_cargs" ("_position" ll) ("_position" ins)))))
###         ("\<^const>AssocLists.lookup" ("_position" code)
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("_applC" ("_position" Some) ("_position" ins))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" l1) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###           ("_position" ll)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" ll)
###             ("_position" l1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" ins)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" ins_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_cargs" ("_position" ll) ("_position" ins)))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" code) ("_position" ll))
###           ("_applC" ("_position" Some) ("_position" ins)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 644 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 110 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" f)
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" snd) ("_position" f)))))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" Anno2)))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" body) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" body)
###                       ("_tuple_arg" ("_position" l0)))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" l)
###         ("_idts" ("_position" code)
###           ("_idts" ("_position" code1)
###             ("_idts" ("_position" l1)
###               ("_idts" ("_position" G)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" m)
###                     ("_idts" ("_position" T)
###                       ("_idts" ("_position" MI) ("_position" k))))))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" l)
###             ("_tuple_args" ("_position" code)
###               ("_tuple_args"
###                 ("_applC" ("_position" CallPrim)
###                   ("_cargs" ("_position" f) ("_position" args)))
###                 ("_tuple_args" ("_position" code1)
###                   ("_tuple_arg" ("_position" l1))))))
###           ("_position" compilePrim))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1))))))))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" derivAssum)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l1)
###                       ("_applC" ("_position" Cachera) ("_position" k)))))))
###             ("_applC" ("_position" deriv)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_applC" ("_position" Cachera)
###                         ("\<^const>Groups.plus_class.plus" ("_position" n)
###                           ("_position" k))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" f)
###         ("_applC" ("_position" Some) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###               ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f)))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" mkSPEC)
###               ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                 ("_position" Anno2)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" body) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" body)
###                       ("_tuple_arg" ("_position" l0))))))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" code1)
###                   ("_idts" ("_position" l1)
###                     ("_idts" ("_position" G)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" m)
###                           ("_idts" ("_position" T)
###                             ("_idts" ("_position" MI)
###                               ("_position" k))))))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_args"
###                       ("_applC" ("_position" CallPrim)
###                         ("_cargs" ("_position" f) ("_position" args)))
###                       ("_tuple_args" ("_position" code1)
###                         ("_tuple_arg" ("_position" l1))))))
###                 ("_position" compilePrim))
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno))))))
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k)))))))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" n)
###                                 ("_position" k)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###       ("\<^const>HOL.eq" ("_position" f)
###         ("_applC" ("_position" Some) ("_position" n))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###             ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" mkSPEC)
###             ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###               ("_position" Anno2)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" body) ("_position" l0)))
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###               ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" body)
###                     ("_tuple_arg" ("_position" l0))))))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" code1)
###                 ("_idts" ("_position" l1)
###                   ("_idts" ("_position" G)
###                     ("_idts" ("_position" C)
###                       ("_idts" ("_position" m)
###                         ("_idts" ("_position" T)
###                           ("_idts" ("_position" MI) ("_position" k))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" l)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_args"
###                     ("_applC" ("_position" CallPrim)
###                       ("_cargs" ("_position" f) ("_position" args)))
###                     ("_tuple_args" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1))))))
###               ("_position" compilePrim))
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_applC" ("_position" Segment)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" l1)
###                             ("_position" code1))))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" k)))))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" n) ("_position" k))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>) ("_position" f))
###       ("_applC" ("_position" Some) ("_position" n)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###             ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f)))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" mkSPEC)
###             ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###               ("_position" Anno2)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" body) ("_position" l0)))
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###               ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" body)
###                     ("_tuple_arg" ("_position" l0))))))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" code1)
###                 ("_idts" ("_position" l1)
###                   ("_idts" ("_position" G)
###                     ("_idts" ("_position" C)
###                       ("_idts" ("_position" m)
###                         ("_idts" ("_position" T)
###                           ("_idts" ("_position" MI) ("_position" k))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" l)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_args"
###                     ("_applC" ("_position" CallPrim)
###                       ("_cargs" ("_position" f) ("_position" args)))
###                     ("_tuple_args" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1))))))
###               ("_position" compilePrim))
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_applC" ("_position" Segment)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" l1)
###                             ("_position" code1))))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" k)))))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" n) ("_position" k))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" f)
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###               ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f)))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" mkSPEC)
###               ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                 ("_position" Anno2)))))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" body) ("_position" l0)))
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###             ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" body)
###                   ("_tuple_arg" ("_position" l0))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI) ("_position" k))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args"
###                   ("_applC" ("_position" CallPrim)
###                     ("_cargs" ("_position" f) ("_position" args)))
###                   ("_tuple_args" ("_position" code1)
###                     ("_tuple_arg" ("_position" l1))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("_applC" ("_position" Segment)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" l1)
###                           ("_position" code1))))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l1)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k)))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_applC" ("_position" Cachera)
###                           ("\<^const>Groups.plus_class.plus" ("_position" n)
###                             ("_position" k)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" f)
###         ("_applC" ("_position" Some) ("_position" n)))
###       ("\<^const>AssocLists.lookup" ("_position" MST)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###               ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f))))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" Anno2)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" body) ("_position" l0)))
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                   ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" body)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" code)
###                   ("_idts" ("_position" code1)
###                     ("_idts" ("_position" l1)
###                       ("_idts" ("_position" G)
###                         ("_idts" ("_position" C)
###                           ("_idts" ("_position" m)
###                             ("_idts" ("_position" T)
###                               ("_idts" ("_position" MI)
###                                 ("_position" k))))))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" l)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_args"
###                         ("_applC" ("_position" CallPrim)
###                           ("_cargs" ("_position" f) ("_position" args)))
###                         ("_tuple_args" ("_position" code1)
###                           ("_tuple_arg" ("_position" l1))))))
###                   ("_position" compilePrim))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>AssocLists.lookup" ("_position" MST)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" T)
###                             ("_tuple_args" ("_position" MI)
###                               ("_tuple_arg" ("_position" Anno))))))
###                       ("_applC" ("_position" Segment)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l)
###                               ("_cargs" ("_position" l1)
###                                 ("_position" code1))))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l1)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" k)))))))
###                     ("_applC" ("_position" deriv)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l)
###                               ("_applC" ("_position" Cachera)
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" n)
###                                   ("_position" k))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###       ("\<^const>HOL.eq" ("_position" f)
###         ("_applC" ("_position" Some) ("_position" n))))
###     ("\<^const>AssocLists.lookup" ("_position" MST)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###             ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" mkSPEC)
###               ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                 ("_position" Anno2)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" body) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" body)
###                       ("_tuple_arg" ("_position" l0))))))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" code1)
###                   ("_idts" ("_position" l1)
###                     ("_idts" ("_position" G)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" m)
###                           ("_idts" ("_position" T)
###                             ("_idts" ("_position" MI)
###                               ("_position" k))))))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_args"
###                       ("_applC" ("_position" CallPrim)
###                         ("_cargs" ("_position" f) ("_position" args)))
###                       ("_tuple_args" ("_position" code1)
###                         ("_tuple_arg" ("_position" l1))))))
###                 ("_position" compilePrim))
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno))))))
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k)))))))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" n)
###                                 ("_position" k)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" \<Sigma>) ("_position" f))
###       ("_applC" ("_position" Some) ("_position" n)))
###     ("\<^const>AssocLists.lookup" ("_position" MST)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###             ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" mkSPEC)
###               ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                 ("_position" Anno2)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" body) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" body)
###                       ("_tuple_arg" ("_position" l0))))))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" code1)
###                   ("_idts" ("_position" l1)
###                     ("_idts" ("_position" G)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" m)
###                           ("_idts" ("_position" T)
###                             ("_idts" ("_position" MI)
###                               ("_position" k))))))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_args"
###                       ("_applC" ("_position" CallPrim)
###                         ("_cargs" ("_position" f) ("_position" args)))
###                       ("_tuple_args" ("_position" code1)
###                         ("_tuple_arg" ("_position" l1))))))
###                 ("_position" compilePrim))
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno))))))
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k)))))))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" n)
###                                 ("_position" k)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" f)
###           ("_applC" ("_position" Some) ("_position" n)))
###         ("_position" MST)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###           ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f))))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" mkSPEC)
###             ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###               ("_position" Anno2)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" body) ("_position" l0)))
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###               ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" body)
###                     ("_tuple_arg" ("_position" l0))))))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" code1)
###                 ("_idts" ("_position" l1)
###                   ("_idts" ("_position" G)
###                     ("_idts" ("_position" C)
###                       ("_idts" ("_position" m)
###                         ("_idts" ("_position" T)
###                           ("_idts" ("_position" MI) ("_position" k))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" l)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_args"
###                     ("_applC" ("_position" CallPrim)
###                       ("_cargs" ("_position" f) ("_position" args)))
###                     ("_tuple_args" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1))))))
###               ("_position" compilePrim))
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_applC" ("_position" Segment)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" l1)
###                             ("_position" code1))))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" k)))))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" n) ("_position" k))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" f)
###         ("_applC" ("_position" Some) ("_position" n)))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_applC" ("_position" fst) ("_position" f))
###               ("_tuple_arg" ("_applC" ("_position" snd) ("_position" f))))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" Anno2))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" body) ("_position" l0)))
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_applC" ("_position" fst) ("_position" f))
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" f))
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" body)
###                       ("_tuple_arg" ("_position" l0))))))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" code1)
###                   ("_idts" ("_position" l1)
###                     ("_idts" ("_position" G)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" m)
###                           ("_idts" ("_position" T)
###                             ("_idts" ("_position" MI)
###                               ("_position" k))))))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_args"
###                       ("_applC" ("_position" CallPrim)
###                         ("_cargs" ("_position" f) ("_position" args)))
###                       ("_tuple_args" ("_position" code1)
###                         ("_tuple_arg" ("_position" l1))))))
###                 ("_position" compilePrim))
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno))))))
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k)))))))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" n)
###                                 ("_position" k)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 694 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("_position" f))
###           ("_applC" ("_position" Some) ("_position" n))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args"
###                   ("_applC" ("_position" CallPrim)
###                     ("_cargs" ("_position" f) ("_position" args)))
###                   ("_tuple_args" ("_position" code1)
###                     ("_tuple_arg" ("_position" l1))))))
###             ("_position" compilePrim)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" k)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.eq" ("_position" f)
###             ("_applC" ("_position" Some) ("_position" n)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args"
###                   ("_applC" ("_position" CallPrim)
###                     ("_cargs" ("_position" f) ("_position" args)))
###                   ("_tuple_args" ("_position" code1)
###                     ("_tuple_arg" ("_position" l1))))))
###             ("_position" compilePrim)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" k)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###             ("_position" f))
###           ("_applC" ("_position" Some) ("_position" n))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args"
###                   ("_applC" ("_position" CallPrim)
###                     ("_cargs" ("_position" f) ("_position" args)))
###                   ("_tuple_args" ("_position" code1)
###                     ("_tuple_arg" ("_position" l1))))))
###             ("_position" compilePrim)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" k)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###           ("\<^const>HOL.eq" ("_position" f)
###             ("_applC" ("_position" Some) ("_position" n)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args"
###                   ("_applC" ("_position" CallPrim)
###                     ("_cargs" ("_position" f) ("_position" args)))
###                   ("_tuple_args" ("_position" code1)
###                     ("_tuple_arg" ("_position" l1))))))
###             ("_position" compilePrim)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1)))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_applC" ("_position" Cachera) ("_position" k)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 722 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" ll) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" T)
###               ("_tuple_args" ("_position" MI)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" l1)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" l1)
###               ("_position" ll)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" l2)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" l1))
###                   ("_applC" ("_position" Some) ("_position" ins))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" basic) ("_position" ins)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l2)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" n))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l1)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" ll) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" l1)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" l1)
###               ("_position" ll)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" l2)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" l1))
###                   ("_applC" ("_position" Some) ("_position" ins))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" basic) ("_position" ins)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l2)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" n))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l1)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" ll) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" T)
###               ("_tuple_args" ("_position" MI)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" l1)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" l1)
###               ("_position" ll)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" l2)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>AssocLists.lookup" ("_position" code)
###                   ("\<^const>HOL.eq" ("_position" l1)
###                     ("_applC" ("_position" Some) ("_position" ins)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" basic) ("_position" ins)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l2)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" n))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l1)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Segment)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" ll) ("_position" code)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" l1)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" l1)
###               ("_position" ll)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" l2)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>AssocLists.lookup" ("_position" code)
###                   ("\<^const>HOL.eq" ("_position" l1)
###                     ("_applC" ("_position" Some) ("_position" ins)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" basic) ("_position" ins)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l2)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" n))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" deriv)
###       ("_cargs" ("_position" G)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l1)
###               ("_applC" ("_position" Cachera) ("_position" n)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 746 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" derivAssum)
###                         ("_cargs" ("_position" G)
###                           ("_cargs" ("_position" C)
###                             ("_cargs" ("_position" m)
###                               ("_cargs" ("_position" l1)
###                                 ("_applC" ("_position" Cachera)
###                                   ("_position" nn)))))))
###                       ("\<^const>HOL.eq" ("_position" k)
###                         ("_position" n))))))
###               ("_position" nn))
###             ("_applC" ("_position" deriv)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" k)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" Segment)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" l1)
###                             ("_position" code1))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" derivAssum)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l1)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" nn)))))))
###                     ("\<^const>HOL.eq" ("_position" k)
###                       ("\<^const>Groups.plus_class.plus" ("_position" n)
###                         ("_position" nn)))))))
###             ("_applC" ("_position" deriv)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" k)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("_applC" ("_position" Segment)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" l1)
###                           ("_position" code1))))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" derivAssum)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l1)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" nn)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" k)
###                   ("\<^const>Groups.plus_class.plus" ("_position" n)
###                     ("_position" nn)))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" k)))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn)))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k))))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" Segment)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" l1) ("_position" code1))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" nn)))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq" ("_position" k)
###                       ("\<^const>Groups.plus_class.plus" ("_position" n)
###                         ("_position" nn)))
###                     ("_applC" ("_position" deriv)
###                       ("_cargs" ("_position" G)
###                         ("_cargs" ("_position" C)
###                           ("_cargs" ("_position" m)
###                             ("_cargs" ("_position" l)
###                               ("_applC" ("_position" Cachera)
###                                 ("_position" k)))))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" derivAssum)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l1)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" nn)))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" k)
###                     ("\<^const>Groups.plus_class.plus" ("_position" n)
###                       ("_position" nn)))
###                   ("_applC" ("_position" deriv)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" k))))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" Segment)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" l1)
###                             ("_position" code1))))))
###                   ("_applC" ("_position" derivAssum)
###                     ("_cargs" ("_position" G)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l1)
###                             ("_applC" ("_position" Cachera)
###                               ("_position" nn))))))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq" ("_position" k)
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("_position" nn)))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" k))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" p) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_prim)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_idts" ("_position" Anno)
###                             ("_idts" ("_position" nn)
###                               ("_position" k))))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" p)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compilePrim))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" Segment)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" m)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" l1)
###                               ("_position" code1))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" derivAssum)
###                         ("_cargs" ("_position" G)
###                           ("_cargs" ("_position" C)
###                             ("_cargs" ("_position" m)
###                               ("_cargs" ("_position" l1)
###                                 ("_applC" ("_position" Cachera)
###                                   ("_position" nn)))))))
###                       ("_position" k)))))
###               ("\<^const>Groups.plus_class.plus" ("_position" n)
###                 ("_position" nn)))
###             ("_applC" ("_position" deriv)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" k)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 870 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" l)
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" p)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" code1)
###                   ("_tuple_arg" ("_position" l1)))))))
###         ("_position" compilePrim)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple"
###             ("\<^const>AssocLists.upd" ("_position" code1) ("_position" l1)
###               ("_position" vreturn))
###             ("_tuple_arg"
###               ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_applC" ("_position" PrimE) ("_position" p))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" l)
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" p)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" code1)
###                   ("_tuple_arg" ("_position" l1)))))))
###         ("_position" compilePrim)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple"
###             ("_applC" ("_position" code1)
###               ("_Map" ("_maplet" ("_position" l1) ("_position" vreturn))))
###             ("_tuple_arg"
###               ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_applC" ("_position" PrimE) ("_position" p))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 874 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" l)
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" p)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" code1)
###                   ("_tuple_arg" ("_position" l1)))))))
###         ("_position" compilePrim)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" code2) ("_tuple_arg" ("_position" l2)))
###           ("_tuple"
###             ("\<^const>AssocLists.upd" ("_position" code1) ("_position" l1)
###               ("_applC" ("_position" store) ("_position" x)))
###             ("_tuple_arg"
###               ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l2)
###               ("_tuple_args" ("_position" code2)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" OUT)))))
###             ("_position" compileExpr))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" LetE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" p) ("_position" e))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" l)
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" p)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" code1)
###                   ("_tuple_arg" ("_position" l1)))))))
###         ("_position" compilePrim)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" code2) ("_tuple_arg" ("_position" l2)))
###           ("_tuple"
###             ("_applC" ("_position" code1)
###               ("_Map"
###                 ("_maplet" ("_position" l1)
###                   ("_applC" ("_position" store) ("_position" x)))))
###             ("_tuple_arg"
###               ("\<^const>Groups.plus_class.plus" ("_position" l1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l2)
###               ("_tuple_args" ("_position" code2)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg" ("_position" OUT)))))
###             ("_position" compileExpr))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" LetE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" p) ("_position" e))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 879 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeElse)
###                   ("_tuple_arg" ("_position" XXX)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" XXX)
###             ("_tuple_args" ("_position" codeElse)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeThen)
###                     ("_tuple_arg" ("_position" YYY)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("\<^const>AssocLists.upd"
###                 ("\<^const>AssocLists.upd" ("_position" codeThen)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))
###                 ("_applC" ("_position" iftrue) ("_position" XXX)))
###               ("_tuple_arg" ("_position" YYY))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CondE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1) ("_position" e2))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeElse)
###                   ("_tuple_arg" ("_position" XXX)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" XXX)
###             ("_tuple_args" ("_position" codeElse)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeThen)
###                     ("_tuple_arg" ("_position" YYY)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" codeThen)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_Map"
###                   ("_maplet"
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" iftrue) ("_position" XXX)))))
###               ("_tuple_arg" ("_position" YYY))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CondE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1) ("_position" e2))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeElse)
###                   ("_tuple_arg" ("_position" XXX)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" XXX)
###             ("_tuple_args" ("_position" codeElse)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeThen)
###                     ("_tuple_arg" ("_position" YYY)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeThen)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" iftrue) ("_position" XXX))))))
###               ("_tuple_arg" ("_position" YYY))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CondE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1) ("_position" e2))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeElse)
###                   ("_tuple_arg" ("_position" XXX)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" XXX)
###             ("_tuple_args" ("_position" codeElse)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeThen)
###                     ("_tuple_arg" ("_position" YYY)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeThen)
###                 ("\<^const>AssocLists.upd"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" iftrue) ("_position" XXX))))
###               ("_tuple_arg" ("_position" YYY))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" CondE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1) ("_position" e2))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 512 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("\<^const>AssocLists.upd"
###                               ("\<^const>AssocLists.upd"
###                                 ("_Map"
###                                   ("_maplet" ("_position" l)
###                                     ("_applC" ("_position" load)
### ("_position" x))))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("\<^const>Groups.one_class.one"))
###                                 ("_applC" ("_position" unop)
###                                   ("_lambda" ("_position" v)
###                                     ("\<^const>HOL.If"
### ("\<^const>HOL.eq" ("_position" v)
###   ("_applC" ("_position" RVal) ("_position" Nullref)))
### ("_position" TRUE) ("_position" FALSE)))))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_applC" ("_position" iftrue)
###                                 ("_position" lNil)))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 3))))
###                             ("_applC" ("_position" load) ("_position" x)))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST) ("_position" HD))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" store) ("_position" h)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 6))))
###                       ("_applC" ("_position" load) ("_position" x)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 7))))
###                     ("_applC" ("_position" getfield)
###                       ("_cargs" ("_position" LIST) ("_position" TL))))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 8))))
###                   ("_applC" ("_position" store) ("_position" t))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("\<^const>AssocLists.upd"
###                               ("\<^const>AssocLists.upd"
###                                 ("_Map"
###                                   ("_maplet" ("_position" l)
###                                     ("_applC" ("_position" load)
### ("_position" x))))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("\<^const>Groups.one_class.one"))
###                                 ("_applC" ("_position" unop)
###                                   ("_lambda" ("_position" v)
###                                     ("\<^const>HOL.If"
### ("\<^const>HOL.eq" ("_position" v)
###   ("_applC" ("_position" RVal) ("_position" Nullref)))
### ("_position" TRUE) ("_position" FALSE)))))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 2))))
###                               ("_applC" ("_position" iftrue)
###                                 ("_position" lNil)))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 3))))
###                             ("_applC" ("_position" load) ("_position" x)))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST) ("_position" HD))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" store) ("_position" h)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 6))))
###                       ("_applC" ("_position" load) ("_position" x)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 7))))
###                     ("_applC" ("_position" getfield)
###                       ("_cargs" ("_position" LIST) ("_position" TL))))
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 8))))
###                       ("_applC" ("_position" store) ("_position" t))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("\<^const>AssocLists.upd"
###                           ("\<^const>AssocLists.upd"
###                             ("_Map"
###                               ("_maplet" ("_position" l)
###                                 ("_applC" ("_position" load)
###                                   ("_position" x))))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("\<^const>Groups.one_class.one"))
###                             ("_applC" ("_position" unop)
###                               ("_lambda" ("_position" v)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" v)
###                                     ("_applC" ("_position" RVal)
### ("_position" Nullref)))
###                                   ("_position" TRUE) ("_position" FALSE)))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" iftrue)
###                             ("_position" lNil)))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" load) ("_position" x)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 4))))
###                       ("_applC" ("_position" getfield)
###                         ("_cargs" ("_position" LIST) ("_position" HD))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 5))))
###                     ("_applC" ("_position" store) ("_position" h)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 6))))
###                           ("_applC" ("_position" load) ("_position" x))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 7))))
###                       ("_applC" ("_position" getfield)
###                         ("_cargs" ("_position" LIST) ("_position" TL))))
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 8))))
###                         ("_applC" ("_position" store) ("_position" t)))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet" ("_position" l)
###                             ("_applC" ("_position" load) ("_position" x))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" unop)
###                           ("_lambda" ("_position" v)
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.eq" ("_position" v)
###                                 ("_applC" ("_position" RVal)
###                                   ("_position" Nullref)))
###                               ("_position" TRUE) ("_position" FALSE)))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 2))))
###                       ("_applC" ("_position" iftrue) ("_position" lNil)))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 3))))
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST)
###                               ("_position" HD)))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 5))))
###                       ("_applC" ("_position" store) ("_position" h)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 6))))
###                             ("_applC" ("_position" load) ("_position" x))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 7))))
###                         ("_applC" ("_position" getfield)
###                           ("_cargs" ("_position" LIST) ("_position" TL))))
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 8))))
###                           ("_applC" ("_position" store)
###                             ("_position" t))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet" ("_position" l)
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" unop)
###                       ("_lambda" ("_position" v)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" v)
###                             ("_applC" ("_position" RVal)
###                               ("_position" Nullref)))
###                           ("_position" TRUE) ("_position" FALSE)))))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" iftrue)
###                             ("_position" lNil))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 3))))
###                       ("_applC" ("_position" load) ("_position" x)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" getfield)
###                               ("_cargs" ("_position" LIST)
###                                 ("_position" HD)))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" store) ("_position" h)))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" x))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" store)
###                               ("_position" t)))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd" ("_position" codeNil)
###                     ("_position" l)
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one"))
###                   ("_applC" ("_position" unop)
###                     ("_lambda" ("_position" v)
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.eq" ("_position" v)
###                           ("_applC" ("_position" RVal)
###                             ("_position" Nullref)))
###                         ("_position" TRUE) ("_position" FALSE)))))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 2))))
###                         ("_applC" ("_position" iftrue) ("_position" lNil))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 3))))
###                     ("_applC" ("_position" load) ("_position" x)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 4))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST)
###                               ("_position" HD)))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 5))))
###                       ("_applC" ("_position" store) ("_position" h)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 6))))
###                             ("_applC" ("_position" load) ("_position" x))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 7))))
###                         ("_applC" ("_position" getfield)
###                           ("_cargs" ("_position" LIST) ("_position" TL))))
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 8))))
###                           ("_applC" ("_position" store)
###                             ("_position" t))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" codeNil)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet"
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" unop)
###                         ("_lambda" ("_position" v)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" v)
###                               ("_applC" ("_position" RVal)
###                                 ("_position" Nullref)))
###                             ("_position" TRUE) ("_position" FALSE))))))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 2))))
###                           ("_applC" ("_position" iftrue)
###                             ("_position" lNil))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 3))))
###                       ("_applC" ("_position" load) ("_position" x)))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" getfield)
###                               ("_cargs" ("_position" LIST)
###                                 ("_position" HD)))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" store) ("_position" h)))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" x))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" store)
###                               ("_position" t)))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC" ("_position" codeNil)
###                 ("_cargs"
###                   ("_Map"
###                     ("_maplet" ("_position" l)
###                       ("_applC" ("_position" load) ("_position" x))))
###                   ("_cargs"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" unop)
###                           ("_lambda" ("_position" v)
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.eq" ("_position" v)
###                                 ("_applC" ("_position" RVal)
###                                   ("_position" Nullref)))
###                               ("_position" TRUE) ("_position" FALSE))))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 2))))
###                             ("_applC" ("_position" iftrue)
###                               ("_position" lNil))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" load) ("_position" x)))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 4))))
###                               ("_applC" ("_position" getfield)
###                                 ("_cargs" ("_position" LIST)
###                                   ("_position" HD)))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 5))))
###                           ("_applC" ("_position" store) ("_position" h)))
###                         ("_cargs"
###                           ("\<^const>AssocLists.upd"
###                             ("_Map"
###                               ("_maplet"
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_position" l)
###                                   ("_Numeral"
###                                     ("_constify" ("_position" 6))))
###                                 ("_applC" ("_position" load)
###                                   ("_position" x))))
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 7))))
###                             ("_applC" ("_position" getfield)
###                               ("_cargs" ("_position" LIST)
###                                 ("_position" TL))))
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 8))))
###                               ("_applC" ("_position" store)
###                                 ("_position" t))))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd"
###                   ("\<^const>AssocLists.upd"
###                     ("\<^const>AssocLists.upd"
###                       ("\<^const>AssocLists.upd" ("_position" codeNil)
###                         ("_position" l)
###                         ("_applC" ("_position" load) ("_position" x)))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("\<^const>Groups.one_class.one"))
###                       ("_applC" ("_position" unop)
###                         ("_lambda" ("_position" v)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" v)
###                               ("_applC" ("_position" RVal)
###                                 ("_position" Nullref)))
###                             ("_position" TRUE) ("_position" FALSE)))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" iftrue) ("_position" lNil)))
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("_Numeral" ("_constify" ("_position" 3))))
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 4))))
###                         ("_applC" ("_position" getfield)
###                           ("_cargs" ("_position" LIST) ("_position" HD)))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 5))))
###                     ("_applC" ("_position" store) ("_position" h)))
###                   ("_cargs"
###                     ("\<^const>AssocLists.upd"
###                       ("_Map"
###                         ("_maplet"
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 6))))
###                           ("_applC" ("_position" load) ("_position" x))))
###                       ("\<^const>Groups.plus_class.plus" ("_position" l)
###                         ("_Numeral" ("_constify" ("_position" 7))))
###                       ("_applC" ("_position" getfield)
###                         ("_cargs" ("_position" LIST) ("_position" TL))))
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 8))))
###                         ("_applC" ("_position" store) ("_position" t)))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("_Numeral" ("_constify" ("_position" 9))))
###           ("_tuple_args" ("_position" code)
###             ("_tuple_args" ("_position" e2)
###               ("_tuple_arg"
###                 ("_tuple" ("_position" codeCons)
###                   ("_tuple_arg" ("_position" lNil)))))))
###         ("_position" compileExpr)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" lNil)
###             ("_tuple_args" ("_position" codeCons)
###               ("_tuple_args" ("_position" e1)
###                 ("_tuple_arg"
###                   ("_tuple" ("_position" codeNil)
###                     ("_tuple_arg" ("_position" lRes)))))))
###           ("_position" compileExpr)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" OUT)
###             ("_tuple"
###               ("_applC"
###                 ("\<^const>AssocLists.upd" ("_position" codeNil)
###                   ("_position" l)
###                   ("_applC" ("_position" load) ("_position" x)))
###                 ("_cargs"
###                   ("\<^const>AssocLists.upd"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" unop)
###                           ("_lambda" ("_position" v)
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.eq" ("_position" v)
###                                 ("_applC" ("_position" RVal)
###                                   ("_position" Nullref)))
###                               ("_position" TRUE) ("_position" FALSE))))))
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("_Numeral" ("_constify" ("_position" 2))))
###                     ("_applC" ("_position" iftrue) ("_position" lNil)))
###                   ("_cargs"
###                     ("_Map"
###                       ("_maplet"
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 3))))
###                         ("_applC" ("_position" load) ("_position" x))))
###                     ("_cargs"
###                       ("\<^const>AssocLists.upd"
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 4))))
###                             ("_applC" ("_position" getfield)
###                               ("_cargs" ("_position" LIST)
###                                 ("_position" HD)))))
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("_Numeral" ("_constify" ("_position" 5))))
###                         ("_applC" ("_position" store) ("_position" h)))
###                       ("_cargs"
###                         ("\<^const>AssocLists.upd"
###                           ("_Map"
###                             ("_maplet"
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_position" l)
###                                 ("_Numeral" ("_constify" ("_position" 6))))
###                               ("_applC" ("_position" load)
###                                 ("_position" x))))
###                           ("\<^const>Groups.plus_class.plus" ("_position" l)
###                             ("_Numeral" ("_constify" ("_position" 7))))
###                           ("_applC" ("_position" getfield)
###                             ("_cargs" ("_position" LIST) ("_position" TL))))
###                         ("_Map"
###                           ("_maplet"
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_position" l)
###                               ("_Numeral" ("_constify" ("_position" 8))))
###                             ("_applC" ("_position" store)
###                               ("_position" t)))))))))
###               ("_tuple_arg" ("_position" lRes))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args"
###             ("_applC" ("_position" MatchE)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" e1)
###                   ("_cargs" ("_position" h)
###                     ("_cargs" ("_position" t) ("_position" e2))))))
###             ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "compileExprp"
  Proving monotonicity ...
### Ambiguous input (line 903 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup" ("_position" code1)
###                   ("\<^const>HOL.eq" ("_position" ll)
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("_position" ll))))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("_position" ll))
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" ll)))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" code)))
###                   ("_position" ll))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" code1)
###                         ("_position" ll))
###                       ("_applC" ("_position" Some)
###                         ("_position" ins)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup" ("_position" code1)
###                   ("\<^const>HOL.eq" ("_position" ll)
###                     ("\<^const>AssocLists.lookup" ("_position" code)
###                       ("_position" ll))))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("_position" ll))
###                   ("\<^const>AssocLists.lookup" ("_position" code)
###                     ("_position" ll)))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" l)
###         ("_tuple_args" ("_position" code)
###           ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" OUT)))))
###       ("_position" compileExpr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" code1) ("_position" l1))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" OUT)
###           ("_tuple" ("_position" code1) ("_tuple_arg" ("_position" l1))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" l)
###             ("_position" l1))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                   ("_position" l))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" code1)
###                     ("\<^const>HOL.eq" ("_position" ll) ("_position" code)))
###                   ("_position" ll))))
###             ("\<^const>HOL.All_binder" ("_position" ll)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" ll))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" ll)
###                     ("_position" l1))
###                   ("\<^const>HOL.Ex_binder" ("_position" ins)
###                     ("\<^const>AssocLists.lookup" ("_position" code1)
###                       ("\<^const>HOL.eq" ("_position" ll)
###                         ("_applC" ("_position" Some)
###                           ("_position" ins))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1029 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_expr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_position" Anno))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compileExpr))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("_applC" ("_position" Segment)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" l1)
###                           ("_position" code1))))))))
###             ("_applC" ("_position" deriv)
###               ("_cargs" ("_position" G)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_applC" ("_position" Cachera)
###                         ("_position" n)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_expr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_position" Anno))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compileExpr))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_expr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_position" Anno))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compileExpr))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" Segment)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" l1) ("_position" code1))))))
###                 ("_applC" ("_position" deriv)
###                   ("_cargs" ("_position" G)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" m)
###                         ("_cargs" ("_position" l)
###                           ("_applC" ("_position" Cachera)
###                             ("_position" n)))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" \<Sigma>)
###         ("_tuple_args" ("_position" e) ("_tuple_arg" ("_position" n))))
###       ("_position" TP_expr)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" Sig_good) ("_position" \<Sigma>))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" code1)
###               ("_idts" ("_position" l1)
###                 ("_idts" ("_position" G)
###                   ("_idts" ("_position" C)
###                     ("_idts" ("_position" m)
###                       ("_idts" ("_position" T)
###                         ("_idts" ("_position" MI)
###                           ("_position" Anno))))))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" l)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_args" ("_position" e)
###                   ("_tuple_arg"
###                     ("_tuple" ("_position" code1)
###                       ("_tuple_arg" ("_position" l1)))))))
###             ("_position" compileExpr))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" Segment)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" l1) ("_position" code1))))))
###               ("_applC" ("_position" deriv)
###                 ("_cargs" ("_position" G)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_cargs" ("_position" l)
###                         ("_applC" ("_position" Cachera)
###                           ("_position" n))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1335 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" par) ("_tuple_arg" ("_position" e)))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_applC" ("_position" rev) ("_position" par))
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l0)
###                   ("_tuple_args" ("\<^const>List.list.Nil")
###                     ("_tuple_args" ("_position" e)
###                       ("_tuple_arg"
###                         ("_tuple" ("_position" code)
###                           ("_tuple_arg" ("_position" l)))))))
###                 ("_position" compileExpr))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>AssocLists.lookup" ("_position" F)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some) ("_position" fdecl))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" F)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0) ("_position" l)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" mbody_is)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_tuple"
###                         ("_applC" ("_position" rev) ("_position" par))
###                         ("_tuple_args" ("_position" code)
###                           ("_tuple_arg" ("_position" l0)))))))
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" l0)
###                     ("_tuple_args" ("\<^const>List.list.Nil")
###                       ("_tuple_args" ("_position" e)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" code)
###                             ("_tuple_arg" ("_position" l)))))))
###                   ("_position" compileExpr)))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>AssocLists.lookup" ("_position" F)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some) ("_position" fdecl))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_applC" ("_position" rev) ("_position" par))
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l0)
###                   ("_tuple_args" ("\<^const>List.list.Nil")
###                     ("_tuple_args" ("_position" e)
###                       ("_tuple_arg"
###                         ("_tuple" ("_position" code)
###                           ("_tuple_arg" ("_position" l)))))))
###                 ("_position" compileExpr))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>AssocLists.lookup" ("_position" F)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some) ("_position" fdecl))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" F)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" par) ("_tuple_arg" ("_position" e)))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_applC" ("_position" rev) ("_position" par))
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l0)
###                   ("_tuple_args" ("\<^const>List.list.Nil")
###                     ("_tuple_args" ("_position" e)
###                       ("_tuple_arg"
###                         ("_tuple" ("_position" code)
###                           ("_tuple_arg" ("_position" l)))))))
###                 ("_position" compileExpr))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some) ("_position" fdecl)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>AssocLists.lookup" ("_position" F)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e)))))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0) ("_position" l)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" mbody_is)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("_position" m)
###                       ("_tuple"
###                         ("_applC" ("_position" rev) ("_position" par))
###                         ("_tuple_args" ("_position" code)
###                           ("_tuple_arg" ("_position" l0)))))))
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" l0)
###                     ("_tuple_args" ("\<^const>List.list.Nil")
###                       ("_tuple_args" ("_position" e)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" code)
###                             ("_tuple_arg" ("_position" l)))))))
###                   ("_position" compileExpr)))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some) ("_position" fdecl)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" compileProg) ("_position" F))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par) ("_position" e))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" F)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_arg" ("_position" e))))))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" m)
###                     ("_tuple" ("_applC" ("_position" rev) ("_position" par))
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" l0)
###                   ("_tuple_args" ("\<^const>List.list.Nil")
###                     ("_tuple_args" ("_position" e)
###                       ("_tuple_arg"
###                         ("_tuple" ("_position" code)
###                           ("_tuple_arg" ("_position" l)))))))
###                 ("_position" compileExpr))))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.Ex_binder" ("_position" M)
###             ("_applC" ("_position" mbody_is)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m) ("_position" M)))))
###           ("\<^const>HOL.Ex_binder" ("_position" fdecl)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" F)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some) ("_position" fdecl)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1345 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_position" None)))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m))))
###                     ("_applC" ("_position" Some) ("_position" n)))
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" emp)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m))))
###                     ("_applC" ("_position" Some) ("_position" n)))
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" emp)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_position" None)))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some) ("_position" n)))
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))
###                       ("_applC" ("_position" mkSPEC)
###                         ("_cargs"
###                           ("_applC" ("_position" Cachera) ("_position" n))
###                           ("_position" emp))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some) ("_position" n)))
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))
###                       ("_applC" ("_position" mkSPEC)
###                         ("_cargs"
###                           ("_applC" ("_position" Cachera) ("_position" n))
###                           ("_position" emp))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_position" None)))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some) ("_position" n))))
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" emp)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" m)))
###                       ("_applC" ("_position" Some) ("_position" n))))
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno))))
###                     ("_applC" ("_position" mkSPEC)
###                       ("_cargs"
###                         ("_applC" ("_position" Cachera) ("_position" n))
###                         ("_position" emp)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_position" None)))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" Some) ("_position" n)))
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" emp))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" TP_MST) ("_position" \<Sigma>))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" C) ("_position" m))
###       ("_case_syntax"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" Anno) ("_position" emp))
###               ("\<^const>HOL.Ex_binder" ("_position" n)
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" \<Sigma>)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" Some) ("_position" n)))
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_applC" ("_position" mkSPEC)
###                     ("_cargs"
###                       ("_applC" ("_position" Cachera) ("_position" n))
###                       ("_position" emp))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1371 of "$AFP/BytecodeLogicJmlTypes/Cachera.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_tuple" ("_position" par)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_arg" ("_position" l))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" compileProg) ("_position" F)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" TP_MST) ("_position" \<Sigma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" TP)
###               ("_cargs" ("_position" \<Sigma>) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" mkSPEC)
###               ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                 ("_position" emp)))))
###         ("_applC" ("_position" deriv)
###           ("_cargs" ("\<^const>List.list.Nil")
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" l)
###                   ("_applC" ("_position" Cachera) ("_position" n)))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_tuple" ("_position" par)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_arg" ("_position" l))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" compileProg) ("_position" F)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" TP_MST) ("_position" \<Sigma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" TP)
###               ("_cargs" ("_position" \<Sigma>) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>AssocLists.lookup" ("_position" MST)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" emp)))))
###           ("_applC" ("_position" deriv)
###             ("_cargs" ("\<^const>List.list.Nil")
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" m)
###                   ("_cargs" ("_position" l)
###                     ("_applC" ("_position" Cachera)
###                       ("_position" n))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_tuple" ("_position" par)
###               ("_tuple_args" ("_position" code)
###                 ("_tuple_arg" ("_position" l))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" compileProg) ("_position" F)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" TP_MST) ("_position" \<Sigma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" TP)
###               ("_cargs" ("_position" \<Sigma>) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" mkSPEC)
###                 ("_cargs" ("_applC" ("_position" Cachera) ("_position" n))
###                   ("_position" emp))))))
###         ("_applC" ("_position" deriv)
###           ("_cargs" ("\<^const>List.list.Nil")
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_cargs" ("_position" l)
###                   ("_applC" ("_position" Cachera) ("_position" n)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Cachera"
### 4.178s elapsed time, 6.764s cpu time, 2.197s GC time
Loading theory "Draft.CacheraMoreTemplates"
val templateLemmas =
   [("Cachera.CACH_VERIFIED",
     "[| TP ?\<Sigma> ?F; TP_MST ?\<Sigma>; compileProg ?F |] ==> VP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("Cachera.translation_good",
     "[| compileProg ?F; TP_MST ?\<Sigma>; TP ?\<Sigma> ?F |]
      ==> Sig_good ?\<Sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Cachera.CACH_INJECT",
     "deriv ?G ?C ?m ?l (Cachera ?n) ==>
      derivAssum ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.CACH_SUB",
     "[| deriv ?G ?C ?m ?l (Cachera ?n); ?n <= ?k |]
      ==> deriv ?G ?C ?m ?l (Cachera ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.CACHAssum_SUB",
     "[| derivAssum ?G ?C ?m ?l (Cachera ?n); ?n <= ?k |]
      ==> derivAssum ?G ?C ?m ?l (Cachera ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.Segment_A",
     "[| Segment ?C ?m ?l ?l1.0 ?code; ?l <= ?ll; ?ll < ?l1.0 |]
      ==> Segment ?C ?m ?ll ?l1.0 ?code",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Cachera.Segment_triv2",
     "[| Segment ?C ?m ?l ?l1.0 ?code; ?l <= ?ll; ?ll < ?l1.0 |]
      ==> EX ins. ins_is ?C ?m ?ll ins & ?code\<down>?ll = Some ins",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Cachera.CACH_RET",
     "[| ins_is ?C ?m ?l vreturn;
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None |]
      ==> deriv ?G ?C ?m ?l (Cachera 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 6),
                  template_var 5),
                template_var 4),
              template_hole 13)
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 4),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Cachera.Segment_triv1",
     "[| Segment ?C ?m ?l ?l1.0 ?code;
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno); ?l <= ?ll;
         ?ll < ?l1.0 |]
      ==> ?Anno\<down>?ll = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_app (template_hole 8, template_var 8),
              template_var 7)),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)))),
        template_inequation (less_equals, template_var 6, template_var 0),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Cachera.CACH_AX",
     "[| ?G\<down>(?C, ?m, ?l) = Some (Cachera ?n);
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None |]
      ==> derivAssum ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 7),
            template_app
             (template_app (template_hole 14, template_var 6),
              template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4))),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0)))),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 4),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_app (template_hole 11, template_var 3))
           ))),
    ("Cachera.CACH_BodiesDerivable",
     "[| mbody_is ?C ?m (?par, ?code, ?l); compileProg ?F; TP_MST ?\<Sigma>;
         TP ?\<Sigma> ?F |]
      ==> EX n. MST\<down>(?C, ?m) = Some (mkSPEC (Cachera n) emp) &
                deriv [] ?C ?m ?l (Cachera n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 16, template_var 4),
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Cachera.CACH_GOTO",
     "[| ins_is ?C ?m ?l (goto ?pc);
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None; derivAssum ?G ?C ?m ?pc (Cachera ?n) |]
      ==> deriv ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 8),
                  template_var 7),
                template_var 6),
              template_app (template_hole 13, template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 9, template_var 8),
              template_var 7)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 6),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 8),
                  template_var 7),
                template_var 5),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 8),
                 template_var 7),
               template_var 6),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.Segment_triv",
     "[| Segment ?C ?m ?l ?l1.0 ?code;
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno); ?l <= ?ll;
         ?ll < ?l1.0 |]
      ==> ?Anno\<down>?ll = None &
          (EX ins. ins_is ?C ?m ?ll ins & ?code\<down>?ll = Some ins)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 18, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app (template_hole 14, template_var 8),
              template_var 7)),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1)))),
        template_inequation (less_equals, template_var 6, template_var 0),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)),
                 template_hole 5)),
             template_app (template_hole 4, t_empty))
           ))),
    ("Cachera.compileExpr_Prop1",
     "[| (?l, ?code, ?e, ?OUT) : compileExpr; ?OUT = (?code1.0, ?l1.0) |]
      ==> ?l < ?l1.0 &
          (ALL ll<?l. ?code1.0\<down>ll = ?code\<down>ll) &
          (ALL ll>=?l.
              ll < ?l1.0 --> (EX ins. ?code1.0\<down>ll = Some ins))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 5),
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2)))),
              template_hole 11)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 8, template_app (template_hole 6, t_empty)),
               template_app (template_hole 6, t_empty)))
           ))),
    ("Cachera.compilePrim_Prop1",
     "[| (?l, ?code, ?p, ?OUT) : compilePrim; ?OUT = (?code1.0, ?l1.0) |]
      ==> ?l < ?l1.0 &
          (ALL ll<?l. ?code1.0\<down>ll = ?code\<down>ll) &
          (ALL ll>=?l.
              ll < ?l1.0 --> (EX ins. ?code1.0\<down>ll = Some ins))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 5),
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2)))),
              template_hole 11)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 8, template_app (template_hole 6, t_empty)),
               template_app (template_hole 6, t_empty)))
           ))),
    ("Cachera.CACH_NEW",
     "[| ins_is ?C ?m ?l (new ?c);
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None; ?n = ?k + 1;
         derivAssum ?G ?C ?m (?l + 1) (Cachera ?k) |]
      ==> deriv ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 9),
                  template_var 8),
                template_var 7),
              template_app (template_hole 18, template_var 6))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app (template_hole 14, template_var 9),
              template_var 8)),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_app
               (template_app (template_hole 11, template_var 4),
                template_var 3)))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 7),
          template_hole 8),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 9),
                  template_var 8),
                template_app
                 (template_app (template_hole 3, template_var 7),
                  template_hole 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 9),
                 template_var 8),
               template_var 7),
             template_app (template_hole 1, template_var 2))
           ))),
    ("Cachera.TP_epxr_Sound",
     "[| (?\<Sigma>, ?e, ?n) : TP_expr; Sig_good ?\<Sigma>;
         (?l, ?code, ?e, ?code1.0, ?l1.0) : compileExpr;
         MST\<down>(?C, ?m) = Some (?T, ?MI, ?Anno);
         Segment ?C ?m ?l ?l1.0 ?code1.0 |]
      ==> deriv ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 12),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 10))),
              template_hole 17)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 9),
                  template_app
                   (template_app (template_hole 13, template_var 8),
                    template_app
                     (template_app (template_hole 12, template_var 11),
                      template_app
                       (template_app (template_hole 11, template_var 7),
                        template_var 6))))),
              template_hole 10)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 9),
                template_var 6),
              template_var 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 9),
             template_app (template_hole 0, template_var 10))
           ))),
    ("Cachera.CACH_IF",
     "[| ins_is ?C ?m ?l (iftrue ?pc);
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None; derivAssum ?G ?C ?m ?pc (Cachera ?n);
         derivAssum ?G ?C ?m (?l + 1) (Cachera ?n) |]
      ==> deriv ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 8),
                  template_var 7),
                template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_app (template_hole 11, template_var 8),
              template_var 7)),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 6),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 8),
                  template_var 7),
                template_var 5),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_hole 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 8),
                 template_var 7),
               template_var 6),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Cachera.Basic_Sound",
     "[| Segment ?C ?m ?l ?ll ?code;
         MST\<down>(?C, ?m) = Some (?T, ?MI, ?Anno); ?l <= ?l1.0;
         ?l1.0 < ?ll; ?l2.0 = ?l1.0 + 1; ?code\<down>?l1.0 = Some ?ins;
         basic ?ins; derivAssum ?G ?C ?m ?l2.0 (Cachera ?n) |]
      ==> deriv ?G ?C ?m ?l1.0 (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 19, template_var 12),
                    template_var 11),
                  template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_equation
         (template_app
           (template_app (template_hole 17, template_hole 16),
            template_app
             (template_app (template_hole 15, template_var 12),
              template_var 11)),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 7),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 5)))),
        template_inequation (less_equals, template_var 10, template_var 4),
        template_inequation (less_than, template_var 4, template_var 9),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_hole 7)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 8), template_var 4),
          template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 12),
                  template_var 11),
                template_var 3),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 12),
                 template_var 11),
               template_var 4),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.TP_prim_Sound",
     "[| (?\<Sigma>, ?p, ?n) : TP_prim; Sig_good ?\<Sigma>;
         (?l, ?code, ?p, ?code1.0, ?l1.0) : compilePrim;
         MST\<down>(?C, ?m) = Some (?T, ?MI, ?Anno);
         Segment ?C ?m ?l ?l1.0 ?code1.0;
         derivAssum ?G ?C ?m ?l1.0 (Cachera ?nn); ?k = ?n + ?nn |]
      ==> deriv ?G ?C ?m ?l (Cachera ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 14),
                  template_app
                   (template_app (template_hole 21, template_var 13),
                    template_var 12))),
              template_hole 20)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 11),
                  template_app
                   (template_app (template_hole 16, template_var 10),
                    template_app
                     (template_app (template_hole 15, template_var 13),
                      template_app
                       (template_app (template_hole 14, template_var 9),
                        template_var 8))))),
              template_hole 13)
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 9, template_var 7),
              template_var 6)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 11),
                template_var 8),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 7),
                  template_var 6),
                template_var 8),
              template_app (template_hole 3, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 12),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 7),
                 template_var 6),
               template_var 11),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Cachera.Call_Sound",
     "[| Sig_good ?\<Sigma>; ?\<Sigma>\<down>?f = Some ?n;
         (?l, ?code, CallPrim ?f ?args, ?code1.0, ?l1.0) : compilePrim;
         MST\<down>(?C, ?m) = Some (?T, ?MI, ?Anno);
         Segment ?C ?m ?l ?l1.0 ?code1.0;
         derivAssum ?G ?C ?m ?l1.0 (Cachera ?nn); ?k = ?n + ?nn |]
      ==> deriv ?G ?C ?m ?l (Cachera ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 15)),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 15),
            template_var 14),
          template_app (template_hole 20, template_var 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 12),
                  template_app
                   (template_app (template_hole 17, template_var 11),
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app (template_hole 15, template_var 14),
                          template_var 10)),
                      template_app
                       (template_app (template_hole 14, template_var 9),
                        template_var 8))))),
              template_hole 13)
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 9, template_var 7),
              template_var 6)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 12),
                template_var 8),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 7),
                  template_var 6),
                template_var 8),
              template_app (template_hole 3, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 13),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 7),
                 template_var 6),
               template_var 12),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Cachera.CACH_INVS",
     "[| ins_is ?C ?m ?l (invokeS ?D ?m');
         mbody_is ?D ?m' (?par, ?code, ?l0.0);
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None;
         MST\<down>(?D, ?m') = Some (mkSPEC (Cachera ?k) ?Anno2.0);
         ?nk = ?n + ?k; derivAssum ?G ?C ?m (?l + 1) (Cachera ?n) |]
      ==> deriv ?G ?C ?m ?l (Cachera ?nk)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 15),
                  template_var 14),
                template_var 13),
              template_app
               (template_app (template_hole 21, template_var 12),
                template_var 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 12),
                template_var 11),
              template_app
               (template_app (template_hole 19, template_var 10),
                template_app
                 (template_app (template_hole 18, template_var 9),
                  template_var 8)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app (template_hole 14, template_var 15),
              template_var 14)),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 7),
              template_app
               (template_app (template_hole 11, template_var 6),
                template_var 5)))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 5),
            template_var 13),
          template_hole 8),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app (template_hole 14, template_var 12),
              template_var 11)),
          template_app
           (template_hole 13,
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 4)),
              template_var 3))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 0),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 2, template_var 13),
                  template_hole 1)),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 15),
                 template_var 14),
               template_var 13),
             template_app (template_hole 6, template_var 2))
           ))),
    ("Cachera.CACH_INSTR",
     "[| ins_is ?C ?m ?l ?I;
         ?I : {const ?c, dup, pop, swap, load ?x, store ?x, binop ?f,
               unop ?g, getfield ?d ?F, putfield ?d ?F, checkcast ?d};
         MST\<down>(?C, ?m) = Some (?Mspec, ?Minv, ?Anno);
         ?Anno\<down>?l = None; derivAssum ?G ?C ?m (?l + 1) (Cachera ?n) |]
      ==> deriv ?G ?C ?m ?l (Cachera ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 29, template_var 14),
                  template_var 13),
                template_var 12),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 11),
              template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 10)),
                template_app
                 (template_app (template_hole 27, template_hole 25),
                  template_app
                   (template_app (template_hole 27, template_hole 24),
                    template_app
                     (template_app (template_hole 27, template_hole 23),
                      template_app
                       (template_app
                         (template_hole 27,
                          template_app (template_hole 22, template_var 9)),
                        template_app
                         (template_app
                           (template_hole 27,
                            template_app
                             (template_hole 21, template_var 9)),
                          template_app
                           (template_app
                             (template_hole 27,
                              template_app
                               (template_hole 20, template_var 8)),
                            template_app
                             (template_app
                               (template_hole 27,
                                template_app
                                 (template_hole 19, template_var 7)),
                              template_app
                               (template_app
                                 (template_hole 27,
                                  template_app
                                   (template_app
                                     (template_hole 18, template_var 6),
                                    template_var 5)),
                                template_app
                                 (template_app
                                   (template_hole 27,
                                    template_app
                                     (template_app
 (template_hole 17, template_var 6),
template_var 5)),
                                  template_app
                                   (template_app
                                     (template_hole 27,
template_app (template_hole 16, template_var 6)),
                                    template_hole 15))))))))))))
            ),
        template_equation
         (template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_app (template_hole 11, template_var 14),
              template_var 13)),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2)))),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_var 12),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 3, template_var 12),
                  template_hole 2)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 14),
                 template_var 13),
               template_var 12),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Cachera.CACH_VP",
     "[| ALL c m par code l0.
            mbody_is c m (par, code, l0) -->
            (EX n Anno.
                MST\<down>(c, m) = Some (mkSPEC (Cachera n) Anno) &
                deriv ?G c m l0 (Cachera n));
         ALL c m l A B I.
            ?G\<down>(c, m, l) = Some (A, B, I) -->
            (EX n. (A, B, I) = Cachera n & deriv ?G c m l (Cachera n)) |]
      ==> VP",
     template_implication
      ([template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty))],
       template_predicate (template_hole 0))),
    ("Cachera.Call_SoundAux",
     "[| ?\<Sigma>\<down>?f = Some ?n;
         MST\<down>(fst ?f, snd ?f) = Some (mkSPEC (Cachera ?n) ?Anno2.0);
         EX par body l0. mbody_is (fst ?f) (snd ?f) (par, body, l0);
         (?l, ?code, CallPrim ?f ?args, ?code1.0, ?l1.0) : compilePrim;
         MST\<down>(?C, ?m) = Some (?T, ?MI, ?Anno);
         Segment ?C ?m ?l ?l1.0 ?code1.0;
         derivAssum ?G ?C ?m ?l1.0 (Cachera ?k) |]
      ==> deriv ?G ?C ?m ?l (Cachera (?n + ?k))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 28, template_var 15),
            template_var 14),
          template_app (template_hole 27, template_var 13)),
        template_equation
         (template_app
           (template_app (template_hole 25, template_hole 24),
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 14)),
              template_app (template_hole 21, template_var 14))),
          template_app
           (template_hole 20,
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 13)),
              template_var 12))),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 11),
                  template_app
                   (template_app (template_hole 9, template_var 10),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 14),
                          template_var 9)),
                      template_app
                       (template_app (template_hole 12, template_var 8),
                        template_var 7))))),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 25, template_hole 24),
            template_app
             (template_app (template_hole 23, template_var 6),
              template_var 5)),
          template_app
           (template_hole 20,
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 11),
                template_var 7),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 6),
                  template_var 5),
                template_var 7),
              template_app (template_hole 18, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 6),
                 template_var 5),
               template_var 11),
             template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 0, template_var 13),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.CacheraMoreTemplates"
### 0.386s elapsed time, 0.580s cpu time, 0.076s GC time
val it = (): unit
