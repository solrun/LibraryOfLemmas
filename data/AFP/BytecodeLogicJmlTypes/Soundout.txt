Loading theory "Draft.AssocLists" (required by "Draft.SoundMoreTemplates" via "Draft.Sound" via "Draft.Logic" via "Draft.Language")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
### Ambiguous input (line 26 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b)))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b))))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###         ("_applC" ("_position" set) ("_position" L))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ambiguous input (line 29 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_position" Y)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a) ("_position" Y))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" X) ("_position" Y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### Ambiguous input (line 33 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" M)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###           ("_position" X)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" L) ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" X))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" M) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  delete :: "('a * 'b) list => 'a => ('a * 'b) list"
### Ambiguous input (line 50 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC" ("_position" delete)
###       ("_cargs" ("_position" L) ("_position" a)))
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" l)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.not_equal" ("_position" b) ("_position" a))
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a)))
###           ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" L) ("_position" a)))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" delete)
###             ("_cargs" ("_position" L) ("_position" a))))))
###     ("_position" L)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" delete)
###         ("_cargs" ("_position" l) ("_position" a)))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" x)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" l) ("_position" b))
###           ("_position" x)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" b) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" l)
###           ("\<^const>HOL.eq" ("_position" b) ("_position" x))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" delete)
###           ("_cargs" ("_position" l) ("_position" a)))
###         ("_position" b))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 84 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("_applC"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup"
###     ("\<^const>AssocLists.upd"
###       ("_constrain" ("_position" L)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" AssList)))
###       ("_position" a) ("_position" b))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("_position" a))
###     ("_applC" ("_position" Some) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq" ("_position" c)
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" b))))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" b))
###         ("_position" c))
###       ("_applC" ("_position" Some) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" L)))
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("_position" a) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.598s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 92 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" b) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.upd"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_position" a) ("_position" v))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_applC"
###             ("_constrain" ("_position" L)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" AssList)))
###             ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###           ("_position" b))
###         ("_position" X)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" a) ("_position" v))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_applC"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" b))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" v))
###       ("\<^const>HOL.eq" ("_position" b)
###         ("_applC" ("_position" Some) ("_position" X))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" v))))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_applC" ("_position" Some) ("_position" X))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" X)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" v))
###         ("_position" b))
###       ("_applC" ("_position" Some) ("_position" X)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("_applC" ("_position" L)
###         ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup"
###       ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###         ("_position" X))
###       ("\<^const>HOL.eq" ("_position" b) ("_position" M)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("_applC" ("_position" L)
###           ("_Map" ("_maplet" ("_position" a) ("_position" X))))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("_constrain" ("_position" L)
###             ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###               ("_type_name" AssList)))
###           ("_position" b))
###         ("_position" M)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup"
###         ("_constrain" ("_position" L)
###           ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###             ("_type_name" AssList)))
###         ("\<^const>HOL.eq" ("_position" b) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" X))
###         ("_position" b))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" emp)
###     ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" emp) ("_position" a))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>AssocLists.lookup" ("_position" l)
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" AL_isEmp) ("_position" l))
###     ("\<^const>HOL.All_binder" ("_position" a)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" l) ("_position" a))
###         ("_position" None)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" L)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("_position" M)))
###           ("_position" a))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))))
###         ("_applC" ("_position" Some) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("_position" M)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" b)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>AssocLists.lookup" ("_position" M)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>AssocLists.lookup" ("_position" L)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" contained)
###       ("_cargs" ("_position" L) ("_position" M)))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 1.000s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
### Ambiguous input (line 129 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>AssocLists.lookup" ("_position" L)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" L)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b)))
###           ("_applC" ("_position" Suc)
###             ("\<^const>AssocLists.AL_Size" ("_position" L))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>HOL.eq" ("_position" a) ("_position" None))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" L) ("_position" a))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###           ("_position" b)))
###       ("_applC" ("_position" Suc)
###         ("\<^const>AssocLists.AL_Size" ("_position" L))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" L)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" L) ("_position" a)
###               ("_position" b))))))
###     ("_applC" ("_position" Suc)
###       ("\<^const>AssocLists.AL_Size" ("_position" L)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 45 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup"
###                 ("\<^const>AssocLists.lookup" ("_position" M)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                     ("_position" L)))
###                 ("_position" a))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("\<^const>AssocLists.lookup" ("_position" L)
###                     ("_position" a))))
###               ("_applC" ("_position" Some) ("_position" b)))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup"
###               ("\<^const>AssocLists.lookup" ("_position" M)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                   ("_position" L)))
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))))
###             ("\<^const>HOL.All_binder" ("_position" c)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                 ("\<^const>AssocLists.lookup"
###                   ("\<^const>AssocLists.lookup" ("_position" M)
###                     ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                   ("_position" c))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" L)
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b))))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" M) ("_position" a))
###               ("_position" None))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b))))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###                 ("_position" L)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some) ("_position" b)))
###               ("\<^const>HOL.All_binder" ("_position" c)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.not_equal" ("_position" c) ("_position" a))
###                   ("\<^const>AssocLists.lookup"
###                     ("\<^const>AssocLists.lookup" ("_position" M)
###                       ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                     ("_position" c)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" M)
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None)))
###             ("\<^const>AssocLists.lookup" ("_position" L)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" a)
###                   ("_applC" ("_position" Some) ("_position" b)))
###                 ("\<^const>HOL.All_binder" ("_position" c)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.not_equal" ("_position" c)
###                       ("_position" a))
###                     ("\<^const>AssocLists.lookup"
###                       ("\<^const>AssocLists.lookup" ("_position" M)
###                         ("\<^const>HOL.eq" ("_position" c) ("_position" L)))
###                       ("_position" c))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" L))
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" M)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" M))
###             ("_position" n))
###           ("\<^const>AssocLists.lookup" ("_position" M)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a) ("_position" None))
###               ("\<^const>AssocLists.lookup" ("_position" L)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" a)
###                     ("_applC" ("_position" Some) ("_position" b)))
###                   ("\<^const>HOL.All_binder" ("_position" c)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.not_equal" ("_position" c)
###                         ("_position" a))
###                       ("\<^const>AssocLists.lookup"
###                         ("\<^const>AssocLists.lookup" ("_position" M)
###                           ("\<^const>HOL.eq" ("_position" c)
###                             ("_position" L)))
###                         ("_position" c)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.491s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some) ("_position" obj)))
###             ("\<^const>AssocLists.AL_Size" ("_position" h))))
###         ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###             ("_position" n)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" h)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" obj) ("_position" obj1))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.AL_Size"
###           ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###             ("_position" obj1)))
###         ("_position" n))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.eq" ("\<^const>AssocLists.AL_Size" ("_position" h))
###           ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/BytecodeLogicJmlTypes/AssocLists.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" Some) ("_position" obj))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1)))
###           ("\<^const>AssocLists.AL_Size" ("_position" h)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" Some) ("_position" obj)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some) ("_position" obj))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>AssocLists.AL_Size"
###         ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###           ("_position" obj1)))
###       ("\<^const>AssocLists.AL_Size" ("_position" h)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some) ("_position" obj))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.AL_Size"
###             ("\<^const>AssocLists.upd" ("_position" h) ("_position" a)
###               ("_position" obj1))))))
###     ("\<^const>AssocLists.AL_Size" ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AssocLists"
### 0.395s elapsed time, 1.555s cpu time, 0.135s GC time
Loading theory "Draft.Language" (required by "Draft.SoundMoreTemplates" via "Draft.Sound" via "Draft.Logic")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.944s elapsed time, 3.561s cpu time, 0.891s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.013s elapsed time, 3.670s cpu time, 0.842s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 143 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" P)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" C)
###                 ("_applC" ("_position" Some) ("_position" CD)))
###               ("_position" CD)))
###           ("_position" m))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("\<^const>AssocLists.lookup" ("_position" CD)
###               ("_position" m))))
###         ("_applC" ("_position" Some) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" C)
###               ("_applC" ("_position" Some) ("_position" CD)))
###             ("_position" CD)))
###         ("\<^const>HOL.eq" ("_position" m)
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>AssocLists.lookup" ("_position" CD)
###             ("\<^const>HOL.eq" ("_position" m)
###               ("_applC" ("_position" Some) ("_position" M)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>AssocLists.lookup" ("_position" CD)
###           ("\<^const>HOL.eq" ("_position" m)
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" P)
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>AssocLists.lookup" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" C)
###             ("_applC" ("_position" Some) ("_position" CD)))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###             ("_applC" ("_position" Some) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mbody_is)
###       ("_cargs" ("_position" C) ("_cargs" ("_position" m) ("_position" M))))
###     ("\<^const>HOL.Ex_binder" ("_position" CD)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" P) ("_position" C))
###           ("_applC" ("_position" Some) ("_position" CD)))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" CD) ("_position" m))
###           ("_applC" ("_position" Some) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("_applC" ("_position" S)
###             ("_Map" ("_maplet" ("_position" x) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" oo)
###           ("_tuple_args" ("_position" par)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg" ("_position" ops)))))
###         ("_position" Frame)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R)
###           ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###             ("_position" v))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" v) ("_position" oo))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" x) ("_position" par))
###           ("_tuple_args" ("_position" R) ("_tuple_arg" ("_position" ops)))))
###       ("_position" Frame))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Framep"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 178 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>AssocLists.lookup" ("_position" h)
###     ("\<^const>HOL.eq" ("_applC" ("_position" nextLoc) ("_position" h))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" h)
###       ("_applC" ("_position" nextLoc) ("_position" h)))
###     ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" s) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" load) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" s)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("\<^const>AssocLists.upd" ("_position" s) ("_position" x)
###                 ("_position" v))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" store) ("_position" x)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" NEXT)
###           ("_tuple" ("_position" os)
###             ("_tuple_args"
###               ("_applC" ("_position" s)
###                 ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###               ("_tuple_arg" ("_position" h))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("\<^const>AssocLists.upd" ("_position" Flds)
###                   ("_position" F) ("_position" v))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" putfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" newobj)
###             ("_tuple" ("_position" d)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Flds)
###                   ("_Map" ("_maplet" ("_position" F) ("_position" v))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os)))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" checkcast) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" NEXT)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one"))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 246 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a) ("_position" newobj)))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" new) ("_position" d)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" newobj)
###           ("_tuple" ("_position" d) ("_tuple_arg" ("_position" emp)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" nextLoc) ("_position" h))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_position" newobj)))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple" ("_position" os)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 250 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("_position" F))
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" get_ins)
###           ("_cargs" ("_position" M) ("_position" l)))
###         ("_applC" ("_position" Some)
###           ("_applC" ("_position" getfield)
###             ("_cargs" ("_position" d) ("_position" F))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" NEXT)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" s)
###                   ("_tuple_arg" ("_position" h))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one")))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" M)
###         ("_tuple_args" ("_position" l)
###           ("_tuple_args"
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" os))
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" h))))
###             ("_tuple_args" ("\<^const>Groups.one_class.one")
###               ("_tuple_args" ("_position" ll)
###                 ("_tuple_arg" ("_position" NEXT)))))))
###       ("_position" Step))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Stepp", "Execp"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 1.982s elapsed time, 6.189s cpu time, 1.143s GC time
Loading theory "Draft.Templates" (required by "Draft.SoundMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SoundMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.089s cpu time, 0.076s GC time
### Ambiguous input (line 335 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_position" t))))
###           ("_tuple"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_position" n)))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" S) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" v)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>AssocLists.lookup" ("_position" S)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.eq" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" v))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" v) ("_position" os))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" os))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" load) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" v)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>AssocLists.lookup" ("_position" S)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" x)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" os))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll) ("_position" l))))))
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 339 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("_applC" ("_position" S)
###                     ("_Map" ("_maplet" ("_position" x) ("_position" v))))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" store) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" v) ("_position" ops))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" os)
###           ("\<^const>List.list.Cons" ("_position" v) ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args"
###                   ("\<^const>AssocLists.upd" ("_position" S) ("_position" x)
###                     ("_position" v))
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg" ("_position" emp))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" new) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" a)
###           ("_applC" ("_position" nextLoc) ("_position" h)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" os))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("\<^const>AssocLists.upd" ("_position" h)
###                       ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg" ("_position" emp))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 114 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Suc)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_position" t)))))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("_position" ll))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" os)
###                         ("\<^const>List.list.Cons"
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" a)))
###                           ("_position" ops)))
###                       ("_position" n))))
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("_position" ll)))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" F)
###                       ("_applC" ("_position" Some) ("_position" v)))
###                     ("_position" os)))
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Flds)
###                   ("_position" F))
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" Flds)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" F)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll))))))
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>AssocLists.lookup" ("_position" Flds)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" os)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" Suc)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" t)
###                         ("_tuple"
###                           ("\<^const>List.list.Cons" ("_position" v)
###                             ("_position" ops))
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h)))))
###                       ("_position" ll))))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" Flds)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" F)
###               ("_applC" ("_position" Some) ("_position" v)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons" ("_position" v)
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" getfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" Flds)
###                 ("\<^const>HOL.eq" ("_position" F)
###                   ("_applC" ("_position" Some) ("_position" v))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" t)
###                       ("_tuple"
###                         ("\<^const>List.list.Cons" ("_position" v)
###                           ("_position" ops))
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h)))))
###                     ("_position" ll)))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 52 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Flds)
### ("_Map" ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" h)
###                             ("_Map"
###                               ("_maplet" ("_position" a)
###                                 ("_tuple" ("_position" d)
###                                   ("_tuple_arg"
###                                     ("\<^const>AssocLists.upd"
### ("_position" Flds) ("_position" F) ("_position" v)))))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons" ("_position" v)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple" ("_position" ops)
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg"
###                           ("\<^const>AssocLists.upd" ("_position" h)
###                             ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("\<^const>AssocLists.upd"
###                                   ("_position" Flds) ("_position" F)
###                                   ("_position" v)))))))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple" ("_position" ops)
###             ("_tuple_args" ("_position" S)
###               ("_tuple_arg"
###                 ("_applC" ("_position" h)
###                   ("_Map"
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" d)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Flds)
###                             ("_Map"
###                               ("_maplet" ("_position" F)
###                                 ("_position" v)))))))))))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons" ("_position" v)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple" ("_position" ops)
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" h)
###                     ("_Map"
###                       ("_maplet" ("_position" a)
###                         ("_tuple" ("_position" d)
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Flds)
###                               ("_Map"
###                                 ("_maplet" ("_position" F)
###                                   ("_position" v)))))))))))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons" ("_position" v)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple" ("_position" ops)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" h)
###                       ("_Map"
###                         ("_maplet" ("_position" a)
###                           ("_tuple" ("_position" d)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Flds)
###                                 ("_Map"
###                                   ("_maplet" ("_position" F)
###                                     ("_position" v)))))))))))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons" ("_position" v)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple" ("_position" ops)
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" h)
###                           ("_Map"
###                             ("_maplet" ("_position" a)
###                               ("_tuple" ("_position" d)
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" Flds)
###                                     ("_Map"
### ("_maplet" ("_position" F) ("_position" v)))))))))))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" putfield)
###               ("_cargs" ("_position" d) ("_position" F))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds)
###           ("_idts" ("_position" v) ("_position" ops))))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons" ("_position" v)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple" ("_position" ops)
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" h)
###                         ("_Map"
###                           ("_maplet" ("_position" a)
###                             ("_tuple" ("_position" d)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" Flds)
###                                   ("_Map"
###                                     ("_maplet" ("_position" F)
### ("_position" v)))))))))))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/BytecodeLogicJmlTypes/Language.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Suc)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" t)
###                     ("_tuple"
###                       ("\<^const>List.list.Cons"
###                         ("_applC" ("_position" RVal)
###                           ("_applC" ("_position" Loc) ("_position" a)))
###                         ("_position" ops))
###                       ("_tuple_args" ("_position" S)
###                         ("_tuple_arg" ("_position" h)))))
###                   ("_position" ll))))))
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" Suc)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_position" t)))))
###           ("_tuple"
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops))
###             ("_tuple_args" ("_position" S) ("_tuple_arg" ("_position" h)))))
###         ("\<^const>HOL.eq" ("_position" ll)
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" os)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops)))
###                 ("_position" n))))
###           ("_applC" ("_position" Suc) ("\<^const>Groups.zero_class.zero")))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("_position" os)))
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" RVal)
###               ("_applC" ("_position" Loc) ("_position" a)))
###             ("_position" ops)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>AssocLists.lookup" ("_position" h)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" t)
###                   ("_tuple"
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" a)))
###                       ("_position" ops))
###                     ("_tuple_args" ("_position" S)
###                       ("_tuple_arg" ("_position" h)))))
###                 ("\<^const>HOL.eq" ("_position" ll)
###                   ("\<^const>Groups.plus_class.plus" ("_position" l)
###                     ("\<^const>Groups.one_class.one")))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.eq" ("_position" a)
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" d)
###                 ("_tuple_arg" ("_position" Flds))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" os)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" RVal)
###                 ("_applC" ("_position" Loc) ("_position" a)))
###               ("_position" ops)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Suc)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" t)
###                 ("_tuple"
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" RVal)
###                       ("_applC" ("_position" Loc) ("_position" a)))
###                     ("_position" ops))
###                   ("_tuple_args" ("_position" S)
###                     ("_tuple_arg" ("_position" h)))))
###               ("\<^const>HOL.eq" ("_position" ll)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.eq" ("_position" os)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>List.list.Cons"
###           ("\<^const>AssocLists.lookup" ("_position" h)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" a)
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" d)
###                     ("_tuple_arg" ("_position" Flds)))))
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a))))))
###           ("_position" ops))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero")))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" t)
###               ("_tuple"
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops))
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h)))))
###             ("\<^const>HOL.eq" ("_position" ll)
###               ("\<^const>Groups.plus_class.plus" ("_position" l)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" l)
###             ("_tuple_args"
###               ("_tuple" ("_position" os)
###                 ("_tuple_args" ("_position" S)
###                   ("_tuple_arg" ("_position" h))))
###               ("_tuple_args" ("_position" n)
###                 ("_tuple_args" ("_position" ll)
###                   ("_tuple_arg" ("_position" t)))))))
###         ("_position" Step)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" checkcast) ("_position" d)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Flds) ("_position" ops)))
###       ("\<^const>HOL.conj"
###         ("\<^const>AssocLists.lookup" ("_position" h)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" d)
###                   ("_tuple_arg" ("_position" Flds)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" os)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" RVal)
###                     ("_applC" ("_position" Loc) ("_position" a)))
###                   ("_position" ops)))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Suc)
###                   ("\<^const>Groups.zero_class.zero"))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" t)
###             ("_tuple"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" a)))
###                 ("_position" ops))
###               ("_tuple_args" ("_position" S)
###                 ("_tuple_arg" ("_position" h)))))
###           ("\<^const>HOL.eq" ("_position" ll)
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 2.970s elapsed time, 7.213s cpu time, 1.204s GC time
Loading theory "Draft.Logic" (required by "Draft.SoundMoreTemplates" via "Draft.Sound")
Loading theory "Draft.MultiStep" (required by "Draft.SoundMoreTemplates" via "Draft.Sound")
Loading theory "Draft.Reachability" (required by "Draft.SoundMoreTemplates" via "Draft.Sound")
Proofs for inductive predicate(s) "MStepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Reachablep"
  Proving monotonicity ...
### Ambiguous input (line 204 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" goto) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" A))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" B))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l) ("_position" I))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" iftrue) ("_position" pc)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>SP_Assum" ("_position" G)
###                   ("_applC" ("_position" SP_pre)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))))
###                   ("_position" C) ("_position" m) ("_position" pc)
###                   ("_applC" ("_position" SP_post)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))
###                   ("_applC" ("_position" SP_inv)
###                     ("_cargs" ("_position" M)
###                       ("_cargs" ("_position" l)
###                         ("_lambda"
###                           ("_pttrns" ("_position" s0)
###                             ("_pttrns" ("_position" s) ("_position" t)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ops)
###                               ("_idts" ("_position" S) ("_position" k)))
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq" ("_position" s)
###                                 ("_tuple"
###                                   ("\<^const>List.list.Cons"
###                                     ("_position" TRUE) ("_position" ops))
###                                   ("_tuple_args" ("_position" S)
###                                     ("_tuple_arg" ("_position" k)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_position" t))))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>SP_Assum" ("_position" G)
###                     ("_applC" ("_position" SP_pre)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s))))))))))
###                     ("_position" C) ("_position" m)
###                     ("\<^const>Groups.plus_class.plus" ("_position" l)
###                       ("\<^const>Groups.one_class.one"))
###                     ("_applC" ("_position" SP_post)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t)))))))))))
###                     ("_applC" ("_position" SP_inv)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l)
###                           ("_lambda"
###                             ("_pttrns" ("_position" s0)
###                               ("_pttrns" ("_position" s) ("_position" t)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ops)
###                                 ("_idts" ("_position" S)
###                                   ("_idts" ("_position" k)
###                                     ("_position" v))))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>HOL.eq" ("_position" s)
###                                   ("_tuple"
###                                     ("\<^const>List.list.Cons"
### ("_position" v) ("_position" ops))
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k)))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.not_equal" ("_position" v)
###                                     ("_position" TRUE))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s) ("_position" t))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0) ("_position" s)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some) ("_position" vreturn))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" I)
###                     ("_cargs" ("_position" s0)
###                       ("_cargs" ("_position" s)
###                         ("_applC" ("_position" heap) ("_position" s))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" v)
###                         ("_idts" ("_position" ops)
###                           ("_idts" ("_position" S) ("_position" h))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("\<^const>List.list.Cons" ("_position" v)
###                               ("_position" ops))
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h)))))
###                         ("_applC" ("_position" B)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_tuple" ("_position" h)
###                                 ("_tuple_arg"
###                                   ("_position" v)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 242 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>AssocLists.lookup" ("_position" Anno)
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno2))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" l)
###                         ("_applC" ("_position" Some) ("_position" Q)))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" Q)
###                             ("_cargs" ("_position" s0)
###                               ("_position" s)))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" Anno)
###                         ("_position" l))
###                       ("_applC" ("_position" Some) ("_position" Q)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mbody_is)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m) ("_position" M)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" get_ins)
###             ("_cargs" ("_position" M) ("_position" l)))
###           ("_applC" ("_position" Some)
###             ("_applC" ("_position" invokeS)
###               ("_cargs" ("_position" D) ("_position" m'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m'))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno2)))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mbody_is)
###                 ("_cargs" ("_position" D)
###                   ("_cargs" ("_position" m')
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder" ("_position" Q)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>AssocLists.lookup" ("_position" Anno)
###                         ("_position" l))
###                       ("_applC" ("_position" Some) ("_position" Q)))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" Q)
###                           ("_cargs" ("_position" s0) ("_position" s))))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0)
###                         ("_idts" ("_position" ops1)
###                           ("_idts" ("_position" ops2)
###                             ("_idts" ("_position" S)
###                               ("_idts" ("_position" R)
###                                 ("_idts" ("_position" k)
###                                   ("_position" t)))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" par)
###                               ("_tuple_args" ("_position" R)
###                                 ("_tuple_arg" ("_position" ops2)))))
###                           ("_position" Frame))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0)
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" k))))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" MI)
###                               ("_cargs"
###                                 ("_tuple" ("_position" R)
###                                   ("_tuple_arg" ("_position" k)))
###                                 ("_position" t)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" ops1)
###                                     ("_tuple_args" ("_position" S)
### ("_tuple_arg" ("_position" k))))
###                                   ("_position" t)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>SP_Assum" ("_position" G)
###                         ("_applC" ("_position" SINV_pre)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" A))))
###                         ("_position" C) ("_position" m)
###                         ("\<^const>Groups.plus_class.plus" ("_position" l)
###                           ("\<^const>Groups.one_class.one"))
###                         ("_applC" ("_position" SINV_post)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T) ("_position" B))))
###                         ("_applC" ("_position" SINV_inv)
###                           ("_cargs" ("_position" par)
###                             ("_cargs" ("_position" T)
###                               ("_position" I)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Deriv" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l)))))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" A)
###             ("_tuple_args" ("_position" B)
###               ("_tuple_arg" ("_position" I)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" m) ("_tuple_arg" ("_position" l))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" A)
###                   ("_cargs" ("_position" s0) ("_position" s)))
###                 ("_applC" ("_position" I)
###                   ("_cargs" ("_position" s0)
###                     ("_cargs" ("_position" s)
###                       ("_applC" ("_position" heap)
###                         ("_position" s))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SP_Assum" ("_position" G) ("_position" A) ("_position" C)
###       ("_position" m) ("_position" l) ("_position" B) ("_position" I))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.MultiStep"
### 0.360s elapsed time, 1.097s cpu time, 0.055s GC time
### theory "Draft.Reachability"
### 0.372s elapsed time, 1.123s cpu time, 0.055s GC time
Proofs for inductive predicate(s) "SP_Judgementp"
  Proving monotonicity ...
### Ambiguous input (line 273 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>AssocLists.lookup" ("_position" Anno)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" l)
###                     ("_applC" ("_position" Some) ("_position" Q)))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" Q)
###                         ("_cargs" ("_position" s0)
###                           ("_position" s))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" l)
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder" ("_position" Q)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>AssocLists.lookup" ("_position" Anno)
###                     ("_position" l))
###                   ("_applC" ("_position" Some) ("_position" Q)))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0) ("_position" s)))
###                     ("_applC" ("_position" Q)
###                       ("_cargs" ("_position" s0) ("_position" s)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###       ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###       ("_position" I)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" s0) ("_idts" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s0) ("_position" s)))
###           ("_applC" ("_position" I)
###             ("_cargs" ("_position" s0)
###               ("_cargs" ("_position" s)
###                 ("_applC" ("_position" heap) ("_position" s)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Mspec)
###           ("_idts" ("_position" Minv) ("_position" Anno)))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>HOL.All_binder" ("_position" Q)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("\<^const>AssocLists.lookup" ("_position" Anno)
###                   ("_position" l))
###                 ("_applC" ("_position" Some) ("_position" Q)))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0) ("_position" s)))
###                   ("_applC" ("_position" Q)
###                     ("_cargs" ("_position" s0) ("_position" s))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_applC" ("_position" Some) ("_position" Q))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" Anno)
###               ("_position" l))
###             ("_applC" ("_position" Some) ("_position" Q))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" Mspec)
###               ("_tuple_args" ("_position" Minv)
###                 ("_tuple_arg" ("_position" Anno)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l)
###               ("_applC" ("_position" Some) ("_position" Q)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###         ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###         ("_position" I)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" Mspec)
###                 ("_tuple_args" ("_position" Minv)
###                   ("_tuple_arg" ("_position" Anno))))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>AssocLists.lookup" ("_position" Anno)
###             ("\<^const>HOL.eq" ("_position" l)
###               ("_applC" ("_position" Some) ("_position" Q)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s0) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/BytecodeLogicJmlTypes/Logic.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>Logic.SP_Deriv" ("_position" G)
###                 ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" mkState) ("_position" s0))))
###                 ("_position" C) ("_position" m) ("_position" l0)
###                 ("_applC" ("_position" mkPost) ("_position" T))
###                 ("_applC" ("_position" mkInv) ("_position" MI))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" G)
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l)))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###               ("_position" C) ("_position" m) ("_position" l)
###               ("_position" B) ("_position" I)))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" VP_G) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" l)
###               ("_idts" ("_position" A)
###                 ("_idts" ("_position" B) ("_position" I))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C)
###                 ("_tuple_args" ("_position" m)
###                   ("_tuple_arg" ("_position" l))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_args" ("_position" B)
###                     ("_tuple_arg" ("_position" I)))))))
###           ("\<^const>Logic.SP_Deriv" ("_position" G) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" C)
###           ("_idts" ("_position" m)
###             ("_idts" ("_position" par)
###               ("_idts" ("_position" code)
###                 ("_idts" ("_position" l0)
###                   ("_idts" ("_position" T)
###                     ("_idts" ("_position" MI) ("_position" Anno))))))))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" mbody_is)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" m)
###                 ("_tuple" ("_position" par)
###                   ("_tuple_args" ("_position" code)
###                     ("_tuple_arg" ("_position" l0)))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T)
###                     ("_tuple_args" ("_position" MI)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>Logic.SP_Deriv" ("_position" G)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Logic"
### 2.255s elapsed time, 3.113s cpu time, 0.214s GC time
Loading theory "Draft.Sound" (required by "Draft.SoundMoreTemplates")
### Ambiguous input (line 54 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.eq"
###                                     ("\<^const>AssocLists.lookup"
### ("_position" Anno) ("_position" ll))
###                                     ("_applC" ("_position" Some)
### ("_position" Q)))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" r))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" h) ("_position" v))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Opsem)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" h) ("_position" v))))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_tuple" ("_position" h)
### ("_tuple_arg" ("_position" v))))))))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ll) ("_position" r))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" MS)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_cargs" ("_position" ll) ("_position" r))))))
###                                 ("\<^const>HOL.All_binder" ("_position" Q)
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>HOL.eq"
### ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
### ("_applC" ("_position" Some) ("_position" Q)))
###                                     ("_applC" ("_position" Q)
### ("_cargs" ("_position" s0) ("_position" r))))))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" Reach)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_position" r)))))
###                                 ("_applC" ("_position" I)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>HOL.eq"
###                                     ("\<^const>AssocLists.lookup"
### ("_position" Anno) ("_position" ll))
###                                     ("_applC" ("_position" Some)
### ("_position" Q)))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" r))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>AssocLists.lookup"
###                                   ("_position" Anno)
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>HOL.eq" ("_position" ll)
### ("_applC" ("_position" Some) ("_position" Q)))
###                                     ("_applC" ("_position" Q)
### ("_cargs" ("_position" s0) ("_position" r)))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" h) ("_position" v))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Opsem)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" h) ("_position" v))))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_tuple" ("_position" h)
### ("_tuple_arg" ("_position" v))))))))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ll) ("_position" r))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" MS)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_cargs" ("_position" ll) ("_position" r))))))
###                                 ("\<^const>HOL.All_binder" ("_position" Q)
###                                   ("\<^const>AssocLists.lookup"
###                                     ("_position" Anno)
###                                     ("\<^const>HOL.implies"
### ("\<^const>HOL.eq" ("_position" ll)
###   ("_applC" ("_position" Some) ("_position" Q)))
### ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r)))))))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" Reach)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_position" r)))))
###                                 ("_applC" ("_position" I)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>AssocLists.lookup"
###                                   ("_position" Anno)
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>HOL.eq" ("_position" ll)
### ("_applC" ("_position" Some) ("_position" Q)))
###                                     ("_applC" ("_position" Q)
### ("_cargs" ("_position" s0) ("_position" r)))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>AssocLists.lookup"
###                                     ("_position" Anno)
###                                     ("\<^const>HOL.eq" ("_position" ll)
### ("_applC" ("_position" Some) ("_position" Q))))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" r))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" h) ("_position" v))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Opsem)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" h) ("_position" v))))))
###                               ("_applC" ("_position" B)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_tuple" ("_position" h)
### ("_tuple_arg" ("_position" v))))))))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" ll) ("_position" r))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" MS)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_cargs" ("_position" ll) ("_position" r))))))
###                                 ("\<^const>HOL.All_binder" ("_position" Q)
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>AssocLists.lookup"
### ("_position" Anno)
### ("\<^const>HOL.eq" ("_position" ll)
###   ("_applC" ("_position" Some) ("_position" Q))))
###                                     ("_applC" ("_position" Q)
### ("_cargs" ("_position" s0) ("_position" r))))))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" Reach)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("_position" s) ("_position" r)))))
###                                 ("_applC" ("_position" I)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" valid)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B) ("_position" I)))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" h) ("_position" v))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" Opsem)
###                               ("_cargs" ("_position" M)
###                                 ("_cargs" ("_position" l)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" h)
### ("_position" v))))))
###                             ("_applC" ("_position" B)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_tuple" ("_position" h)
###                                     ("_tuple_arg" ("_position" v))))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" ll) ("_position" r))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" MS)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_cargs" ("_position" ll) ("_position" r))))))
###                               ("\<^const>HOL.All_binder" ("_position" Q)
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>AssocLists.lookup"
###                                     ("_position" Anno)
###                                     ("\<^const>HOL.eq" ("_position" ll)
### ("_applC" ("_position" Some) ("_position" Q))))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" r))))))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" Reach)
###                                 ("_cargs" ("_position" M)
###                                   ("_cargs" ("_position" l)
###                                     ("_cargs" ("_position" s)
### ("_position" r)))))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" r))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" G_valid) ("_position" G))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I)))))))
###         ("\<^const>Sound.valid_syntax" ("_position" A) ("_position" C)
###           ("_position" m) ("_position" l) ("_position" B)
###           ("_position" I))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" G_valid) ("_position" G))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Sound.valid_syntax" ("_position" A) ("_position" C)
###             ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" G_valid) ("_position" G))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l)))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))
###         ("\<^const>Sound.valid_syntax" ("_position" A) ("_position" C)
###           ("_position" m) ("_position" l) ("_position" B)
###           ("_position" I))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" MST_valid)
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>Sound.valid_syntax"
###             ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" mkState) ("_position" s0))))
###             ("_position" C) ("_position" m) ("_position" l0)
###             ("_applC" ("_position" mkPost) ("_position" T))
###             ("_applC" ("_position" mkInv) ("_position" MI))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" MST_valid)
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Sound.valid_syntax"
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" MST_valid)
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>Sound.valid_syntax"
###             ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" mkState) ("_position" s0))))
###             ("_position" C) ("_position" m) ("_position" l0)
###             ("_applC" ("_position" mkPost) ("_position" T))
###             ("_applC" ("_position" mkInv) ("_position" MI))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>HOL.implies"
### ("\<^const>AssocLists.lookup" ("_position" Anno)
###   ("\<^const>HOL.eq" ("_position" ll)
###     ("_applC" ("_position" Some) ("_position" Q))))
### ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.All_binder" ("_position" k)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Orderings.ord_class.less_eq"
###                               ("_position" k) ("_position" K))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" h) ("_position" v))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                     ("_position" Exec))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" ll) ("_position" r))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k)
###         ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
### ("_position" MStep))
###                                     ("\<^const>HOL.All_binder"
### ("_position" Q)
### ("\<^const>HOL.implies"
###   ("\<^const>AssocLists.lookup" ("_position" Anno)
###     ("\<^const>HOL.eq" ("_position" ll)
###       ("_applC" ("_position" Some) ("_position" Q))))
###   ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
### ("_position" Reachable))
###                                     ("_applC" ("_position" I)
### ("_cargs" ("_position" s0)
###   ("_cargs" ("_position" s)
###     ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>HOL.implies"
### ("\<^const>AssocLists.lookup" ("_position" Anno)
###   ("\<^const>HOL.eq" ("_position" ll)
###     ("_applC" ("_position" Some) ("_position" Q))))
### ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>AssocLists.lookup"
### ("_position" Anno)
### ("\<^const>HOL.implies"
###   ("\<^const>HOL.eq" ("_position" ll)
###     ("_applC" ("_position" Some) ("_position" Q)))
###   ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r)))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.All_binder" ("_position" k)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Orderings.ord_class.less_eq"
###                               ("_position" k) ("_position" K))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" h) ("_position" v))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                     ("_position" Exec))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" ll) ("_position" r))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k)
###         ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
### ("_position" MStep))
###                                     ("\<^const>HOL.All_binder"
### ("_position" Q)
### ("\<^const>AssocLists.lookup" ("_position" Anno)
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq" ("_position" ll)
###       ("_applC" ("_position" Some) ("_position" Q)))
###     ("_applC" ("_position" Q)
###       ("_cargs" ("_position" s0) ("_position" r)))))))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
### ("_position" Reachable))
###                                     ("_applC" ("_position" I)
### ("_cargs" ("_position" s0)
###   ("_cargs" ("_position" s)
###     ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>AssocLists.lookup"
### ("_position" Anno)
### ("\<^const>HOL.implies"
###   ("\<^const>HOL.eq" ("_position" ll)
###     ("_applC" ("_position" Some) ("_position" Q)))
###   ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r)))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" Mspec)
###                   ("_tuple_args" ("_position" Minv)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>HOL.implies"
### ("\<^const>HOL.eq"
###   ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###   ("_applC" ("_position" Some) ("_position" Q)))
### ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" par)
###                   ("_idts" ("_position" code) ("_position" l0)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" M)
###                     ("_tuple" ("_position" par)
###                       ("_tuple_args" ("_position" code)
###                         ("_tuple_arg" ("_position" l0)))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MS)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" l0)
###                             ("_cargs"
###                               ("_applC" ("_position" mkState)
###                                 ("_position" s0))
###                               ("_cargs" ("_position" l) ("_position" s))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("\<^const>HOL.All_binder" ("_position" k)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>Orderings.ord_class.less_eq"
###                               ("_position" k) ("_position" K))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" h) ("_position" v))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                     ("_position" Exec))
###                                   ("_applC" ("_position" B)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" ll) ("_position" r))
###                                 ("\<^const>HOL.conj"
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k)
###         ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
### ("_position" MStep))
###                                     ("\<^const>HOL.All_binder"
### ("_position" Q)
### ("\<^const>HOL.implies"
###   ("\<^const>HOL.eq"
###     ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###     ("_applC" ("_position" Some) ("_position" Q)))
###   ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                   ("\<^const>HOL.implies"
###                                     ("\<^const>Set.member"
### ("_tuple" ("_position" M)
###   ("_tuple_args" ("_position" l)
###     ("_tuple_args" ("_position" s)
###       ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
### ("_position" Reachable))
###                                     ("_applC" ("_position" I)
### ("_cargs" ("_position" s0)
###   ("_cargs" ("_position" s)
###     ("_applC" ("_position" heap) ("_position" r)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" validn)
###       ("_cargs" ("_position" K)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" m)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" B) ("_position" I))))))))
###     ("\<^const>HOL.All_binder" ("_position" M)
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" Mspec)
###             ("_idts" ("_position" Minv) ("_position" Anno)))
###           ("\<^const>HOL.implies"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" Mspec)
###                     ("_tuple_args" ("_position" Minv)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" par)
###                 ("_idts" ("_position" code) ("_position" l0)))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq" ("_position" M)
###                   ("_tuple" ("_position" par)
###                     ("_tuple_args" ("_position" code)
###                       ("_tuple_arg" ("_position" l0)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0) ("_position" s))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MS)
###                       ("_cargs" ("_position" M)
###                         ("_cargs" ("_position" l0)
###                           ("_cargs"
###                             ("_applC" ("_position" mkState)
###                               ("_position" s0))
###                             ("_cargs" ("_position" l) ("_position" s))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("\<^const>HOL.All_binder" ("_position" k)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" k) ("_position" K))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" h) ("_position" v))
###                               ("\<^const>HOL.implies"
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" M)
###                                     ("_tuple_args" ("_position" l)
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_position" k)
###     ("_tuple_args" ("_position" h) ("_tuple_arg" ("_position" v)))))))
###                                   ("_position" Exec))
###                                 ("_applC" ("_position" B)
###                                   ("_cargs" ("_position" s0)
###                                     ("_cargs" ("_position" s)
### ("_tuple" ("_position" h) ("_tuple_arg" ("_position" v))))))))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" ll) ("_position" r))
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k)
###       ("_tuple_args" ("_position" ll) ("_tuple_arg" ("_position" r)))))))
###                                     ("_position" MStep))
###                                   ("\<^const>HOL.All_binder" ("_position" Q)
###                                     ("\<^const>HOL.implies"
### ("\<^const>HOL.eq"
###   ("\<^const>AssocLists.lookup" ("_position" Anno) ("_position" ll))
###   ("_applC" ("_position" Some) ("_position" Q)))
### ("_applC" ("_position" Q) ("_cargs" ("_position" s0) ("_position" r))))))
###                                 ("\<^const>HOL.implies"
###                                   ("\<^const>Set.member"
###                                     ("_tuple" ("_position" M)
### ("_tuple_args" ("_position" l)
###   ("_tuple_args" ("_position" s)
###     ("_tuple_args" ("_position" k) ("_tuple_arg" ("_position" r))))))
###                                     ("_position" Reachable))
###                                   ("_applC" ("_position" I)
###                                     ("_cargs" ("_position" s0)
### ("_cargs" ("_position" s)
###   ("_applC" ("_position" heap) ("_position" r))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" G_validn)
###       ("_cargs" ("_position" K) ("_position" G)))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>AssocLists.lookup" ("_position" G)
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I)))))))
###         ("\<^const>Sound.validn_syntax" ("_position" K) ("_position" A)
###           ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###           ("_position" I))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" G_validn)
###       ("_cargs" ("_position" K) ("_position" G)))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>AssocLists.lookup" ("_position" G)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_arg" ("_position" I))))))
###           ("\<^const>Sound.validn_syntax" ("_position" K) ("_position" A)
###             ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###             ("_position" I)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" G_validn)
###       ("_cargs" ("_position" K) ("_position" G)))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" l)
###             ("_idts" ("_position" A)
###               ("_idts" ("_position" B) ("_position" I))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq"
###           ("\<^const>AssocLists.lookup" ("_position" G)
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_arg" ("_position" l)))))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" A)
###               ("_tuple_args" ("_position" B)
###                 ("_tuple_arg" ("_position" I))))))
###         ("\<^const>Sound.validn_syntax" ("_position" K) ("_position" A)
###           ("_position" C) ("_position" m) ("_position" l) ("_position" B)
###           ("_position" I))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" MST_validn) ("_position" K))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno)))))))
###           ("\<^const>Sound.validn_syntax" ("_position" K)
###             ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" mkState) ("_position" s0))))
###             ("_position" C) ("_position" m) ("_position" l0)
###             ("_applC" ("_position" mkPost) ("_position" T))
###             ("_applC" ("_position" mkInv) ("_position" MI))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" MST_validn) ("_position" K))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>AssocLists.lookup" ("_position" MST)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T)
###                   ("_tuple_args" ("_position" MI)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>Sound.validn_syntax" ("_position" K)
###               ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" mkState) ("_position" s0))))
###               ("_position" C) ("_position" m) ("_position" l0)
###               ("_applC" ("_position" mkPost) ("_position" T))
###               ("_applC" ("_position" mkInv) ("_position" MI)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" MST_validn) ("_position" K))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" par)
###             ("_idts" ("_position" code)
###               ("_idts" ("_position" l0)
###                 ("_idts" ("_position" T)
###                   ("_idts" ("_position" MI) ("_position" Anno))))))))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m)
###               ("_tuple" ("_position" par)
###                 ("_tuple_args" ("_position" code)
###                   ("_tuple_arg" ("_position" l0)))))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" T)
###                 ("_tuple_args" ("_position" MI)
###                   ("_tuple_arg" ("_position" Anno))))))
###           ("\<^const>Sound.validn_syntax" ("_position" K)
###             ("_lambda" ("_pttrns" ("_position" s0) ("_position" s))
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" mkState) ("_position" s0))))
###             ("_position" C) ("_position" m) ("_position" l0)
###             ("_applC" ("_position" mkPost) ("_position" T))
###             ("_applC" ("_position" mkInv) ("_position" MI))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/BytecodeLogicJmlTypes/Sound.thy") produces 180 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" MST)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" m')))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" T)
###                             ("_tuple_args" ("_position" MI)
###                               ("_tuple_arg" ("_position" Anno2))))))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" mbody_is)
###                           ("_cargs" ("_position" D)
###                             ("_cargs" ("_position" m') ("_position" M'))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq" ("_position" M')
###                             ("_tuple" ("_position" par)
###                               ("_tuple_args" ("_position" code)
###                                 ("_tuple_arg" ("_position" l0)))))
###                           ("\<^const>HOL.All_binder" ("_position" Q)
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>AssocLists.lookup"
###                                   ("_position" Anno) ("_position" l))
###                                 ("_applC" ("_position" Some)
###                                   ("_position" Q)))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" s0) ("_position" s))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))))))))))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s0) ("_position" s))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0) ("_position" s)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs" ("_position" s)
###                             ("_applC" ("_position" heap)
###                               ("_position" s))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" MST)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" m')))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" T)
###                             ("_tuple_args" ("_position" MI)
###                               ("_tuple_arg" ("_position" Anno2))))))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" mbody_is)
###                           ("_cargs" ("_position" D)
###                             ("_cargs" ("_position" m') ("_position" M'))))
###                         ("\<^const>HOL.eq" ("_position" M')
###                           ("_tuple" ("_position" par)
###                             ("_tuple_args" ("_position" code)
###                               ("_tuple_arg" ("_position" l0))))))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.All_binder" ("_position" Q)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>AssocLists.lookup" ("_position" Anno)
###                             ("_position" l))
###                           ("_applC" ("_position" Some) ("_position" Q)))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" A)
###                               ("_cargs" ("_position" s0) ("_position" s)))
###                             ("_applC" ("_position" Q)
###                               ("_cargs" ("_position" s0)
###                                 ("_position" s)))))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" s0) ("_position" s))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" A)
###                           ("_cargs" ("_position" s0) ("_position" s)))
###                         ("_applC" ("_position" I)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs" ("_position" s)
###                               ("_applC" ("_position" heap)
###                                 ("_position" s)))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" MST)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" m')))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" T)
###                             ("_tuple_args" ("_position" MI)
###                               ("_tuple_arg" ("_position" Anno2))))))
###                       ("_applC" ("_position" mbody_is)
###                         ("_cargs" ("_position" D)
###                           ("_cargs" ("_position" m') ("_position" M'))))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" M')
###                       ("_tuple" ("_position" par)
###                         ("_tuple_args" ("_position" code)
###                           ("_tuple_arg" ("_position" l0)))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder" ("_position" Q)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>AssocLists.lookup" ("_position" Anno)
###                               ("_position" l))
###                             ("_applC" ("_position" Some) ("_position" Q)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0) ("_position" s)))
###                               ("_applC" ("_position" Q)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" I)
###                             ("_cargs" ("_position" s0)
###                               ("_cargs" ("_position" s)
###                                 ("_applC" ("_position" heap)
###                                   ("_position" s))))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>AssocLists.lookup" ("_position" MST)
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" m')))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno2)))))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" mbody_is)
###                       ("_cargs" ("_position" D)
###                         ("_cargs" ("_position" m') ("_position" M'))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" M')
###                         ("_tuple" ("_position" par)
###                           ("_tuple_args" ("_position" code)
###                             ("_tuple_arg" ("_position" l0)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder" ("_position" Q)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>AssocLists.lookup"
###                                 ("_position" Anno) ("_position" l))
###                               ("_applC" ("_position" Some) ("_position" Q)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" s0) ("_position" s))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" A)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))
###                                 ("_applC" ("_position" Q)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" A)
###                               ("_cargs" ("_position" s0) ("_position" s)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_applC" ("_position" heap)
###                                     ("_position" s)))))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T1)
###                         ("_tuple_args" ("_position" MI1)
###                           ("_tuple_arg" ("_position" Anno))))))
###                   ("_position" MST)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" D) ("_tuple_arg" ("_position" m')))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T)
###                       ("_tuple_args" ("_position" MI)
###                         ("_tuple_arg" ("_position" Anno2))))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" mbody_is)
###                     ("_cargs" ("_position" D)
###                       ("_cargs" ("_position" m') ("_position" M'))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq" ("_position" M')
###                       ("_tuple" ("_position" par)
###                         ("_tuple_args" ("_position" code)
###                           ("_tuple_arg" ("_position" l0)))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.All_binder" ("_position" Q)
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>AssocLists.lookup" ("_position" Anno)
###                               ("_position" l))
###                             ("_applC" ("_position" Some) ("_position" Q)))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0) ("_position" s)))
###                               ("_applC" ("_position" Q)
###                                 ("_cargs" ("_position" s0)
###                                   ("_position" s)))))))
###                       ("\<^const>HOL.All_binder"
###                         ("_idts" ("_position" s0) ("_position" s))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" A)
###                             ("_cargs" ("_position" s0) ("_position" s)))
###                           ("_applC" ("_position" I)
###                             ("_cargs" ("_position" s0)
###                               ("_cargs" ("_position" s)
###                                 ("_applC" ("_position" heap)
###                                   ("_position" s))))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" m')))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno2))))))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" mbody_is)
###                         ("_cargs" ("_position" D)
###                           ("_cargs" ("_position" m') ("_position" M'))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" M')
###                           ("_tuple" ("_position" par)
###                             ("_tuple_args" ("_position" code)
###                               ("_tuple_arg" ("_position" l0)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder" ("_position" Q)
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>AssocLists.lookup"
###                                   ("_position" Anno) ("_position" l))
###                                 ("_applC" ("_position" Some)
###                                   ("_position" Q)))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" s0) ("_position" s))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))))))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0) ("_position" s)))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" s))))))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T1)
###                     ("_tuple_args" ("_position" MI1)
###                       ("_tuple_arg" ("_position" Anno)))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" D)
###                       ("_tuple_arg" ("_position" m')))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno2))))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" mbody_is)
###                       ("_cargs" ("_position" D)
###                         ("_cargs" ("_position" m') ("_position" M'))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" M')
###                         ("_tuple" ("_position" par)
###                           ("_tuple_args" ("_position" code)
###                             ("_tuple_arg" ("_position" l0)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder" ("_position" Q)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>AssocLists.lookup"
###                                 ("_position" Anno) ("_position" l))
###                               ("_applC" ("_position" Some) ("_position" Q)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" s0) ("_position" s))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" A)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))
###                                 ("_applC" ("_position" Q)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" A)
###                               ("_cargs" ("_position" s0) ("_position" s)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_applC" ("_position" heap)
###                                     ("_position" s))))))))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0)
###                   ("_idts" ("_position" ops1)
###                     ("_idts" ("_position" ops2)
###                       ("_idts" ("_position" S)
###                         ("_idts" ("_position" R)
###                           ("_idts" ("_position" h) ("_position" t)))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" ops1)
###                       ("_tuple_args" ("_position" par)
###                         ("_tuple_args" ("_position" R)
###                           ("_tuple_arg" ("_position" ops2)))))
###                     ("_position" Frame))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0)
###                         ("_tuple" ("_position" ops1)
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MI)
###                         ("_cargs"
###                           ("_tuple" ("_position" R)
###                             ("_tuple_arg" ("_position" h)))
###                           ("_position" t)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs"
###                             ("_tuple" ("_position" ops1)
###                               ("_tuple_args" ("_position" S)
###                                 ("_tuple_arg" ("_position" h))))
###                             ("_position" t)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>AssocLists.lookup" ("_position" MST)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" T1)
###                     ("_tuple_args" ("_position" MI1)
###                       ("_tuple_arg" ("_position" Anno))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>AssocLists.lookup" ("_position" MST)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" m')))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" T)
###                           ("_tuple_args" ("_position" MI)
###                             ("_tuple_arg" ("_position" Anno2))))))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" mbody_is)
###                         ("_cargs" ("_position" D)
###                           ("_cargs" ("_position" m') ("_position" M'))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" M')
###                           ("_tuple" ("_position" par)
###                             ("_tuple_args" ("_position" code)
###                               ("_tuple_arg" ("_position" l0)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.All_binder" ("_position" Q)
###                             ("\<^const>HOL.implies"
###                               ("\<^const>HOL.eq"
###                                 ("\<^const>AssocLists.lookup"
###                                   ("_position" Anno) ("_position" l))
###                                 ("_applC" ("_position" Some)
###                                   ("_position" Q)))
###                               ("\<^const>HOL.All_binder"
###                                 ("_idts" ("_position" s0) ("_position" s))
###                                 ("\<^const>HOL.implies"
###                                   ("_applC" ("_position" A)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))
###                                   ("_applC" ("_position" Q)
###                                     ("_cargs" ("_position" s0)
### ("_position" s)))))))
###                           ("\<^const>HOL.All_binder"
###                             ("_idts" ("_position" s0) ("_position" s))
###                             ("\<^const>HOL.implies"
###                               ("_applC" ("_position" A)
###                                 ("_cargs" ("_position" s0) ("_position" s)))
###                               ("_applC" ("_position" I)
###                                 ("_cargs" ("_position" s0)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" heap)
### ("_position" s))))))))))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s0)
###                     ("_idts" ("_position" ops1)
###                       ("_idts" ("_position" ops2)
###                         ("_idts" ("_position" S)
###                           ("_idts" ("_position" R)
###                             ("_idts" ("_position" h) ("_position" t)))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" par)
###                           ("_tuple_args" ("_position" R)
###                             ("_tuple_arg" ("_position" ops2)))))
###                       ("_position" Frame))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s0)
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" MI)
###                           ("_cargs"
###                             ("_tuple" ("_position" R)
###                               ("_tuple_arg" ("_position" h)))
###                             ("_position" t)))
###                         ("_applC" ("_position" I)
###                           ("_cargs" ("_position" s0)
###                             ("_cargs"
###                               ("_tuple" ("_position" ops1)
###                                 ("_tuple_args" ("_position" S)
###                                   ("_tuple_arg" ("_position" h))))
###                               ("_position" t))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m))))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" T1)
###                   ("_tuple_args" ("_position" MI1)
###                     ("_tuple_arg" ("_position" Anno))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>AssocLists.lookup" ("_position" MST)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_tuple" ("_position" D)
###                       ("_tuple_arg" ("_position" m')))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno2))))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" mbody_is)
###                       ("_cargs" ("_position" D)
###                         ("_cargs" ("_position" m') ("_position" M'))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" M')
###                         ("_tuple" ("_position" par)
###                           ("_tuple_args" ("_position" code)
###                             ("_tuple_arg" ("_position" l0)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder" ("_position" Q)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>AssocLists.lookup"
###                                 ("_position" Anno) ("_position" l))
###                               ("_applC" ("_position" Some) ("_position" Q)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" s0) ("_position" s))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" A)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))
###                                 ("_applC" ("_position" Q)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" A)
###                               ("_cargs" ("_position" s0) ("_position" s)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_applC" ("_position" heap)
###                                     ("_position" s))))))))))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" s0)
###                   ("_idts" ("_position" ops1)
###                     ("_idts" ("_position" ops2)
###                       ("_idts" ("_position" S)
###                         ("_idts" ("_position" R)
###                           ("_idts" ("_position" h) ("_position" t)))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" ops1)
###                       ("_tuple_args" ("_position" par)
###                         ("_tuple_args" ("_position" R)
###                           ("_tuple_arg" ("_position" ops2)))))
###                     ("_position" Frame))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s0)
###                         ("_tuple" ("_position" ops1)
###                           ("_tuple_args" ("_position" S)
###                             ("_tuple_arg" ("_position" h))))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" MI)
###                         ("_cargs"
###                           ("_tuple" ("_position" R)
###                             ("_tuple_arg" ("_position" h)))
###                           ("_position" t)))
###                       ("_applC" ("_position" I)
###                         ("_cargs" ("_position" s0)
###                           ("_cargs"
###                             ("_tuple" ("_position" ops1)
###                               ("_tuple_args" ("_position" S)
###                                 ("_tuple_arg" ("_position" h))))
###                             ("_position" t)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" INVS_SC)
###       ("_cargs" ("_position" C)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" D)
###               ("_cargs" ("_position" m')
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" MI)
###                     ("_cargs" ("_position" Anno)
###                       ("_cargs" ("_position" Anno2)
###                         ("_cargs" ("_position" M')
###                           ("_cargs" ("_position" A)
###                             ("_position" I)))))))))))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" M)
###         ("_idts" ("_position" par)
###           ("_idts" ("_position" code)
###             ("_idts" ("_position" l0)
###               ("_idts" ("_position" T1) ("_position" MI1))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" mbody_is)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" m) ("_position" M))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_ins)
###               ("_cargs" ("_position" M) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" invokeS)
###                 ("_cargs" ("_position" D) ("_position" m')))))
###           ("\<^const>HOL.conj"
###             ("\<^const>AssocLists.lookup" ("_position" MST)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" T1)
###                       ("_tuple_args" ("_position" MI1)
###                         ("_tuple_arg" ("_position" Anno))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>AssocLists.lookup" ("_position" MST)
###                       ("_tuple" ("_position" D)
###                         ("_tuple_arg" ("_position" m'))))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" T)
###                         ("_tuple_args" ("_position" MI)
###                           ("_tuple_arg" ("_position" Anno2))))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" mbody_is)
###                       ("_cargs" ("_position" D)
###                         ("_cargs" ("_position" m') ("_position" M'))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq" ("_position" M')
###                         ("_tuple" ("_position" par)
###                           ("_tuple_args" ("_position" code)
###                             ("_tuple_arg" ("_position" l0)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.All_binder" ("_position" Q)
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq"
###                               ("\<^const>AssocLists.lookup"
###                                 ("_position" Anno) ("_position" l))
###                               ("_applC" ("_position" Some) ("_position" Q)))
###                             ("\<^const>HOL.All_binder"
###                               ("_idts" ("_position" s0) ("_position" s))
###                               ("\<^const>HOL.implies"
###                                 ("_applC" ("_position" A)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))
###                                 ("_applC" ("_position" Q)
###                                   ("_cargs" ("_position" s0)
###                                     ("_position" s)))))))
###                         ("\<^const>HOL.All_binder"
###                           ("_idts" ("_position" s0) ("_position" s))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" A)
###                               ("_cargs" ("_position" s0) ("_position" s)))
###                             ("_applC" ("_position" I)
###                               ("_cargs" ("_position" s0)
###                                 ("_cargs" ("_position" s)
###                                   ("_applC" ("_position" heap)
###                                     ("_position" s)))))))))))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s0)
###                 ("_idts" ("_position" ops1)
###                   ("_idts" ("_position" ops2)
###                     ("_idts" ("_position" S)
###                       ("_idts" ("_position" R)
###                         ("_idts" ("_position" h) ("_position" t)))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" ops1)
###                     ("_tuple_args" ("_position" par)
###                       ("_tuple_args" ("_position" R)
###                         ("_tuple_arg" ("_position" ops2)))))
###                   ("_position" Frame))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" A)
###                     ("_cargs" ("_position" s0)
###                       ("_tuple" ("_position" ops1)
###                         ("_tuple_args" ("_position" S)
###                           ("_tuple_arg" ("_position" h))))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" MI)
###                       ("_cargs"
###                         ("_tuple" ("_position" R)
###                           ("_tuple_arg" ("_position" h)))
###                         ("_position" t)))
###                     ("_applC" ("_position" I)
###                       ("_cargs" ("_position" s0)
###                         ("_cargs"
###                           ("_tuple" ("_position" ops1)
###                             ("_tuple_args" ("_position" S)
###                               ("_tuple_arg" ("_position" h))))
###                           ("_position" t))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Sound"
### 1.022s elapsed time, 1.448s cpu time, 0.164s GC time
Loading theory "Draft.SoundMoreTemplates"
val templateLemmas =
   [("Sound.MST_valid_validn", "MST_valid ==> MST_validn ?K",
     template_implication
      ([template_predicate (template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MST", "VP_G ?G ==> MST_valid",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("Sound.VPG_MSTn", "VP_G ?G ==> MST_validn ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.G_valid_validn", "G_valid ?G ==> G_validn ?K ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sound.G_validn_valid", "ALL K. G_validn K ?G ==> G_valid ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MST_G", "[| VP_G ?G; MST_valid |] ==> G_valid ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate (template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sound.VPG_MSTn_Gn", "[| VP_G ?G; MST_validn ?k |] ==> G_validn ?k ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Sound.MST_validn_lower",
     "[| MST_validn ?K; ?L <= ?K |] ==> MST_validn ?L",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Sound.G_validn_lower",
     "[| G_validn ?K ?G; ?L <= ?K |] ==> G_validn ?L ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Sound.INVS_soundK_all",
     "INVS_soundK ?K ?G ?C ?m ?l ?D ?m' ?T ?MI ?Anno ?Anno2.0 ?M' ?A ?B ?I",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 0, template_var 14),
                                     template_var 13),
                                   template_var 12),
                                 template_var 11),
                               template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)
         )),
    ("Sound.valid_validn",
     " \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ==>
      \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.validn_valid",
     "ALL K.
         \<Turnstile>\<^sub>K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I  ==>
       \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sound.validn_lower",
     "[| \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ;
         ?L <= ?K |]
      ==> \<Turnstile>\<^sub>?L \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.SOUND_in_CTXT",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         G_valid ?G; MST_valid |]
      ==>  \<Turnstile> \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_app
                           (template_app (template_hole 5, template_var 2),
                            template_app
                             (template_app
                               (template_hole 4, template_var 1),
                              template_var 0)))))))),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_predicate (template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sound.SOUND_K",
     "[| ?G \<rhd> \<lbrace> ?A \<rbrace> ?C,?m,?l \<lbrace> ?B \<rbrace> ?I;
         G_validn ?K ?G; MST_validn ?K |]
      ==> \<Turnstile>\<^sub>Suc ?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_app
                   (template_app (template_hole 10, template_var 7),
                    template_app
                     (template_app (template_hole 9, template_var 6),
                      template_app
                       (template_app (template_hole 8, template_var 5),
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_app
                             (template_app
                               (template_hole 5, template_var 2),
                              template_var 1)))))))),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 7)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sound.SOUND_Aux",
     "[| (?b, ?G, ?C, ?m, ?l, ?A, ?B, ?I) : SP_Judgement; G_validn ?K ?G;
         MST_validn ?K |]
      ==> (?b -->
           \<Turnstile>\<^sub>?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I ) &
          (~ ?b -->
           \<Turnstile>\<^sub>Suc ?K \<lbrace> ?A \<rbrace> ?C , ?m , ?l \<lbrace> ?B \<rbrace> ?I )",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 8),
                  template_app
                   (template_app (template_hole 13, template_var 7),
                    template_app
                     (template_app (template_hole 12, template_var 6),
                      template_app
                       (template_app (template_hole 11, template_var 5),
                        template_app
                         (template_app (template_hole 10, template_var 4),
                          template_app
                           (template_app (template_hole 9, template_var 3),
                            template_app
                             (template_app
                               (template_hole 8, template_var 2),
                              template_var 1)))))))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 7)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 0),
                             template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 8)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 0, template_var 0)),
                           template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.SoundMoreTemplates"
### 0.349s elapsed time, 0.545s cpu time, 0.085s GC time
val it = (): unit
