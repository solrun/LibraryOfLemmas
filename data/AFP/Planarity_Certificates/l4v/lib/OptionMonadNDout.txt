Loading theory "Draft.Lib" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.OptionMonadND" via "Draft.OptionMonad")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  delete :: "'a => 'a list => 'a list"
consts
  find :: "('a => bool) => 'a list => 'a option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  theRight :: "'a + 'b => 'b"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.579s cpu time, 0.040s GC time
consts
  theLeft :: "'a + 'b => 'a"
Loading theory "HOL-Library.Tree" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Lib"
### 0.172s elapsed time, 0.709s cpu time, 0.040s GC time
Loading theory "Draft.NonDetMonad" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.OptionMonadND" via "Draft.NonDetMonadLemmas")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 1.018s cpu time, 0.040s GC time
Loading theory "Draft.OptionMonad" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.OptionMonadND")
### theory "HOL-Library.Nat_Bijection"
### 0.363s elapsed time, 1.455s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "option_while'p"
  Proving monotonicity ...
consts
  filterM ::
    "('a => 's => (bool * 's) set * bool)
     => 'a list => 's => ('a list * 's) set * bool"
### theory "Draft.OptionMonad"
### 0.300s elapsed time, 1.175s cpu time, 0.142s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "whileLoop_resultsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "whileLoop_terminates"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.NonDetMonad"
### 0.707s elapsed time, 2.789s cpu time, 0.250s GC time
Loading theory "Draft.NonDetMonadLemmas" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.OptionMonadND")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.NonDetMonadLemmas"
### 0.250s elapsed time, 0.976s cpu time, 0.126s GC time
Loading theory "Draft.OptionMonadND" (required by "Draft.OptionMonadNDMoreTemplates")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.847s elapsed time, 3.344s cpu time, 0.300s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.994s elapsed time, 3.622s cpu time, 0.799s GC time
### theory "Draft.OptionMonadND"
### 0.461s elapsed time, 1.476s cpu time, 0.623s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.964s elapsed time, 5.974s cpu time, 1.072s GC time
Loading theory "Draft.Templates" (required by "Draft.OptionMonadNDMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.113s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OptionMonadNDMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.459s elapsed time, 0.464s cpu time, 0.000s GC time
Loading theory "Draft.OptionMonadNDMoreTemplates"
val templateLemmas =
   [("OptionMonadND.omonad_simps", "assert_opt (Some ?x) = return ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OptionMonadND.gets_the_return", "gets_the (oreturn ?x) = return ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OptionMonadND.gets_the_returnOk",
     "gets_the (oreturnOk ?x) = returnOk ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OptionMonadND.gets_the_throwError",
     "gets_the (othrow ?e) = throwError ?e",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OptionMonadND.gets_the_assert", "gets_the (oassert ?P) = assert ?P",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("OptionMonadND.monad_simps", "gets ?f = (%s. ({(?f s, s)}, False))",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("OptionMonadND.gets_the_obind",
     "gets_the (?f |>> ?g) = do x <- gets_the ?f;
                                gets_the (?g x)
                             od",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("OptionMonadND.gets_the_opt_map",
     "gets_the (?f |> ?g) = do x <- gets_the ?f;
                               assert_opt (?g x)
                            od",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("OptionMonadND.gets_the_whileLoop",
     "whileLoop ?C
        (%a. gets_the (?B a))
       ?r =
      gets_the (owhile ?C ?B ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("OptionMonadND.gets_the_opt_o",
     "gets_the (?f |> Some o ?g) = do x <- gets_the ?f;
return (?g x)
                                   od",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("OptionMonadND.gets_the_conv",
     "gets_the ?B ?s =
      (case ?B ?s of None => ({}, True) | Some r' => ({(r', ?s)}, False))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3)),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("OptionMonadND.gets_the_loop_terminates",
     "whileLoop_terminates ?C (%a. gets_the (?B a)) ?r ?s =
      (EX rs'. (Some ?r, rs') : option_while' (%a. ?C a ?s) (%a. ?B a ?s))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3), t_empty),
           template_var 1),
         template_var 0),
       template_app (template_hole 4, t_empty)))]:
   (string * thm * template) list
### theory "Draft.OptionMonadNDMoreTemplates"
### 0.334s elapsed time, 0.476s cpu time, 0.063s GC time
val it = (): unit
