Loading theory "Draft.Lib" (required by "Draft.LibMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  delete :: "'a => 'a list => 'a list"
consts
  find :: "('a => bool) => 'a list => 'a option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  theRight :: "'a + 'b => 'b"
consts
  theLeft :: "'a + 'b => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.587s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Lib"
### 0.159s elapsed time, 0.655s cpu time, 0.044s GC time
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.764s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.362s elapsed time, 1.269s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.746s elapsed time, 2.299s cpu time, 0.335s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.758s elapsed time, 2.146s cpu time, 0.232s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.838s elapsed time, 4.112s cpu time, 0.911s GC time
Loading theory "Draft.Templates" (required by "Draft.LibMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.118s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LibMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.461s cpu time, 0.000s GC time
Loading theory "Draft.LibMoreTemplates"
val templateLemmas =
   [("Lib.linorder_min_same2", "(min ?x ?y = ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Lib.linorder_min_same1", "(min ?y ?x = ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lib.tl_map_simp", "tl (map ?a ?b) = map ?a (tl ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lib.wf_sum_wf", "[| wf ?r; wf ?r' |] ==> wf (wf_sum ?divisor ?r ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Lib.hd_map_simp", "?b ~= [] ==> hd (map ?a ?b) = ?a (hd ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Lib.fun_app_cong", "?f ?x = ?f' ?x' ==> (?f $ ?x) = (?f' $ ?x')",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lib.iff_impI", "(?P ==> ?Q = ?R) ==> (?P --> ?Q) = (?P --> ?R)",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lib.Collect_eq", "({x. ?P x} = {x. ?Q x}) = (ALL x. ?P x = ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Lib.fun_app_apply_cong",
     "?f ?x ?y = ?f' ?x' ?y' ==> (?f $ ?x) ?y = (?f' $ ?x') ?y'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 5, template_var 4), template_var 3),
          template_app
           (template_app (template_var 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Lib.split_paired_Ball",
     "(ALL x:?A. ?P x) = (ALL x y. (x, y) : ?A --> ?P (x, y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), t_empty),
       template_app (template_hole 4, t_empty))),
    ("Lib.split_paired_Bex",
     "(EX x:?A. ?P x) = (EX x y. (x, y) : ?A & ?P (x, y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), t_empty),
       template_app (template_hole 4, t_empty))),
    ("Lib.tranclD2",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R^* & (z, ?y) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lib.case_prod_apply_cong",
     "?f (fst ?p) (snd ?p) ?s = ?f' (fst ?p') (snd ?p') ?s' ==>
      (case ?p of (x, xa) => ?f x xa) ?s =
      (case ?p' of (x, xa) => ?f' x xa) ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_var 5,
                template_app (template_hole 5, template_var 4)),
              template_app (template_hole 4, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Lib.if_apply_cong",
     "[| ?P = ?P'; ?x = ?x'; ?P' ==> ?f ?x' = ?f' ?x';
         ~ ?P' ==> ?g ?x' = ?g' ?x' |]
      ==> (if ?P then ?f else ?g) ?x = (if ?P' then ?f' else ?g') ?x'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_implication
         ([template_predicate (template_var 6)],
          template_equation
           (template_app (template_var 3, template_var 4),
            template_app (template_var 2, template_var 4))),
        template_implication
         ([template_negation (template_predicate (template_var 6))],
          template_equation
           (template_app (template_var 1, template_var 4),
            template_app (template_var 0, template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 3),
             template_var 1),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.LibMoreTemplates"
### 0.317s elapsed time, 0.457s cpu time, 0.057s GC time
val it = (): unit
