Loading theory "Draft.WP" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP")
Loading theory "Draft.Lib" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.OptionMonad")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  delete :: "'a => 'a list => 'a list"
consts
  find :: "('a => bool) => 'a list => 'a option"
consts
  theRight :: "'a + 'b => 'b"
consts
  theLeft :: "'a + 'b => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.621s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Lib"
### 0.198s elapsed time, 0.813s cpu time, 0.037s GC time
Loading theory "Draft.NonDetMonad" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.NonDetMonadLemmas")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
signature WP =
  sig
    val apply_once_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_once_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> wp_rules
    val derived_rule: thm -> thm -> thm list
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_rules: Proof.context -> thm list -> wp_rules
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val warn_unused: bool Config.T
    val wp_add: attribute
    val wp_del: attribute
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPre:
  sig
    structure WPData: GENERIC_DATA
    val accum_last_occurence: (thm * 'a) list -> (thm * 'a list) list
    val accum_last_occurence':
       (thm * 'a) list ->
         'a list Termtab.table -> (thm * 'a list) list * unit Termtab.table
    val add_comb:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_extra_rule: 'a -> 'a list ref -> unit
    val add_rule:
       thm ->
         {combs: 'a,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: 'b,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: 'b,
            trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
    val add_rule_inner:
       (theory -> term -> term) ->
         thm ->
           (int * thm) Net.net * int * (int * thm) list ->
             (int * thm) Net.net * int * (int * thm) list
    val add_split:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val app:
       (Proof.context -> Proof.context) * attribute ->
         thm list -> Context.generic -> thm list * Context.generic
    val append_used_rule: 'a -> 'a list ref -> unit
    val apply_once_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_once_tac:
       bool ->
         Proof.context -> thm list -> thm list ref -> thm -> thm Seq.seq
    val apply_rules_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val clear_rules:
       {combs: 'a, rules: 'b, splits: 'c, trips: 'd, unsafe_rules: 'e} ->
         {combs: 'a,
          rules: 'f Net.net * int * 'g list,
          splits: 'c, trips: 'd, unsafe_rules: 'e}
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> WPData.T
    val del_comb:
       thm ->
         {combs: thm list,
          rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: thm list,
            rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
    val del_rule:
       thm ->
         {combs: 'a,
          rules: ('b * thm) Net.net * 'b * ('b * thm) list,
          splits: 'c,
          trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
           ->
           {combs: 'a,
            rules: ('b * thm) Net.net * 'b * ('b * thm) list,
            splits: 'c,
            trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
    val del_rule_inner:
       (theory -> term -> term) ->
         thm ->
           ('a * thm) Net.net * 'a * ('a * thm) list ->
             ('a * thm) Net.net * 'a * ('a * thm) list
    val del_split:
       thm ->
         {combs: 'a,
          rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
    val del_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val del_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val derived_rule: thm -> thm -> thm list
    val dest_rules: (int * 'a) Net.net * 'b * (int * 'a) list -> 'a list
    val flat_last_occurence: thm list -> thm list
    val gen_att: (thm -> WPData.T -> WPData.T) -> attribute
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_key: (theory -> term -> term) -> thm -> term option
    val get_rules:
       Proof.context ->
         thm list ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val has_colon: Token.T list -> bool
    val if_colon:
       ('a * Token.T list -> 'b) ->
         ('a * Token.T list -> 'b) -> 'a * Token.T list -> 'b
    val mk_rules:
       (theory -> term -> term) ->
         thm list -> (int * thm) Net.net * int * (int * thm) list
    val mk_trip_conv: thm list -> theory -> term -> term
    val no_rules: 'a Net.net * int * 'b list
    val pretty_rule: Proof.context -> thm -> string
    val resolve_ruleset_tac:
       Proof.context ->
         {combs: thm list,
          rules: (int * thm) Net.net * 'a * ('b * thm) list,
          splits: thm list,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           -> thm list ref -> int -> thm -> thm Seq.seq
    val rules_merge:
       {combs: thm list,
        rules: (int * thm) Net.net * 'a * (int * thm) list,
        splits: thm list, trips: thm list * 'b, unsafe_rules: thm list}
       *
       {combs: thm list,
        rules: (int * thm) Net.net * 'c * (int * thm) list,
        splits: thm list, trips: thm list * 'd, unsafe_rules: thm list}
         ->
         {combs: thm list,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: thm list,
          trips: thm list * (theory -> term -> term),
          unsafe_rules: thm list}
    val section:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val sections:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list list * (Context.generic * Token.T list)
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val thms:
       (Token.T list -> 'a * Token.T list) list ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val trace_used_thms:
       bool -> thm list ref -> Proof.context -> unit Seq.seq
    val trip_add: attribute
    val trip_del: attribute
    val warn_unsafe_thms: thm list -> int -> Proof.context -> thm -> unit
    val warn_unused: bool Config.T
    val warn_unused_thms:
       Proof.context -> thm list -> thm list ref -> thm list ref -> unit
    val wp_add: attribute
    val wp_del: attribute
    val wp_modifiers:
       thm list ref ->
         (Token.T list ->
            ((Proof.context -> Proof.context) *
             (Context.generic * thm -> Context.generic option * thm option))
            *
            Token.T list
         )
         list
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPreInst: WP
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.WP"
### 0.229s elapsed time, 0.926s cpu time, 0.037s GC time
Loading theory "Draft.OptionMonad" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.307s cpu time, 0.092s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.273s elapsed time, 1.069s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "option_while'p"
  Proving monotonicity ...
consts
  filterM ::
    "('a => 's => (bool * 's) set * bool)
     => 'a list => 's => ('a list * 's) set * bool"
Proofs for inductive predicate(s) "whileLoop_resultsp"
  Proving monotonicity ...
### theory "Draft.OptionMonad"
### 0.431s elapsed time, 1.690s cpu time, 0.196s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "whileLoop_terminates"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.NonDetMonad"
### 0.713s elapsed time, 2.800s cpu time, 0.250s GC time
Loading theory "Draft.NonDetMonadLemmas" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.NonDetMonadLemmas"
### 0.416s elapsed time, 1.482s cpu time, 0.539s GC time
Loading theory "Draft.OptionMonadND" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.OptionMonadWP")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.032s elapsed time, 3.914s cpu time, 0.734s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OptionMonadND"
### 0.298s elapsed time, 0.949s cpu time, 0.147s GC time
Loading theory "Draft.OptionMonadWP" (required by "Draft.OptionMonadWPMoreTemplates")
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.527s cpu time, 0.740s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OptionMonadWP"
### 0.308s elapsed time, 0.674s cpu time, 0.061s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.934s elapsed time, 5.460s cpu time, 0.911s GC time
Loading theory "Draft.Templates" (required by "Draft.OptionMonadWPMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OptionMonadWPMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.467s elapsed time, 0.504s cpu time, 0.045s GC time
Loading theory "Draft.OptionMonadWPMoreTemplates"
val templateLemmas =
   [("OptionMonadWP.no_ofail_oreturn", "no_ofail (%_. True) (oreturn ?x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("OptionMonadWP.no_ofail_ogets", "no_ofail (%_. True) (ogets ?f)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("OptionMonadWP.ofail_wp", "ovalid (%_. True) ofail ?Q",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)
         )),
    ("OptionMonadWP.ofail_NF_wp", "ovalidNF (%_. False) ofail ?Q",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)
         )),
    ("OptionMonadWP.no_ofail_oguard", "no_ofail ?f (oguard ?f)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("OptionMonadWP.oreturn_wp", "ovalid (?P ?x) (oreturn ?x) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app (template_hole 0, template_var 0)),
           template_var 1)
         )),
    ("OptionMonadWP.oreturn_NF_wp", "ovalidNF (?P ?x) (oreturn ?x) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app (template_hole 0, template_var 0)),
           template_var 1)
         )),
    ("OptionMonadWP.oskip_wp", "ovalid (?P ()) oskip ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)
         )),
    ("OptionMonadWP.oskip_NF_wp", "ovalidNF (?P ()) oskip ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)
         )),
    ("OptionMonadWP.ogets_wp", "ovalid (%s. ?P (?f s) s) (ogets ?f) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)),
           template_var 1)
         )),
    ("OptionMonadWP.ogets_NF_wp",
     "ovalidNF (%s. ?P (?f s) s) (ogets ?f) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)),
           template_var 1)
         )),
    ("OptionMonadWP.no_ofail_K_bind",
     "no_ofail ?P ?f ==> no_ofail ?P (K_bind ?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OptionMonadWP.owhile_add_inv",
     "owhile ?C ?B ?x = owhile_inv ?C ?B ?x ?I ?M",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("OptionMonadWP.oguard_wp",
     "ovalid (%s. ?f s --> ?P () s) (oguard ?f) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("OptionMonadWP.oguard_NF_wp",
     "ovalidNF (%s. ?f s & ?P () s) (oguard ?f) ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("OptionMonadWP.ovalid_K_bind_wp",
     "ovalid ?P ?f ?Q ==> ovalid ?P (K_bind ?f ?x) ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalidNF_K_bind_wp",
     "ovalidNF ?P ?f ?Q ==> ovalidNF ?P (K_bind ?f ?x) ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("OptionMonadWP.no_ofail_is_triple",
     "no_ofail ?P ?f = triple_judgement ?P ?f (%s f. f s ~= None)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         t_empty))),
    ("OptionMonadWP.ovalid_is_triple",
     "ovalid ?P ?f ?Q =
      triple_judgement ?P ?f (ovalid_property ?Q (%s f. f s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("OptionMonadWP.ovalidNF_is_triple",
     "ovalidNF ?P ?f ?Q =
      triple_judgement ?P ?f (ovalidNF_property ?Q (%s f. f s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("OptionMonadWP.no_ofail_assume_pre",
     "(!!s. ?P s ==> no_ofail ?P ?f) ==> no_ofail ?P ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("OptionMonadWP.no_ofail_grab_asm",
     "(?G ==> no_ofail ?P ?f) ==> no_ofail (%s. ?G & ?P s) ?f",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("OptionMonadWP.ovalidNF_combine",
     "[| ovalid ?P ?f ?Q; no_ofail ?P ?f |] ==> ovalidNF ?P ?f ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.ovalid_assume_pre",
     "(!!s. ?P s ==> ovalid ?P ?f ?Q) ==> ovalid ?P ?f ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.ovalidNF_assume_pre",
     "(!!s. ?P s ==> ovalidNF ?P ?f ?Q) ==> ovalidNF ?P ?f ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.ovalid_grab_asm",
     "(?G ==> ovalid ?P ?f ?Q) ==> ovalid (%s. ?G & ?P s) ?f ?Q",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.ovalidNF_grab_asm",
     "(?G ==> ovalidNF ?P ?f ?Q) ==> ovalidNF (%s. ?G & ?P s) ?f ?Q",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.no_ofail_wp_comb2",
     "[| no_ofail ?P ?f; no_ofail ?P' ?f |]
      ==> no_ofail (%s. ?P s & ?P' s) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("OptionMonadWP.no_ofail_wp_comb1",
     "[| no_ofail ?P ?f; !!s. ?P' s ==> ?P s |] ==> no_ofail ?P' ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("OptionMonadWP.no_ofail_pre_imp",
     "[| !!s. ?P' s ==> ?P s; no_ofail ?P ?f |] ==> no_ofail ?P' ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("OptionMonadWP.ovalid_wp_comb2",
     "[| ovalid ?P ?f ?Q; !!s. ?P' s ==> ?P s |] ==> ovalid ?P' ?f ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalidNF_wp_comb2",
     "[| ovalidNF ?P ?f ?Q; !!s. ?P' s ==> ?P s |] ==> ovalidNF ?P' ?f ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalid_pre_imp",
     "[| !!s. ?P' s ==> ?P s; ovalid ?P ?f ?Q |] ==> ovalid ?P' ?f ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.ovalidNF_pre_imp",
     "[| !!s. ?P' s ==> ?P s; ovalidNF ?P ?f ?Q |] ==> ovalidNF ?P' ?f ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("OptionMonadWP.obind_wp",
     "[| !!r. ovalid (?R r) (?g r) ?Q; ovalid ?P ?f ?R |]
      ==> ovalid ?P (?f |>> ?g) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("OptionMonadWP.obind_NF_wp",
     "[| !!r. ovalidNF (?R r) (?g r) ?Q; ovalidNF ?P ?f ?R |]
      ==> ovalidNF ?P (?f |>> ?g) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("OptionMonadWP.no_ofail_ocondition",
     "[| no_ofail ?L ?l; no_ofail ?R ?r |]
      ==> no_ofail (%s. if ?C s then ?L s else ?R s) (ocondition ?C ?l ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 1))
           ))),
    ("OptionMonadWP.ovalid_post_imp",
     "[| !!r s. ?Q r s ==> ?Q' r s; ovalid ?P ?f ?Q |]
      ==> ovalid ?P ?f ?Q'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("OptionMonadWP.ovalidNF_post_imp",
     "[| !!r s. ?Q r s ==> ?Q' r s; ovalidNF ?P ?f ?Q |]
      ==> ovalidNF ?P ?f ?Q'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("OptionMonadWP.no_ofail_obind",
     "[| !!r. no_ofail (?P r) (?g r); no_ofail ?Q ?f; ovalid ?Q ?f ?P |]
      ==> no_ofail ?Q (?f |>> ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("OptionMonadWP.ocondition_wp",
     "[| ovalid ?L ?l ?Q; ovalid ?R ?r ?Q |]
      ==> ovalid (%s. if ?C s then ?L s else ?R s) (ocondition ?C ?l ?r)
           ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4),
                 template_var 1)),
             template_var 3)
           ))),
    ("OptionMonadWP.ocondition_NF_wp",
     "[| ovalidNF ?L ?l ?Q; ovalidNF ?R ?r ?Q |]
      ==> ovalidNF (%s. if ?C s then ?L s else ?R s) (ocondition ?C ?l ?r)
           ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4),
                 template_var 1)),
             template_var 3)
           ))),
    ("OptionMonadWP.ovalid_post_imp_assuming_pre",
     "[| !!r s. [| ?P s; ?Q r s |] ==> ?Q' r s; ovalid ?P ?f ?Q |]
      ==> ovalid ?P ?f ?Q'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalidNF_post_imp_assuming_pre",
     "[| !!r s. [| ?P s; ?Q r s |] ==> ?Q' r s; ovalidNF ?P ?f ?Q |]
      ==> ovalidNF ?P ?f ?Q'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalid_wp_comb3",
     "[| ovalid ?P ?f ?Q; ovalid ?P' ?f ?Q' |]
      ==> ovalid (%s. ?P s & ?P' s) ?f (%r s. ?Q r s & ?Q' r s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 3),
             t_empty)
           ))),
    ("OptionMonadWP.ovalidNF_wp_comb3",
     "[| ovalidNF ?P ?f ?Q; ovalidNF ?P' ?f ?Q' |]
      ==> ovalidNF (%s. ?P s & ?P' s) ?f (%r s. ?Q r s & ?Q' r s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 3),
             t_empty)
           ))),
    ("OptionMonadWP.ovalid_case_prod",
     "(!!x y. ovalid (?P x y) (?B x y) ?Q) ==>
      ovalid (case ?v of (x, y) => ?P x y) (case ?v of (x, y) => ?B x y)
       ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalid_NF_case_prod",
     "(!!x y. ovalidNF (?P x y) (?B x y) ?Q) ==>
      ovalidNF (case ?v of (x, y) => ?P x y) (case ?v of (x, y) => ?B x y)
       ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)),
             template_var 1)
           ))),
    ("OptionMonadWP.ovalid_wp_comb1",
     "[| ovalid ?P' ?f ?Q; ovalid ?P ?f ?Q'; !!s. ?P s ==> ?P' s |]
      ==> ovalid ?P ?f (%r s. ?Q r s & ?Q' r s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("OptionMonadWP.ovalidNF_wp_comb1",
     "[| ovalidNF ?P' ?f ?Q; ovalidNF ?P ?f ?Q'; !!s. ?P s ==> ?P' s |]
      ==> ovalidNF ?P ?f (%r s. ?Q r s & ?Q' r s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             t_empty)
           ))),
    ("OptionMonadWP.owhile_ovalid",
     "[| !!a. ovalid (%s. ?I a s & ?C a s) (?B a) ?I;
         !!a s. [| ?I a s; ~ ?C a s |] ==> ?Q a s |]
      ==> ovalid (?I ?a) (owhile_inv ?C ?B ?a ?I ?M) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_var 5, template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 1),
                   template_var 5),
                 template_var 0)),
             template_var 2)
           ))),
    ("OptionMonadWP.owhile_NF",
     "[| !!a. ovalidNF (%s. ?I a s & ?C a s) (?B a) ?I;
         !!a m.
            ovalid (%s. ?I a s & ?C a s & ?M a s = m) (?B a)
             (%r s. ?M r s < m);
         !!a s. [| ?I a s; ~ ?C a s |] ==> ?Q a s |]
      ==> ovalidNF (?I ?a) (owhile_inv ?C ?B ?a ?I ?M) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app (template_var 5, template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 0),
                   template_var 5),
                 template_var 2)),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.OptionMonadWPMoreTemplates"
### 0.337s elapsed time, 0.471s cpu time, 0.055s GC time
val it = (): unit
