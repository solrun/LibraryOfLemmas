   [("OptionMonad.obind_return", "?m |>> oreturn = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("OptionMonad.ofail_bind", "ofail |>> ?m = ofail",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("OptionMonad.in_ofail", "ofail ?s ~= Some ?v",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("OptionMonad.obind_fail", "?f |>> (%_. ofail) = ofail",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_hole 0)),
    ("OptionMonad.ocondition_K_false", "ocondition (%_. False) ?T ?F = ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("OptionMonad.ocondition_K_true", "ocondition (%_. True) ?T ?F = ?T",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("OptionMonad.oreturn_bind", "oreturn ?x |>> ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("OptionMonad.in_oassert_eq", "(oassert ?P ?s = Some ?v) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 2)),
    ("OptionMonad.ofailE", "ofail ?s = Some ?v ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("OptionMonad.in_oreturn", "(oreturn ?x ?s = Some ?v) = (?v = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_var 2))),
    ("OptionMonad.in_oreturnOk_eq",
     "(oreturnOk ?x ?s = Some ?v) = (?v = Inr ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("OptionMonad.in_othrow_eq", "(othrow ?e ?s = Some ?v) = (?v = Inl ?e)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("OptionMonad.option_while_simps",
     "~ ?C ?s ==> option_while ?C ?B ?s = Some ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("OptionMonad.ocondition_True",
     "(!!s. ?P s) ==> ocondition ?P ?L ?R = ?L",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 1))),
    ("OptionMonad.obind_assoc",
     "?m |>> ?f |>> ?g = ?m |>> (%x. ?f x |>> ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("OptionMonad.option_while'p_option_while'_eq",
     "option_while'p ?C ?B = (%x xa. (x, xa) : option_while' ?C ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("OptionMonad.ocondition_False",
     "(!!s. ~ ?P s) ==> ocondition ?P ?L ?R = ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("OptionMonad.oassertE",
     "[| oassert ?P ?s = Some ?v; ?P ==> ?Q |] ==> ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app (template_hole 0, template_var 1)),
        template_implication
         ([template_predicate (template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OptionMonad.owhile_unroll",
     "owhile ?C ?B ?r =
      ocondition (?C ?r) (?B ?r |>> owhile ?C ?B) (oreturn ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("OptionMonad.option_while_simps",
     "(Some ?s, ?ss') : option_while' ?C ?B ==>
      option_while ?C ?B ?s = ?ss'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_var 2))),
    ("OptionMonad.option_while_simps",
     "[| ?C ?s; ?B ?s = None |] ==> option_while ?C ?B ?s = None",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_equation
         (template_app (template_var 0, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_hole 1))),
    ("OptionMonad.oreturnE",
     "[| oreturn ?x ?s = Some ?v; ?v = ?x ==> ?P ?x |] ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_predicate
           (template_app (template_var 0, template_var 3)))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.option_while_simps",
     "[| ?C ?s; ?B ?s = Some ?s' |]
      ==> option_while ?C ?B ?s = option_while ?C ?B ?s'",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("OptionMonad.in_opt_map_eq",
     "((?f |> ?g) ?s = Some ?v) =
      (EX v'. ?f ?s = Some v' & ?g v' = Some ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OptionMonad.oreturn_bind_cong",
     "[| ?x = ?x'; ?m ?x' = ?m' ?x' |]
      ==> oreturn ?x |>> ?m = oreturn ?x' |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturnOkE",
     "[| oreturnOk ?x ?s = Some ?v; ?v = Inr ?x ==> ?P (Inr ?x) |]
      ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 3))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app (template_hole 0, template_var 3))
              ))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.othrowE",
     "[| othrow ?e ?s = Some ?v; ?v = Inl ?e ==> ?P (Inl ?e) |] ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 3))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app (template_hole 0, template_var 3))
              ))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.option_while'_inj",
     "[| (?s, ?s') : option_while' ?C ?B;
         (?s, ?s'') : option_while' ?C ?B |]
      ==> ?s' = ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_equation (template_var 3, template_var 0))),
    ("OptionMonad.in_obind_eq",
     "((?f |>> ?g) ?s = Some ?v) =
      (EX v'. ?f ?s = Some v' & ?g v' ?s = Some ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OptionMonad.option_while'_THE",
     "(Some ?r, ?sr') : option_while' ?C ?B ==>
      (THE s. (Some ?r, s) : option_while' ?C ?B) = ?sr'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 2))),
    ("OptionMonad.oassert_bind_cong",
     "[| ?P = ?P'; ?P' ==> ?m = ?m' |]
      ==> oassert ?P |>> ?m = oassert ?P' |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturn_bind_cong2",
     "[| ?x = ?x'; ?m ?x' = ?m' ?x' |]
      ==> (oreturn $ ?x) |>> ?m = (oreturn $ ?x') |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturn_bind_cong_apply",
     "[| ?x = ?x'; ?m ?x' ?s = ?m' ?x' ?s |]
      ==> (oreturn ?x |>> ?m) ?s = (oreturn ?x' |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 3), template_var 1),
          template_app
           (template_app (template_var 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.oreturn_bind_cong2_apply",
     "[| ?x = ?x'; ?m ?x' ?s = ?m' ?x' ?s |]
      ==> ((oreturn $ ?x) |>> ?m) ?s = ((oreturn $ ?x') |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 3), template_var 1),
          template_app
           (template_app (template_var 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.oassert_bind_cong_apply",
     "[| ?P = ?P'; ?P' ==> ?m () ?s = ?m' () ?s |]
      ==> (oassert ?P |>> ?m) ?s = (oassert ?P' |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_implication
         ([template_predicate (template_var 3)],
          template_equation
           (template_app
             (template_app (template_var 2, template_hole 2),
              template_var 1),
            template_app
             (template_app (template_var 0, template_hole 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.opt_mapE",
     "[| (?f |> ?g) ?s = Some ?v;
         !!v'. [| ?f ?s = Some v'; ?g v' = Some ?v |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.opt_map_cong",
     "[| ?f = ?f'; !!v s. ?f s = Some v ==> ?g v = ?g' v |]
      ==> ?f |> ?g = ?f' |> ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OptionMonad.obindE",
     "[| (?f |>> ?g) ?s = Some ?v;
         !!v'. [| ?f ?s = Some v'; ?g v' ?s = Some ?v |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.opt_bind_cong",
     "[| ?f = ?f'; !!v s. ?f' s = Some v ==> ?g v s = ?g' v s |]
      ==> ?f |>> ?g = ?f' |>> ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OptionMonad.opt_bind_cong_apply",
     "[| ?f ?s = ?f' ?s; !!v. ?f' ?s = Some v ==> ?g v ?s = ?g' v ?s |]
      ==> (?f |>> ?g) ?s = (?f' |>> ?g') ?s",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3)))),
    ("OptionMonad.option_while'_inj_step",
     "[| ?C ?s; ?B ?s = Some ?s'; (Some ?s, ?t) : option_while' ?C ?B;
         (Some ?s', ?t') : option_while' ?C ?B |]
      ==> ?t = ?t'",
     template_implication
      ([template_predicate (template_app (template_var 5, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 4),
          template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 3, template_var 4)),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 5),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 3, template_var 2)),
                  template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 5),
                template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("OptionMonad.ocondition_cong",
     "[| ?c = ?c'; !!s. ?c' s ==> ?l s = ?l' s;
         !!s. ~ ?c' s ==> ?r s = ?r' s |]
      ==> ocondition ?c ?l ?r = ocondition ?c' ?l' ?r'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("OptionMonad.option_while_rule",
     "[| option_while ?C ?B ?s = Some ?s'; ?I ?s;
         !!s s'. [| ?C s; ?I s; ?B s = Some s' |] ==> ?I s' |]
      ==> ?I ?s' & ~ ?C ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_var 4, template_var 1)))
           ))),
    ("OptionMonad.option_while'_term",
     "[| ?I ?r; wf ?M;
         !!r r'. [| ?I r; ?C r; ?B r = Some r' |] ==> (r', r) : ?M;
         !!r r'. [| ?I r; ?C r; ?B r = Some r' |] ==> ?I r';
         !!sr'. (Some ?r, sr') : option_while' ?C ?B ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_var 5, template_var 4)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.option_while_rule'",
     "[| option_while ?C ?B ?s = ?ss'; wf ?M; ?I (Some ?s);
         !!s s'. [| ?C s; ?I (Some s); ?B s = Some s' |] ==> (s', s) : ?M;
         !!s s'. [| ?C s; ?I (Some s); ?B s = Some s' |] ==> ?I (Some s');
         !!s. [| ?C s; ?I (Some s); ?B s = None |] ==> ?I None |]
      ==> ?I ?ss' & (case ?ss' of None => True | Some s' => ~ ?C s')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 5),
              template_var 4),
            template_var 3),
          template_var 2),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_var 0,
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1), t_empty),
               template_var 2))
           ))),
    ("OptionMonad.owhile_rule",
     "[| ?I ?r ?s; wf ?M;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = Some r' |] ==> (r', r) : ?M;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = Some r' |] ==> ?I r' ?s;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = None |] ==> ?Q None;
         !!r. [| ?I r ?s; ~ ?C r ?s |] ==> ?Q (Some r) |]
      ==> ?Q (owhile ?C ?B ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 6, template_var 5), template_var 4)
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 5),
               template_var 4))
           )))]
