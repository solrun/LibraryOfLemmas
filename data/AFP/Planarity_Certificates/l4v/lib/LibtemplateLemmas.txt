   [("Lib.linorder_min_same2", "(min ?x ?y = ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Lib.linorder_min_same1", "(min ?y ?x = ?y) = (?y <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lib.tl_map_simp", "tl (map ?a ?b) = map ?a (tl ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lib.wf_sum_wf", "[| wf ?r; wf ?r' |] ==> wf (wf_sum ?divisor ?r ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Lib.hd_map_simp", "?b ~= [] ==> hd (map ?a ?b) = ?a (hd ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Lib.fun_app_cong", "?f ?x = ?f' ?x' ==> (?f $ ?x) = (?f' $ ?x')",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lib.iff_impI", "(?P ==> ?Q = ?R) ==> (?P --> ?Q) = (?P --> ?R)",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lib.Collect_eq", "({x. ?P x} = {x. ?Q x}) = (ALL x. ?P x = ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Lib.fun_app_apply_cong",
     "?f ?x ?y = ?f' ?x' ?y' ==> (?f $ ?x) ?y = (?f' $ ?x') ?y'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 5, template_var 4), template_var 3),
          template_app
           (template_app (template_var 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Lib.split_paired_Ball",
     "(ALL x:?A. ?P x) = (ALL x y. (x, y) : ?A --> ?P (x, y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), t_empty),
       template_app (template_hole 4, t_empty))),
    ("Lib.split_paired_Bex",
     "(EX x:?A. ?P x) = (EX x y. (x, y) : ?A & ?P (x, y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), t_empty),
       template_app (template_hole 4, t_empty))),
    ("Lib.tranclD2",
     "(?x, ?y) : ?R^+ ==> EX z. (?x, z) : ?R^* & (z, ?y) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lib.case_prod_apply_cong",
     "?f (fst ?p) (snd ?p) ?s = ?f' (fst ?p') (snd ?p') ?s' ==>
      (case ?p of (x, xa) => ?f x xa) ?s =
      (case ?p' of (x, xa) => ?f' x xa) ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_var 5,
                template_app (template_hole 5, template_var 4)),
              template_app (template_hole 4, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Lib.if_apply_cong",
     "[| ?P = ?P'; ?x = ?x'; ?P' ==> ?f ?x' = ?f' ?x';
         ~ ?P' ==> ?g ?x' = ?g' ?x' |]
      ==> (if ?P then ?f else ?g) ?x = (if ?P' then ?f' else ?g') ?x'",
     template_implication
      ([template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_implication
         ([template_predicate (template_var 6)],
          template_equation
           (template_app (template_var 3, template_var 4),
            template_app (template_var 2, template_var 4))),
        template_implication
         ([template_negation (template_predicate (template_var 6))],
          template_equation
           (template_app (template_var 1, template_var 4),
            template_app (template_var 0, template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 3),
             template_var 1),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2),
             template_var 0),
           template_var 4))))]
