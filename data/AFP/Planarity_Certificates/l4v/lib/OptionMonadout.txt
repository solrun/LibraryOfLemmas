Loading theory "Draft.Lib" (required by "Draft.OptionMonadMoreTemplates" via "Draft.OptionMonad")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  delete :: "'a => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  find :: "('a => bool) => 'a list => 'a option"
consts
  theRight :: "'a + 'b => 'b"
consts
  theLeft :: "'a + 'b => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.591s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Lib"
### 0.176s elapsed time, 0.710s cpu time, 0.042s GC time
Loading theory "Draft.OptionMonad" (required by "Draft.OptionMonadMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.934s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.367s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "option_while'p"
  Proving monotonicity ...
### theory "Draft.OptionMonad"
### 0.324s elapsed time, 1.271s cpu time, 0.147s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.751s elapsed time, 2.519s cpu time, 0.293s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.988s elapsed time, 3.009s cpu time, 0.782s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.834s elapsed time, 4.531s cpu time, 0.958s GC time
Loading theory "Draft.Templates" (required by "Draft.OptionMonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OptionMonadMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.515s cpu time, 0.059s GC time
Loading theory "Draft.OptionMonadMoreTemplates"
val templateLemmas =
   [("OptionMonad.obind_return", "?m |>> oreturn = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("OptionMonad.ofail_bind", "ofail |>> ?m = ofail",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("OptionMonad.in_ofail", "ofail ?s ~= Some ?v",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("OptionMonad.obind_fail", "?f |>> (%_. ofail) = ofail",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_hole 0)),
    ("OptionMonad.ocondition_K_false", "ocondition (%_. False) ?T ?F = ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("OptionMonad.ocondition_K_true", "ocondition (%_. True) ?T ?F = ?T",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("OptionMonad.oreturn_bind", "oreturn ?x |>> ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("OptionMonad.in_oassert_eq", "(oassert ?P ?s = Some ?v) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 2)),
    ("OptionMonad.ofailE", "ofail ?s = Some ?v ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("OptionMonad.in_oreturn", "(oreturn ?x ?s = Some ?v) = (?v = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 0, template_var 2))),
    ("OptionMonad.in_oreturnOk_eq",
     "(oreturnOk ?x ?s = Some ?v) = (?v = Inr ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("OptionMonad.in_othrow_eq", "(othrow ?e ?s = Some ?v) = (?v = Inl ?e)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("OptionMonad.option_while_simps",
     "~ ?C ?s ==> option_while ?C ?B ?s = Some ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("OptionMonad.ocondition_True",
     "(!!s. ?P s) ==> ocondition ?P ?L ?R = ?L",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 1))),
    ("OptionMonad.obind_assoc",
     "?m |>> ?f |>> ?g = ?m |>> (%x. ?f x |>> ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("OptionMonad.option_while'p_option_while'_eq",
     "option_while'p ?C ?B = (%x xa. (x, xa) : option_while' ?C ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("OptionMonad.ocondition_False",
     "(!!s. ~ ?P s) ==> ocondition ?P ?L ?R = ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("OptionMonad.oassertE",
     "[| oassert ?P ?s = Some ?v; ?P ==> ?Q |] ==> ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app (template_hole 0, template_var 1)),
        template_implication
         ([template_predicate (template_var 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OptionMonad.owhile_unroll",
     "owhile ?C ?B ?r =
      ocondition (?C ?r) (?B ?r |>> owhile ?C ?B) (oreturn ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("OptionMonad.option_while_simps",
     "(Some ?s, ?ss') : option_while' ?C ?B ==>
      option_while ?C ?B ?s = ?ss'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_var 2))),
    ("OptionMonad.option_while_simps",
     "[| ?C ?s; ?B ?s = None |] ==> option_while ?C ?B ?s = None",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_equation
         (template_app (template_var 0, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_hole 1))),
    ("OptionMonad.oreturnE",
     "[| oreturn ?x ?s = Some ?v; ?v = ?x ==> ?P ?x |] ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_predicate
           (template_app (template_var 0, template_var 3)))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.option_while_simps",
     "[| ?C ?s; ?B ?s = Some ?s' |]
      ==> option_while ?C ?B ?s = option_while ?C ?B ?s'",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("OptionMonad.in_opt_map_eq",
     "((?f |> ?g) ?s = Some ?v) =
      (EX v'. ?f ?s = Some v' & ?g v' = Some ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OptionMonad.oreturn_bind_cong",
     "[| ?x = ?x'; ?m ?x' = ?m' ?x' |]
      ==> oreturn ?x |>> ?m = oreturn ?x' |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturnOkE",
     "[| oreturnOk ?x ?s = Some ?v; ?v = Inr ?x ==> ?P (Inr ?x) |]
      ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 3))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app (template_hole 0, template_var 3))
              ))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.othrowE",
     "[| othrow ?e ?s = Some ?v; ?v = Inl ?e ==> ?P (Inl ?e) |] ==> ?P ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 3))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app (template_hole 0, template_var 3))
              ))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OptionMonad.option_while'_inj",
     "[| (?s, ?s') : option_while' ?C ?B;
         (?s, ?s'') : option_while' ?C ?B |]
      ==> ?s' = ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_equation (template_var 3, template_var 0))),
    ("OptionMonad.in_obind_eq",
     "((?f |>> ?g) ?s = Some ?v) =
      (EX v'. ?f ?s = Some v' & ?g v' ?s = Some ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OptionMonad.option_while'_THE",
     "(Some ?r, ?sr') : option_while' ?C ?B ==>
      (THE s. (Some ?r, s) : option_while' ?C ?B) = ?sr'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 2))),
    ("OptionMonad.oassert_bind_cong",
     "[| ?P = ?P'; ?P' ==> ?m = ?m' |]
      ==> oassert ?P |>> ?m = oassert ?P' |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturn_bind_cong2",
     "[| ?x = ?x'; ?m ?x' = ?m' ?x' |]
      ==> (oreturn $ ?x) |>> ?m = (oreturn $ ?x') |>> ?m'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("OptionMonad.oreturn_bind_cong_apply",
     "[| ?x = ?x'; ?m ?x' ?s = ?m' ?x' ?s |]
      ==> (oreturn ?x |>> ?m) ?s = (oreturn ?x' |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 3), template_var 1),
          template_app
           (template_app (template_var 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.oreturn_bind_cong2_apply",
     "[| ?x = ?x'; ?m ?x' ?s = ?m' ?x' ?s |]
      ==> ((oreturn $ ?x) |>> ?m) ?s = ((oreturn $ ?x') |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 3), template_var 1),
          template_app
           (template_app (template_var 0, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.oassert_bind_cong_apply",
     "[| ?P = ?P'; ?P' ==> ?m () ?s = ?m' () ?s |]
      ==> (oassert ?P |>> ?m) ?s = (oassert ?P' |>> ?m') ?s",
     template_implication
      ([template_equation (template_var 4, template_var 3),
        template_implication
         ([template_predicate (template_var 3)],
          template_equation
           (template_app
             (template_app (template_var 2, template_hole 2),
              template_var 1),
            template_app
             (template_app (template_var 0, template_hole 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 1)))),
    ("OptionMonad.opt_mapE",
     "[| (?f |> ?g) ?s = Some ?v;
         !!v'. [| ?f ?s = Some v'; ?g v' = Some ?v |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.opt_map_cong",
     "[| ?f = ?f'; !!v s. ?f s = Some v ==> ?g v = ?g' v |]
      ==> ?f |> ?g = ?f' |> ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OptionMonad.obindE",
     "[| (?f |>> ?g) ?s = Some ?v;
         !!v'. [| ?f ?s = Some v'; ?g v' ?s = Some ?v |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.opt_bind_cong",
     "[| ?f = ?f'; !!v s. ?f' s = Some v ==> ?g v s = ?g' v s |]
      ==> ?f |>> ?g = ?f' |>> ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OptionMonad.opt_bind_cong_apply",
     "[| ?f ?s = ?f' ?s; !!v. ?f' ?s = Some v ==> ?g v ?s = ?g' v ?s |]
      ==> (?f |>> ?g) ?s = (?f' |>> ?g') ?s",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3)))),
    ("OptionMonad.option_while'_inj_step",
     "[| ?C ?s; ?B ?s = Some ?s'; (Some ?s, ?t) : option_while' ?C ?B;
         (Some ?s', ?t') : option_while' ?C ?B |]
      ==> ?t = ?t'",
     template_implication
      ([template_predicate (template_app (template_var 5, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 4),
          template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 3, template_var 4)),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 5),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 3, template_var 2)),
                  template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 5),
                template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("OptionMonad.ocondition_cong",
     "[| ?c = ?c'; !!s. ?c' s ==> ?l s = ?l' s;
         !!s. ~ ?c' s ==> ?r s = ?r' s |]
      ==> ocondition ?c ?l ?r = ocondition ?c' ?l' ?r'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("OptionMonad.option_while_rule",
     "[| option_while ?C ?B ?s = Some ?s'; ?I ?s;
         !!s s'. [| ?C s; ?I s; ?B s = Some s' |] ==> ?I s' |]
      ==> ?I ?s' & ~ ?C ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_var 4, template_var 1)))
           ))),
    ("OptionMonad.option_while'_term",
     "[| ?I ?r; wf ?M;
         !!r r'. [| ?I r; ?C r; ?B r = Some r' |] ==> (r', r) : ?M;
         !!r r'. [| ?I r; ?C r; ?B r = Some r' |] ==> ?I r';
         !!sr'. (Some ?r, sr') : option_while' ?C ?B ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_var 5, template_var 4)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OptionMonad.option_while_rule'",
     "[| option_while ?C ?B ?s = ?ss'; wf ?M; ?I (Some ?s);
         !!s s'. [| ?C s; ?I (Some s); ?B s = Some s' |] ==> (s', s) : ?M;
         !!s s'. [| ?C s; ?I (Some s); ?B s = Some s' |] ==> ?I (Some s');
         !!s. [| ?C s; ?I (Some s); ?B s = None |] ==> ?I None |]
      ==> ?I ?ss' & (case ?ss' of None => True | Some s' => ~ ?C s')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 5),
              template_var 4),
            template_var 3),
          template_var 2),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_var 0,
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1), t_empty),
               template_var 2))
           ))),
    ("OptionMonad.owhile_rule",
     "[| ?I ?r ?s; wf ?M;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = Some r' |] ==> (r', r) : ?M;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = Some r' |] ==> ?I r' ?s;
         !!r r'. [| ?I r ?s; ?C r ?s; ?B r ?s = None |] ==> ?Q None;
         !!r. [| ?I r ?s; ~ ?C r ?s |] ==> ?Q (Some r) |]
      ==> ?Q (owhile ?C ?B ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 6, template_var 5), template_var 4)
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 5),
               template_var 4))
           )))]:
   (string * thm * template) list
### theory "Draft.OptionMonadMoreTemplates"
### 0.314s elapsed time, 0.432s cpu time, 0.055s GC time
val it = (): unit
