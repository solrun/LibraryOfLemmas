   [("NonDetMonadLemmas.fail_bind", "fail >>= ?f = fail",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("NonDetMonadLemmas.fail_bindE", "fail >>=E ?f = fail",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("NonDetMonadLemmas.unless_False", "unless False ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("NonDetMonadLemmas.when_True", "when True ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("NonDetMonadLemmas.assert_opt_Some",
     "assert_opt (Some ?x) = return ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("NonDetMonadLemmas.gets_to_return", "gets (%s. ?v) = return ?v",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("NonDetMonadLemmas.assert_False", "assert False >>= ?f = fail",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("NonDetMonadLemmas.assertE_False", "assertE False >>=E ?f = fail",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("NonDetMonadLemmas.assertE_liftE", "assertE ?P = liftE (assert ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NonDetMonadLemmas.unless_True", "unless True ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("NonDetMonadLemmas.when_False", "when False ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("NonDetMonadLemmas.unlessE_whenE", "unlessE ?P = whenE (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NonDetMonadLemmas.unless_when", "unless ?P = when (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NonDetMonadLemmas.assert_True", "assert True >>= ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("NonDetMonadLemmas.condition_false_triv", "condition (%_. False)
            ?A
            ?B =
          ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("NonDetMonadLemmas.condition_true_triv", "condition (%_. True)
           ?A
           ?B =
         ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("NonDetMonadLemmas.assertE_True", "assertE True >>=E ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("NonDetMonadLemmas.liftE_handleE", "(liftE ?a <handle> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("NonDetMonadLemmas.liftE_handleE'",
     "(liftE ?a <handle2> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("NonDetMonadLemmas.when_False_bind", "when False ?g >>= ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("NonDetMonadLemmas.whenE_False_bind", "whenE False ?g >>=E ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("NonDetMonadLemmas.when_True_bind", "when True ?g >>= ?f = ?g >>= ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("NonDetMonadLemmas.whenE_True_bind",
     "whenE True ?g >>=E ?f = ?g >>=E ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("NonDetMonadLemmas.condition_true",
     "?P ?s ==> condition ?P
                  ?A
                  ?B
                 ?s =
                ?A ?s",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("NonDetMonadLemmas.condition_false",
     "~ ?P ?s ==> condition ?P
                    ?A
                    ?B
                   ?s =
                  ?B ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("NonDetMonadLemmas.whileLoop_cond_fail",
     "~ ?C ?x ?s ==> whileLoop ?C
                       ?B
                      ?x ?s =
                     return ?x ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_var 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("NonDetMonadLemmas.whileLoopE_cond_fail",
     "~ ?C ?x ?s ==> whileLoopE ?C
                       ?B
                      ?x ?s =
                     returnOk ?x ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_var 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("NonDetMonadLemmas.whileLoop_unroll'",
     "whileLoop ?C
        ?B
       ?r =
      condition (?C ?r)
        (?B ?r)
        (return ?r) >>=
      whileLoop ?C
        ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 2, template_var 0)),
               template_app (template_var 1, template_var 0)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 1)))),
    ("NonDetMonadLemmas.whileLoop_unroll",
     "whileLoop ?C
        ?B
       ?r =
      condition (?C ?r)
        (?B ?r >>= whileLoop ?C
                     ?B)
        (return ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("NonDetMonadLemmas.whileLoopE_unroll'",
     "whileLoopE ?C
        ?B
       ?r =
      condition (?C ?r)
        (?B ?r)
        (returnOk ?r) >>=E
      whileLoopE ?C
        ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 2, template_var 0)),
               template_app (template_var 1, template_var 0)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 1)))),
    ("NonDetMonadLemmas.whileLoopE_unroll",
     "whileLoopE ?C
        ?B
       ?r =
      condition (?C ?r)
        (?B ?r >>=E whileLoopE ?C
                      ?B)
        (returnOk ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("NonDetMonadLemmas.whileLoop_results_simps_no_move",
     "((Some ?x, Some ?x) : whileLoop_results ?C ?B) =
      (~ ?C (fst ?x) (snd ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app (template_hole 4, template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_var 1,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 2))))),
    ("NonDetMonadLemmas.K_bind_apply_cong",
     "?f ?st = ?f' ?st' ==> K_bind ?f ?arg ?st = K_bind ?f' ?arg' ?st'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("NonDetMonadLemmas.nested_bind",
     "do y <- ?f;
         return (?g y)
      od >>=
      ?h =
      do y <- ?f;
         ?h (?g y)
      od",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("NonDetMonadLemmas.validNF_conjD1",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("NonDetMonadLemmas.validNF_conjD2",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("NonDetMonadLemmas.condition_split",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      ((?C ?s --> ?P (?a ?s)) & (~ ?C ?s --> ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 0)),
             template_app
              (template_var 4,
               template_app (template_var 2, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 0))),
           template_app
            (template_var 4,
             template_app (template_var 1, template_var 0)))))),
    ("NonDetMonadLemmas.condition_split_asm",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      (~ (?C ?s & ~ ?P (?a ?s) | ~ ?C ?s & ~ ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_var 4,
                   template_app (template_var 2, template_var 0))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app (template_var 1, template_var 0)))))))),
    ("NonDetMonadLemmas.when_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> whenE ?C ?m ?s = whenE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 4)],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("NonDetMonadLemmas.unless_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ~ ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> unlessE ?C ?m ?s = unlessE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("NonDetMonadLemmas.bind_cong",
     "[| ?f = ?f'; !!v s s'. (v, s') : fst (?f' s) ==> ?g v s' = ?g' v s' |]
      ==> ?f >>= ?g = ?f' >>= ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NonDetMonadLemmas.bindE_cong",
     "[| ?M = ?M';
         !!v s s'. (Inr v, s') : fst (?M' s) ==> ?N v s' = ?N' v s' |]
      ==> ?M >>=E ?N = ?M' >>=E ?N'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NonDetMonadLemmas.valid_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("NonDetMonadLemmas.validNF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("NonDetMonadLemmas.bind_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (rv, st) : fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>= ?g) ?s = (?f' >>= ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("NonDetMonadLemmas.bindE_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (Inr rv, st) : fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>=E ?g) ?s = (?f' >>=E ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("NonDetMonadLemmas.validE_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("NonDetMonadLemmas.validE_NF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("NonDetMonadLemmas.monad_state_eqI",
     "[| !!r t. (r, t) : fst (?A ?s) ==> (r, t) : fst (?B ?s');
         !!r t. (r, t) : fst (?B ?s') ==> (r, t) : fst (?A ?s);
         snd (?A ?s) = snd (?B ?s') |]
      ==> ?A ?s = ?B ?s'",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_hole 1, template_app (template_var 3, template_var 2)),
          template_app
           (template_hole 1,
            template_app (template_var 1, template_var 0)))],
       template_equation
        (template_app (template_var 3, template_var 2),
         template_app (template_var 1, template_var 0)))),
    ("NonDetMonadLemmas.monad_eqI",
     "[| !!r t s. (r, t) : fst (?A s) ==> (r, t) : fst (?B s);
         !!r t s. (r, t) : fst (?B s) ==> (r, t) : fst (?A s);
         !!x. snd (?A x) = snd (?B x) |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0)))]
