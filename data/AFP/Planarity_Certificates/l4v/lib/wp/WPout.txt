Loading theory "Draft.WP" (required by "Draft.WPMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.599s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.831s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs")
signature WP =
  sig
    val apply_once_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_once_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> wp_rules
    val derived_rule: thm -> thm -> thm list
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_rules: Proof.context -> thm list -> wp_rules
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val warn_unused: bool Config.T
    val wp_add: attribute
    val wp_del: attribute
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPre:
  sig
    structure WPData: GENERIC_DATA
    val accum_last_occurence: (thm * 'a) list -> (thm * 'a list) list
    val accum_last_occurence':
       (thm * 'a) list ->
         'a list Termtab.table -> (thm * 'a list) list * unit Termtab.table
    val add_comb:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_extra_rule: 'a -> 'a list ref -> unit
    val add_rule:
       thm ->
         {combs: 'a,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: 'b,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: 'b,
            trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
    val add_rule_inner:
       (theory -> term -> term) ->
         thm ->
           (int * thm) Net.net * int * (int * thm) list ->
             (int * thm) Net.net * int * (int * thm) list
    val add_split:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val app:
       (Proof.context -> Proof.context) * attribute ->
         thm list -> Context.generic -> thm list * Context.generic
    val append_used_rule: 'a -> 'a list ref -> unit
    val apply_once_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_once_tac:
       bool ->
         Proof.context -> thm list -> thm list ref -> thm -> thm Seq.seq
    val apply_rules_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val clear_rules:
       {combs: 'a, rules: 'b, splits: 'c, trips: 'd, unsafe_rules: 'e} ->
         {combs: 'a,
          rules: 'f Net.net * int * 'g list,
          splits: 'c, trips: 'd, unsafe_rules: 'e}
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> WPData.T
    val del_comb:
       thm ->
         {combs: thm list,
          rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: thm list,
            rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
    val del_rule:
       thm ->
         {combs: 'a,
          rules: ('b * thm) Net.net * 'b * ('b * thm) list,
          splits: 'c,
          trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
           ->
           {combs: 'a,
            rules: ('b * thm) Net.net * 'b * ('b * thm) list,
            splits: 'c,
            trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
    val del_rule_inner:
       (theory -> term -> term) ->
         thm ->
           ('a * thm) Net.net * 'a * ('a * thm) list ->
             ('a * thm) Net.net * 'a * ('a * thm) list
    val del_split:
       thm ->
         {combs: 'a,
          rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
    val del_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val del_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val derived_rule: thm -> thm -> thm list
    val dest_rules: (int * 'a) Net.net * 'b * (int * 'a) list -> 'a list
    val flat_last_occurence: thm list -> thm list
    val gen_att: (thm -> WPData.T -> WPData.T) -> attribute
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_key: (theory -> term -> term) -> thm -> term option
    val get_rules:
       Proof.context ->
         thm list ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val has_colon: Token.T list -> bool
    val if_colon:
       ('a * Token.T list -> 'b) ->
         ('a * Token.T list -> 'b) -> 'a * Token.T list -> 'b
    val mk_rules:
       (theory -> term -> term) ->
         thm list -> (int * thm) Net.net * int * (int * thm) list
    val mk_trip_conv: thm list -> theory -> term -> term
    val no_rules: 'a Net.net * int * 'b list
    val pretty_rule: Proof.context -> thm -> string
    val resolve_ruleset_tac:
       Proof.context ->
         {combs: thm list,
          rules: (int * thm) Net.net * 'a * ('b * thm) list,
          splits: thm list,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           -> thm list ref -> int -> thm -> thm Seq.seq
    val rules_merge:
       {combs: thm list,
        rules: (int * thm) Net.net * 'a * (int * thm) list,
        splits: thm list, trips: thm list * 'b, unsafe_rules: thm list}
       *
       {combs: thm list,
        rules: (int * thm) Net.net * 'c * (int * thm) list,
        splits: thm list, trips: thm list * 'd, unsafe_rules: thm list}
         ->
         {combs: thm list,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: thm list,
          trips: thm list * (theory -> term -> term),
          unsafe_rules: thm list}
    val section:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val sections:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list list * (Context.generic * Token.T list)
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val thms:
       (Token.T list -> 'a * Token.T list) list ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val trace_used_thms:
       bool -> thm list ref -> Proof.context -> unit Seq.seq
    val trip_add: attribute
    val trip_del: attribute
    val warn_unsafe_thms: thm list -> int -> Proof.context -> thm -> unit
    val warn_unused: bool Config.T
    val warn_unused_thms:
       Proof.context -> thm list -> thm list ref -> thm list ref -> unit
    val wp_add: attribute
    val wp_del: attribute
    val wp_modifiers:
       thm list ref ->
         (Token.T list ->
            ((Proof.context -> Proof.context) *
             (Context.generic * thm -> Context.generic option * thm option))
            *
            Token.T list
         )
         list
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPreInst: WP
### theory "Draft.WP"
### 0.228s elapsed time, 0.928s cpu time, 0.044s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.291s cpu time, 0.102s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.734s elapsed time, 2.250s cpu time, 0.258s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.944s elapsed time, 2.686s cpu time, 0.692s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.816s elapsed time, 4.123s cpu time, 0.823s GC time
Loading theory "Draft.Templates" (required by "Draft.WPMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WPMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.466s elapsed time, 0.512s cpu time, 0.055s GC time
Loading theory "Draft.WPMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.WPMoreTemplates"
### 0.255s elapsed time, 0.340s cpu time, 0.000s GC time
val it = (): unit
