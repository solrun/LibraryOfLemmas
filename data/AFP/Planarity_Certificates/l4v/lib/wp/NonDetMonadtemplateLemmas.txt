   [("NonDetMonad.bind_return", "?m >>= return = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("NonDetMonad.bindE_returnOk", "?m >>=E returnOk = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("NonDetMonad.returnOk_liftE", "returnOk ?x = liftE (return ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NonDetMonad.return_bind", "return ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("NonDetMonad.returnOk_bindE", "returnOk ?x >>=E ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("NonDetMonad.throwError_bindE",
     "throwError ?E >>=E ?f = throwError ?E",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("NonDetMonad.whileLoop_results_simps_start_fail",
     "((None, ?x) : whileLoop_results ?C ?B) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("NonDetMonad.bind_assoc", "?m >>= ?f >>= ?g = do x <- ?m;
                ?f x >>= ?g
             od",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("NonDetMonad.bindE_assoc", "?m >>=E ?f >>=E ?g = doE x <- ?m;
                    ?f x >>=E ?g
                odE",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("NonDetMonad.whileLoop_resultsp_whileLoop_results_eq",
     "whileLoop_resultsp ?C ?B =
      (%x xa. (x, xa) : whileLoop_results ?C ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("NonDetMonad.whileLoop_terminates_simps",
     "whileLoop_terminates ?C ?B ?r ?s =
      (?C ?r ?s -->
       (ALL (x, y):fst (?B ?r ?s). whileLoop_terminates ?C ?B x y))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_var 2, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)))))),
    ("NonDetMonad.whileLoop_terminates_cases",
     "[| whileLoop_terminates ?C ?B ?r ?s; ~ ?C ?r ?s ==> ?P;
         [| ?C ?r ?s;
            ALL (x, y):fst (?B ?r ?s). whileLoop_terminates ?C ?B x y |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_var 4, template_var 2),
                     template_var 1)
                   )
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_var 3, template_var 2),
                         template_var 1))),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3)))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("NonDetMonad.whileLoop_results_simps_valid",
     "((Some ?x, Some ?y) : whileLoop_results ?C ?B) =
      ((EX r s. ?x = (r, s) & ?y = (r, s) & ~ ?C r s) |
       (EX r s.
           ?x = (r, s) &
           ?C r s &
           (EX r' s'.
               (r', s') : fst (?B r s) &
               (Some (r', s'), Some ?y) : whileLoop_results ?C ?B)))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 3)),
             template_app (template_hole 10, template_var 2))),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("NonDetMonad.whileLoop_results_cases_fail",
     "[| (Some ?x, None) : whileLoop_results ?C ?B;
         !!r s. [| ?x = (r, s); ?C r s; snd (?B r s) |] ==> ?P;
         !!r s r' s'.
            [| ?x = (r, s); ?C r s; (r', s') : fst (?B r s);
               (Some (r', s'), None) : whileLoop_results ?C ?B |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 3)),
                  template_hole 8)),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("NonDetMonad.whileLoop_results_cases_valid",
     "[| (Some ?x, Some ?y) : whileLoop_results ?C ?B;
         !!r s. [| ?x = (r, s); ?y = (r, s); ~ ?C r s |] ==> ?P;
         !!r s r' s'.
            [| ?x = (r, s); ?C r s; (r', s') : fst (?B r s);
               (Some (r', s'), Some ?y) : whileLoop_results ?C ?B |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 4)),
                  template_app (template_hole 8, template_var 3))),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("NonDetMonad.whileLoop_results_simps",
     "((Some ?x, ?y) : whileLoop_results ?C ?B) =
      ((EX r s. ?x = (r, s) & ?y = Some (r, s) & ~ ?C r s) |
       (EX r s. ?x = (r, s) & ?y = None & ?C r s & snd (?B r s)) |
       (EX r s.
           ?x = (r, s) &
           ?C r s &
           (EX r' s'.
               (r', s') : fst (?B r s) &
               (Some (r', s'), ?y) : whileLoop_results ?C ?B)))",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app (template_hole 13, template_var 3)),
             template_var 2)),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app (template_hole 10, t_empty)))))]
