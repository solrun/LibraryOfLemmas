   [("Check_Non_Planarity_Verification.is_loopfree_0",
     "is_loopfree_inv ?G 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Check_Non_Planarity_Verification.distinct_ig_verts",
     "distinct (ig_verts ?G)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Check_Non_Planarity_Verification.is_K33_outer_0",
     "is_K33_outer_inv ?G 0 ?blue",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Check_Non_Planarity_Verification.is_K5_inner_0",
     "is_K5_inner_inv ?G ?k 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Check_Non_Planarity_Verification.is_subgraph_arcs_0",
     "is_subgraph_arcs_inv ?G ?H 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Check_Non_Planarity_Verification.is_subgraph_verts_0",
     "is_subgraph_verts_inv ?G ?H 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Check_Non_Planarity_Verification.is_K33_component_size_0",
     "is_K33_component_size_inv ?G 0 ?blue 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0),
           template_hole 0)
         )),
    ("Check_Non_Planarity_Verification.is_K33_inner_0",
     "is_K33_inner_inv ?G ?k 0 ?blue",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Check_Non_Planarity_Verification.is_K33_colorize_0",
     "is_K33_colorize_inv ?G ?u 0 (%_. False)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           t_empty)
         )),
    ("Check_Non_Planarity_Verification.IGraph_inv_conv",
     "IGraph_inv ?G = pair_fin_digraph (mk_graph' ?G)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.IGraph_inv_conv'",
     "IGraph_inv ?G = pair_pseudo_graph (mk_graph ?G)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.finite_symcl_iff",
     "finite (?R\<^sup>s) = finite ?R",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Check_Non_Planarity_Verification.verts_mkg",
     "pverts (mk_graph ?G) = set (ig_verts ?G)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.verts_mkg'",
     "pverts (mk_graph' ?G) = set (ig_verts ?G)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.parcs_mk_symmetric_symcl",
     "parcs (mk_symmetric ?G) = (arcs_ends ?G)\<^sup>s",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.arcs_mkg'",
     "parcs (mk_graph' ?G) = set (ig_arcs ?G)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Check_Non_Planarity_Verification.wellformed_pseudo_graph_mkg",
     "pair_wf_digraph (mk_graph ?G) = pair_pseudo_graph (mk_graph ?G)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Check_Non_Planarity_Verification.ig_arcs_add_v",
     "ig_arcs (ig_add_v ?G ?v) = ig_arcs ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Check_Non_Planarity_Verification.IGraph_imp_ppd_mkg'",
     "IGraph_inv ?G ==> pair_fin_digraph (mk_graph' ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.IGraph_imp_ppg_mkg",
     "IGraph_inv ?G ==> pair_pseudo_graph (mk_graph ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.find_endpoint_arcs_0",
     "find_endpoint_arcs_inv ?G False 0 ?v0.0 ?v1.0 ?v0.0 ?v1.0",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1),
                   template_hole 0),
                 template_var 1),
               template_var 0),
             template_var 1),
           template_var 0)
         )),
    ("Check_Non_Planarity_Verification.ig_opposite_simps",
     "ig_opposite ?G (?u, ?v) ?u = ?v",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Check_Non_Planarity_Verification.ig_opposite_simps",
     "ig_opposite ?G (?v, ?u) ?u = ?v",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Check_Non_Planarity_Verification.arcs_mkg",
     "parcs (mk_graph ?G) = (set (ig_arcs ?G))\<^sup>s",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Check_Non_Planarity_Verification.ig_verts_add_e",
     "ig_verts (ig_add_e ?G ?u ?v) = ig_verts ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Check_Non_Planarity_Verification.pwd_imp_ppg_mkg",
     "pair_wf_digraph (mk_graph ?G) ==> pair_pseudo_graph (mk_graph ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.is_loopfree_last",
     "is_loopfree_inv ?G (ig_arcs_cnt ?G) ==> loop_free (mk_graph ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.select_nodes_prop_add_e",
     "select_nodes_prop ?G (ig_add_e ?H ?u ?v) = select_nodes_prop ?G ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 3), template_var 2))),
    ("Check_Non_Planarity_Verification.verts3_in_verts",
     "?x : verts3 ?G ==> ?x : verts ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.contract_iter_nodes_0",
     "set (ig_arcs ?H) = {} ==> contract_iter_nodes_inv ?G ?H 0",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Check_Non_Planarity_Verification.IGraph_lf_imp_pg_mkg",
     "[| IGraph_inv ?G; loop_free (mk_graph ?G) |]
      ==> pair_graph (mk_graph ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.check_kuratowski_correct_comb",
     "[| pair_pseudo_graph ?G; witness ?G ?K |]
      ==> ~ comb_planar (with_proj ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Check_Non_Planarity_Verification.check_kuratowski_correct",
     "[| pair_pseudo_graph ?G; witness ?G ?K |]
      ==> ~ kuratowski_planar (with_proj ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Check_Non_Planarity_Verification.is_subgraph_verts_last",
     "is_subgraph_verts_inv ?G ?H (length (ig_verts ?G)) =
      (pverts (mk_graph ?G) <= pverts (mk_graph ?H))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 1))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Check_Non_Planarity_Verification.ig_arcs_add_e",
     "ig_arcs (ig_add_e ?G ?u ?v) = ig_arcs ?G @ [(?u, ?v)]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Check_Non_Planarity_Verification.card_ig_neighbors_indegree",
     "IGraph_inv ?G ==>
      card (ig_neighbors ?G ?u) = in_degree (with_proj (mk_graph ?G)) ?u",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Check_Non_Planarity_Verification.iadj_imp_verts",
     "[| iadj ?G ?u ?v; IGraph_inv ?G |] ==> ?u : set (ig_verts ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.iadj_imp_verts",
     "[| iadj ?G ?u ?v; IGraph_inv ?G |] ==> ?v : set (ig_verts ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.is_K5_outer_step",
     "[| is_K5_outer_inv ?G ?k; is_K5_inner_inv ?G ?k (ig_verts_cnt ?G) |]
      ==> is_K5_outer_inv ?G (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.K5_card",
     "K\<^bsub>5\<^esub> (with_proj (mk_graph' ?G)) ==>
      ig_verts_cnt ?G = 5",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4)))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)))))),
    ("Check_Non_Planarity_Verification.snp_vertexes",
     "[| select_nodes_prop ?G ?H; ?u : set (ig_verts ?H) |]
      ==> ?u : set (ig_verts ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.is_subgraph_arcs_last",
     "is_subgraph_arcs_inv ?G ?H (length (ig_arcs ?G)) =
      (parcs (mk_graph ?G) <= parcs (mk_graph ?H) &
       pair_pseudo_graph (mk_graph ?G))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 1), template_var 0),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 1))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 1))))),
    ("Check_Non_Planarity_Verification.ig_verts_add_v",
     "ig_verts (ig_add_v ?G ?v) =
      ig_verts ?G @ (if ?v : set (ig_verts ?G) then [] else [?v])",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 1)))),
             template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1))))),
    ("Check_Non_Planarity_Verification.set_ig_arcs_verts",
     "[| IGraph_inv ?G; (?u, ?v) : set (ig_arcs ?G) |]
      ==> ?u : set (ig_verts ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.set_ig_arcs_verts",
     "[| IGraph_inv ?G; (?u, ?v) : set (ig_arcs ?G) |]
      ==> ?v : set (ig_verts ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.set_ig_arcs_imp_verts",
     "[| (?u, ?v) : set (ig_arcs ?G); IGraph_inv ?G |]
      ==> ?u : set (ig_verts ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.set_ig_arcs_imp_verts",
     "[| (?u, ?v) : set (ig_arcs ?G); IGraph_inv ?G |]
      ==> ?v : set (ig_verts ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.K33_card",
     "K\<^bsub>3,3\<^esub> (with_proj (mk_graph' ?G)) ==>
      ig_verts_cnt ?G = 6",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_hole 5))),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_hole 0,
             template_app (template_hole 6, template_hole 5)))))),
    ("Check_Non_Planarity_Verification.is_K33_outer_step",
     "[| is_K33_outer_inv ?G ?i ?blue;
         is_K33_inner_inv ?G ?i (ig_verts_cnt ?G) ?blue |]
      ==> is_K33_outer_inv ?G (Suc ?i) ?blue",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_app (template_hole 1, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Check_Non_Planarity_Verification.All_set_ig_verts",
     "(ALL v:set (ig_verts ?G). ?P v) =
      (ALL i<ig_verts_cnt ?G. ?P (ig_verts ?G ! i))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         t_empty),
       template_app (template_hole 4, t_empty))),
    ("Check_Non_Planarity_Verification.contract_iter_nodes_last",
     "[| contract_iter_nodes_inv ?G ?H (ig_verts_cnt ?H);
         select_nodes_prop ?G ?H; IGraph_inv ?G |]
      ==> symmetric (with_proj (mk_graph' ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.contract_iter_adj_0",
     "[| contract_iter_nodes_inv ?G ?H ?i; ?i < ig_verts_cnt ?H |]
      ==> contract_iter_adj_inv ?G ?H ?H (ig_verts ?H ! ?i) 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Check_Non_Planarity_Verification.is_K33_component_size_step1",
     "[| is_K33_component_size_inv ?G ?k ?blue ?blue_cnt;
         ?blue (ig_verts ?G ! ?k) |]
      ==> is_K33_component_size_inv ?G (Suc ?k) ?blue (Suc ?blue_cnt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.is_K33_component_size_step2",
     "[| is_K33_component_size_inv ?G ?k ?blue ?blue_cnt;
         ~ ?blue (ig_verts ?G ! ?k) |]
      ==> is_K33_component_size_inv ?G (Suc ?k) ?blue ?blue_cnt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 1,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 3)),
                    template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Check_Non_Planarity_Verification.is_subgraph_verts_arcs_last",
     "[| is_subgraph_verts_inv ?G ?H (ig_verts_cnt ?G);
         is_subgraph_arcs_inv ?G ?H (ig_arcs_cnt ?G); IGraph_inv ?H |]
      ==> pair_pseudo_graph (mk_graph ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Check_Non_Planarity_Verification.iadj_io_edge",
     "[| ?u : set (ig_verts ?G); ?e : set (ig_in_out_arcs ?G ?u) |]
      ==> iadj ?G ?u (ig_opposite ?G ?e ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Check_Non_Planarity_Verification.iadjD",
     "iadj ?G ?u ?v ==>
      EX e:set (ig_in_out_arcs ?G ?u). e = (?u, ?v) | e = (?v, ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             t_empty)
           ))),
    ("Check_Non_Planarity_Verification.is_K33_colorize_step",
     "is_K33_colorize_inv ?G ?u ?k ?blue ==>
      is_K33_colorize_inv ?G ?u (Suc ?k)
       (?blue(ig_opposite ?G (ig_in_out_arcs ?G ?u ! ?k) ?u := True))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 2)),
                       template_var 1)),
                   template_var 2)),
               template_hole 0))
           ))),
    ("Check_Non_Planarity_Verification.is_loopfree_step2",
     "[| loop_free (mk_graph ?G); ?n < ig_arcs_cnt ?G |]
      ==> fst (ig_arcs ?G ! ?n) ~= snd (ig_arcs ?G ! ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.snp_iapath_ends_in",
     "[| select_nodes_prop ?G ?H;
         pre_digraph.gen_iapath (with_proj (mk_graph ?G))
          (verts3 (with_proj (mk_graph ?G))) ?u ?p ?v |]
      ==> ?u : set (ig_verts ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 4))),
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 4)))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Check_Non_Planarity_Verification.snp_iapath_ends_in",
     "[| select_nodes_prop ?G ?H;
         pre_digraph.gen_iapath (with_proj (mk_graph ?G))
          (verts3 (with_proj (mk_graph ?G))) ?u ?p ?v |]
      ==> ?v : set (ig_verts ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 4))),
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 4)))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Check_Non_Planarity_Verification.igraph_ig_add_eI",
     "[| IGraph_inv ?G; ?u : set (ig_verts ?G); ?v : set (ig_verts ?G) |]
      ==> IGraph_inv (ig_add_e ?G ?u ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.is_K33_component_size_last",
     "?k = ig_verts_cnt ?G ==>
      is_K33_component_size_inv ?G ?k ?blue ?cnt =
      (card {u: set (ig_verts ?G). ?blue u} = ?cnt)",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 8, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("Check_Non_Planarity_Verification.find_endpoint_path_first",
     "[| iadj ?G ?u ?v; ?u ~= ?v; IGraph_inv ?G |]
      ==> find_endpoint_path_inv ?G ?H (Suc 0) ?u ?v ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0),
                     template_app (template_hole 1, template_hole 0)),
                   template_var 2),
                 template_var 1),
               template_var 2),
             template_var 1)
           ))),
    ("Check_Non_Planarity_Verification.is_subgraph_verts_arcs_last",
     "[| is_subgraph_verts_inv ?G ?H (ig_verts_cnt ?G);
         is_subgraph_arcs_inv ?G ?H (ig_arcs_cnt ?G); IGraph_inv ?H |]
      ==> subgraph (with_proj (mk_graph ?G)) (with_proj (mk_graph ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.contract_iter_nodes_last",
     "[| contract_iter_nodes_inv ?G ?H (ig_verts_cnt ?H);
         select_nodes_prop ?G ?H; IGraph_inv ?G |]
      ==> mk_graph' ?H =
          gen_contr_graph (with_proj (mk_graph ?G))
           (verts3 (with_proj (mk_graph ?G)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))))))),
    ("Check_Non_Planarity_Verification.is_K33_colorize_last",
     "?u : set (ig_verts ?G) ==>
      is_K33_colorize_inv ?G ?u (length (ig_in_out_arcs ?G ?u)) ?blue =
      (ALL v:set (ig_verts ?G). ?blue v = iadj ?G ?u v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1))),
           t_empty)))),
    ("Check_Non_Planarity_Verification.is_subgraph_verts_step",
     "[| is_subgraph_verts_inv ?G ?H ?i;
         ig_verts ?G ! ?i : set (ig_verts ?H); ?i < length (ig_verts ?G) |]
      ==> is_subgraph_verts_inv ?G ?H (Suc ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 4, template_var 1)))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 1,
            template_app (template_hole 4, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.no_loop_path",
     "[| ?u = ?v; IGraph_inv ?G |]
      ==> \<nexists>p w.
             pre_digraph.gen_iapath (with_proj (mk_graph ?G))
              (verts3 (with_proj (mk_graph ?G))) ?u ((?u, ?v) # p) w",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 7, t_empty))))),
    ("Check_Non_Planarity_Verification.is_loopfree_step1",
     "[| is_loopfree_inv ?G ?n;
         fst (ig_arcs ?G ! ?n) ~= snd (ig_arcs ?G ! ?n);
         ?n < ig_arcs_cnt ?G |]
      ==> is_loopfree_inv ?G (Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_var 0)))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.is_K33_outer_last",
     "is_K33_outer_inv ?G (ig_verts_cnt ?G) ?blue =
      (ALL u:set (ig_verts ?G).
          ALL v:set (ig_verts ?G).
             (?blue u = ?blue v) = ((u, v) ~: set (ig_arcs ?G)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 1),
           template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         t_empty))),
    ("Check_Non_Planarity_Verification.contract_iter_adj_propI",
     "[| contract_iter_nodes_inv ?G ?H ?i;
         contract_iter_adj_inv ?G ?H ?H' ?u (length (ig_in_out_arcs ?G ?u));
         ?u = ig_verts ?H ! ?i |]
      ==> contract_iter_adj_prop ?G ?H ?H' ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 1),
                template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 0)))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Check_Non_Planarity_Verification.is_K33_inner_last",
     "is_K33_inner_inv ?G ?k (ig_verts_cnt ?G) ?blue =
      (ALL v:set (ig_verts ?G).
          (?blue (ig_verts ?G ! ?k) = ?blue v) =
          ((ig_verts ?G ! ?k, v) ~: set (ig_arcs ?G)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_app (template_hole 9, template_var 2)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2))),
         t_empty))),
    ("Check_Non_Planarity_Verification.contract_iter_nodes_inv_step",
     "[| contract_iter_nodes_inv ?G ?H ?i;
         contract_iter_adj_inv ?G ?H ?H' (ig_verts ?H ! ?i)
          (length (ig_in_out_arcs ?G (ig_verts ?H ! ?i)));
         select_nodes_prop ?G ?H |]
      ==> contract_iter_nodes_inv ?G ?H' (Suc ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 0),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 2)),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Check_Non_Planarity_Verification.is_K5_outer_last",
     "[| is_K5_outer_inv ?G (ig_verts_cnt ?G); IGraph_inv ?G;
         ig_verts_cnt ?G = 5; symmetric (with_proj (mk_graph' ?G)) |]
      ==> K\<^bsub>5\<^esub> (with_proj (mk_graph' ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app (template_hole 10, template_var 0),
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4)))),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4)))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Check_Non_Planarity_Verification.is_K5_inner_last",
     "?l = ig_verts_cnt ?G ==>
      is_K5_inner_inv ?G ?k ?l =
      (ALL v:set (ig_verts ?G).
          (ig_verts ?G ! ?k ~= v) =
          ((ig_verts ?G ! ?k, v) : set (ig_arcs ?G)))",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1))),
           t_empty)))),
    ("Check_Non_Planarity_Verification.is_K5_inner_step",
     "[| is_K5_inner_inv ?G ?k ?l; ?k < ig_verts_cnt ?G;
         (?k ~= ?l) =
         ((ig_verts ?G ! ?k, ig_verts ?G ! ?l) : set (ig_arcs ?G)) |]
      ==> is_K5_inner_inv ?G ?k (Suc ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 0))),
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.is_K33_inner_step",
     "[| is_K33_inner_inv ?G ?i ?j ?blue;
         (?blue (ig_verts ?G ! ?i) = ?blue (ig_verts ?G ! ?j)) =
         ((ig_verts ?G ! ?i, ig_verts ?G ! ?j) ~: set (ig_arcs ?G)) |]
      ==> is_K33_inner_inv ?G ?i (Suc ?j) ?blue",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_var 0,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_var 2))),
            template_app
             (template_var 0,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_var 1))),
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 3)),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Check_Non_Planarity_Verification.contract_iter_adj_inv_step2",
     "[| contract_iter_adj_inv ?G ?H0.0 ?H ?u ?l;
         !!p w.
            ~ pre_digraph.gen_iapath (with_proj (mk_graph ?G))
               (verts3 (with_proj (mk_graph ?G))) ?u
               ((?u, ig_opposite ?G (ig_in_out_arcs ?G ?u ! ?l) ?u) # p)
               w |]
      ==> contract_iter_adj_inv ?G ?H0.0 ?H ?u (Suc ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 13, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Check_Non_Planarity_Verification.select_nodes_inv_step",
     "[| IGraph_inv ?G; select_nodes_inv ?G ?H ?i; ?i < ig_verts_cnt ?G;
         ?H' =
         (if 3 <= card (ig_neighbors ?G (ig_verts ?G ! ?i))
          then ig_add_v ?H (ig_verts ?G ! ?i) else ?H) |]
      ==> select_nodes_inv ?G ?H' (Suc ?i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_var 3)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app (template_hole 2, template_var 3)),
                        template_var 1))))),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_var 1))),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, template_var 3),
               template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Check_Non_Planarity_Verification.is_K33_outerD",
     "[| is_K33_outer_inv ?G (ig_verts_cnt ?G) ?blue; ?i < ig_verts_cnt ?G;
         ?j < ig_verts_cnt ?G |]
      ==> (?blue (ig_verts ?G ! ?i) = ?blue (ig_verts ?G ! ?j)) =
          ((ig_verts ?G ! ?i, ig_verts ?G ! ?j) ~: set (ig_arcs ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_app (template_hole 9, template_var 3)),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_var 2,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 3)),
                 template_var 1))),
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 3)),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 3)),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 3)),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3))))))),
    ("Check_Non_Planarity_Verification.contract_iter_adj_inv_step1",
     "[| pair_pseudo_graph (mk_graph ?G);
         contract_iter_adj_inv ?G ?H0.0 ?H ?u ?l;
         pre_digraph.gen_iapath (with_proj (mk_graph ?G))
          (verts3 (with_proj (mk_graph ?G))) ?u
          ((?u, ig_opposite ?G (ig_in_out_arcs ?G ?u ! ?l) ?u) # ?p) ?w |]
      ==> contract_iter_adj_inv ?G ?H0.0 (ig_add_e ?H ?u ?w) ?u (Suc ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app (template_hole 11, template_var 6))),
                    template_app
                     (template_hole 7,
                      template_app
                       (template_hole 8,
                        template_app (template_hole 11, template_var 6)))),
                  template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app
                             (template_hole 3,
                              template_app
                               (template_app
                                 (template_hole 2, template_var 6),
                                template_var 3)),
                            template_var 2)),
                        template_var 3))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 0)),
               template_var 3),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Check_Non_Planarity_Verification.find_endpoint_arcs_step2E",
     "[| find_endpoint_arcs_inv ?G False ?k ?v0.0 ?v1.0 ?v0' ?v1';
         ig_opposite ?G (ig_in_out_arcs ?G ?v1.0 ! ?k) ?v1' = ?v0';
         [| ?v0.0 = ?v0'; ?v1.0 = ?v1';
            find_endpoint_arcs_inv ?G False (Suc ?k) ?v0.0 ?v1.0 ?v0.0
             ?v1.0 |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 6),
                        template_hole 5),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 6),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 3)),
                template_var 5)),
            template_var 1),
          template_var 2),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 6),
                               template_hole 5),
                             template_app
                              (template_hole 0, template_var 5)),
                           template_var 4),
                         template_var 3),
                       template_var 4),
                     template_var 3)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.planar_theorem",
     "[| pair_pseudo_graph ?G; pair_pseudo_graph ?K;
         subgraph (with_proj ?K) (with_proj ?G);
         K\<^bsub>3,3\<^esub>
          (with_proj
            (gen_contr_graph (with_proj ?K) (verts3 (with_proj ?K)))) |
         K\<^bsub>5\<^esub>
          (with_proj
            (gen_contr_graph (with_proj ?K) (verts3 (with_proj ?K)))) |]
      ==> ~ kuratowski_planar (with_proj ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_hole 6))),
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 11, template_var 0)),
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 11, template_var 0)))))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 2, template_hole 6)))),
                template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 11, template_var 0)),
                    template_app
                     (template_hole 4,
                      template_app (template_hole 11, template_var 0))))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 0,
                 template_app (template_hole 11, template_var 1))
               )
           ))),
    ("Check_Non_Planarity_Verification.K33_mkg'E",
     "[| K\<^bsub>3,3\<^esub> (with_proj (mk_graph' ?G)); IGraph_inv ?G;
         is_K33_colorize_inv ?G ?u (length (ig_in_out_arcs ?G ?u)) ?blue;
         ?u : set (ig_verts ?G);
         [| is_K33_component_size_inv ?G (ig_verts_cnt ?G) ?blue 3;
            is_K33_outer_inv ?G (ig_verts_cnt ?G) ?blue |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12))),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)))
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app (template_hole 1, template_var 3)),
                   template_var 1),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12)))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_app (template_hole 1, template_var 3)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.find_endpoint_path_step",
     "[| find_endpoint_path_inv ?G ?H ?len ?u ?v ?w ?x; 0 < ?len;
         find_endpoint_arcs_inv ?G True ?k ?w ?x ?w' ?x';
         ?k <= length (ig_in_out_arcs ?G ?x); IGraph_inv ?G;
         ?x ~: set (ig_verts ?H) |]
      ==> find_endpoint_path_inv ?G ?H (Suc ?len) ?u ?v ?w' ?x'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_than, template_hole 11, template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 9),
                        template_hole 9),
                      template_var 2),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 9),
              template_var 3))),
        template_predicate (template_app (template_hole 5, template_var 9)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 8)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 13, template_var 9),
                       template_var 8),
                     template_app (template_hole 0, template_var 7)),
                   template_var 6),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("Check_Non_Planarity_Verification.find_endpoint_path_last2D",
     "[| find_endpoint_path_inv ?G ?H ?len ?u ?v ?w ?u; IGraph_inv ?G;
         loop_free (mk_graph ?G); select_nodes_prop ?G ?H; 0 < ?len;
         ?u : set (ig_verts ?H);
         pre_digraph.gen_iapath (with_proj (mk_graph ?G))
          (verts3 (with_proj (mk_graph ?G))) ?u ((?u, ?v) # ?p) ?x |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 15, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 7)),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 7),
              template_var 6)
            ),
        template_inequation (less_than, template_hole 9, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 12, template_var 7))),
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 12, template_var 7)))),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Check_Non_Planarity_Verification.iK5E",
     "[| K\<^bsub>5\<^esub> (with_proj (mk_graph' ?G));
         [| ig_verts_cnt ?G = 5;
            [| ?i < ig_verts_cnt ?G; ?j < ig_verts_cnt ?G |]
            ==> (?i ~= ?j) =
                ((ig_verts ?G ! ?i, ig_verts ?G ! ?j) : set (ig_arcs ?G)) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13)))),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)))
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_hole 16,
               template_app
                (template_hole 15,
                 template_app (template_hole 14, template_hole 13))))],
          template_implication
           ([template_implication
              ([template_inequation
                 (less_than, template_var 2,
                  template_app (template_hole 9, template_var 3))],
               template_implication
                ([template_inequation
                   (less_than, template_var 1,
                    template_app (template_hole 9, template_var 3))],
                 template_equation
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_var 3)),
                             template_var 2)),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 3)),
                           template_var 1))),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3))))))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.find_endpoint_arcs_step1E",
     "[| find_endpoint_arcs_inv ?G False ?k ?v0.0 ?v1.0 ?v0' ?v1';
         ig_opposite ?G (ig_in_out_arcs ?G ?v1.0 ! ?k) ?v1' ~= ?v0';
         [| ?v0.0 = ?v0'; ?v1.0 = ?v1';
            find_endpoint_arcs_inv ?G True (Suc ?k) ?v0.0 ?v1.0 ?v1.0
             (ig_opposite ?G (ig_in_out_arcs ?G ?v1.0 ! ?k) ?v1.0) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_hole 7),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 3)),
                    template_var 5)),
                template_var 1),
              template_var 2)
            ),
        template_implication
         ([template_equation (template_var 4, template_var 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 8, template_var 6),
                               template_hole 1),
                             template_app
                              (template_hole 0, template_var 5)),
                           template_var 4),
                         template_var 3),
                       template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 6),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 6),
                               template_var 3)),
                           template_var 5)),
                       template_var 3))
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.check_kuratowski_complete",
     "[| pair_pseudo_graph ?G; pair_pseudo_graph ?K; loop_free ?K;
         subgraph (with_proj ?K) (with_proj ?G); subdivision_pair ?H ?K;
         K\<^bsub>3,3\<^esub> (with_proj ?H) |
         K\<^bsub>5\<^esub> (with_proj ?H) |]
      ==> witness ?G ?K",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 12, template_var 0)),
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))),
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_app (template_hole 12, template_var 0))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 1, template_hole 3)))),
                template_app (template_hole 12, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Check_Non_Planarity_Verification.is_subgraph_arcs_step",
     "[| is_subgraph_arcs_inv ?G ?H ?i;
         ?e : set (ig_arcs ?H) | (snd ?e, fst ?e) : set (ig_arcs ?H);
         fst ?e : set (ig_verts ?G); snd ?e : set (ig_verts ?G);
         ?e = ig_arcs ?G ! ?i; ?i < length (ig_arcs ?G) |]
      ==> is_subgraph_arcs_inv ?G ?H (Suc ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 2)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_var 0)),
                    template_app (template_hole 8, template_var 0))),
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 0)),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 9, template_var 0)),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 11, template_var 3)),
            template_var 1)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 1,
            template_app (template_hole 11, template_var 3)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 15, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Check_Non_Planarity_Verification.K33_mkg'I",
     "[| IGraph_inv ?G; ig_verts_cnt ?G = 6; ?cnt = 3;
         is_K33_colorize_inv ?G (ig_verts ?G ! 0)
          (length (ig_in_out_arcs ?G (ig_verts ?G ! 0))) ?blue;
         is_K33_component_size_inv ?G (ig_verts_cnt ?G) ?blue ?cnt;
         is_K33_outer_inv ?G (ig_verts_cnt ?G) ?blue |]
      ==> K\<^bsub>3,3\<^esub> (with_proj (mk_graph' ?G))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_equation
         (template_app (template_hole 15, template_var 2),
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)))),
        template_equation
         (template_var 1,
          template_app
           (template_hole 14,
            template_app (template_hole 12, template_hole 11))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 2)),
                    template_hole 7)),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 2)),
                      template_hole 7)))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 15, template_var 2)),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 15, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 12, template_hole 11))),
               template_app
                (template_hole 14,
                 template_app (template_hole 12, template_hole 11))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Check_Non_Planarity_Verification.find_endpoint_arcs_last",
     "[| find_endpoint_arcs_inv ?G False (length (ig_in_out_arcs ?G ?v1.0))
          ?v0.0 ?v1.0 ?v0a ?v1a;
         find_endpoint_path_inv ?G ?H ?len ?v_tail ?v_next ?v0.0 ?v1.0;
         IGraph_inv ?G; loop_free (mk_graph ?G); select_nodes_prop ?G ?H;
         ?v_tail : set (ig_verts ?H); 0 < ?len |]
      ==> ~ pre_digraph.gen_iapath (with_proj (mk_graph ?G))
             (verts3 (with_proj (mk_graph ?G))) ?v_tail
             ((?v_tail, ?v_next) # ?p) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 19, template_var 10),
                        template_hole 18),
                      template_app
                       (template_hole 17,
                        template_app
                         (template_app (template_hole 16, template_var 10),
                          template_var 9))),
                    template_var 8),
                  template_var 9),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 15, template_var 10),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 8),
              template_var 9)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 10)),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 10))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 10),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)))
            ),
        template_inequation (less_than, template_hole 6, template_var 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 12, template_var 10))),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 12, template_var 10)))),
                     template_var 3),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("Check_Non_Planarity_Verification.find_endpoint_path_last1",
     "[| find_endpoint_path_inv ?G ?H ?len ?u ?v ?w ?x; IGraph_inv ?G;
         loop_free (mk_graph ?G); select_nodes_prop ?G ?H; 0 < ?len;
         ?u : set (ig_verts ?H); ?x : set (ig_verts ?H); ?u ~= ?x |]
      ==> EX p. pre_digraph.gen_iapath (with_proj (mk_graph ?G))
                 (verts3 (with_proj (mk_graph ?G))) ?u ((?u, ?v) # p) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 6)),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 6),
              template_var 5)
            ),
        template_inequation (less_than, template_hole 11, template_var 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Check_Non_Planarity_Verification.is_subgraph_false",
     "[| subgraph (with_proj (mk_graph ?G)) (with_proj (mk_graph ?H));
         [| ALL i<length (ig_verts ?G). ig_verts ?G ! i : set (ig_verts ?H);
            ALL i<length (ig_arcs ?G).
               let (u, v) = ig_arcs ?G ! i
               in ((u, v) : set (ig_arcs ?H) | (v, u) : set (ig_arcs ?H)) &
                  u : set (ig_verts ?G) & v : set (ig_verts ?G) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 2))),
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 1)))
            ),
        template_implication
         ([template_predicate (template_app (template_hole 17, t_empty))],
          template_implication
           ([template_predicate (template_app (template_hole 17, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.contract_iter_adj_invE",
     "[| contract_iter_adj_inv ?G ?H0.0 ?H ?u ?l;
         [| set (ig_arcs ?H) - {?u} \<times> UNIV = set (ig_arcs ?H0.0);
            ig_verts ?H = ig_verts ?H0.0;
            !!v. ((?u, v) : set (ig_arcs ?H)) =
                 (EX j<?l.
                     EX p. pre_digraph.gen_iapath (with_proj (mk_graph ?G))
                            (verts3 (with_proj (mk_graph ?G))) ?u
                            ((?u,
                              ig_opposite ?G (ig_in_out_arcs ?G ?u ! j)
                               ?u) #
                             p)
                            v) |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 26, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_hole 23,
                   template_app (template_hole 22, template_var 3))),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app (template_hole 20, template_var 2),
                     template_hole 19)),
                 t_empty)),
             template_app
              (template_hole 23,
               template_app (template_hole 22, template_var 4)))],
          template_implication
           ([template_equation
              (template_app (template_hole 16, template_var 3),
               template_app (template_hole 16, template_var 4))],
            template_implication
             ([template_predicate
                (template_app (template_hole 15, t_empty))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Check_Non_Planarity_Verification.find_endpoint_path_lastE",
     "[| find_endpoint_path_inv ?G ?H ?len ?u ?v ?w ?x; IGraph_inv ?G;
         loop_free (mk_graph ?G); select_nodes_prop ?G ?H; 0 < ?len;
         ?u : set (ig_verts ?H);
         !!p. [| pre_digraph.awalk (with_proj (mk_graph ?G)) ?u
                  ((?u, ?v) # p) ?x;
                 progressing ((?u, ?v) # p);
                 set (pre_digraph.inner_verts (with_proj (mk_graph ?G))
                       ((?u, ?v) # p)) Int
                 set (ig_verts ?H) =
                 {};
                 ?len <= ig_verts_cnt ?G |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 21, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 7)),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 7),
              template_var 6)
            ),
        template_inequation (less_than, template_hole 15, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 6)))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0)))]
