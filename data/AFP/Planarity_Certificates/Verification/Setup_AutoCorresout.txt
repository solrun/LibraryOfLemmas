Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres")
Loading theory "Case_Labeling.Case_Labeling" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres")
Loading theory "Draft.Lib" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.OptionMonad")
Loading theory "Draft.WP" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
locale Labeling_Syntax
consts
  delete :: "'a => 'a list => 'a list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
consts
  find :: "('a => bool) => 'a list => 'a option"
consts
  theRight :: "'a + 'b => 'b"
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
consts
  theLeft :: "'a + 'b => 'a"
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
structure Eisbach_Rule_Insts: sig end
### theory "Draft.Lib"
### 0.158s elapsed time, 0.618s cpu time, 0.030s GC time
Loading theory "Draft.NonDetMonad" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.NonDetMonadLemmas")
signature WP =
  sig
    val apply_once_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_once_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> wp_rules
    val derived_rule: thm -> thm -> thm list
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_rules: Proof.context -> thm list -> wp_rules
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val warn_unused: bool Config.T
    val wp_add: attribute
    val wp_del: attribute
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPre:
  sig
    structure WPData: GENERIC_DATA
    val accum_last_occurence: (thm * 'a) list -> (thm * 'a list) list
    val accum_last_occurence':
       (thm * 'a) list ->
         'a list Termtab.table -> (thm * 'a list) list * unit Termtab.table
    val add_comb:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_extra_rule: 'a -> 'a list ref -> unit
    val add_rule:
       thm ->
         {combs: 'a,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: 'b,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: 'b,
            trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
    val add_rule_inner:
       (theory -> term -> term) ->
         thm ->
           (int * thm) Net.net * int * (int * thm) list ->
             (int * thm) Net.net * int * (int * thm) list
    val add_split:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val app:
       (Proof.context -> Proof.context) * attribute ->
         thm list -> Context.generic -> thm list * Context.generic
    val append_used_rule: 'a -> 'a list ref -> unit
    val apply_once_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_once_tac:
       bool ->
         Proof.context -> thm list -> thm list ref -> thm -> thm Seq.seq
    val apply_rules_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val clear_rules:
       {combs: 'a, rules: 'b, splits: 'c, trips: 'd, unsafe_rules: 'e} ->
         {combs: 'a,
          rules: 'f Net.net * int * 'g list,
          splits: 'c, trips: 'd, unsafe_rules: 'e}
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> WPData.T
    val del_comb:
       thm ->
         {combs: thm list,
          rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: thm list,
            rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
    val del_rule:
       thm ->
         {combs: 'a,
          rules: ('b * thm) Net.net * 'b * ('b * thm) list,
          splits: 'c,
          trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
           ->
           {combs: 'a,
            rules: ('b * thm) Net.net * 'b * ('b * thm) list,
            splits: 'c,
            trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
    val del_rule_inner:
       (theory -> term -> term) ->
         thm ->
           ('a * thm) Net.net * 'a * ('a * thm) list ->
             ('a * thm) Net.net * 'a * ('a * thm) list
    val del_split:
       thm ->
         {combs: 'a,
          rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
    val del_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val del_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val derived_rule: thm -> thm -> thm list
    val dest_rules: (int * 'a) Net.net * 'b * (int * 'a) list -> 'a list
    val flat_last_occurence: thm list -> thm list
    val gen_att: (thm -> WPData.T -> WPData.T) -> attribute
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_key: (theory -> term -> term) -> thm -> term option
    val get_rules:
       Proof.context ->
         thm list ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val has_colon: Token.T list -> bool
    val if_colon:
       ('a * Token.T list -> 'b) ->
         ('a * Token.T list -> 'b) -> 'a * Token.T list -> 'b
    val mk_rules:
       (theory -> term -> term) ->
         thm list -> (int * thm) Net.net * int * (int * thm) list
    val mk_trip_conv: thm list -> theory -> term -> term
    val no_rules: 'a Net.net * int * 'b list
    val pretty_rule: Proof.context -> thm -> string
    val resolve_ruleset_tac:
       Proof.context ->
         {combs: thm list,
          rules: (int * thm) Net.net * 'a * ('b * thm) list,
          splits: thm list,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           -> thm list ref -> int -> thm -> thm Seq.seq
    val rules_merge:
       {combs: thm list,
        rules: (int * thm) Net.net * 'a * (int * thm) list,
        splits: thm list, trips: thm list * 'b, unsafe_rules: thm list}
       *
       {combs: thm list,
        rules: (int * thm) Net.net * 'c * (int * thm) list,
        splits: thm list, trips: thm list * 'd, unsafe_rules: thm list}
         ->
         {combs: thm list,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: thm list,
          trips: thm list * (theory -> term -> term),
          unsafe_rules: thm list}
    val section:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val sections:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list list * (Context.generic * Token.T list)
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val thms:
       (Token.T list -> 'a * Token.T list) list ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val trace_used_thms:
       bool -> thm list ref -> Proof.context -> unit Seq.seq
    val trip_add: attribute
    val trip_del: attribute
    val warn_unsafe_thms: thm list -> int -> Proof.context -> thm -> unit
    val warn_unused: bool Config.T
    val warn_unused_thms:
       Proof.context -> thm list -> thm list ref -> thm list ref -> unit
    val wp_add: attribute
    val wp_del: attribute
    val wp_modifiers:
       thm list ref ->
         (Token.T list ->
            ((Proof.context -> Proof.context) *
             (Context.generic * thm -> Context.generic option * thm option))
            *
            Token.T list
         )
         list
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPreInst: WP
### theory "Draft.WP"
### 0.241s elapsed time, 0.929s cpu time, 0.074s GC time
Loading theory "Draft.OptionMonad" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Case_Labeling.Case_Labeling"
### 0.314s elapsed time, 1.223s cpu time, 0.074s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
Proofs for inductive predicate(s) "option_while'p"
  Proving monotonicity ...
### theory "HOL-Eisbach.Eisbach"
### 0.436s elapsed time, 1.700s cpu time, 0.118s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.504s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  filterM ::
    "('a => 's => (bool * 's) set * bool)
     => 'a list => 's => ('a list * 's) set * bool"
### theory "Draft.OptionMonad"
### 0.353s elapsed time, 1.422s cpu time, 0.113s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "whileLoop_resultsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 0.997s cpu time, 0.145s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "whileLoop_terminates"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.371s elapsed time, 1.494s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.NonDetMonad"
### 0.954s elapsed time, 3.636s cpu time, 0.692s GC time
Loading theory "Draft.NonDetMonadLemmas" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.NonDetMonadLemmas"
### 0.259s elapsed time, 1.015s cpu time, 0.108s GC time
Loading theory "Draft.OptionMonadND" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.OptionMonadND"
### 0.307s elapsed time, 1.206s cpu time, 0.145s GC time
Loading theory "Draft.OptionMonadWP" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc")
### theory "HOL-Library.BigO"
### 0.999s elapsed time, 3.784s cpu time, 0.710s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.103s elapsed time, 4.011s cpu time, 0.782s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OptionMonadWP"
### 0.340s elapsed time, 0.937s cpu time, 0.071s GC time
Loading theory "Draft.AutoCorres_Misc" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.Setup_AutoCorres")
Found termination order: "size <*mlex*> {}"
### theory "Draft.AutoCorres_Misc"
### 0.050s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Draft.Setup_AutoCorres" (required by "Draft.Setup_AutoCorresMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
val vcg_tac = fn: string -> string -> Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.005s elapsed time, 6.288s cpu time, 0.950s GC time
Loading theory "Draft.Templates" (required by "Draft.Setup_AutoCorresMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Setup_AutoCorresMoreTemplates")
### theory "Draft.Setup_AutoCorres"
### 0.803s elapsed time, 1.665s cpu time, 0.141s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.778s cpu time, 0.049s GC time
Loading theory "Draft.Setup_AutoCorresMoreTemplates"
val templateLemmas =
   [("Setup_AutoCorres.L_ovalidNF_oreturn_NF",
     "Case_Labeling.CTXT ?IC ?CT ?IC (ovalidNF (?P ?x) (oreturn ?x) ?P)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 0)),
               template_app (template_hole 0, template_var 0)),
             template_var 1))
         )),
    ("Setup_AutoCorres.simp_land", "(?P land ?Q) ?s = (?P ?s & ?Q ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("Setup_AutoCorres.simp_bind",
     "Case_Labeling.BIND ?ct ?n ?P ?s = Case_Labeling.BIND ?ct ?n (?P ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app (template_var 1, template_var 0)))),
    ("Setup_AutoCorres.L_ogets_NF_wp",
     "Case_Labeling.CTXT ?IC ?CT ?IC
       (ovalidNF (%s. ?P (?f s) s) (ogets ?f) ?P)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_var 1))
         )),
    ("Setup_AutoCorres.elim_land",
     "[| (?P land ?Q) ?s; [| ?P ?s; ?Q ?s |] ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Setup_AutoCorres.ovalidNF_K_bind",
     "Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P ?f ?Q) ==>
      Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P (K_bind ?f ?x) ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Setup_AutoCorres.L_ovalidNF_obind_oreturn",
     "Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P (?g ?x) ?Q) ==>
      Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P (oreturn ?x |>> ?g) ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_var 2, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 2)),
               template_var 0))
           ))),
    ("Setup_AutoCorres.DC_final",
     "Case_Labeling.VC ((''g'', ?inp, []) # ?ct) ?a ==>
      Case_Labeling.CTXT ?inp ?ct (Suc ?inp) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 7, template_hole 6), template_hole 6),
  template_hole 6),
template_hole 5),
                                    template_hole 5),
                                  template_hole 6),
                                template_hole 6),
                              template_hole 5)),
                          template_hole 4)),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_hole 2))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Setup_AutoCorres.ovalidNF_obind_K_bind",
     "[| Case_Labeling.CTXT (Suc ?OC1.0) ?CT ?OC (ovalidNF ?R ?g ?Q);
         Case_Labeling.CTXT ?IC ?CT ?OC1.0 (ovalidNF ?P ?f (%_. ?R)) |]
      ==> Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P (DO ?f;
                    ?g
                 OD)
     ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 8)),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 7),
                template_var 8),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 7),
               template_var 6),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 4))),
               template_var 3))
           ))),
    ("Setup_AutoCorres.L_ovalidNF_prod_case",
     "(!!x y.
          Case_Labeling.SPLIT ?v (x, y) ==>
          Case_Labeling.CTXT ?IC ?CT ?OC
           (ovalidNF (?P x y) (?B x y) ?Q)) ==>
      Case_Labeling.CTXT ?IC ?CT ?OC
       (ovalidNF (case ?v of (x, y) => ?P x y) (case ?v of (x, y) => ?B x y)
         ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 6)),
               template_var 0))
           ))),
    ("Setup_AutoCorres.L_ovalidNF_obind",
     "[| !!r. Case_Labeling.CTXT (Suc ?OC1.0)
               ((''bind'', Suc ?OC1.0, [Case_Labeling.VAR r]) # ?CT) ?OC
               (ovalidNF (?R r) (?g r) ?Q);
         Case_Labeling.CTXT ?IC ?CT ?OC1.0 (ovalidNF ?P ?f ?R) |]
      ==> Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P (?f |>> ?g) ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 7),
                template_var 8),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 15, template_var 2),
                 template_var 7),
               template_var 6),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   t_empty)),
               template_var 3))
           ))),
    ("Setup_AutoCorres.L_ovalidNF_wp_comb2",
     "[| Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P ?f ?Q);
         !!s. ?P' s ==>
              Case_Labeling.VC
               ((''weaken'', ?IC, [Case_Labeling.VAR s]) # ?CT) (?P s) |]
      ==> Case_Labeling.CTXT ?IC ?CT ?OC (ovalidNF ?P' ?f ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 13, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Setup_AutoCorres.DC_if",
     "[| ?a ==>
         Case_Labeling.CTXT (Suc ?inp) ((''then'', ?inp, []) # ?ct) ?outp'
          ?b;
         ~ ?a ==>
         Case_Labeling.CTXT (Suc ?outp') ((''else'', ?outp', []) # ?ct)
          ?outp ?c |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp
           (BRANCH (if ?a then ?b else ?c))",
     template_implication
      ([template_implication
         ([template_predicate (template_var 6)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_var 5)),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 8, template_hole 7), template_hole 7),
      template_hole 6),
    template_hole 7),
  template_hole 6),
template_hole 6),
                                    template_hole 6),
                                  template_hole 7)),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 8, template_hole 7), template_hole 7),
        template_hole 7),
      template_hole 6),
    template_hole 7),
  template_hole 6),
template_hole 6),
                                    template_hole 7)),
                                template_app
                                 (template_app
                                   (template_hole 9,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 8, template_hole 6),
            template_hole 7),
          template_hole 6),
        template_hole 7),
      template_hole 7),
    template_hole 6),
  template_hole 6),
template_hole 7)),
                                  template_app
                                   (template_app
                                     (template_hole 9,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 8, template_hole 7),
              template_hole 6),
            template_hole 6),
          template_hole 6),
        template_hole 7),
      template_hole 6),
    template_hole 6),
  template_hole 7)),
                                    template_hole 5))))),
                          template_app
                           (template_app (template_hole 4, template_var 5),
                            template_hole 3))),
                      template_var 4)),
                  template_var 3),
                template_var 2)
              )),
        template_implication
         ([template_negation (template_predicate (template_var 6))],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 8, template_hole 6), template_hole 7),
      template_hole 6),
    template_hole 7),
  template_hole 7),
template_hole 6),
                                    template_hole 6),
                                  template_hole 7)),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 8, template_hole 7), template_hole 7),
        template_hole 6),
      template_hole 6),
    template_hole 7),
  template_hole 6),
template_hole 6),
                                    template_hole 7)),
                                template_app
                                 (template_app
                                   (template_hole 9,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 8, template_hole 6),
            template_hole 6),
          template_hole 7),
        template_hole 7),
      template_hole 6),
    template_hole 6),
  template_hole 6),
template_hole 7)),
                                  template_app
                                   (template_app
                                     (template_hole 9,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 8, template_hole 6),
              template_hole 7),
            template_hole 6),
          template_hole 7),
        template_hole 7),
      template_hole 6),
    template_hole 6),
  template_hole 7)),
                                    template_hole 5))))),
                          template_app
                           (template_app (template_hole 4, template_var 3),
                            template_hole 3))),
                      template_var 4)),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 13, template_var 5),
                 template_var 4),
               template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2),
                 template_var 0)))
           ))),
    ("Setup_AutoCorres.L_condition_NF_wp",
     "[| Case_Labeling.CTXT ?IC
          ((''then'', ?IC, []) # (''if'', ?IC, []) # ?CT) ?OC1.0
          (ovalidNF ?L ?l ?Q);
         Case_Labeling.CTXT (Suc ?OC1.0)
          ((''else'', Suc ?OC1.0, []) # (''if'', ?IC, []) # ?CT) ?OC
          (ovalidNF ?R ?r ?Q) |]
      ==> Case_Labeling.CTXT ?IC ?CT ?OC
           (ovalidNF (%s. BRANCH (if ?C s then ?L s else ?R s))
             (ocondition ?C ?l ?r) ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 9),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 11,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 10, template_hole 9), template_hole 9),
    template_hole 8),
  template_hole 9),
template_hole 8),
                                    template_hole 8),
                                  template_hole 8),
                                template_hole 9)),
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 10, template_hole 9), template_hole 9),
      template_hole 9),
    template_hole 8),
  template_hole 9),
template_hole 8),
                                    template_hole 8),
                                  template_hole 9)),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 10, template_hole 8),
          template_hole 9),
        template_hole 8),
      template_hole 9),
    template_hole 9),
  template_hole 8),
template_hole 8),
                                    template_hole 9)),
                                template_app
                                 (template_app
                                   (template_hole 11,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_hole 8),
          template_hole 8),
        template_hole 8),
      template_hole 9),
    template_hole 8),
  template_hole 8),
template_hole 9)),
                                  template_hole 7))))),
                        template_app
                         (template_app (template_hole 6, template_var 9),
                          template_hole 5))),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 10, template_hole 8), template_hole 9),
      template_hole 9),
    template_hole 8),
  template_hole 9),
template_hole 8),
                                    template_hole 8),
                                  template_hole 9)),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 10, template_hole 9),
          template_hole 8),
        template_hole 8),
      template_hole 9),
    template_hole 9),
  template_hole 8),
template_hole 8),
                                    template_hole 9)),
                                template_hole 7))),
                          template_app
                           (template_app (template_hole 6, template_var 9),
                            template_hole 5))),
                      template_var 8))),
                template_var 7),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 3, template_var 7)),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 11,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 10, template_hole 8), template_hole 9),
    template_hole 8),
  template_hole 9),
template_hole 9),
                                    template_hole 8),
                                  template_hole 8),
                                template_hole 9)),
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 10, template_hole 9), template_hole 9),
      template_hole 8),
    template_hole 8),
  template_hole 9),
template_hole 8),
                                    template_hole 8),
                                  template_hole 9)),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 10, template_hole 8),
          template_hole 8),
        template_hole 9),
      template_hole 9),
    template_hole 8),
  template_hole 8),
template_hole 8),
                                    template_hole 9)),
                                template_app
                                 (template_app
                                   (template_hole 11,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 10, template_hole 8),
            template_hole 9),
          template_hole 8),
        template_hole 9),
      template_hole 9),
    template_hole 8),
  template_hole 8),
template_hole 9)),
                                  template_hole 7))))),
                        template_app
                         (template_app
                           (template_hole 6,
                            template_app (template_hole 3, template_var 7)),
                          template_hole 5))),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 10, template_hole 8), template_hole 9),
      template_hole 9),
    template_hole 8),
  template_hole 9),
template_hole 8),
                                    template_hole 8),
                                  template_hole 9)),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 10, template_hole 9),
          template_hole 8),
        template_hole 8),
      template_hole 9),
    template_hole 9),
  template_hole 8),
template_hole 8),
                                    template_hole 9)),
                                template_hole 7))),
                          template_app
                           (template_app (template_hole 6, template_var 9),
                            template_hole 5))),
                      template_var 8))),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 9),
                 template_var 8),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5),
                   template_var 1)),
               template_var 4))
           ))),
    ("Setup_AutoCorres.L_ovalidNF_owhile_inv",
     "[| !!r s.
            Case_Labeling.CTXT ?IC
             ((''invariant'', ?IC, [Case_Labeling.VAR s]) #
              (''while'', ?IC, [Case_Labeling.VAR r]) # ?CT)
             ?OC
             (ovalidNF
               (Case_Labeling.BIND ''loop_inv'' ?IC (?I r) land
                Case_Labeling.BIND ''loop_cond'' ?IC (?C r) land
                Case_Labeling.BIND ''loop_var'' ?IC (%s'. s' = s))
               (?B r)
               (%r'. Case_Labeling.BIND ''inv'' ?IC (?I r') land
                     Case_Labeling.BIND ''var'' ?IC (%_. (r', r) : ?R)));
         !!r. Case_Labeling.VC
               ((''wf'', ?OC, []) #
                (''while'', ?IC, [Case_Labeling.VAR r]) # ?CT)
               (wf ?R);
         !!r s.
            [| ?I r s; ~ ?C r s |]
            ==> Case_Labeling.VC
                 ((''postcondition'', Suc ?OC, [Case_Labeling.VAR s]) #
                  (''while'', ?IC, [Case_Labeling.VAR r]) # ?CT)
                 (?Q r s) |]
      ==> Case_Labeling.CTXT ?IC ?CT (Suc ?OC)
           (ovalidNF (?I ?r) (AutoCorres_Misc.owhile_inv ?C ?B ?r ?I ?R)
             ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 23, template_var 8),
                 template_var 7),
               template_app (template_hole 1, template_var 6)),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app (template_var 5, template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 0),
                     template_var 5),
                   template_var 2)),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Setup_AutoCorresMoreTemplates"
### 0.331s elapsed time, 0.452s cpu time, 0.043s GC time
val it = (): unit
