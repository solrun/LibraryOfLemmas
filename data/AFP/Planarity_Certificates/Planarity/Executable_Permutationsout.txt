Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.539s cpu time, 0.032s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Combinatorics.Transposition"
### 0.141s elapsed time, 0.574s cpu time, 0.032s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.816s cpu time, 0.069s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.FuncSet"
### 0.434s elapsed time, 1.726s cpu time, 0.162s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Cancellation"
### 0.444s elapsed time, 1.771s cpu time, 0.162s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.258s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.285s elapsed time, 1.131s cpu time, 0.113s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.175s elapsed time, 4.487s cpu time, 0.934s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "Draft.List_Aux")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.BigO"
### 1.065s elapsed time, 4.047s cpu time, 0.887s GC time
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.407s elapsed time, 1.392s cpu time, 0.156s GC time
Loading theory "Draft.List_Aux" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations")
### theory "Draft.List_Aux"
### 0.284s elapsed time, 0.920s cpu time, 0.791s GC time
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.422s elapsed time, 8.169s cpu time, 2.036s GC time
Loading theory "Draft.Templates" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.173s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Executable_PermutationsMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.113s cpu time, 0.091s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.526s elapsed time, 9.627s cpu time, 2.190s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.051s elapsed time, 1.850s cpu time, 1.054s GC time
Loading theory "HOL-Combinatorics.Orbits" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations" via "Graph_Theory.Auxiliary")
Proofs for inductive predicate(s) "orbitp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Orbits"
### 0.190s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Graph_Theory.Auxiliary" (required by "Draft.Executable_PermutationsMoreTemplates" via "Draft.Executable_Permutations")
Proofs for inductive predicate(s) "segmentp"
  Proving monotonicity ...
### theory "Graph_Theory.Auxiliary"
### 0.127s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.Executable_Permutations" (required by "Draft.Executable_PermutationsMoreTemplates")
Found termination order: "(%p. size_list length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Executable_Permutations"
### 0.616s elapsed time, 0.706s cpu time, 0.087s GC time
Loading theory "Draft.Executable_PermutationsMoreTemplates"
val templateLemmas =
   [("Executable_Permutations.orbit_list_not_nil", "orbit_list ?f ?x ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Executable_Permutations.distincts_distinct",
     "distincts ?xss ==> distinct ?xss",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.list_succ_singleton",
     "list_succ [?x] = list_succ []",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_hole 0))),
    ("Executable_Permutations.distincts_rev",
     "distincts (map rev ?xss) = distincts ?xss",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Executable_Permutations.permutation_list_succ",
     "distinct ?xs ==> permutation (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.distincts_remove1",
     "distincts ?xss ==> distincts (remove1 ?xs ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.distincts_inj_on_set",
     "distincts ?xss ==> inj_on set (set ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.distincts_distinct_set",
     "distincts ?xss ==> distinct (map set ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Executable_Permutations.inj_list_succ",
     "distinct ?xs ==> inj (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Executable_Permutations.distinct_orbit_list'",
     "permutation ?f ==> distinct (orbit_list ?f ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Executable_Permutations.nil_in_permutations",
     "([] : set (permutations ?xs)) = (?xs = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_equation (template_var 0, template_hole 3))),
    ("Executable_Permutations.bij_lists_succ",
     "distincts ?xss ==> bij (lists_succ ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Executable_Permutations.bij_list_succ",
     "distinct ?xs ==> bij (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Executable_Permutations.list_succ_permutes",
     "distinct ?xs ==> list_succ ?xs permutes set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.lists_succ_Cons_pf",
     "lists_succ (?xs # ?xss) = list_succ ?xs o lists_succ ?xss",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Executable_Permutations.list_succ_rotate1",
     "distinct ?xs ==> list_succ (rotate1 ?xs) = list_succ ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Executable_Permutations.list_succ_in_conv",
     "(list_succ ?xs ?x : set ?xs) = (?x : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Executable_Permutations.list_succ_rotate",
     "distinct ?xs ==> list_succ (rotate ?n ?xs) = list_succ ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Executable_Permutations.orbits_list_conv_impl",
     "permutation ?f ==> orbits_list ?f ?xs = orbits_list_impl ?f ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Permutations.distinct_orbit_list",
     "?x : orbit ?f ?x ==> distinct (orbit_list ?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.lists_succ_snoc",
     "lists_succ (?xss @ [?xs]) = lists_succ ?xss o list_succ ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.distincts_single",
     "distincts [?xs] = (distinct ?xs & ?xs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Executable_Permutations.length_distincts",
     "distincts ?xss ==>
      length ?xss = card (Executable_Permutations.sset ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Executable_Permutations.list_succ_list_succ_rev",
     "distinct ?xs ==> list_succ (rev ?xs) (list_succ ?xs ?x) = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Executable_Permutations.inv_list_succ_eq",
     "distinct ?xs ==> inv (list_succ ?xs) = list_succ (rev ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Executable_Permutations.set_orbit_list'",
     "permutation ?f ==> set (orbit_list ?f ?x) = orbit ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Permutations.list_succ_not_in",
     "?x ~: set ?xs ==> list_succ ?xs ?x = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Executable_Permutations.list_succ_short",
     "length ?xs < 2 ==> list_succ ?xs = id",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Executable_Permutations.distincts_orbits_list",
     "[| distinct ?as; permutation ?f |]
      ==> distincts (orbits_list ?f ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.length_remove1_less",
     "?x : set ?xs ==> length (remove1 ?x ?xs) < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Executable_Permutations.list_succ_simps",
     "length ?xs <= index ?xs ?x ==> list_succ ?xs ?x = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Executable_Permutations.inv_lists_succ_eq",
     "distincts ?xss ==>
      inv (lists_succ ?xss) = lists_succ (rev (map rev ?xss))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))))),
    ("Executable_Permutations.lists_succ_permutes",
     "distincts ?xss ==>
      lists_succ ?xss permutes
      \<Union> (Executable_Permutations.sset ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Executable_Permutations.distincts_distinct_nth",
     "[| distincts ?xss; ?n < length ?xss |] ==> distinct (?xss ! ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Executable_Permutations.permutationss_Cons",
     "permutationss (?xs # ?xss) =
      concat
       (map (%ys. map ((#) ys) (permutationss ?xss)) (permutations ?xs))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Executable_Permutations.set_Cons_remove1",
     "?x : set ?xs ==> set (?x # remove1 ?x ?xs) = set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Executable_Permutations.distinct_Cons_remove1",
     "?x : set ?xs ==> distinct (?x # remove1 ?x ?xs) = distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("Executable_Permutations.distincts_Cons_remove1",
     "?xs : set ?xss ==>
      distincts (?xs # remove1 ?xs ?xss) = distincts ?xss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("Executable_Permutations.set_orbit_list",
     "?x : orbit ?f ?x ==> set (orbit_list ?f ?x) = orbit ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 1)))),
    ("Executable_Permutations.cyclic_on_lists_succ",
     "[| distincts ?xss; ?xs : set ?xss |]
      ==> cyclic_on (lists_succ ?xss) (set ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.cyclic_on_list_succ",
     "[| distinct ?xs; ?xs ~= [] |]
      ==> cyclic_on (list_succ ?xs) (set ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.sset_orbits_list",
     "permutation ?f ==>
      Executable_Permutations.sset (orbits_list ?f ?xs) =
      orbit ?f ` set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Executable_Permutations.orbit_list_conv_impl",
     "?x : orbit ?f ?x ==> orbit_list ?f ?x = orbit_list_impl ?f ?x [] ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0),
           template_var 1)))),
    ("Executable_Permutations.cyclic_on_lists_succ'",
     "[| distincts ?xss; ?A : Executable_Permutations.sset ?xss |]
      ==> cyclic_on (lists_succ ?xss) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Executable_Permutations.list_succ_in_conv1",
     "?A Int set ?xs = {} ==> (list_succ ?xs ?x : ?A) = (?x : ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Executable_Permutations.list_succ_simps",
     "index ?xs ?x + 1 = length ?xs ==> list_succ ?xs ?x = ?xs ! 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0)),
            template_hole 5),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Executable_Permutations.lists_succ_not_in",
     "?x ~: \<Union> (Executable_Permutations.sset ?xss) ==>
      lists_succ ?xss ?x = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, t_empty),
                      template_app (template_hole 2, template_var 0))))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Executable_Permutations.list_succ_last",
     "[| distinct ?xs; ?xs ~= [] |] ==> list_succ ?xs (last ?xs) = hd ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.orbit_list_succ",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> orbit (list_succ ?xs) ?x = set ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Executable_Permutations.in_set_permutations",
     "distinct ?xs ==>
      (?ys : set (permutations ?xs)) = (distinct ?ys & set ?xs = set ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 0)))
             )))),
    ("Executable_Permutations.lists_succ_remove1",
     "[| distincts ?xss; ?xs : set ?xss |]
      ==> lists_succ (?xs # remove1 ?xs ?xss) = lists_succ ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 2, template_var 1)))),
    ("Executable_Permutations.permutations_Cons",
     "permutations (?v # ?va) =
      concat
       (map (%y. map ((#) y) (permutations (remove1 y (?v # ?va))))
         (?v # ?va))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Executable_Permutations.set_permutationss",
     "distincts ?xss ==>
      set (permutationss ?xss) =
      {yss. distincts yss & map set ?xss = map set yss}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("Executable_Permutations.in_set_permutationss",
     "distincts ?xss ==>
      (?yss : set (permutationss ?xss)) =
      (distincts ?yss & map set ?xss = map set ?yss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)))
             )))),
    ("Executable_Permutations.permutations_not_nil",
     "?xs ~= [] ==>
      permutations ?xs =
      concat (map (%x. map ((#) x) (permutations (remove1 x ?xs))) ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0))))),
    ("Executable_Permutations.list_succ_commute",
     "set ?xs Int set ?ys = {} ==>
      list_succ ?xs (list_succ ?ys ?x) = list_succ ?ys (list_succ ?xs ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Executable_Permutations.lists_succ_no_order",
     "[| distincts ?xss; distincts ?yss; set ?xss = set ?yss |]
      ==> lists_succ ?xss = lists_succ ?yss",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.permutations_complete",
     "[| distinct ?xs; distinct ?ys; set ?xs = set ?ys |]
      ==> ?ys : set (permutations ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Executable_Permutations.lists_succ_in_conv",
     "(lists_succ ?xss ?x : \<Union> (Executable_Permutations.sset ?xss)) =
      (?x : \<Union> (Executable_Permutations.sset ?xss))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Executable_Permutations.list_succ_simps",
     "index ?xs ?x + 1 < length ?xs ==>
      list_succ ?xs ?x = ?xs ! (index ?xs ?x + 1)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)),
            template_hole 4),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 4))))),
    ("Executable_Permutations.lists_succ_in_conv1",
     "?A Int \<Union> (Executable_Permutations.sset ?xss) = {} ==>
      (lists_succ ?xss ?x : ?A) = (?x : ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 4, template_var 1)))),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Executable_Permutations.set_permutations_step",
     "?xs ~= [] ==>
      set (permutations ?xs) =
      (UN x:set ?xs. (#) x ` set (permutations (remove1 x ?xs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Executable_Permutations.list_succ_nth",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> list_succ ?xs (?xs ! ?n) = ?xs ! (Suc ?n mod length ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 5, template_var 1)))))),
    ("Executable_Permutations.in_set_cyc_permutations",
     "distinct ?xs ==>
      (?ys : set (cyc_permutations ?xs)) =
      (distinct ?ys & set ?xs = set ?ys & hd ?ys = hd ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 0),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_app (template_hole 0, template_var 1))))
             )))),
    ("Executable_Permutations.orbit_list_impl_conv",
     "?y : orbit ?f ?x ==>
      orbit_list_impl ?f ?y ?acc ?x =
      rev ?acc @ iterate 0 (funpow_dist1 ?f ?x ?y) ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_app (template_var 2, template_var 1)),
                     template_var 3))),
               template_var 2),
             template_var 1))))),
    ("Executable_Permutations.list_succ_funpow_conv",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> (list_succ ?xs ^^ ?n) ?x =
          ?xs ! ((index ?xs ?x + ?n) mod length ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 0, template_var 2)))))),
    ("Executable_Permutations.distincts_Cons'",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss & (ALL ys:set ?xss. set ?xs Int set ys = {}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_hole 7))),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   t_empty))))
           ))),
    ("Executable_Permutations.list_succ_set_cyc_permutations",
     "[| distinct ?xs; ?xs ~= [] |]
      ==> list_succ ` set (cyc_permutations ?xs) =
          {f. f permutes set ?xs & cyclic_on f (set ?xs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 4, t_empty)))),
    ("Executable_Permutations.distincts_Cons",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss &
       set ?xs Int \<Union> (Executable_Permutations.sset ?xss) = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8))),
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 7, template_var 1)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 13, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 1)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, t_empty),
                           template_app
                            (template_hole 1, template_var 0))))),
                   template_hole 0))))
           ))),
    ("Executable_Permutations.in_set_cyc_permutationss",
     "distincts ?xss ==>
      (?yss : set (cyc_permutationss ?xss)) =
      (distincts ?yss &
       map set ?xss = map set ?yss & map hd ?xss = map hd ?yss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0))))
             )))),
    ("Executable_Permutations.lists_succ_set_cyc_permutationss",
     "distincts ?xss ==>
      lists_succ ` set (cyc_permutationss ?xss) =
      {f. f permutes \<Union> (Executable_Permutations.sset ?xss) &
          (ALL c:Executable_Permutations.sset ?xss. cyclic_on f c)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 8, t_empty)))),
    ("Executable_Permutations.list_succ_orbit_list",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x |]
      ==> list_succ (orbit_list ?f ?s) = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Executable_Permutations.in_set_cyc_permutations_obtain",
     "[| distinct ?xs; distinct ?ys; set ?xs = set ?ys;
         !!n. rotate n ?ys : set (cyc_permutations ?xs) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.list_succ_altdef",
     "list_succ ?xs ?x =
      (let n = index ?xs ?x
       in if n + 1 = length ?xs then ?xs ! 0
          else if n + 1 < length ?xs then ?xs ! (n + 1) else ?x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         t_empty))),
    ("Executable_Permutations.cyclic_on_obtain_list_succ'",
     "[| cyclic_on ?f ?S; ?f permutes ?S;
         !!xs. [| ?f = list_succ xs; set xs = ?S; distinct xs |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.permutationss_complete",
     "[| distincts ?xss; distincts ?yss; ?xss ~= [];
         Executable_Permutations.sset ?xss =
         Executable_Permutations.sset ?yss |]
      ==> set ?yss : Executable_Permutations.sset (permutationss ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 1)),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 4),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Executable_Permutations.permutes_as_lists_succ",
     "[| distincts ?xss;
         !!xs. xs : set ?xss ==> list_succ xs = perm_restrict ?f (set xs);
         ?f permutes \<Union> (Executable_Permutations.sset ?xss) |]
      ==> ?f = lists_succ ?xss",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_hole 4),
                  template_app (template_hole 8, template_var 1))))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Executable_Permutations.iterate_funpow_step",
     "[| ?f ?x ~= ?y; ?y : orbit ?f ?x |]
      ==> iterate 0 (funpow_dist1 ?f ?x ?y) ?f ?x =
          ?x # iterate 0 (funpow_dist1 ?f (?f ?x) ?y) ?f (?f ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_var 2, template_var 1)),
                   template_var 0))),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_var 2,
                         template_app (template_var 2, template_var 1))),
                     template_var 0))),
               template_var 2),
             template_app (template_var 2, template_var 1)))))),
    ("Executable_Permutations.cyclic_on_obtain_list_succ",
     "[| cyclic_on ?f ?S; !!x. x ~: ?S ==> ?f x = x;
         !!xs. [| ?f = list_succ xs; set xs = ?S; distinct xs |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.list_succ_unique",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x |]
      ==> EX! xs.
             ?f = list_succ xs &
             distinct xs & hd xs = ?s & set xs = orbit ?f ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Executable_Permutations.obtain_orbit_list_func",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x;
         !!xs. [| ?f = list_succ xs; set xs = orbit ?f ?s; distinct xs;
                  hd xs = ?s |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.cyclic_on_obtain_lists_succ",
     "[| ?f permutes ?S; ?S = \<Union> (Executable_Permutations.sset ?css);
         distincts ?css; !!cs. cs : set ?css ==> cyclic_on ?f (set cs);
         !!xss.
            [| ?f = lists_succ xss; distincts xss;
               map set xss = map set ?css; map hd xss = map hd ?css |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app (template_hole 12, template_var 1)))),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Executable_PermutationsMoreTemplates"
### 0.391s elapsed time, 0.578s cpu time, 0.089s GC time
val it = (): unit
