   [("Executable_Permutations.orbit_list_not_nil", "orbit_list ?f ?x ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Executable_Permutations.distincts_distinct",
     "distincts ?xss ==> distinct ?xss",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.list_succ_singleton",
     "list_succ [?x] = list_succ []",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_hole 0))),
    ("Executable_Permutations.distincts_rev",
     "distincts (map rev ?xss) = distincts ?xss",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Executable_Permutations.permutation_list_succ",
     "distinct ?xs ==> permutation (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.distincts_remove1",
     "distincts ?xss ==> distincts (remove1 ?xs ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.distincts_inj_on_set",
     "distincts ?xss ==> inj_on set (set ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.distincts_distinct_set",
     "distincts ?xss ==> distinct (map set ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Executable_Permutations.inj_list_succ",
     "distinct ?xs ==> inj (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Executable_Permutations.distinct_orbit_list'",
     "permutation ?f ==> distinct (orbit_list ?f ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Executable_Permutations.nil_in_permutations",
     "([] : set (permutations ?xs)) = (?xs = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_equation (template_var 0, template_hole 3))),
    ("Executable_Permutations.bij_lists_succ",
     "distincts ?xss ==> bij (lists_succ ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Executable_Permutations.bij_list_succ",
     "distinct ?xs ==> bij (list_succ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Executable_Permutations.list_succ_permutes",
     "distinct ?xs ==> list_succ ?xs permutes set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.lists_succ_Cons_pf",
     "lists_succ (?xs # ?xss) = list_succ ?xs o lists_succ ?xss",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Executable_Permutations.list_succ_rotate1",
     "distinct ?xs ==> list_succ (rotate1 ?xs) = list_succ ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Executable_Permutations.list_succ_in_conv",
     "(list_succ ?xs ?x : set ?xs) = (?x : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Executable_Permutations.list_succ_rotate",
     "distinct ?xs ==> list_succ (rotate ?n ?xs) = list_succ ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Executable_Permutations.orbits_list_conv_impl",
     "permutation ?f ==> orbits_list ?f ?xs = orbits_list_impl ?f ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Permutations.distinct_orbit_list",
     "?x : orbit ?f ?x ==> distinct (orbit_list ?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.lists_succ_snoc",
     "lists_succ (?xss @ [?xs]) = lists_succ ?xss o list_succ ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.distincts_single",
     "distincts [?xs] = (distinct ?xs & ?xs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Executable_Permutations.length_distincts",
     "distincts ?xss ==>
      length ?xss = card (Executable_Permutations.sset ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Executable_Permutations.list_succ_list_succ_rev",
     "distinct ?xs ==> list_succ (rev ?xs) (list_succ ?xs ?x) = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Executable_Permutations.inv_list_succ_eq",
     "distinct ?xs ==> inv (list_succ ?xs) = list_succ (rev ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Executable_Permutations.set_orbit_list'",
     "permutation ?f ==> set (orbit_list ?f ?x) = orbit ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Executable_Permutations.list_succ_not_in",
     "?x ~: set ?xs ==> list_succ ?xs ?x = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Executable_Permutations.list_succ_short",
     "length ?xs < 2 ==> list_succ ?xs = id",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Executable_Permutations.distincts_orbits_list",
     "[| distinct ?as; permutation ?f |]
      ==> distincts (orbits_list ?f ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Executable_Permutations.length_remove1_less",
     "?x : set ?xs ==> length (remove1 ?x ?xs) < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Executable_Permutations.list_succ_simps",
     "length ?xs <= index ?xs ?x ==> list_succ ?xs ?x = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Executable_Permutations.inv_lists_succ_eq",
     "distincts ?xss ==>
      inv (lists_succ ?xss) = lists_succ (rev (map rev ?xss))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))))),
    ("Executable_Permutations.lists_succ_permutes",
     "distincts ?xss ==>
      lists_succ ?xss permutes
      \<Union> (Executable_Permutations.sset ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Executable_Permutations.distincts_distinct_nth",
     "[| distincts ?xss; ?n < length ?xss |] ==> distinct (?xss ! ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Executable_Permutations.permutationss_Cons",
     "permutationss (?xs # ?xss) =
      concat
       (map (%ys. map ((#) ys) (permutationss ?xss)) (permutations ?xs))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Executable_Permutations.set_Cons_remove1",
     "?x : set ?xs ==> set (?x # remove1 ?x ?xs) = set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Executable_Permutations.distinct_Cons_remove1",
     "?x : set ?xs ==> distinct (?x # remove1 ?x ?xs) = distinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("Executable_Permutations.distincts_Cons_remove1",
     "?xs : set ?xss ==>
      distincts (?xs # remove1 ?xs ?xss) = distincts ?xss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("Executable_Permutations.set_orbit_list",
     "?x : orbit ?f ?x ==> set (orbit_list ?f ?x) = orbit ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 1)))),
    ("Executable_Permutations.cyclic_on_lists_succ",
     "[| distincts ?xss; ?xs : set ?xss |]
      ==> cyclic_on (lists_succ ?xss) (set ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.cyclic_on_list_succ",
     "[| distinct ?xs; ?xs ~= [] |]
      ==> cyclic_on (list_succ ?xs) (set ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Executable_Permutations.sset_orbits_list",
     "permutation ?f ==>
      Executable_Permutations.sset (orbits_list ?f ?xs) =
      orbit ?f ` set ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Executable_Permutations.orbit_list_conv_impl",
     "?x : orbit ?f ?x ==> orbit_list ?f ?x = orbit_list_impl ?f ?x [] ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0),
           template_var 1)))),
    ("Executable_Permutations.cyclic_on_lists_succ'",
     "[| distincts ?xss; ?A : Executable_Permutations.sset ?xss |]
      ==> cyclic_on (lists_succ ?xss) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Executable_Permutations.list_succ_in_conv1",
     "?A Int set ?xs = {} ==> (list_succ ?xs ?x : ?A) = (?x : ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Executable_Permutations.list_succ_simps",
     "index ?xs ?x + 1 = length ?xs ==> list_succ ?xs ?x = ?xs ! 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0)),
            template_hole 5),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Executable_Permutations.lists_succ_not_in",
     "?x ~: \<Union> (Executable_Permutations.sset ?xss) ==>
      lists_succ ?xss ?x = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, t_empty),
                      template_app (template_hole 2, template_var 0))))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Executable_Permutations.list_succ_last",
     "[| distinct ?xs; ?xs ~= [] |] ==> list_succ ?xs (last ?xs) = hd ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.orbit_list_succ",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> orbit (list_succ ?xs) ?x = set ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Executable_Permutations.in_set_permutations",
     "distinct ?xs ==>
      (?ys : set (permutations ?xs)) = (distinct ?ys & set ?xs = set ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 0)))
             )))),
    ("Executable_Permutations.lists_succ_remove1",
     "[| distincts ?xss; ?xs : set ?xss |]
      ==> lists_succ (?xs # remove1 ?xs ?xss) = lists_succ ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 2, template_var 1)))),
    ("Executable_Permutations.permutations_Cons",
     "permutations (?v # ?va) =
      concat
       (map (%y. map ((#) y) (permutations (remove1 y (?v # ?va))))
         (?v # ?va))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Executable_Permutations.set_permutationss",
     "distincts ?xss ==>
      set (permutationss ?xss) =
      {yss. distincts yss & map set ?xss = map set yss}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("Executable_Permutations.in_set_permutationss",
     "distincts ?xss ==>
      (?yss : set (permutationss ?xss)) =
      (distincts ?yss & map set ?xss = map set ?yss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)))
             )))),
    ("Executable_Permutations.permutations_not_nil",
     "?xs ~= [] ==>
      permutations ?xs =
      concat (map (%x. map ((#) x) (permutations (remove1 x ?xs))) ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0))))),
    ("Executable_Permutations.list_succ_commute",
     "set ?xs Int set ?ys = {} ==>
      list_succ ?xs (list_succ ?ys ?x) = list_succ ?ys (list_succ ?xs ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Executable_Permutations.lists_succ_no_order",
     "[| distincts ?xss; distincts ?yss; set ?xss = set ?yss |]
      ==> lists_succ ?xss = lists_succ ?yss",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.permutations_complete",
     "[| distinct ?xs; distinct ?ys; set ?xs = set ?ys |]
      ==> ?ys : set (permutations ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Executable_Permutations.lists_succ_in_conv",
     "(lists_succ ?xss ?x : \<Union> (Executable_Permutations.sset ?xss)) =
      (?x : \<Union> (Executable_Permutations.sset ?xss))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Executable_Permutations.list_succ_simps",
     "index ?xs ?x + 1 < length ?xs ==>
      list_succ ?xs ?x = ?xs ! (index ?xs ?x + 1)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)),
            template_hole 4),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 4))))),
    ("Executable_Permutations.lists_succ_in_conv1",
     "?A Int \<Union> (Executable_Permutations.sset ?xss) = {} ==>
      (lists_succ ?xss ?x : ?A) = (?x : ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 4, template_var 1)))),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Executable_Permutations.set_permutations_step",
     "?xs ~= [] ==>
      set (permutations ?xs) =
      (UN x:set ?xs. (#) x ` set (permutations (remove1 x ?xs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Executable_Permutations.list_succ_nth",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> list_succ ?xs (?xs ! ?n) = ?xs ! (Suc ?n mod length ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 5, template_var 1)))))),
    ("Executable_Permutations.in_set_cyc_permutations",
     "distinct ?xs ==>
      (?ys : set (cyc_permutations ?xs)) =
      (distinct ?ys & set ?xs = set ?ys & hd ?ys = hd ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 0),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_app (template_hole 0, template_var 1))))
             )))),
    ("Executable_Permutations.orbit_list_impl_conv",
     "?y : orbit ?f ?x ==>
      orbit_list_impl ?f ?y ?acc ?x =
      rev ?acc @ iterate 0 (funpow_dist1 ?f ?x ?y) ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_app (template_var 2, template_var 1)),
                     template_var 3))),
               template_var 2),
             template_var 1))))),
    ("Executable_Permutations.list_succ_funpow_conv",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> (list_succ ?xs ^^ ?n) ?x =
          ?xs ! ((index ?xs ?x + ?n) mod length ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 0, template_var 2)))))),
    ("Executable_Permutations.distincts_Cons'",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss & (ALL ys:set ?xss. set ?xs Int set ys = {}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_hole 7))),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 12, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   t_empty))))
           ))),
    ("Executable_Permutations.list_succ_set_cyc_permutations",
     "[| distinct ?xs; ?xs ~= [] |]
      ==> list_succ ` set (cyc_permutations ?xs) =
          {f. f permutes set ?xs & cyclic_on f (set ?xs)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 4, t_empty)))),
    ("Executable_Permutations.distincts_Cons",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss &
       set ?xs Int \<Union> (Executable_Permutations.sset ?xss) = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8))),
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 7, template_var 1)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 13, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 1)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, t_empty),
                           template_app
                            (template_hole 1, template_var 0))))),
                   template_hole 0))))
           ))),
    ("Executable_Permutations.in_set_cyc_permutationss",
     "distincts ?xss ==>
      (?yss : set (cyc_permutationss ?xss)) =
      (distincts ?yss &
       map set ?xss = map set ?yss & map hd ?xss = map hd ?yss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0))))
             )))),
    ("Executable_Permutations.lists_succ_set_cyc_permutationss",
     "distincts ?xss ==>
      lists_succ ` set (cyc_permutationss ?xss) =
      {f. f permutes \<Union> (Executable_Permutations.sset ?xss) &
          (ALL c:Executable_Permutations.sset ?xss. cyclic_on f c)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 12, template_hole 11),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 8, t_empty)))),
    ("Executable_Permutations.list_succ_orbit_list",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x |]
      ==> list_succ (orbit_list ?f ?s) = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Executable_Permutations.in_set_cyc_permutations_obtain",
     "[| distinct ?xs; distinct ?ys; set ?xs = set ?ys;
         !!n. rotate n ?ys : set (cyc_permutations ?xs) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.list_succ_altdef",
     "list_succ ?xs ?x =
      (let n = index ?xs ?x
       in if n + 1 = length ?xs then ?xs ! 0
          else if n + 1 < length ?xs then ?xs ! (n + 1) else ?x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         t_empty))),
    ("Executable_Permutations.cyclic_on_obtain_list_succ'",
     "[| cyclic_on ?f ?S; ?f permutes ?S;
         !!xs. [| ?f = list_succ xs; set xs = ?S; distinct xs |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.permutationss_complete",
     "[| distincts ?xss; distincts ?yss; ?xss ~= [];
         Executable_Permutations.sset ?xss =
         Executable_Permutations.sset ?yss |]
      ==> set ?yss : Executable_Permutations.sset (permutationss ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 1)),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 4),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Executable_Permutations.permutes_as_lists_succ",
     "[| distincts ?xss;
         !!xs. xs : set ?xss ==> list_succ xs = perm_restrict ?f (set xs);
         ?f permutes \<Union> (Executable_Permutations.sset ?xss) |]
      ==> ?f = lists_succ ?xss",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_hole 4),
                  template_app (template_hole 8, template_var 1))))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Executable_Permutations.iterate_funpow_step",
     "[| ?f ?x ~= ?y; ?y : orbit ?f ?x |]
      ==> iterate 0 (funpow_dist1 ?f ?x ?y) ?f ?x =
          ?x # iterate 0 (funpow_dist1 ?f (?f ?x) ?y) ?f (?f ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_var 2, template_var 1)),
                   template_var 0))),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_var 2,
                         template_app (template_var 2, template_var 1))),
                     template_var 0))),
               template_var 2),
             template_app (template_var 2, template_var 1)))))),
    ("Executable_Permutations.cyclic_on_obtain_list_succ",
     "[| cyclic_on ?f ?S; !!x. x ~: ?S ==> ?f x = x;
         !!xs. [| ?f = list_succ xs; set xs = ?S; distinct xs |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.list_succ_unique",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x |]
      ==> EX! xs.
             ?f = list_succ xs &
             distinct xs & hd xs = ?s & set xs = orbit ?f ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Executable_Permutations.obtain_orbit_list_func",
     "[| ?s : orbit ?f ?s; !!x. x ~: orbit ?f ?s ==> ?f x = x;
         !!xs. [| ?f = list_succ xs; set xs = orbit ?f ?s; distinct xs;
                  hd xs = ?s |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Executable_Permutations.cyclic_on_obtain_lists_succ",
     "[| ?f permutes ?S; ?S = \<Union> (Executable_Permutations.sset ?css);
         distincts ?css; !!cs. cs : set ?css ==> cyclic_on ?f (set cs);
         !!xss.
            [| ?f = lists_succ xss; distincts xss;
               map set xss = map set ?css; map hd xss = map hd ?css |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app (template_hole 12, template_var 1)))),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]
