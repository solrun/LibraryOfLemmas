   [("Executable_Permutations.list_succ_singleton",
     "list_succ [?x] = list_succ []",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_hole 0))),
    ("Executable_Permutations.distincts_rev",
     "distincts (map rev ?xss) = distincts ?xss",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Executable_Permutations.nil_in_permutations",
     "([] : set (permutations ?xs)) = (?xs = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_equation (template_var 0, template_hole 3))),
    ("Executable_Permutations.lists_succ_Cons_pf",
     "lists_succ (?xs # ?xss) = list_succ ?xs o lists_succ ?xss",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Executable_Permutations.list_succ_in_conv",
     "(list_succ ?xs ?x : set ?xs) = (?x : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Executable_Permutations.lists_succ_snoc",
     "lists_succ (?xss @ [?xs]) = lists_succ ?xss o list_succ ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Executable_Permutations.distincts_single",
     "distincts [?xs] = (distinct ?xs & ?xs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5))
            )],
       template_dunno)),
    ("Executable_Permutations.permutationss_Cons",
     "permutationss (?xs # ?xss) =
      concat
       (map (%ys. map ((#) ys) (permutationss ?xss)) (permutations ?xs))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Executable_Permutations.permutations_Cons",
     "permutations (?v # ?va) =
      concat
       (map (%y. map ((#) y) (permutations (remove1 y (?v # ?va))))
         (?v # ?va))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Executable_Permutations.lists_succ_in_conv",
     "(lists_succ ?xss ?x : \<Union> (sset ?xss)) =
      (?x : \<Union> (sset ?xss))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Executable_Permutations.distincts_Cons'",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss & (ALL ys:set ?xss. set ?xs Int set ys = {}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Executable_Permutations.distincts_Cons",
     "distincts (?xs # ?xss) =
      (?xs ~= [] &
       distinct ?xs &
       distincts ?xss & set ?xs Int \<Union> (sset ?xss) = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Executable_Permutations.list_succ_altdef",
     "list_succ ?xs ?x =
      (let n = index ?xs ?x
       in if n + 1 = length ?xs then ?xs ! 0
          else if n + 1 < length ?xs then ?xs ! (n + 1) else ?x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         t_empty)))]
