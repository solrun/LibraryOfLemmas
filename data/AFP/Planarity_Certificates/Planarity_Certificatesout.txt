Loading theory "Case_Labeling.Case_Labeling" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres")
Loading theory "Draft.Lib" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.OptionMonad")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification")
Loading theory "Draft.WP" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
locale Labeling_Syntax
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
consts
  delete :: "'a => 'a list => 'a list"
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
consts
  find :: "('a => bool) => 'a list => 'a option"
structure Eisbach_Rule_Insts: sig end
consts
  theRight :: "'a + 'b => 'b"
consts
  theLeft :: "'a + 'b => 'a"
### theory "Draft.Lib"
### 0.196s elapsed time, 0.770s cpu time, 0.038s GC time
Loading theory "Draft.NonDetMonad" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND" via "Draft.NonDetMonadLemmas")
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Case_Labeling.Case_Labeling"
### 0.265s elapsed time, 1.046s cpu time, 0.038s GC time
Loading theory "Draft.OptionMonad" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
signature WP =
  sig
    val apply_once_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_once_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_args:
       bool -> (Proof.context -> Method.method) context_parser
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> wp_rules
    val derived_rule: thm -> thm -> thm list
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_rules: Proof.context -> thm list -> wp_rules
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val warn_unused: bool Config.T
    val wp_add: attribute
    val wp_del: attribute
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPre:
  sig
    structure WPData: GENERIC_DATA
    val accum_last_occurence: (thm * 'a) list -> (thm * 'a list) list
    val accum_last_occurence':
       (thm * 'a) list ->
         'a list Termtab.table -> (thm * 'a list) list * unit Termtab.table
    val add_comb:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_extra_rule: 'a -> 'a list ref -> unit
    val add_rule:
       thm ->
         {combs: 'a,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: 'b,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: 'b,
            trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
    val add_rule_inner:
       (theory -> term -> term) ->
         thm ->
           (int * thm) Net.net * int * (int * thm) list ->
             (int * thm) Net.net * int * (int * thm) list
    val add_split:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val add_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val app:
       (Proof.context -> Proof.context) * attribute ->
         thm list -> Context.generic -> thm list * Context.generic
    val append_used_rule: 'a -> 'a list ref -> unit
    val apply_once_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_once_tac:
       bool ->
         Proof.context -> thm list -> thm list ref -> thm -> thm Seq.seq
    val apply_rules_args:
       bool ->
         Context.generic * Token.T list ->
           (Proof.context -> Method.method) *
           (Context.generic * Token.T list)
    val apply_rules_tac:
       bool -> Proof.context -> thm list -> thm list ref -> tactic
    val apply_rules_tac_n:
       bool -> Proof.context -> thm list -> thm list ref -> int -> tactic
    val clear_rules:
       {combs: 'a, rules: 'b, splits: 'c, trips: 'd, unsafe_rules: 'e} ->
         {combs: 'a,
          rules: 'f Net.net * int * 'g list,
          splits: 'c, trips: 'd, unsafe_rules: 'e}
    val combs_add: attribute
    val combs_del: attribute
    val debug_get: Proof.context -> WPData.T
    val del_comb:
       thm ->
         {combs: thm list,
          rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: thm list,
            rules: 'a, splits: 'b, trips: 'c, unsafe_rules: 'd}
    val del_rule:
       thm ->
         {combs: 'a,
          rules: ('b * thm) Net.net * 'b * ('b * thm) list,
          splits: 'c,
          trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
           ->
           {combs: 'a,
            rules: ('b * thm) Net.net * 'b * ('b * thm) list,
            splits: 'c,
            trips: 'd * (theory -> term -> term), unsafe_rules: 'e}
    val del_rule_inner:
       (theory -> term -> term) ->
         thm ->
           ('a * thm) Net.net * 'a * ('a * thm) list ->
             ('a * thm) Net.net * 'a * ('a * thm) list
    val del_split:
       thm ->
         {combs: 'a,
          rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
           ->
           {combs: 'a,
            rules: 'b, splits: thm list, trips: 'c, unsafe_rules: 'd}
    val del_trip:
       thm ->
         wp_rules ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val del_unsafe_rule:
       thm ->
         {combs: 'a,
          rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
           ->
           {combs: 'a,
            rules: 'b, splits: 'c, trips: 'd, unsafe_rules: thm list}
    val derived_rule: thm -> thm -> thm list
    val dest_rules: (int * 'a) Net.net * 'b * (int * 'a) list -> 'a list
    val flat_last_occurence: thm list -> thm list
    val gen_att: (thm -> WPData.T -> WPData.T) -> attribute
    val get_combined_rules: thm list -> thm list -> thm list
    val get_combined_rules': thm list -> thm -> thm list
    val get_key: (theory -> term -> term) -> thm -> term option
    val get_rules:
       Proof.context ->
         thm list ->
           {combs: thm list,
            rules: (int * thm) Net.net * int * (int * thm) list,
            splits: thm list,
            trips: thm list * (theory -> term -> term),
            unsafe_rules: thm list}
    val has_colon: Token.T list -> bool
    val if_colon:
       ('a * Token.T list -> 'b) ->
         ('a * Token.T list -> 'b) -> 'a * Token.T list -> 'b
    val mk_rules:
       (theory -> term -> term) ->
         thm list -> (int * thm) Net.net * int * (int * thm) list
    val mk_trip_conv: thm list -> theory -> term -> term
    val no_rules: 'a Net.net * int * 'b list
    val pretty_rule: Proof.context -> thm -> string
    val resolve_ruleset_tac:
       Proof.context ->
         {combs: thm list,
          rules: (int * thm) Net.net * 'a * ('b * thm) list,
          splits: thm list,
          trips: 'c * (theory -> term -> term), unsafe_rules: 'd}
           -> thm list ref -> int -> thm -> thm Seq.seq
    val rules_merge:
       {combs: thm list,
        rules: (int * thm) Net.net * 'a * (int * thm) list,
        splits: thm list, trips: thm list * 'b, unsafe_rules: thm list}
       *
       {combs: thm list,
        rules: (int * thm) Net.net * 'c * (int * thm) list,
        splits: thm list, trips: thm list * 'd, unsafe_rules: thm list}
         ->
         {combs: thm list,
          rules: (int * thm) Net.net * int * (int * thm) list,
          splits: thm list,
          trips: thm list * (theory -> term -> term),
          unsafe_rules: thm list}
    val section:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val sections:
       (Token.T list ->
          ((Proof.context -> Proof.context) * attribute) * Token.T list
       )
       list
         ->
         Context.generic * Token.T list ->
           thm list list * (Context.generic * Token.T list)
    val setup: theory -> theory
    val splits_add: attribute
    val splits_del: attribute
    val thms:
       (Token.T list -> 'a * Token.T list) list ->
         Context.generic * Token.T list ->
           thm list * (Context.generic * Token.T list)
    val trace_used_thms:
       bool -> thm list ref -> Proof.context -> unit Seq.seq
    val trip_add: attribute
    val trip_del: attribute
    val warn_unsafe_thms: thm list -> int -> Proof.context -> thm -> unit
    val warn_unused: bool Config.T
    val warn_unused_thms:
       Proof.context -> thm list -> thm list ref -> thm list ref -> unit
    val wp_add: attribute
    val wp_del: attribute
    val wp_modifiers:
       thm list ref ->
         (Token.T list ->
            ((Proof.context -> Proof.context) *
             (Context.generic * thm -> Context.generic option * thm option))
            *
            Token.T list
         )
         list
    type wp_rules =
       {combs: thm list,
        rules: (int * thm) Net.net * int * (int * thm) list,
        splits: thm list,
        trips: thm list * (theory -> term -> term), unsafe_rules: thm list}
    val wp_unsafe_add: attribute
    val wp_unsafe_del: attribute
  end
structure WeakestPreInst: WP
### theory "Draft.WP"
### 0.296s elapsed time, 1.168s cpu time, 0.038s GC time
Loading theory "Graph_Theory.Rtrancl_On" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
Proofs for inductive predicate(s) "rtrancl_onp"
  Proving monotonicity ...
### theory "HOL-Eisbach.Eisbach"
### 0.371s elapsed time, 1.452s cpu time, 0.071s GC time
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "HOL-Combinatorics.Permutations")
Proofs for inductive predicate(s) "option_while'p"
  Proving monotonicity ...
### theory "Graph_Theory.Rtrancl_On"
### 0.172s elapsed time, 0.716s cpu time, 0.033s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
### theory "HOL-Combinatorics.Transposition"
### 0.120s elapsed time, 0.517s cpu time, 0.000s GC time
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Subgraph" via "HOL-Library.Simps_Case_Conv")
### theory "Draft.OptionMonad"
### 0.280s elapsed time, 1.145s cpu time, 0.033s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
consts
  filterM ::
    "('a => 's => (bool * 's) set * bool)
     => 'a list => 's => ('a list * 's) set * bool"
Proofs for inductive predicate(s) "whileLoop_resultsp"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.165s elapsed time, 0.649s cpu time, 0.094s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Subgraph")
  Proving monotonicity ...
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.052s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "whileLoop_terminates"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
  Proving monotonicity ...
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Function_Algebras"
### 0.266s elapsed time, 0.886s cpu time, 0.494s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.574s elapsed time, 2.112s cpu time, 0.588s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "HOL-Combinatorics.Permutations")
### theory "Draft.NonDetMonad"
### 0.872s elapsed time, 3.323s cpu time, 0.621s GC time
Loading theory "Draft.NonDetMonadLemmas" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP" via "Draft.OptionMonadND")
### theory "HOL-Library.FuncSet"
### 0.564s elapsed time, 2.062s cpu time, 0.653s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "HOL-Combinatorics.Permutations")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Infinite_Set"
### 0.275s elapsed time, 1.081s cpu time, 0.065s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "Draft.NonDetMonadLemmas"
### 0.211s elapsed time, 0.830s cpu time, 0.065s GC time
Loading theory "Draft.OptionMonadND" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc" via "Draft.OptionMonadWP")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Disjoint_Sets"
### 0.277s elapsed time, 1.094s cpu time, 0.120s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.OptionMonadND"
### 0.251s elapsed time, 0.991s cpu time, 0.120s GC time
Loading theory "Draft.OptionMonadWP" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres" via "Draft.AutoCorres_Misc")
### theory "HOL-Library.Nat_Bijection"
### 0.295s elapsed time, 1.167s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.346s elapsed time, 1.370s cpu time, 0.132s GC time
Loading theory "HOL-Library.Old_Recdef" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoarePartial" via "Simpl.HoarePartialProps" via "Simpl.HoarePartialDef" via "Simpl.Semantic" via "Simpl.Language")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "Draft.OptionMonadWP"
### 0.341s elapsed time, 1.349s cpu time, 0.271s GC time
Loading theory "Draft.AutoCorres_Misc" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification" via "Draft.Setup_AutoCorres")
### theory "Draft.AutoCorres_Misc"
### 0.046s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.Setup_AutoCorres" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Planarity_Verification")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
val vcg_tac = fn: string -> string -> Proof.context -> int -> tactic
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  mset :: "'a list => 'a multiset"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.128s cpu time, 1.347s GC time
Loading theory "HOL-Library.Rewrite" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Kuratowski")
### ML warning (line 435 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 523 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (Body) has not been referenced.
### ML warning (line 529 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (Body) has not been referenced.
### ML warning (line 535 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (Body) has not been referenced.
### ML warning (line 732 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 753 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 795 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (Body) has not been referenced.
### ML warning (line 1045 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (ldisjs) has not been referenced.
### ML warning (line 1152 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1157 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1196 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1391 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1391 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (sty) has not been referenced.
### ML warning (line 1394 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1394 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (fty) has not been referenced.
### ML warning (line 1547 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1725 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (A) has not been referenced.
### ML warning (line 1724 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (A) has not been referenced.
### ML warning (line 1730 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 1786 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 1801 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (rows) has not been referenced.
### ML warning (line 1850 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (ty) has not been referenced.
### ML warning (line 1864 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (rows) has not been referenced.
### ML warning (line 1864 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (rstp) has not been referenced.
### ML warning (line 1881 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 1953 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 1968 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 2009 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 2014 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 2009 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 2120 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (ex) has not been referenced.
### ML warning (line 2120 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 2125 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 2159 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 2145 of "~~/src/HOL/Library/old_recdef.ML"):
### Matches are not exhaustive.
### ML warning (line 2234 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (R) has not been referenced.
### ML warning (line 2301 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 2302 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (lhs) has not been referenced.
### ML warning (line 2571 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (L) has not been referenced.
### ML warning (line 2578 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (dummy) has not been referenced.
### ML warning (line 2582 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (dummy) has not been referenced.
### ML warning (line 2584 of "~~/src/HOL/Library/old_recdef.ML"):
### Value identifier (dummy) has not been referenced.
### ML warning (line 2619 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
### ML warning (line 2838 of "~~/src/HOL/Library/old_recdef.ML"):
### Pattern is not exhaustive.
signature CASE_SPLIT =
  sig val splitto: Proof.context -> thm list -> thm -> thm end
signature UTILS =
  sig
    exception ERR of {func: string, mesg: string, module: string}
    val end_itlist: ('a -> 'a -> 'a) -> 'a list -> 'a
    val itlist2: ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
    val pluck: ('a -> bool) -> 'a list -> 'a * 'a list
    val take: ('a -> 'b) -> int * 'a list -> 'b list
    val zip3: 'a list -> 'b list -> 'c list -> ('a * 'b * 'c) list
  end
signature USYNTAX =
  sig
    val ARB: typ -> term
    val alpha: typ
    val dest_abs:
       string list -> term -> {Body: term, Bvar: term} * string list
    val dest_comb: term -> {Rand: term, Rator: term}
    val dest_conj: term -> {conj1: term, conj2: term}
    val dest_const: term -> {Name: string, Ty: typ}
    val dest_disj: term -> {disj1: term, disj2: term}
    val dest_eq: term -> {lhs: term, rhs: term}
    val dest_exists: term -> {Body: term, Bvar: term}
    val dest_forall: term -> {Body: term, Bvar: term}
    val dest_imp: term -> {ant: term, conseq: term}
    val dest_neg: term -> term
    val dest_pabs:
       string list ->
         term -> {body: term, used: string list, varstruct: term}
    val dest_pair: term -> {fst: term, snd: term}
    val dest_relation: term -> term * term * term
    val dest_term: term -> lambda
    val find_term: (term -> bool) -> term -> term option
    val free_vars_lr: term -> term list
    val gen_all: term -> term
    val inst: (typ * typ) list -> term -> term
    val is_WFR: term -> bool
    val is_conj: term -> bool
    val is_disj: term -> bool
    val is_exists: term -> bool
    val is_forall: term -> bool
    val is_imp: term -> bool
    val is_neg: term -> bool
    val is_pabs: term -> bool
    val is_pair: term -> bool
    val is_vartype: typ -> bool
    datatype lambda
    =
         COMB of {Rand: term, Rator: term}
       | CONST of {Name: string, Ty: typ}
       | LAMB of {Body: term, Bvar: term}
       | VAR of {Name: string, Ty: typ}
    val lhs: term -> term
    val list_mk_abs: term list * term -> term
    val list_mk_conj: term list -> term
    val list_mk_forall: term list * term -> term
    val list_mk_imp: term list * term -> term
    val mk_abs: {Body: term, Bvar: term} -> term
    val mk_conj: {conj1: term, conj2: term} -> term
    val mk_disj: {disj1: term, disj2: term} -> term
    val mk_exists: {Body: term, Bvar: term} -> term
    val mk_forall: {Body: term, Bvar: term} -> term
    val mk_imp: {ant: term, conseq: term} -> term
    val mk_pabs: {body: term, varstruct: term} -> term
    val mk_select: {Body: term, Bvar: term} -> term
    val mk_vartype: string -> typ
    val mk_vstruct: typ -> term list -> term
    val rand: term -> term
    val rhs: term -> term
    val strip_abs: term -> term list * term
    val strip_comb: term -> term * term list
    val strip_disj: term -> term list
    val strip_exists: term -> term list * term
    val strip_forall: term -> term list * term
    val strip_imp: term -> term list * term
    val strip_prod_type: typ -> typ list
    val type_vars: typ -> typ list
    val type_vars_in_term: term -> typ list
    val type_varsl: typ list -> typ list
  end
signature DCTERM =
  sig
    val cabs: cterm -> cterm -> cterm
    val capply: cterm -> cterm -> cterm
    val dest_abs: cterm -> cterm * cterm
    val dest_comb: cterm -> cterm * cterm
    val dest_conj: cterm -> cterm * cterm
    val dest_const: cterm -> {Name: string, Ty: typ}
    val dest_disj: cterm -> cterm * cterm
    val dest_eq: cterm -> cterm * cterm
    val dest_exists: cterm -> cterm * cterm
    val dest_forall: cterm -> cterm * cterm
    val dest_imp: cterm -> cterm * cterm
    val dest_neg: cterm -> cterm
    val dest_pair: cterm -> cterm * cterm
    val dest_var: cterm -> {Name: string, Ty: typ}
    val drop_prop: cterm -> cterm
    val is_conj: cterm -> bool
    val is_disj: cterm -> bool
    val is_eq: cterm -> bool
    val is_exists: cterm -> bool
    val is_forall: cterm -> bool
    val is_imp: cterm -> bool
    val is_neg: cterm -> bool
    val is_pair: cterm -> bool
    val list_mk_disj: cterm list -> cterm
    val mk_conj: cterm * cterm -> cterm
    val mk_disj: cterm * cterm -> cterm
    val mk_exists: cterm * cterm -> cterm
    val mk_prop: cterm -> cterm
    val strip_abs: cterm -> cterm list * cterm
    val strip_comb: cterm -> cterm * cterm list
    val strip_disj: cterm -> cterm list
    val strip_exists: cterm -> cterm list * cterm
    val strip_forall: cterm -> cterm list * cterm
    val strip_imp: cterm -> cterm list * cterm
  end
signature RULES =
  sig
    val ASSUME: cterm -> thm
    val CHOOSE: Proof.context -> cterm * thm -> thm -> thm
    val CONJUNCT1: thm -> thm
    val CONJUNCT2: thm -> thm
    val CONJUNCTS: thm -> thm list
    val CONTEXT_REWRITE_RULE:
       Proof.context ->
         term * term list * thm * thm list -> thm -> thm * term list
    val DISCH: cterm -> thm -> thm
    val DISCH_ALL: thm -> thm
    val DISJ_CASESL: thm -> thm list -> thm
    val EVEN_ORS: thm list -> thm list
    val EXISTS: Proof.context -> cterm * cterm -> thm -> thm
    val FILTER_DISCH_ALL: (term -> bool) -> thm -> thm
    val GEN: Proof.context -> cterm -> thm -> thm
    val GENL: Proof.context -> cterm list -> thm -> thm
    val GEN_ALL: Proof.context -> thm -> thm
    val IMP_TRANS: thm -> thm -> thm
    val ISPEC: cterm -> thm -> thm
    val ISPECL: cterm list -> thm -> thm
    val IT_EXISTS: Proof.context -> (cterm * cterm) list -> thm -> thm
    val LIST_CONJ: thm list -> thm
    val MATCH_MP: thm -> thm -> thm
    val MP: thm -> thm -> thm
    val PROVE_HYP: thm -> thm -> thm
    val REFL: cterm -> thm
    val RIGHT_ASSOC: Proof.context -> thm -> thm
    val SPEC: cterm -> thm -> thm
    val SPEC_ALL: thm -> thm
    val SUBS: Proof.context -> thm list -> thm -> thm
    val SYM: thm -> thm
    val UNDISCH: thm -> thm
    val dest_thm: thm -> term list * term
    val list_beta_conv: cterm -> cterm list -> thm
    val prove:
       Proof.context -> bool -> term -> (Proof.context -> tactic) -> thm
    val rbeta: thm -> thm
    val simpl_conv: Proof.context -> thm list -> cterm -> thm
    val tracing: bool ref
  end
signature THRY =
  sig
    val extract_info:
       theory -> {case_congs: thm list, case_rewrites: thm list}
    val induct_info:
       theory -> string -> {constructors: term list, nchotomy: thm} option
    val match_info:
       theory ->
         string -> {case_const: term, constructors: term list} option
    val match_term:
       theory -> term -> term -> (term * term) list * (typ * typ) list
    val match_type: theory -> typ -> typ -> (typ * typ) list
    val typecheck: theory -> term -> cterm
  end
signature PRIM =
  sig
    val mk_functional:
       theory -> term list -> {functional: term, pats: pattern list}
    val mk_induction:
       Proof.context ->
         {R: term,
          SV: term list,
          fconst: term, pat_TCs_list: (term * term list) list}
           -> thm
    type pattern
    val post_definition:
       Proof.context ->
         thm list ->
           thm * pattern list ->
             {TCs: term list list,
              full_pats_TCs: (term * term list) list,
              rows: int list, rules: thm}
    val postprocess:
       Proof.context ->
         bool ->
           {simplifier: Proof.context -> cterm -> thm,
            terminator: Proof.context -> tactic,
            wf_tac: Proof.context -> tactic}
             ->
             {TCs: term list list, induction: thm, rules: thm} ->
               {induction: thm, nested_tcs: thm list, rules: thm}
    val trace: bool ref
    val trace_cterm: Proof.context -> string -> cterm -> unit
    val trace_thms: Proof.context -> string -> thm list -> unit
    val wfrec_definition0: string -> term -> term -> theory -> thm * theory
  end
signature TFL =
  sig
    val define:
       bool ->
         thm list ->
           thm list ->
             xstring ->
               string ->
                 string list ->
                   Proof.context ->
                     {induct: thm,
                      lhs: term, rules: (thm * int) list, tcs: term list}
                     *
                     Proof.context
    val define_i:
       bool ->
         thm list ->
           thm list ->
             xstring ->
               term ->
                 term list ->
                   Proof.context ->
                     {induct: thm,
                      lhs: term, rules: (thm * int) list, tcs: term list}
                     *
                     Proof.context
  end
signature OLD_RECDEF =
  sig
    val add_recdef:
       bool ->
         xstring ->
           string ->
             ((binding * string) * Token.src list) list ->
               Token.src option ->
                 theory ->
                   theory *
                   {induct: thm,
                    lhs: term,
                    rules: thm list list, simps: thm list, tcs: term list}
    val add_recdef_i:
       bool ->
         xstring ->
           term ->
             ((binding * term) * attribute list) list ->
               theory ->
                 theory *
                 {induct: thm,
                  lhs: term,
                  rules: thm list list, simps: thm list, tcs: term list}
    val cong_add: attribute
    val cong_del: attribute
    val get_hints:
       Proof.context ->
         {congs: (string * thm) list, simps: thm list, wfs: thm list}
    val get_recdef:
       theory ->
         string ->
           {induct: thm,
            lhs: term,
            rules: thm list list, simps: thm list, tcs: term list}
           option
    val simp_add: attribute
    val simp_del: attribute
    val wf_add: attribute
    val wf_del: attribute
  end
structure Old_Recdef: OLD_RECDEF
### theory "HOL-Library.Old_Recdef"
### 0.942s elapsed time, 3.535s cpu time, 1.214s GC time
Loading theory "Simpl.Language" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoarePartial" via "Simpl.HoarePartialProps" via "Simpl.HoarePartialDef" via "Simpl.Semantic")
infix 1 then_cconv
infix 0 else_cconv
type cconv = conv
signature BASIC_CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    type cconv = conv
    val else_cconv: cconv * cconv -> cconv
    val then_cconv: cconv * cconv -> cconv
  end
signature CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    val abs_cconv:
       (cterm * Proof.context -> cconv) -> Proof.context -> cconv
    val all_cconv: cconv
    val arg1_cconv: cconv -> cconv
    val arg_cconv: cconv -> cconv
    type cconv = conv
    val comb_cconv: cconv -> cconv
    val combination_cconv: cconv -> cconv -> cconv
    val concl_cconv: int -> cconv -> cconv
    val else_cconv: cconv * cconv -> cconv
    val fconv_rule: cconv -> thm -> thm
    val first_cconv: cconv list -> cconv
    val fun2_cconv: cconv -> cconv
    val fun_cconv: cconv -> cconv
    val gconv_rule: cconv -> int -> thm -> thm
    val no_cconv: cconv
    val params_cconv:
       int -> (Proof.context -> cconv) -> Proof.context -> cconv
    val prems_cconv: int -> cconv -> cconv
    val rewr_cconv: thm -> cconv
    val rewrs_cconv: thm list -> cconv
    val then_cconv: cconv * cconv -> cconv
    val with_prems_cconv: int -> cconv -> cconv
  end
structure CConv: CCONV
structure Basic_CConv: BASIC_CCONV
val then_cconv = fn: cconv * cconv -> cconv
val CCONVERSION = fn: cconv -> int -> tactic
val else_cconv = fn: cconv * cconv -> cconv
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
infix 1 then_pconv
infix 0 else_pconv
signature REWRITE =
  sig
    val abs_pconv: patconv -> string option * typ -> patconv
    val all_pconv: patconv
    val arg_pconv: patconv -> patconv
    val asm_pconv: patconv -> patconv
    val asms_pconv: patconv -> patconv
    val concl_pconv: patconv -> patconv
    val else_pconv: patconv * patconv -> patconv
    val for_pconv: patconv -> (string option * typ option) list -> patconv
    val forall_pconv: patconv -> string option * typ option -> patconv
    val fun_pconv: patconv -> patconv
    val imp_pconv: patconv -> patconv
    val in_pconv: patconv -> patconv
    val judgment_pconv: patconv -> patconv
    val match_pconv: patconv -> term * (string option * typ) list -> patconv
    val mk_hole: int -> typ -> term
    val params_pconv: patconv -> patconv
    type patconv =
       Proof.context -> Type.tyenv * (string * term) list -> cconv
    datatype ('a, 'b) pattern
    = Asm | At | Concl | For of 'b list | In | Term of 'a
    val rewrite_conv:
       Proof.context ->
         (term * (string * typ) list, string * typ option) pattern list *
         term option
           -> thm list -> conv
    val rewrs_pconv: term option -> thm list -> patconv
    val then_pconv: patconv * patconv -> patconv
  end
structure Rewrite: REWRITE
### theory "HOL-Library.Rewrite"
### 0.228s elapsed time, 0.893s cpu time, 0.058s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Set_Algebras"
### 0.284s elapsed time, 1.112s cpu time, 0.132s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "Draft.Setup_AutoCorres"
### 1.287s elapsed time, 4.883s cpu time, 1.265s GC time
Loading theory "HOL-Statespace.DistinctTreeProver" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "HOL-Statespace.StateSpaceLocale" via "HOL-Statespace.StateFun")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  set_of :: "'a tree => 'a set"
consts
  all_distinct :: "'a tree => bool"
consts
  delete :: "'a => 'a tree => 'a tree option"
Found termination order: "size <*mlex*> {}"
consts
  subtract :: "'a tree => 'a tree => 'a tree option"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### ML warning (line 36 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 36 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Pattern is not exhaustive.
### ML warning (line 67 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 56 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 75 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 75 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (order) has not been referenced.
### ML warning (line 69 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 69 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (order) has not been referenced.
### ML warning (line 198 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Pattern is not exhaustive.
### ML warning (line 249 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Pattern is not exhaustive.
### ML warning (line 266 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (xrs) has not been referenced.
### ML warning (line 271 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (yrs) has not been referenced.
### ML warning (line 271 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (yr) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (r) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (d) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (l) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (nT) has not been referenced.
### ML warning (line 307 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (ct) has not been referenced.
### ML warning (line 310 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Pattern is not exhaustive.
### ML warning (line 319 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Pattern is not exhaustive.
### ML warning (line 307 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Matches are not exhaustive.
### ML warning (line 337 of "~~/src/HOL/Statespace/distinct_tree_prover.ML"):
### Value identifier (f) has not been referenced.
signature DISTINCT_TREE_PROVER =
  sig
    val dest_tree: term -> term list
    datatype direction = Left | Right
    val discharge: Proof.context -> thm list -> thm -> thm
    val distinctFieldSolver: string list -> solver
    val distinctTreeProver:
       Proof.context -> thm -> direction list -> direction list -> thm
    val distinctTree_tac: string list -> Proof.context -> int -> tactic
    val distinct_implProver: Proof.context -> thm -> cterm -> thm
    val distinct_simproc: string list -> simproc
    val find_in_set: Proof.context -> term -> cterm -> thm
    val find_tree: term -> term -> direction list option
    val in_set: Proof.context -> direction list -> cterm -> thm
    val mk_tree: ('a -> term) -> typ -> 'a list -> term
    val neq_to_eq_False: thm
    val neq_x_y: Proof.context -> term -> term -> string -> thm option
    val subtractProver: Proof.context -> term -> cterm -> thm -> thm
  end
structure DistinctTreeProver: DISTINCT_TREE_PROVER
### theory "HOL-Statespace.DistinctTreeProver"
### 0.917s elapsed time, 3.636s cpu time, 0.410s GC time
Loading theory "HOL-Statespace.StateFun" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "HOL-Statespace.StateSpaceLocale")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Statespace.StateFun"
### 0.077s elapsed time, 0.305s cpu time, 0.000s GC time
Loading theory "HOL-Statespace.StateSpaceLocale" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### ML warning (line 91 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 95 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 95 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 95 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (ys) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (sorted_subset) has not been referenced.
### ML warning (line 100 of "~~/src/HOL/Statespace/state_space.ML"):
### Matches are not exhaustive.
### ML warning (line 126 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (name) has not been referenced.
### ML warning (line 354 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (phi) has not been referenced.
### ML warning (line 412 of "~~/src/HOL/Statespace/state_space.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 410 of "~~/src/HOL/Statespace/state_space.ML"):
### Matches are not exhaustive.
### ML warning (line 665 of "~~/src/HOL/Statespace/state_space.ML"):
### Matches are not exhaustive.
### ML warning (line 670 of "~~/src/HOL/Statespace/state_space.ML"):
### Matches are not exhaustive.
### ML warning (line 702 of "~~/src/HOL/Statespace/state_space.ML"):
### Matches are not exhaustive.
signature STATE_SPACE =
  sig
    val define_statespace:
       string list ->
         string ->
           ((string * bool) *
            (string list * bstring * (string * string) list)
           )
           list
             -> (string * string) list -> theory -> theory
    val define_statespace_i:
       string option ->
         string list ->
           string ->
             ((string * bool) *
              (typ list * bstring * (string * string) list)
             )
             list
               -> (string * typ) list -> theory -> theory
    val distinctNameSolver: solver
    val distinctTree_tac: Proof.context -> int -> tactic
    val distinct_compsN: string
    val distinct_simproc: simproc
    val gen'_update_tr:
       bool -> bool -> Proof.context -> string -> term -> term -> term
    val gen_lookup_tr: Proof.context -> term -> string -> term
    val gen_update_tr:
       bool -> Proof.context -> string -> term -> term -> term
    val getN: string
    val get_comp: Context.generic -> string -> (typ * string) option
    val get_comp': Context.generic -> string -> (typ * string list) option
    val get_comps: Context.generic -> (typ * string list) Termtab.table
    val get_silent: Context.generic -> bool
    val injectN: string
    val is_statespace: Context.generic -> xstring -> bool
    val lookup_swap_tr: Proof.context -> term list -> term
    val lookup_tr: Proof.context -> term list -> term
    val lookup_tr': Proof.context -> term list -> term
    val namespaceN: string
    val namespace_definition:
       bstring ->
         typ ->
           (xstring, string) Expression.expr *
           (binding * string option * mixfix) list
             -> string list -> string list -> theory -> theory
    val neq_x_y: Proof.context -> term -> term -> thm option
    val projectN: string
    val putN: string
    val set_silent: bool -> Context.generic -> Context.generic
    val statespace_decl:
       ((string list * bstring) *
        (((string * bool) *
          (string list * xstring * (bstring * bstring) list)
         )
         list
         *
         (bstring * string) list)
       )
       parser
    val trace_name_space_data: Context.generic -> unit
    val trace_state_space_data: Context.generic -> unit
    val update_tr: Proof.context -> term list -> term
    val update_tr': Proof.context -> term list -> term
    val valuetypesN: string
  end
structure StateSpace: STATE_SPACE
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### ML warning (line 131 of "~~/src/HOL/Statespace/state_fun.ML"):
### Pattern is not exhaustive.
### ML warning (line 155 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 135 of "~~/src/HOL/Statespace/state_fun.ML"):
### Pattern is not exhaustive.
### ML warning (line 191 of "~~/src/HOL/Statespace/state_fun.ML"):
### Pattern is not exhaustive.
### ML warning (line 193 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 223 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 226 of "~~/src/HOL/Statespace/state_fun.ML"):
### Pattern is not exhaustive.
### ML warning (line 303 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 305 of "~~/src/HOL/Statespace/state_fun.ML"):
### Pattern is not exhaustive.
### ML warning (line 383 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 361 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 361 of "~~/src/HOL/Statespace/state_fun.ML"):
### Value identifier (comp) has not been referenced.
signature STATE_FUN =
  sig
    val ex_lookup_eq_simproc: simproc
    val ex_lookup_ss: simpset
    val lazy_conj_simproc: simproc
    val lookupN: string
    val lookup_simproc: simproc
    val mk_constr: theory -> typ -> term
    val mk_destr: theory -> typ -> term
    val string_eq_simp_tac: Proof.context -> int -> tactic
    val trace_data: Context.generic -> unit
    val updateN: string
    val update_simproc: simproc
  end
structure StateFun: STATE_FUN
locale project_inject
  fixes project :: "'value => 'a"
    and inject :: "'a => 'value"
  assumes "project_inject project inject"
### theory "HOL-Statespace.StateSpaceLocale"
### 0.469s elapsed time, 1.836s cpu time, 0.318s GC time
Loading theory "Simpl.Generalise" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
### ML warning (line 109 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 98 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 245 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 223 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 212 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (P) has not been referenced.
### ML warning (line 201 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (P) has not been referenced.
### ML warning (line 186 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 164 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 164 of "$AFP/Simpl/generalise_state.ML"):
### Value identifier (aT) has not been referenced.
### ML warning (line 245 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 227 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 228 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 230 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 233 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 242 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 190 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 191 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 194 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 198 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 168 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 169 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 171 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 174 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 183 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 214 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 215 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 203 of "$AFP/Simpl/generalise_state.ML"):
### Pattern is not exhaustive.
### ML warning (line 204 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 163 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
### ML warning (line 246 of "$AFP/Simpl/generalise_state.ML"):
### Matches are not exhaustive.
signature SPLIT_STATE =
  sig
    val abs_state: term -> term option
    val abs_var: Proof.context -> term -> string * typ
    val ex_tac: Proof.context -> term list -> tactic
    val isState: term -> bool
    val split_state:
       Proof.context -> string -> typ -> term -> term * term list
  end
functor GeneraliseFun (sig structure SplitState: SPLIT_STATE end): 
  sig
    val GENERALISE: Proof.context -> int -> tactic
    val OF_RAW: thm * thm -> thm
    val SIMPLE_OF: Proof.context -> thm -> thm list -> thm
    val SIMPLE_OF_RAW: Proof.context -> thm -> thm -> thm
    val conc_of: thm -> term
    val decomp:
       Proof.context ->
         term * cterm -> term list * cterm list * (thm list -> thm)
    val dest_All: term -> term
    val dest_prop: term -> term
    val eta_expand: Proof.context -> cterm -> cterm
    val genAll: thm
    val genAllShift: thm
    val genConj: thm
    val genEx: thm
    val genImp: thm
    val genImpl: thm
    val genRefl: thm
    val genRefl': thm
    val genTrans: thm
    val gen_all: thm
    val gen_allShift: thm
    val gen_thm:
       ('a * 'b -> 'a list * 'b list * ('c list -> 'c)) -> 'a * 'b -> 'c
    val generalise: Proof.context -> cterm -> thm
    val generalise_over_all_states_tac: Proof.context -> int -> tactic
    val generalise_over_tac:
       Proof.context -> (term -> term option) -> int -> thm -> thm Seq.seq
    val generalise_tac: Proof.context -> int -> thm -> thm Seq.seq
    val init: cterm -> thm
    val list_exists: (string * typ) list * term -> term
    val meta_spec: thm
    val prem_of: thm -> term
    val protectImp: thm
    val protectRefl: thm
    datatype qantifier = Hol_all | Hol_ex | Meta_all
    val spec': cterm -> thm -> thm
    val split_abs:
       Proof.context -> cterm -> (string * typ * term) * (cterm * cterm)
    val split_thm:
       qantifier -> Proof.context -> string -> typ -> term -> thm
  end
### theory "Simpl.Generalise"
### 0.097s elapsed time, 0.397s cpu time, 0.000s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.964s elapsed time, 15.474s cpu time, 2.595s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus")
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
### theory "HOL-Library.Tree"
### 2.140s elapsed time, 8.471s cpu time, 1.006s GC time
Loading theory "Draft.Templates" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.ExtrEqs")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flatten :: "('s, 'p, 'f) com => ('s, 'p, 'f) com list"
consts
  sequence ::
    "(('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com)
     => ('s, 'p, 'f) com list => ('s, 'p, 'f) com"
consts
  normalize :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
consts
  strip_guards :: "'f set => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
consts
  mark_guards :: "'f => ('s, 'p, 'g) com => ('s, 'p, 'f) com"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.291s elapsed time, 5.099s cpu time, 0.734s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### No equation for constructor "Skip"
### No equation for constructor "Basic"
### No equation for constructor "Spec"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "Call"
### No equation for constructor "DynCom"
### No equation for constructor "Throw"
### No equation for constructor "Catch"
consts
  dest_Guard :: "('s, 'p, 'f) com => 'f * 's set * ('s, 'p, 'f) com"
### theory "HOL-Combinatorics.Permutations"
### 1.045s elapsed time, 4.125s cpu time, 0.586s GC time
Loading theory "HOL-Combinatorics.Orbits" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Subdivision" via "Graph_Theory.Auxiliary")
consts
  merge_guards :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
Proofs for inductive predicate(s) "orbitp"
  Proving monotonicity ...
consts
  noguards :: "('s, 'p, 'f) com => bool"
consts
  nothrows :: "('s, 'p, 'f) com => bool"
### theory "HOL-Library.BigO"
### 0.890s elapsed time, 3.527s cpu time, 0.456s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Planarity_CertificatesMoreTemplates")
Proofs for inductive predicate(s) "com_relp"
  Proving monotonicity ...
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Combinatorics.Orbits"
### 0.316s elapsed time, 1.249s cpu time, 0.166s GC time
Loading theory "Graph_Theory.Auxiliary" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Subdivision")
Proofs for inductive predicate(s) "segmentp"
  Proving monotonicity ...
### theory "HOL-Library.Countable_Set"
### 0.516s elapsed time, 2.037s cpu time, 0.303s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "Graph_Theory.Auxiliary"
### 0.217s elapsed time, 0.853s cpu time, 0.136s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
### Legacy feature! Old 'recdef' command -- use 'fun' or 'function' instead
Defining recursive function "Language.inter_guards" ...
Proving induction theorem ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.756s elapsed time, 2.987s cpu time, 0.405s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Executable_Permutations" via "Draft.List_Aux")
consts
  find_index :: "('a => bool) => 'a list => nat"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "HOL-Library.Liminf_Limsup"
### 0.520s elapsed time, 2.059s cpu time, 0.198s GC time
Loading theory "Transitive-Closure.Transitive_Closure_Impl" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Postprocessing ...
locale set_access
  fixes un :: "'a list => 'b => 'b"
    and set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
  assumes "set_access un set_of memb empty"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale set_access_succ
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and succ :: "'a list => 'a list"
    and rel :: "('a * 'a) set"
  assumes "set_access_succ set_of memb empty un succ rel"
Simplifying nested TCs ...
### theory "List-Index.List_Index"
### 0.422s elapsed time, 1.661s cpu time, 0.195s GC time
Loading theory "Draft.List_Aux" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Executable_Permutations")
... Postprocessing finished
locale set_access_gen
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and gen_succ :: "('a * 'a) list => 'a list => 'a list"
  assumes "set_access_gen set_of memb empty un gen_succ"
### theory "Draft.List_Aux"
### 0.048s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.Executable_Permutations" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl")
### theory "Transitive-Closure.Transitive_Closure_Impl"
### 0.335s elapsed time, 1.318s cpu time, 0.100s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
Found termination order: "(%p. size_list length (fst p)) <*mlex*> {}"
Proving unsplit equation...
th:
(Skip \<inter>\<^sub>g Skip) = None ==> (Skip \<inter>\<^sub>g Skip) = None
split ths:
(Skip \<inter>\<^sub>g Basic ?bc) = None
(Skip \<inter>\<^sub>g Spec ?bd) = None
(Skip \<inter>\<^sub>g Seq ?be ?bf) = None
(Skip \<inter>\<^sub>g Cond ?bg ?bh ?bi) = None
(Skip \<inter>\<^sub>g While ?bj ?bk) = None
(Skip \<inter>\<^sub>g Call ?bl) = None
(Skip \<inter>\<^sub>g DynCom ?bm) = None
(Skip \<inter>\<^sub>g Guard ?bn ?bo ?bp) = None
(Skip \<inter>\<^sub>g Throw) = None
(Skip \<inter>\<^sub>g Catch ?bq ?br) = None
(Basic ?w \<inter>\<^sub>g Skip) = None
(Basic ?w \<inter>\<^sub>g Spec ?cj) = None
(Basic ?w \<inter>\<^sub>g Seq ?ck ?cl) = None
(Basic ?w \<inter>\<^sub>g Cond ?cm ?cn ?co) = None
(Basic ?w \<inter>\<^sub>g While ?cp ?cq) = None
(Basic ?w \<inter>\<^sub>g Call ?cr) = None
(Basic ?w \<inter>\<^sub>g DynCom ?cs) = None
(Basic ?w \<inter>\<^sub>g Guard ?ct ?cu ?cv) = None
(Basic ?w \<inter>\<^sub>g Throw) = None
(Basic ?w \<inter>\<^sub>g Catch ?cw ?cx) = None
(Spec ?x \<inter>\<^sub>g Skip) = None
(Spec ?x \<inter>\<^sub>g Basic ?do) = None
(Spec ?x \<inter>\<^sub>g Seq ?dq ?dr) = None
(Spec ?x \<inter>\<^sub>g Cond ?ds ?dt ?du) = None
(Spec ?x \<inter>\<^sub>g While ?dv ?dw) = None
(Spec ?x \<inter>\<^sub>g Call ?dx) = None
(Spec ?x \<inter>\<^sub>g DynCom ?dy) = None
(Spec ?x \<inter>\<^sub>g Guard ?dz ?ea ?eb) = None
(Spec ?x \<inter>\<^sub>g Throw) = None
(Spec ?x \<inter>\<^sub>g Catch ?ec ?ed) = None
(Seq ?y ?z \<inter>\<^sub>g Skip) = None
(Seq ?y ?z \<inter>\<^sub>g Basic ?ev) = None
(Seq ?y ?z \<inter>\<^sub>g Spec ?ew) = None
(Seq ?y ?z \<inter>\<^sub>g Cond ?ez ?fa ?fb) = None
(Seq ?y ?z \<inter>\<^sub>g While ?fc ?fd) = None
(Seq ?y ?z \<inter>\<^sub>g Call ?fe) = None
(Seq ?y ?z \<inter>\<^sub>g DynCom ?ff) = None
(Seq ?y ?z \<inter>\<^sub>g Guard ?fg ?fh ?fi) = None
(Seq ?y ?z \<inter>\<^sub>g Throw) = None
(Seq ?y ?z \<inter>\<^sub>g Catch ?fj ?fk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Skip) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Basic ?gb) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Spec ?gc) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Seq ?gd ?ge) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g While ?gi ?gj) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Call ?gk) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g DynCom ?gl) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Guard ?gm ?gn ?go) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Throw) = None
(Cond ?aa ?ab ?ac \<inter>\<^sub>g Catch ?gp ?gq) = None
(While ?ad ?ae \<inter>\<^sub>g Skip) = None
(While ?ad ?ae \<inter>\<^sub>g Basic ?hh) = None
(While ?ad ?ae \<inter>\<^sub>g Spec ?hi) = None
(While ?ad ?ae \<inter>\<^sub>g Seq ?hj ?hk) = None
(While ?ad ?ae \<inter>\<^sub>g Cond ?hl ?hm ?hn) = None
(While ?ad ?ae \<inter>\<^sub>g Call ?hq) = None
(While ?ad ?ae \<inter>\<^sub>g DynCom ?hr) = None
(While ?ad ?ae \<inter>\<^sub>g Guard ?hs ?ht ?hu) = None
(While ?ad ?ae \<inter>\<^sub>g Throw) = None
(While ?ad ?ae \<inter>\<^sub>g Catch ?hv ?hw) = None
(Call ?af \<inter>\<^sub>g Skip) = None
(Call ?af \<inter>\<^sub>g Basic ?in) = None
(Call ?af \<inter>\<^sub>g Spec ?io) = None
(Call ?af \<inter>\<^sub>g Seq ?ip ?iq) = None
(Call ?af \<inter>\<^sub>g Cond ?ir ?is ?it) = None
(Call ?af \<inter>\<^sub>g While ?iu ?iv) = None
(Call ?af \<inter>\<^sub>g DynCom ?ix) = None
(Call ?af \<inter>\<^sub>g Guard ?iy ?iz ?ja) = None
(Call ?af \<inter>\<^sub>g Throw) = None
(Call ?af \<inter>\<^sub>g Catch ?jb ?jc) = None
(DynCom ?ag \<inter>\<^sub>g Skip) = None
(DynCom ?ag \<inter>\<^sub>g Basic ?jt) = None
(DynCom ?ag \<inter>\<^sub>g Spec ?ju) = None
(DynCom ?ag \<inter>\<^sub>g Seq ?jv ?jw) = None
(DynCom ?ag \<inter>\<^sub>g Cond ?jx ?jy ?jz) = None
(DynCom ?ag \<inter>\<^sub>g While ?ka ?kb) = None
(DynCom ?ag \<inter>\<^sub>g Call ?kc) = None
(DynCom ?ag \<inter>\<^sub>g Guard ?ke ?kf ?kg) = None
(DynCom ?ag \<inter>\<^sub>g Throw) = None
(DynCom ?ag \<inter>\<^sub>g Catch ?kh ?ki) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Skip) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Basic ?kz) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Spec ?la) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Seq ?lb ?lc) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Cond ?ld ?le ?lf) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g While ?lg ?lh) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Call ?li) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g DynCom ?lj) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Throw) = None
(Guard ?ah ?ai ?aj \<inter>\<^sub>g Catch ?ln ?lo) = None
(Throw \<inter>\<^sub>g Skip) = None
(Throw \<inter>\<^sub>g Basic ?mf) = None
(Throw \<inter>\<^sub>g Spec ?mg) = None
(Throw \<inter>\<^sub>g Seq ?mh ?mi) = None
(Throw \<inter>\<^sub>g Cond ?mj ?mk ?ml) = None
(Throw \<inter>\<^sub>g While ?mm ?mn) = None
(Throw \<inter>\<^sub>g Call ?mo) = None
(Throw \<inter>\<^sub>g DynCom ?mp) = None
(Throw \<inter>\<^sub>g Guard ?mq ?mr ?ms) = None
(Throw \<inter>\<^sub>g Catch ?mt ?mu) = None
(Catch ?ak ?al \<inter>\<^sub>g Skip) = None
(Catch ?ak ?al \<inter>\<^sub>g Basic ?nl) = None
(Catch ?ak ?al \<inter>\<^sub>g Spec ?nm) = None
(Catch ?ak ?al \<inter>\<^sub>g Seq ?nn ?no) = None
(Catch ?ak ?al \<inter>\<^sub>g Cond ?np ?nq ?nr) = None
(Catch ?ak ?al \<inter>\<^sub>g While ?ns ?nt) = None
(Catch ?ak ?al \<inter>\<^sub>g Call ?nu) = None
(Catch ?ak ?al \<inter>\<^sub>g DynCom ?nv) = None
(Catch ?ak ?al \<inter>\<^sub>g Guard ?nw ?nx ?ny) = None
(Catch ?ak ?al \<inter>\<^sub>g Throw) = None
--
### recdef (solve_eq): splitto: cannot find variable to split on
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "subseteq_guards"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Simpl.Language"
### 5.458s elapsed time, 21.150s cpu time, 2.552s GC time
Loading theory "Simpl.Semantic" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoarePartial" via "Simpl.HoarePartialProps" via "Simpl.HoarePartialDef")
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Executable_Permutations"
### 0.852s elapsed time, 2.756s cpu time, 0.301s GC time
Loading theory "Draft.Permutations_2" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Subdivision")
### theory "Draft.Permutations_2"
### 0.095s elapsed time, 0.286s cpu time, 0.000s GC time
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.149s elapsed time, 7.327s cpu time, 0.756s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
### theory "HOL-Library.Order_Continuity"
### 0.489s elapsed time, 1.124s cpu time, 0.159s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.575s elapsed time, 1.323s cpu time, 0.151s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### theory "Simpl.Semantic"
### 2.409s elapsed time, 5.689s cpu time, 0.892s GC time
Loading theory "Simpl.HoarePartialDef" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoarePartial" via "Simpl.HoarePartialProps")
Loading theory "Simpl.Termination" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoareTotal" via "Simpl.HoareTotalProps" via "Simpl.SmallStep")
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
Proofs for inductive predicate(s) "terminates"
### Ambiguous input (line 84 of "$AFP/Simpl/HoarePartialDef.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HoarePartialDef.cnvalid" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" n) ("_position" F)
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" \<Gamma>))
###       ("_tuple_arg"
###         ("\<^const>HoarePartialDef.nvalid" ("_position" \<Theta>)
###           ("_position" n) ("_position" F) ("_position" P) ("_position" c)
###           ("_position" Q) ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HoarePartialDef.cvalid" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" c)
###       ("_position" Q) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
Proofs for inductive predicate(s) "hoarep"
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
  Proving monotonicity ...
### theory "Simpl.HoarePartialDef"
### 1.191s elapsed time, 4.078s cpu time, 2.729s GC time
Loading theory "Simpl.HoarePartialProps" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoarePartial")
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### Ambiguous input (line 1078 of "$AFP/Simpl/HoarePartialProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" s) ("_position" P)
###     ("\<^const>HOL.All_binder"
###       ("_idtyp" ("_position" t)
###         ("_tappl" ("_position_sort" 's) ("_position_sort" 'f)
###           ("_type_name" xstate)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q') ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.All_binder" ("_position" n)
###             ("\<^const>HoarePartialDef.cnvalid" ("_position" \<Gamma>)
###               ("_position" \<Theta>) ("_position" n) ("_position" F)
###               ("_position" P') ("_position" c) ("_position" Q')
###               ("_position" A')))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" s) ("_position" P'))
###               ("\<^const>Set.member" ("_position" t)
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.image" ("_position" Normal)
###                     ("_position" Q'))
###                   ("\<^const>Set.image" ("_position" Abrupt)
###                     ("_position" A')))))
###             ("\<^const>Set.member" ("_position" t)
###               ("\<^const>Set.union"
###                 ("\<^const>Set.image" ("_position" Normal) ("_position" Q))
###                 ("\<^const>Set.image" ("_position" Abrupt)
###                   ("_position" A))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" s) ("_position" P)
###     ("\<^const>HOL.All_binder"
###       ("_idtyp" ("_position" t)
###         ("_tappl" ("_position_sort" 's) ("_position_sort" 'f)
###           ("_type_name" xstate)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q') ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("_tuple"
###             ("\<^const>HOL.All_binder" ("_position" n)
###               ("_position" \<Gamma>))
###             ("_tuple_arg"
###               ("\<^const>HoarePartialDef.nvalid" ("_position" \<Theta>)
###                 ("_position" n) ("_position" F) ("_position" P')
###                 ("_position" c) ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" s) ("_position" P'))
###               ("\<^const>Set.member" ("_position" t)
###                 ("\<^const>Set.union"
###                   ("\<^const>Set.image" ("_position" Normal)
###                     ("_position" Q'))
###                   ("\<^const>Set.image" ("_position" Abrupt)
###                     ("_position" A')))))
###             ("\<^const>Set.member" ("_position" t)
###               ("\<^const>Set.union"
###                 ("\<^const>Set.image" ("_position" Normal) ("_position" Q))
###                 ("\<^const>Set.image" ("_position" Abrupt)
###                   ("_position" A))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Simpl.Termination"
### 1.458s elapsed time, 4.903s cpu time, 2.975s GC time
Loading theory "Simpl.HoareTotalDef" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoareTotal" via "Simpl.HoareTotalProps")
Loading theory "Simpl.SmallStep" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoareTotal" via "Simpl.HoareTotalProps")
### No equation for constructor "Spec"
consts
  procs :: "('s, 'p, 'f) com => 'p set"
consts
  noSpec :: "('s, 'p, 'f) com => bool"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
Proofs for inductive predicate(s) "hoaret"
  Proving monotonicity ...
### theory "Simpl.HoarePartialProps"
### 0.758s elapsed time, 2.781s cpu time, 0.589s GC time
Loading theory "Simpl.HoarePartial" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare")
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "Simpl.HoareTotalDef"
### 0.673s elapsed time, 2.652s cpu time, 0.437s GC time
val tranclp_induct2 =
   "[| ?r^++ (?aa, ?ab) (?ba, ?bb); !!a b. ?r (?aa, ?ab) (a, b) ==> ?P a b;
       !!a b aa ba.
          [| ?r^++ (?aa, ?ab) (a, b); ?r (a, b) (aa, ba); ?P a b |]
          ==> ?P aa ba |]
    ==> ?P ?ba ?bb":
   thm
val it = (): unit
consts
  subst_redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
val trancl_induct2 =
   "[| ((?aa, ?ab), ?ba, ?bb) : ?r^+;
       !!a b. ((?aa, ?ab), a, b) : ?r ==> ?P a b;
       !!a b aa ba.
          [| ((?aa, ?ab), a, b) : ?r^+; ((a, b), aa, ba) : ?r; ?P a b |]
          ==> ?P aa ba |]
    ==> ?P ?ba ?bb":
   thm
val it = (): unit
### theory "HOL-Library.Extended_Real"
### 4.377s elapsed time, 14.399s cpu time, 7.280s GC time
Loading theory "Graph_Theory.Stuff" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph")
consts
  seq :: "(nat => ('s, 'p, 'f) com) => 'p => nat => ('s, 'p, 'f) com"
### theory "Simpl.HoarePartial"
### 1.722s elapsed time, 6.039s cpu time, 3.605s GC time
### theory "Graph_Theory.Stuff"
### 0.107s elapsed time, 0.419s cpu time, 0.067s GC time
Loading theory "Graph_Theory.Digraph" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
"- \<infinity>"
  :: "ereal"
consts
  redexes :: "('s, 'p, 'f) com => ('s, 'p, 'f) com set"
"\<infinity>"
  :: "ereal"
### theory "Simpl.SmallStep"
### 2.410s elapsed time, 8.738s cpu time, 4.075s GC time
Loading theory "Simpl.HoareTotalProps" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare" via "Simpl.HoareTotal")
"True"
  :: "bool"
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Simpl.HoareTotalProps"
### 0.842s elapsed time, 2.083s cpu time, 0.390s GC time
Loading theory "Simpl.HoareTotal" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace" via "Simpl.Hoare")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Graph_Theory.Digraph"
### 1.234s elapsed time, 3.345s cpu time, 0.634s GC time
Loading theory "Graph_Theory.Arc_Walk" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Bidirected_Digraph" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
### theory "Graph_Theory.Bidirected_Digraph"
### 0.409s elapsed time, 1.266s cpu time, 0.193s GC time
### theory "Simpl.HoareTotal"
### 0.755s elapsed time, 2.018s cpu time, 0.308s GC time
Loading theory "Simpl.Hoare" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg" via "Simpl.StateSpace")
"\<Gamma>|-P c Q"
  :: "bool"
"\<Gamma>|-P c Q,A"
  :: "bool"
"\<Gamma>|-/F P c Q"
  :: "bool"
locale hoare
  fixes \<Gamma> :: "'p => ('s, 'p, 'f) com option"
"\<Gamma>|-/F P c Q,A"
  :: "bool"
"\<Gamma>,\<Theta>|-P c Q"
  :: "bool"
"\<Gamma>,\<Theta>|- P c Q,A"
  :: "bool"
"\<Gamma>,\<Theta>|-/F P c Q"
  :: "bool"
"\<Gamma>,\<Theta>\<turnstile>\<^bsub>/F \<^esub>P c Q,A"
  :: "bool"
"\<Gamma>|-tP c Q"
  :: "bool"
"\<Gamma>|-tP c Q,A"
  :: "bool"
"\<Gamma>|-t/F P c Q"
  :: "bool"
"\<Gamma>|-t/F P c Q,A"
  :: "bool"
"\<Gamma>,\<Theta>|-P c Q"
  :: "bool"
"\<Gamma>,\<Theta>|-t/F P c Q"
  :: "bool"
"\<Gamma>,\<Theta>\<turnstile>\<^sub>t\<^bsub>/F\<^esub> P c Q,A"
  :: "bool"
"\<Gamma>,\<Theta>|- P c Q,A"
  :: "bool"
consts
  assoc :: "('a * 'b) list => 'a => 'b"
### theory "Simpl.Hoare"
### 0.242s elapsed time, 0.544s cpu time, 0.090s GC time
Loading theory "Simpl.StateSpace" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl" via "Simpl.Vcg")
Found termination order: "{}"
### theory "Graph_Theory.Arc_Walk"
### 1.082s elapsed time, 2.717s cpu time, 0.375s GC time
Loading theory "Graph_Theory.Vertex_Walk" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph_Component_Vwalk")
Loading theory "Graph_Theory.Pair_Digraph" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph_Component")
Loading theory "Graph_Theory.Weighted_Graph" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Shortest_Path")
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Graph_Theory.Weighted_Graph"
### 0.081s elapsed time, 0.322s cpu time, 0.000s GC time
Loading theory "Graph_Theory.Shortest_Path" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
### theory "Simpl.StateSpace"
### 0.336s elapsed time, 0.876s cpu time, 0.092s GC time
Loading theory "Simpl.Vcg" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl")
Found termination order: "length <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  pawalk_verts :: "'a => ('a * 'a) list => 'a list"
### theory "Graph_Theory.Vertex_Walk"
### 0.629s elapsed time, 2.489s cpu time, 0.362s GC time
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_wf_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_wf_digraph G"
locale pair_fin_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_fin_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_loopfree_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_loopfree_digraph G"
locale pair_bidirected_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_bidirected_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
locale pair_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_graph G"
### theory "Graph_Theory.Shortest_Path"
### 0.843s elapsed time, 3.145s cpu time, 0.663s GC time
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
consts
  rev_path :: "('a * 'a) list => ('a * 'a) list"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### ~ ~ ?y == ?y
### Ignoring duplicate rewrite rule:
### (~ ?P1) = (~ ?Q1) == ?P1 = ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 ~= ?Q1 == ?P1 = (~ ?Q1)
### Ignoring duplicate rewrite rule:
### ?P1 | ~ ?P1 == True
### Ignoring duplicate rewrite rule:
### ~ ?P1 | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?x1 = ?x1 == True
### Ignoring duplicate rewrite rule:
### ~ True == False
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### (~ ?P1) = ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 = (~ ?P1) == False
### Ignoring duplicate rewrite rule:
### True = ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y = True == ?y
### Ignoring duplicate rewrite rule:
### False = ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 = False == ~ ?P1
### Ignoring duplicate rewrite rule:
### True --> ?y == ?y
### Ignoring duplicate rewrite rule:
### False --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> True == True
### Ignoring duplicate rewrite rule:
### ?P1 --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> False == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 --> ~ ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?y & True == ?y
### Ignoring duplicate rewrite rule:
### True & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & False == False
### Ignoring duplicate rewrite rule:
### False & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & ?P1 & ?Q1 == ?P1 & ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 & ~ ?P1 == False
### Ignoring duplicate rewrite rule:
### ~ ?P1 & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 | True == True
### Ignoring duplicate rewrite rule:
### True | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?y | False == ?y
### Ignoring duplicate rewrite rule:
### False | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 | ?P1 | ?Q1 == ?P1 | ?Q1
### Ignoring duplicate rewrite rule:
### ALL x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 == True
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x == True
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x = ?t1 --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 = x --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x ~= ?t1 == False
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 ~= x == False
### ML warning (line 165 of "$AFP/Simpl/hoare.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 164 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 383 of "$AFP/Simpl/hoare.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 383 of "$AFP/Simpl/hoare.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 451 of "$AFP/Simpl/hoare.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 451 of "$AFP/Simpl/hoare.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 450 of "$AFP/Simpl/hoare.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 449 of "$AFP/Simpl/hoare.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 449 of "$AFP/Simpl/hoare.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 455 of "$AFP/Simpl/hoare.ML"):
### Value identifier (prf) has not been referenced.
### ML warning (line 472 of "$AFP/Simpl/hoare.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 471 of "$AFP/Simpl/hoare.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 469 of "$AFP/Simpl/hoare.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 467 of "$AFP/Simpl/hoare.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 467 of "$AFP/Simpl/hoare.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 628 of "$AFP/Simpl/hoare.ML"):
### Value identifier (default_state_kind) has not been referenced.
### ML warning (line 740 of "$AFP/Simpl/hoare.ML"):
### Value identifier (generate_guard) has not been referenced.
### ML warning (line 897 of "$AFP/Simpl/hoare.ML"):
### Value identifier (less) has not been referenced.
### ML warning (line 902 of "$AFP/Simpl/hoare.ML"):
### Matches are not exhaustive.
### ML warning (line 1085 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 1150 of "$AFP/Simpl/hoare.ML"):
### Value identifier (pE) has not been referenced.
### ML warning (line 1270 of "$AFP/Simpl/hoare.ML"):
### Value identifier (fold_com) has not been referenced.
### ML warning (line 1386 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1348 of "$AFP/Simpl/hoare.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 1348 of "$AFP/Simpl/hoare.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 1363 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t1) has not been referenced.
### ML warning (line 1363 of "$AFP/Simpl/hoare.ML"):
### Value identifier (aT) has not been referenced.
### ML warning (line 1433 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 1493 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 1770 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 1773 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1775 of "$AFP/Simpl/hoare.ML"):
### Matches are not exhaustive.
### ML warning (line 1782 of "$AFP/Simpl/hoare.ML"):
### Value identifier (hoare) has not been referenced.
### ML warning (line 1872 of "$AFP/Simpl/hoare.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 1842 of "$AFP/Simpl/hoare.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 1940 of "$AFP/Simpl/hoare.ML"):
### Value identifier (mode) has not been referenced.
### ML warning (line 1982 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 2012 of "$AFP/Simpl/hoare.ML"):
### Value identifier (Q) has not been referenced.
### ML warning (line 2069 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 2069 of "$AFP/Simpl/hoare.ML"):
### Value identifier (a_vT) has not been referenced.
### ML warning (line 2076 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 2101 of "$AFP/Simpl/hoare.ML"):
### Value identifier (Z) has not been referenced.
### ML warning (line 2101 of "$AFP/Simpl/hoare.ML"):
### Value identifier (gT) has not been referenced.
### ML warning (line 2101 of "$AFP/Simpl/hoare.ML"):
### Value identifier (subst) has not been referenced.
### ML warning (line 2094 of "$AFP/Simpl/hoare.ML"):
### Value identifier (Z) has not been referenced.
### ML warning (line 2111 of "$AFP/Simpl/hoare.ML"):
### Value identifier (Z) has not been referenced.
### ML warning (line 2111 of "$AFP/Simpl/hoare.ML"):
### Value identifier (globs) has not been referenced.
### ML warning (line 2111 of "$AFP/Simpl/hoare.ML"):
### Value identifier (subst) has not been referenced.
### ML warning (line 2105 of "$AFP/Simpl/hoare.ML"):
### Value identifier (Z) has not been referenced.
### ML warning (line 2105 of "$AFP/Simpl/hoare.ML"):
### Value identifier (globs) has not been referenced.
### ML warning (line 2118 of "$AFP/Simpl/hoare.ML"):
### Value identifier (gupd) has not been referenced.
### ML warning (line 2137 of "$AFP/Simpl/hoare.ML"):
### Value identifier (G) has not been referenced.
### ML warning (line 2287 of "$AFP/Simpl/hoare.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 2382 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 2404 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 2412 of "$AFP/Simpl/hoare.ML"):
### Value identifier (fs) has not been referenced.
### ML warning (line 2459 of "$AFP/Simpl/hoare.ML"):
### Value identifier (b) has not been referenced.
### ML warning (line 2478 of "$AFP/Simpl/hoare.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 2520 of "$AFP/Simpl/hoare.ML"):
### Value identifier (A) has not been referenced.
### ML warning (line 2520 of "$AFP/Simpl/hoare.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 2520 of "$AFP/Simpl/hoare.ML"):
### Value identifier (P) has not been referenced.
### ML warning (line 2720 of "$AFP/Simpl/hoare.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 2737 of "$AFP/Simpl/hoare.ML"):
### Value identifier (y) has not been referenced.
### ML warning (line 2744 of "$AFP/Simpl/hoare.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (inc) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (glob) has not been referenced.
### ML warning (line 2796 of "$AFP/Simpl/hoare.ML"):
### Value identifier (loc) has not been referenced.
### ML warning (line 2785 of "$AFP/Simpl/hoare.ML"):
### Value identifier (inc) has not been referenced.
### ML warning (line 2785 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2785 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2785 of "$AFP/Simpl/hoare.ML"):
### Value identifier (glob) has not been referenced.
### ML warning (line 2785 of "$AFP/Simpl/hoare.ML"):
### Value identifier (loc) has not been referenced.
### ML warning (line 2771 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2771 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2771 of "$AFP/Simpl/hoare.ML"):
### Value identifier (glob) has not been referenced.
### ML warning (line 2832 of "$AFP/Simpl/hoare.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 2874 of "$AFP/Simpl/hoare.ML"):
### Value identifier (y) has not been referenced.
### ML warning (line 2874 of "$AFP/Simpl/hoare.ML"):
### Pattern 2 is redundant.
### ML warning (line 2881 of "$AFP/Simpl/hoare.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 2881 of "$AFP/Simpl/hoare.ML"):
### Pattern 2 is redundant.
### ML warning (line 2899 of "$AFP/Simpl/hoare.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 2899 of "$AFP/Simpl/hoare.ML"):
### Value identifier (inc) has not been referenced.
### ML warning (line 2899 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2899 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2899 of "$AFP/Simpl/hoare.ML"):
### Value identifier (var) has not been referenced.
### ML warning (line 2888 of "$AFP/Simpl/hoare.ML"):
### Value identifier (inc) has not been referenced.
### ML warning (line 2888 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2888 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2888 of "$AFP/Simpl/hoare.ML"):
### Value identifier (var) has not been referenced.
### ML warning (line 2884 of "$AFP/Simpl/hoare.ML"):
### Value identifier (name) has not been referenced.
### ML warning (line 2884 of "$AFP/Simpl/hoare.ML"):
### Value identifier (destr) has not been referenced.
### ML warning (line 2883 of "$AFP/Simpl/hoare.ML"):
### Value identifier (abs) has not been referenced.
### ML warning (line 2883 of "$AFP/Simpl/hoare.ML"):
### Value identifier (app) has not been referenced.
### ML warning (line 2920 of "$AFP/Simpl/hoare.ML"):
### Value identifier (fld_idx) has not been referenced.
### ML warning (line 2968 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3011 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3126 of "$AFP/Simpl/hoare.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 3110 of "$AFP/Simpl/hoare.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 3110 of "$AFP/Simpl/hoare.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 3114 of "$AFP/Simpl/hoare.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 3121 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3121 of "$AFP/Simpl/hoare.ML"):
### Value identifier (x_upd') has not been referenced.
### ML warning (line 3172 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3282 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3283 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3296 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3298 of "$AFP/Simpl/hoare.ML"):
### Pattern is not exhaustive.
### ML warning (line 3330 of "$AFP/Simpl/hoare.ML"):
### Value identifier (exnames) has not been referenced.
### ML warning (line 3336 of "$AFP/Simpl/hoare.ML"):
### Value identifier (exnames) has not been referenced.
signature HOARE =
  sig
    val BasicSimpTac:
       Proof.context ->
         state_kind -> bool -> thm list -> (int -> tactic) -> int -> tactic
    val add_foldcongs: thm list -> theory -> theory
    val add_foldcongsimps: thm list -> theory -> theory
    val add_params:
       morphism ->
         string ->
           (par_kind * string) list -> Context.generic -> Context.generic
    val add_recursive:
       morphism -> string -> Context.generic -> Context.generic
    val add_state_kind:
       morphism ->
         string -> state_kind -> Context.generic -> Context.generic
    datatype 'a bodykind = BodyTerm of 'a | BodyTyp of 'a
    val chopsfx: string -> string -> string
    val clique_name: string list -> string
    val deco: string
    val extern: Proof.context -> string -> string
    val gen_proc_rec: Proof.context -> hoareMode -> int -> thm
    val generate_guard: Proof.context -> term -> term option
    val get_data: Proof.context -> hoare_data
    val get_default_state_kind: Proof.context -> state_kind
    val get_foldcong_ss: theory -> simpset
    val get_params:
       string -> Proof.context -> (par_kind * string) list option
    val get_state_kind: string -> Proof.context -> state_kind option
    val hoare: (Proof.context -> Proof.method) context_parser
    datatype hoareMode = Partial | Total
    type hoare_data =
       {active_procs: string list list,
        default_state_kind: state_kind,
        generate_guard: stamp * (Proof.context -> term -> term option),
        hoare_tacs: (string * hoare_tac) list,
        proc_info: proc_info Symtab.table,
        vcg_simps: thm list, wp_tacs: (string * hoare_tac) list}
    val hoare_raw: (Proof.context -> Proof.method) context_parser
    val hoare_rule: (Proof.context -> Proof.method) context_parser
    val hoare_rule_tac: Proof.context -> thm list -> int -> tactic
    type hoare_tac =
       (bool -> int -> tactic) ->
         Proof.context -> hoareMode -> int -> tactic
    val implementationN: string
    val install_generate_guard:
       (Proof.context -> term -> term option) ->
         Context.generic -> Context.generic
    val is_state_var: string -> bool
    val modeqN: string
    val modexN: string
    val par_deco: string -> string
    datatype par_kind = In | Out
    val proc_deco: string
    type proc_info =
       {params: (par_kind * string) list,
        recursive: bool, state_kind: state_kind}
    val proc_specs: (bstring * string) list parser
    val remdeco: Proof.context -> string -> string
    val remdeco': string -> string
    val resuffix: string -> string -> string -> string
    val set_default_state_kind:
       state_kind -> Context.generic -> Context.generic
    val specL: string
    datatype state_kind = Function | Record
    val undeco: Proof.context -> term -> term
    val varname: string -> string
    val vcg: (Proof.context -> Proof.method) context_parser
    val vcg_step: (Proof.context -> Proof.method) context_parser
    val vcg_tac:
       string -> string -> string list -> Proof.context -> int -> tactic
  end
structure Hoare: HOARE
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
### ML warning (line 98 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 97 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 102 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 102 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 101 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ys) has not been referenced.
### ML warning (line 101 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 108 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 107 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 242 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 271 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 282 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 281 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 279 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 322 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 321 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 321 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 454 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 428 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (off_var) has not been referenced.
### ML warning (line 428 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 424 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (off_val) has not been referenced.
### ML warning (line 424 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (off_var) has not been referenced.
### ML warning (line 454 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern 5 is redundant.
### ML warning (line 469 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 471 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 492 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 499 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 502 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 533 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 535 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 581 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 583 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 631 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 631 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 667 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (l) has not been referenced.
### ML warning (line 702 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 702 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (globals) has not been referenced.
### ML warning (line 701 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (globals) has not been referenced.
### ML warning (line 699 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (e) has not been referenced.
### ML warning (line 706 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 740 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (globals) has not been referenced.
### ML warning (line 750 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern 14 is redundant.
### ML warning (line 758 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern is not exhaustive.
### ML warning (line 786 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 773 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 788 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 800 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 825 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 813 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 816 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern is not exhaustive.
### ML warning (line 837 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 827 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 851 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 839 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 842 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern is not exhaustive.
### ML warning (line 876 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 975 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 972 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 969 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 967 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 965 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 963 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 961 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 959 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 957 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 955 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 955 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 953 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 993 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1042 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1075 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (r) has not been referenced.
### ML warning (line 1075 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (l) has not been referenced.
### ML warning (line 1091 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (values) has not been referenced.
### ML warning (line 1091 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (idxs) has not been referenced.
### ML warning (line 1088 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (value) has not been referenced.
### ML warning (line 1088 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 1098 of "$AFP/Simpl/hoare_syntax.ML"):
### Pattern 2 is redundant.
### ML warning (line 1108 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (constr) has not been referenced.
### ML warning (line 1108 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (dest) has not been referenced.
### ML warning (line 1108 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (upd') has not been referenced.
### ML warning (line 1165 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1152 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1143 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1168 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 1178 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1168 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1211 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 1209 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ts) has not been referenced.
### ML warning (line 1209 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 1213 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 1213 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (u) has not been referenced.
### ML warning (line 1235 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1253 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1253 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (return) has not been referenced.
### ML warning (line 1257 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 1257 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 1257 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (upd) has not been referenced.
### ML warning (line 1274 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 1300 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (return) has not been referenced.
### ML warning (line 1302 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 1307 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1307 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 1305 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 1305 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1305 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 1339 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (result) has not been referenced.
### ML warning (line 1339 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (return) has not been referenced.
### ML warning (line 1341 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 1362 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 1360 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 1360 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 1442 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1439 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 1470 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (gupd) has not been referenced.
### ML warning (line 1470 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (new) has not been referenced.
### ML warning (line 1470 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (upd) has not been referenced.
### ML warning (line 1469 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (free) has not been referenced.
### ML warning (line 1473 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1492 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (r') has not been referenced.
### ML warning (line 1503 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (gupd) has not been referenced.
### ML warning (line 1503 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (new) has not been referenced.
### ML warning (line 1503 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (upd) has not been referenced.
### ML warning (line 1502 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (free) has not been referenced.
### ML warning (line 1506 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1525 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (r') has not been referenced.
### ML warning (line 1542 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1534 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 1555 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 1611 of "$AFP/Simpl/hoare_syntax.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 1602 of "$AFP/Simpl/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val antiquoteCur: string
    val antiquoteOld: string
    val antiquoteOld_tr: Proof.context -> term list -> term
    val antiquote_applied_only_to: (term -> bool) -> term -> bool
    val antiquote_varname_tr: string -> term list -> term
    val app_quote_tr': Proof.context -> term -> term list -> term
    val assert_tr': Proof.context -> term list -> term
    val assign_tr: Proof.context -> term list -> term
    val assign_tr': Proof.context -> term list -> term
    val basic_assigns_tr: Proof.context -> term list -> term
    val basic_tr: Proof.context -> term list -> term
    val basic_tr': Proof.context -> term list -> term
    val bexp_tr': string -> Proof.context -> term list -> term
    val bind_tr': Proof.context -> term list -> term
    val call_ass_tr: bool -> bool -> Proof.context -> term list -> term
    val call_tr: bool -> bool -> Proof.context -> term list -> term
    val call_tr': Proof.context -> term list -> term
    val dyn_call_tr': Proof.context -> term list -> term
    val fcall_tr: Proof.context -> term list -> term
    val fcall_tr': Proof.context -> term list -> term
    val guarded_Assign_tr: Proof.context -> term list -> term
    val guarded_Cond_tr: Proof.context -> term list -> term
    val guarded_NNew_tr: Proof.context -> term list -> term
    val guarded_New_tr: Proof.context -> term list -> term
    val guarded_WhileFix_tr: Proof.context -> term list -> term
    val guarded_While_tr: Proof.context -> term list -> term
    val guards_tr': Proof.context -> term list -> term
    val hide_guards: bool Config.T
    val init_tr: Proof.context -> term list -> term
    val init_tr': Proof.context -> term list -> term
    val loc_tr: Proof.context -> term list -> term
    val loc_tr': Proof.context -> term list -> term
    val new_tr: Proof.context -> term list -> term
    val new_tr': Proof.context -> term list -> term
    val nnew_tr: Proof.context -> term list -> term
    val nnew_tr': Proof.context -> term list -> term
    val proc_ass_tr: Proof.context -> term list -> term
    val proc_tr: Proof.context -> term list -> term
    val proc_tr': Proof.context -> term list -> term
    val quote_mult_tr':
       Proof.context -> (term -> bool) -> string -> string -> term -> term
    val quote_tr: Proof.context -> string -> term -> term
    val quote_tr': Proof.context -> string -> term -> term
    val raise_tr: Proof.context -> term list -> term
    val raise_tr': Proof.context -> term list -> term
    val switch_tr': Proof.context -> term list -> term
    val update_comp:
       Proof.context ->
         string list -> bool -> bool -> xstring -> term -> term -> term
    val use_call_tr': bool Config.T
    val whileAnnoGFix_tr': Proof.context -> term list -> term
    val whileAnnoG_tr': Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "Simpl.Vcg"
### 3.765s elapsed time, 9.574s cpu time, 1.933s GC time
Loading theory "Draft.Simpl_Anno" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification" via "Draft.Check_Non_Planarity_Impl")
### theory "Graph_Theory.Pair_Digraph"
### 3.883s elapsed time, 10.000s cpu time, 1.987s GC time
Loading theory "Graph_Theory.Digraph_Component" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
### theory "Draft.Simpl_Anno"
### 0.050s elapsed time, 0.127s cpu time, 0.054s GC time
### Ambiguous input (line 336 of "$AFP/Graph_Theory/Digraph_Component.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Digraph.dominates_indexed" ("_position" u) ("_indexdefault")
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" u) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale max_reachable_set
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and S :: "'a set"
  assumes "max_reachable_set G S"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
"LEAST x. P x"
  :: "'a"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Graph_Theory.Digraph_Component"
### 1.667s elapsed time, 1.985s cpu time, 0.367s GC time
Loading theory "Graph_Theory.Digraph_Component_Vwalk" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Digraph_Isomorphism" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Subdivision" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
Proofs for inductive predicate(s) "subdivision"
### theory "Graph_Theory.Digraph_Component_Vwalk"
### 0.261s elapsed time, 0.812s cpu time, 0.133s GC time
  Proving monotonicity ...
locale subdiv_step
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
  assumes "subdiv_step G rev_G H rev_H u v w uv uw vw"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale subdiv_step
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
  assumes "subdiv_step G rev_G H rev_H u v w uv uw vw"
Proofs for inductive predicate(s) "pair_sd"
  Proving monotonicity ...
### theory "Graph_Theory.Subdivision"
### 0.903s elapsed time, 2.256s cpu time, 0.467s GC time
Loading theory "Graph_Theory.Kuratowski" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
### theory "Graph_Theory.Digraph_Isomorphism"
### 1.033s elapsed time, 2.539s cpu time, 0.530s GC time
Loading theory "Graph_Theory.Euler" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus" via "Graph_Theory.Graph_Theory")
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Graph_Theory.Euler"
### 0.801s elapsed time, 1.809s cpu time, 0.429s GC time
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
### theory "Graph_Theory.Kuratowski"
### 2.735s elapsed time, 4.367s cpu time, 1.133s GC time
Loading theory "Graph_Theory.Graph_Theory" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl" via "Draft.Graph_Genus")
### theory "Graph_Theory.Graph_Theory"
### 0.434s elapsed time, 0.471s cpu time, 0.047s GC time
Loading theory "Draft.Check_Non_Planarity_Impl" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Check_Non_Planarity_Verification")
Loading theory "Draft.Graph_Genus" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete" via "Draft.Digraph_Map_Impl")
Loading theory "Draft.Reachablen" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Subdivision")
Proofs for inductive predicate(s) "ntrancl_onp"
  Proving monotonicity ...
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### Ambiguous input (line 51 of "$AFP/Planarity_Certificates/Planarity/Reachablen.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Digraph.dominates_indexed" ("_position" u) ("_indexdefault")
###     ("_position" w)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" u) ("_position" w)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Reachablen"
### 0.179s elapsed time, 0.571s cpu time, 0.170s GC time
locale pre_digraph_map
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and M :: "'b pre_map"
locale digraph_map
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
  assumes "digraph_map G M"
locale digraph_map
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
  assumes "digraph_map G M"
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Defining statespace "is_subgraph_parameters" ...
Defining statespace "is_subgraph_variables" ...
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Defining statespace "is_loopfree_parameters" ...
Defining statespace "is_loopfree_variables" ...
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: ends_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
locale digraph_map
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
  assumes "digraph_map G M"
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
Defining statespace "select_nodes_parameters" ...
Defining statespace "select_nodes_variables" ...
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
### theory "Draft.Graph_Genus"
### 2.684s elapsed time, 7.770s cpu time, 4.969s GC time
Loading theory "Draft.Check_Planarity_Verification" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates")
Loading theory "Draft.Planar_Subdivision" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial")
Loading theory "Draft.Planar_Subgraph" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial")
Defining statespace "find_endpoint_parameters" ...
Defining statespace "find_endpoint_variables" ...
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: v0_'
variable not fixed or declared: v0_'
variable not fixed or declared: vt_'
variable not fixed or declared: vt_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: len_'
variable not fixed or declared: found_'
variable not fixed or declared: found_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: v1_'
variable not fixed or declared: v1_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Defining statespace "contract_parameters" ...
Defining statespace "contract_variables" ...
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'find_endpoint_'proc_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: vo_'
variable not fixed or declared: vo_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
locale is_map_postcondition0
  fixes iG :: "nat list * (nat * nat) list"
    and iM :: "(nat => nat) * (nat => nat) * (nat => nat)"
    and rev_ok :: "'a"
    and succ_i :: "nat"
    and succ_ok :: "bool"
  assumes "is_map_postcondition0 iG iM succ_i succ_ok"
locale digraph_map
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
  assumes "digraph_map G M"
locale is_map_postcondition
  fixes iG :: "nat list * (nat * nat) list"
    and iM :: "(nat => nat) * (nat => nat) * (nat => nat)"
    and rev_ok :: "bool"
    and succ_i :: "nat"
    and succ_ok :: "bool"
    and so_i :: "nat"
    and so_ok :: "bool"
    and V :: "nat set"
    and A :: "nat set"
  assumes "is_map_postcondition iG iM rev_ok succ_i succ_ok so_i so_ok V A"
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
locale subdiv1_contr
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
    and HM :: "'b pre_map"
  assumes "subdiv1_contr G rev_G H rev_H u v w uv uw vw HM"
Defining statespace "is_K33_parameters" ...
### theory "Draft.Check_Planarity_Verification"
### 1.028s elapsed time, 4.051s cpu time, 0.361s GC time
Loading theory "Draft.Digraph_Map_Impl" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial" via "Draft.Planar_Complete")
Defining statespace "is_K33_variables" ...
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: io_arcs_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: blue_cnt_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: blue_'
variable not fixed or declared: blue_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: v_'
variable not fixed or declared: v_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
locale del_vert_props
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and u :: "'a"
  assumes "del_vert_props G M u"
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Defining statespace "is_K5_parameters" ...
Defining statespace "is_K5_variables" ...
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: u_'
variable not fixed or declared: u_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: j_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: i_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Found termination order: "{}"
locale subdiv1_contr
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
    and HM :: "'b pre_map"
  assumes "subdiv1_contr G rev_G H rev_H u v w uv uw vw HM"
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
Defining statespace "check_kuratowski_parameters" ...
Defining statespace "check_kuratowski_variables" ...
locale lists_digraph_map
  fixes G_list :: "'b list * ('b * 'b) list"
    and xss :: "('b * 'b) list list"
  assumes "lists_digraph_map G_list xss"
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_subgraph_'proc_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_loopfree_'proc_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'select_nodes_'proc_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'contract_'proc_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_K5_'proc_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_K33_'proc_'
locale del_vert_props
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and u :: "'a"
  assumes "del_vert_props G M u"
locale bidel_arc
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc G M a"
locale subdiv1_contr
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
    and HM :: "'b pre_map"
  assumes "subdiv1_contr G rev_G H rev_H u v w uv uw vw HM"
### theory "Draft.Planar_Subdivision"
### 2.441s elapsed time, 9.586s cpu time, 1.075s GC time
locale lists_digraph_map
  fixes G_list :: "'b list * ('b * 'b) list"
    and xss :: "('b * 'b) list list"
  assumes "lists_digraph_map G_list xss"
### theory "Draft.Digraph_Map_Impl"
### 1.656s elapsed time, 6.265s cpu time, 0.809s GC time
Loading theory "Draft.Planar_Complete" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates" via "Draft.Kuratowski_Combinatorial")
locale bidel_arc
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc G M a"
### theory "Draft.Check_Non_Planarity_Impl"
### 5.845s elapsed time, 19.550s cpu time, 6.310s GC time
locale bidel_arc_same_face
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_same_face G M a"
### theory "Draft.Planar_Complete"
### 0.876s elapsed time, 2.280s cpu time, 0.292s GC time
locale bidel_arc_diff_face
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_diff_face G M a"
locale bidel_arc_biconnected
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected G M a"
locale bidel_arc_not_biconnected
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_not_biconnected G M a"
locale bidel_arc_tail_conn
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_tail_conn G M a"
locale bidel_arc_head_conn
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_head_conn G M a"
locale bidel_arc_tail_isolated
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_tail_isolated G M a"
locale bidel_arc_head_isolated
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_head_isolated G M a"
locale bidel_arc_same_face_tail_conn
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_same_face_tail_conn G M a"
locale bidel_arc_isolated_loop
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_isolated_loop G M a"
locale bidel_arc_isolated_loop
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_isolated_loop G M a"
locale bidel_arc_isolated_loop
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_isolated_loop G M a"
locale bidel_arc_two_isolated
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_two_isolated G M a"
locale bidel_arc_tail_not_isol
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_tail_not_isol G M a"
locale bidel_arc_only_tail_not_isol
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_only_tail_not_isol G M a"
locale bidel_arc_only_tail_not_isol
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_only_tail_not_isol G M a"
locale bidel_arc_only_head_not_isol
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_only_head_not_isol G M a"
locale bidel_arc_two_not_isol
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_two_not_isol G M a"
locale bidel_arc_biconnected_non_triv
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected_non_triv G M a"
locale bidel_arc_biconnected_non_triv
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected_non_triv G M a"
locale bidel_arc_biconnected_same
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected_same G M a"
locale bidel_arc_biconnected_same
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected_same G M a"
locale bidel_arc_biconnected_diff
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc_biconnected_diff G M a"
locale bidel_arc
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
    and a :: "'b"
  assumes "bidel_arc G M a"
locale digraph_map
  fixes G :: "('a, 'b) pre_digraph"
    and M :: "'b pre_map"
  assumes "digraph_map G M"
### theory "Draft.Planar_Subgraph"
### 11.670s elapsed time, 21.747s cpu time, 2.952s GC time
Loading theory "Draft.Kuratowski_Combinatorial" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates")
### theory "Draft.Kuratowski_Combinatorial"
### 0.290s elapsed time, 0.313s cpu time, 0.028s GC time
Loading theory "Draft.Check_Non_Planarity_Verification" (required by "Draft.Planarity_CertificatesMoreTemplates" via "Draft.Planarity_Certificates")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_subgraph_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_loopfree_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'select_nodes_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'find_endpoint_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_tail_'
variable not fixed or declared: v_next_'
variable not fixed or declared: v_next_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: H_'
variable not fixed or declared: H_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'contract_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_K33_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'is_K5_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'check_kuratowski_'proc_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
variable not fixed or declared: R_'
variable not fixed or declared: R_'
variable not fixed or declared: G_'
variable not fixed or declared: G_'
variable not fixed or declared: K_'
variable not fixed or declared: K_'
### theory "Draft.Check_Non_Planarity_Verification"
### 19.379s elapsed time, 60.476s cpu time, 58.709s GC time
Loading theory "Draft.Planarity_Certificates" (required by "Draft.Planarity_CertificatesMoreTemplates")
### theory "Draft.Planarity_Certificates"
### 0.325s elapsed time, 0.326s cpu time, 0.000s GC time
Loading theory "Draft.Planarity_CertificatesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Planarity_CertificatesMoreTemplates"
### 0.694s elapsed time, 0.927s cpu time, 0.104s GC time
val it = (): unit
