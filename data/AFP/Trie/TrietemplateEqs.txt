   [("Trie.lookup_empty'", "lookup_trie (Trie None []) ?ks = None",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 1)),
    ("Trie.is_empty_conv", "is_empty_trie ?ts = (?ts = Trie None [])",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Trie.update_trie_Nil",
     "update_trie [] ?v (Trie ?vo ?ts) = Trie (Some ?v) ?ts",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_var 0))),
    ("Trie.lookup_update'",
     "lookup_trie (update_trie ?ks ?v ?t) = lookup_trie ?t(?ks |-> ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Trie.lookup_update",
     "lookup_trie (update_trie ?ks ?v ?t) ?ks' =
      (if ?ks = ?ks' then Some ?v else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Trie.lookup_update_with_trie",
     "lookup_trie (update_with_trie ?ks ?f ?t) ?ks' =
      (if ?ks' = ?ks then Some (?f (lookup_trie ?t ?ks'))
       else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Trie.update_trie_Cons",
     "update_trie (?k # ?ks) ?v (Trie ?vo ?ts) =
      Trie ?vo
       (AList.update_with_aux (Trie None []) ?k (update_trie ?ks ?v) ?ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_hole 0)),
               template_var 4),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Trie.dom_lookup",
     "dom (lookup_trie (Trie ?vo ?kts)) =
      (UN k:dom (map_of ?kts).
          (#) k ` dom (lookup_trie (the (map_of ?kts k)))) Un
      (if ?vo = None then {} else {[]})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)))
            )],
       template_dunno))]
