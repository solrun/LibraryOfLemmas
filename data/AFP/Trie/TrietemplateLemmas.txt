   [("Trie.finite_dom_lookup", "finite (dom (lookup_trie ?t))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Trie.update_not_empty", "~ is_empty_trie (update_trie ?ks ?v ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Trie.nonempty_update_with_trie",
     "~ is_empty_trie (update_with_trie ?ks ?f ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Trie.lookup_empty'", "lookup_trie (Trie None []) ?ks = None",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 1)),
    ("Trie.nonempty_update_with_aux",
     "AList.update_with_aux ?v ?k ?f ?ps ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Trie.is_empty_conv", "is_empty_trie ?ts = (?ts = Trie None [])",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Trie.invar_trie_delete",
     "invar_trie ?t ==> invar_trie (delete_trie ?ks ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trie.invar_trie_update",
     "invar_trie ?t ==> invar_trie (update_trie ?ks ?v ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Trie.invar_update_with_trie",
     "invar_trie ?t ==> invar_trie (update_with_trie ?ks ?f ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Trie.update_trie_Nil",
     "update_trie [] ?v (Trie ?vo ?ts) = Trie (Some ?v) ?ts",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_var 0))),
    ("Trie.lookup_update'",
     "lookup_trie (update_trie ?ks ?v ?t) = lookup_trie ?t(?ks |-> ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Trie.is_empty_lookup_empty",
     "invar_trie ?t ==> is_empty_trie ?t = (lookup_trie ?t = Map.empty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_implication
        ([template_predicate
           (template_app (template_hole 3, template_var 0))],
         template_equation
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Trie.dom_lookup_empty_conv",
     "invar_trie ?t ==> (dom (lookup_trie ?t) = {}) = is_empty_trie ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Trie.lookup_delete'",
     "invar_trie ?t ==>
      lookup_trie (delete_trie ?ks ?t) = (lookup_trie ?t)(?ks := None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_var 0),
           template_hole 0)))),
    ("Trie.all_trie_eq_ran",
     "invar_trie ?t ==>
      all_trie ?P ?t = (ALL x:ran (lookup_trie ?t). ?P x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           t_empty)))),
    ("Trie.lookup_update",
     "lookup_trie (update_trie ?ks ?v ?t) ?ks' =
      (if ?ks = ?ks' then Some ?v else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Trie.lookup_delete",
     "invar_trie ?t ==>
      lookup_trie (delete_trie ?ks ?t) ?ks' =
      (if ?ks = ?ks' then None else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 2)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))
             )))),
    ("Trie.lookup_update_with_trie",
     "lookup_trie (update_with_trie ?ks ?f ?t) ?ks' =
      (if ?ks' = ?ks then Some (?f (lookup_trie ?t ?ks'))
       else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 3)),
               template_app
                (template_hole 0,
                 template_app
                  (template_var 2,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Trie.update_trie_Cons",
     "update_trie (?k # ?ks) ?v (Trie ?vo ?ts) =
      Trie ?vo
       (AList.update_with_aux (Trie None []) ?k (update_trie ?ks ?v) ?ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_hole 0)),
               template_var 4),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Trie.delete_eq_empty_lookup_other_fail",
     "[| delete_trie ?ks ?t = Trie None []; ?ks' ~= ?ks |]
      ==> lookup_trie ?t ?ks' = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 5))),
    ("Trie.trie_induct",
     "(!!vo kvs.
          (!!k t. (k, t) : set kvs ==> ?P t) ==> ?P (Trie vo kvs)) ==>
      ?P ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Trie.dom_lookup",
     "dom (lookup_trie (Trie ?vo ?kts)) =
      (UN k:dom (map_of ?kts).
          (#) k ` dom (lookup_trie (the (map_of ?kts k)))) Un
      (if ?vo = None then {} else {[]})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, t_empty),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 7, template_var 0))))),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 2)))
           ))),
    ("Trie.ran_lookup_Trie",
     "invar_trie (Trie ?vo ?ps) ==>
      ran (lookup_trie (Trie ?vo ?ps)) =
      (case ?vo of None => {} | Some v => {v}) Un
      (UN (k, t):set ?ps. ran (lookup_trie t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5), t_empty),
               template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_app (template_hole 0, template_var 0))))))),
    ("Trie.update_trie_induct",
     "[| !!v ps. ?P [] (Trie v ps);
         !!k ks v ps. (!!x. ?P ks x) ==> ?P (k # ks) (Trie v ps) |]
      ==> ?P ?xs ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Trie.lookup_eq_None_iff",
     "invar_trie (Trie ?vo ?kvs) ==>
      (lookup_trie (Trie ?vo ?kvs) ?ks = None) =
      (?ks = [] & ?vo = None |
       (EX k ks'.
           ?ks = k # ks' &
           (ALL t. (k, t) : set ?kvs --> lookup_trie t ks' = None)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 16, template_var 2),
                 template_var 1)),
             template_var 0),
           template_hole 12),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_hole 8)),
                   template_app
                    (template_app (template_hole 14, template_var 2),
                     template_hole 12))),
               template_app (template_hole 7, t_empty))
             )))),
    ("Trie.lookup_eq_Some_iff",
     "invar_trie (Trie ?vo ?kvs) ==>
      (lookup_trie (Trie ?vo ?kvs) ?ks = Some ?v) =
      (?ks = [] & ?vo = Some ?v |
       (EX k t ks'.
           ?ks = k # ks' &
           (k, t) : set ?kvs & lookup_trie t ks' = Some ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 15, template_var 3),
                 template_var 2)),
             template_var 1),
           template_app (template_hole 11, template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 7)),
                   template_app
                    (template_app (template_hole 13, template_var 3),
                     template_app (template_hole 11, template_var 0)))),
               template_app (template_hole 6, t_empty))
             ))))]
