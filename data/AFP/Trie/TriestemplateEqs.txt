   [("Tries.set_tries_of_list",
     "set_tries (tries_of_list ?key ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Tries.lookup_empty", "lookup_tries (Trie None []) ?as = []",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("Tries.set_tries_eq_ran",
     "set_tries ?t = \<Union> (set ` ran (lookup_trie ?t))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Tries.set_tries_insert",
     "set_tries (insert_tries ?a ?x ?t) = insert ?x (set_tries ?t)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Tries.set_insert_tries",
     "set_tries (inserts_tries ?key ?xs ?t) = set ?xs Un set_tries ?t",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Tries.lookup_Nil",
     "lookup_tries (Trie ?vo ?ps) [] =
      (case ?vo of None => [] | Some vs => vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), t_empty),
         template_var 1))),
    ("Tries.in_set_lookup_of_list",
     "(?v : set (lookup_tries (tries_of_list ?key ?vs) (?key ?v))) =
      (?v : set ?vs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_var 1, template_var 2)))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("Tries.lookup_update",
     "lookup_tries (update_trie ?as ?vs ?t) ?bs =
      (if ?as = ?bs then ?vs else lookup_tries ?t ?bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Tries.lookup_Cons",
     "lookup_tries (Trie ?vo ?ps) (?a # ?as) =
      (case map_of ?ps ?a of None => [] | Some at => lookup_tries at ?as)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Tries.lookup_update_with",
     "lookup_tries (update_with_tries ?as ?f ?t) ?bs =
      (if ?as = ?bs then ?f (lookup_tries ?t ?as)
       else lookup_tries ?t ?bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Tries.in_set_lookup_inserts_tries",
     "(?v : set (lookup_tries (inserts_tries ?key ?vs ?t) (?key ?v))) =
      (?v : set ?vs Un set (lookup_tries ?t (?key ?v)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_var 2, template_var 3)))),
       template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_var 2, template_var 3))))))),
    ("Tries.set_lookup_insert_tries",
     "set (lookup_tries (insert_tries ?ks ?a ?t) ?ks') =
      (if ?ks' = ?ks then insert ?a (set (lookup_tries ?t ?ks'))
       else set (lookup_tries ?t ?ks'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_dunno))]
