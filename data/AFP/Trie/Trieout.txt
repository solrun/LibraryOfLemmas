Loading theory "HOL-Library.AList" (required by "Draft.TrieMoreTemplates" via "Draft.Trie")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.550s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.272s elapsed time, 1.103s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.373s elapsed time, 1.494s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.168s elapsed time, 4.469s cpu time, 0.885s GC time
Loading theory "Draft.Trie" (required by "Draft.TrieMoreTemplates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.963s elapsed time, 3.636s cpu time, 0.815s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.104s elapsed time, 4.003s cpu time, 0.918s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.984s elapsed time, 6.329s cpu time, 1.147s GC time
Loading theory "Draft.Templates" (required by "Draft.TrieMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TrieMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Trie"
### 1.132s elapsed time, 2.772s cpu time, 0.357s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.702s cpu time, 0.063s GC time
Loading theory "Draft.TrieMoreTemplates"
val templateLemmas =
   [("Trie.finite_dom_lookup", "finite (dom (lookup_trie ?t))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Trie.update_not_empty", "~ is_empty_trie (update_trie ?ks ?v ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Trie.nonempty_update_with_trie",
     "~ is_empty_trie (update_with_trie ?ks ?f ?t)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Trie.lookup_empty'", "lookup_trie (Trie None []) ?ks = None",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 1)),
    ("Trie.nonempty_update_with_aux",
     "AList.update_with_aux ?v ?k ?f ?ps ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Trie.is_empty_conv", "is_empty_trie ?ts = (?ts = Trie None [])",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Trie.invar_trie_delete",
     "invar_trie ?t ==> invar_trie (delete_trie ?ks ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trie.invar_trie_update",
     "invar_trie ?t ==> invar_trie (update_trie ?ks ?v ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Trie.invar_update_with_trie",
     "invar_trie ?t ==> invar_trie (update_with_trie ?ks ?f ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Trie.update_trie_Nil",
     "update_trie [] ?v (Trie ?vo ?ts) = Trie (Some ?v) ?ts",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_var 0))),
    ("Trie.lookup_update'",
     "lookup_trie (update_trie ?ks ?v ?t) = lookup_trie ?t(?ks |-> ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Trie.is_empty_lookup_empty",
     "invar_trie ?t ==> is_empty_trie ?t = (lookup_trie ?t = Map.empty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_implication
        ([template_predicate
           (template_app (template_hole 3, template_var 0))],
         template_equation
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Trie.dom_lookup_empty_conv",
     "invar_trie ?t ==> (dom (lookup_trie ?t) = {}) = is_empty_trie ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Trie.lookup_delete'",
     "invar_trie ?t ==>
      lookup_trie (delete_trie ?ks ?t) = (lookup_trie ?t)(?ks := None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_var 0),
           template_hole 0)))),
    ("Trie.all_trie_eq_ran",
     "invar_trie ?t ==>
      all_trie ?P ?t = (ALL x:ran (lookup_trie ?t). ?P x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           t_empty)))),
    ("Trie.lookup_update",
     "lookup_trie (update_trie ?ks ?v ?t) ?ks' =
      (if ?ks = ?ks' then Some ?v else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Trie.lookup_delete",
     "invar_trie ?t ==>
      lookup_trie (delete_trie ?ks ?t) ?ks' =
      (if ?ks = ?ks' then None else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 2)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))
             )))),
    ("Trie.lookup_update_with_trie",
     "lookup_trie (update_with_trie ?ks ?f ?t) ?ks' =
      (if ?ks' = ?ks then Some (?f (lookup_trie ?t ?ks'))
       else lookup_trie ?t ?ks')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 3)),
               template_app
                (template_hole 0,
                 template_app
                  (template_var 2,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Trie.update_trie_Cons",
     "update_trie (?k # ?ks) ?v (Trie ?vo ?ts) =
      Trie ?vo
       (AList.update_with_aux (Trie None []) ?k (update_trie ?ks ?v) ?ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_hole 0)),
               template_var 4),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Trie.delete_eq_empty_lookup_other_fail",
     "[| delete_trie ?ks ?t = Trie None []; ?ks' ~= ?ks |]
      ==> lookup_trie ?t ?ks' = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 5))),
    ("Trie.trie_induct",
     "(!!vo kvs.
          (!!k t. (k, t) : set kvs ==> ?P t) ==> ?P (Trie vo kvs)) ==>
      ?P ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Trie.dom_lookup",
     "dom (lookup_trie (Trie ?vo ?kts)) =
      (UN k:dom (map_of ?kts).
          (#) k ` dom (lookup_trie (the (map_of ?kts k)))) Un
      (if ?vo = None then {} else {[]})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, t_empty),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 7, template_var 0))))),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 2)))
           ))),
    ("Trie.ran_lookup_Trie",
     "invar_trie (Trie ?vo ?ps) ==>
      ran (lookup_trie (Trie ?vo ?ps)) =
      (case ?vo of None => {} | Some v => {v}) Un
      (UN (k, t):set ?ps. ran (lookup_trie t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 11, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5), t_empty),
               template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_app (template_hole 0, template_var 0))))))),
    ("Trie.update_trie_induct",
     "[| !!v ps. ?P [] (Trie v ps);
         !!k ks v ps. (!!x. ?P ks x) ==> ?P (k # ks) (Trie v ps) |]
      ==> ?P ?xs ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Trie.lookup_eq_None_iff",
     "invar_trie (Trie ?vo ?kvs) ==>
      (lookup_trie (Trie ?vo ?kvs) ?ks = None) =
      (?ks = [] & ?vo = None |
       (EX k ks'.
           ?ks = k # ks' &
           (ALL t. (k, t) : set ?kvs --> lookup_trie t ks' = None)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 16, template_var 2),
                 template_var 1)),
             template_var 0),
           template_hole 12),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_hole 8)),
                   template_app
                    (template_app (template_hole 14, template_var 2),
                     template_hole 12))),
               template_app (template_hole 7, t_empty))
             )))),
    ("Trie.lookup_eq_Some_iff",
     "invar_trie (Trie ?vo ?kvs) ==>
      (lookup_trie (Trie ?vo ?kvs) ?ks = Some ?v) =
      (?ks = [] & ?vo = Some ?v |
       (EX k t ks'.
           ?ks = k # ks' &
           (k, t) : set ?kvs & lookup_trie t ks' = Some ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 15, template_var 3),
                 template_var 2)),
             template_var 1),
           template_app (template_hole 11, template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 7)),
                   template_app
                    (template_app (template_hole 13, template_var 3),
                     template_app (template_hole 11, template_var 0)))),
               template_app (template_hole 6, t_empty))
             ))))]:
   (string * thm * template) list
### theory "Draft.TrieMoreTemplates"
### 0.284s elapsed time, 0.405s cpu time, 0.031s GC time
val it = (): unit
