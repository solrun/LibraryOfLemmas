   [("E_Transcendental.nat_fact", "nat (fact ?n) = fact ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("E_Transcendental.degree_of_int_poly",
     "degree (of_int_poly ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("E_Transcendental.algebraic_of_real_iff",
     "algebraic (of_real ?x) = algebraic ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("E_Transcendental.higher_pderiv_0", "(pderiv ^^ ?n) 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0),
       template_hole 0)),
    ("E_Transcendental.filterlim_minus_nat_at_top",
     "LIM n sequentially. n - ?k :> sequentially",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_hole 0)
         )),
    ("E_Transcendental.pderiv_of_int_poly",
     "pderiv (of_int_poly ?p) = of_int_poly (pderiv ?p)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("E_Transcendental.of_nat_eq_1_iff",
     "(of_nat ?x = (1::?'a)) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("E_Transcendental.of_int_poly_eq_0_iff",
     "(of_int_poly ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("E_Transcendental.poly_of_int_poly_1",
     "poly (of_int_poly ?p) (1::?'a) = of_int (poly ?p 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("E_Transcendental.poly_of_int_poly_0",
     "poly (of_int_poly ?p) (0::?'a) = of_int (poly ?p 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("E_Transcendental.coeff_of_int_poly",
     "poly.coeff (of_int_poly ?p) ?n = of_int (poly.coeff ?p ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("E_Transcendental.of_int_poly_eq_iff",
     "(of_int_poly ?p = of_int_poly ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("E_Transcendental.of_int_poly_monom",
     "of_int_poly (Polynomial.monom ?c ?n) =
      Polynomial.monom (of_int ?c) ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("E_Transcendental.of_int_poly_power",
     "of_int_poly (?p ^ ?n) = of_int_poly ?p ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("E_Transcendental.fact_dvd_poly_higher_pderiv_aux",
     "fact ?n dvd poly ((pderiv ^^ ?n) ?p) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 1)),
             template_var 0))
         )),
    ("E_Transcendental.fact_dvd_higher_pderiv",
     "[:fact ?n:] dvd (pderiv ^^ ?n) ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0))
         )),
    ("E_Transcendental.poly_of_int_poly",
     "poly (of_int_poly ?p) (of_int ?x) = of_int (poly ?p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("E_Transcendental.of_int_poly_add",
     "of_int_poly (?p + ?q) = of_int_poly ?p + of_int_poly ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("E_Transcendental.of_int_poly_mult",
     "of_int_poly (?p * ?q) = of_int_poly ?p * of_int_poly ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("E_Transcendental.of_int_poly_pCons",
     "of_int_poly (pCons ?c ?p) = pCons (of_int ?c) (of_int_poly ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("E_Transcendental.of_int_poly_smult",
     "of_int_poly (Polynomial.smult ?c ?p) =
      Polynomial.smult (of_int ?c) (of_int_poly ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("E_Transcendental.power_over_fact_tendsto_0",
     "(%n. ?x ^ n / fact n) \<longlonglongrightarrow> 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("E_Transcendental.poly_of_int_poly_of_nat",
     "poly (of_int_poly ?p) (of_nat ?x) = of_int (poly ?p (int ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("E_Transcendental.poly_of_int_poly_of_real",
     "poly (of_int_poly ?p) (of_real ?x) =
      of_real (poly (of_int_poly ?p) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("E_Transcendental.of_int_poly_sum",
     "of_int_poly (sum ?f ?A) = (SUM x:?A. of_int_poly (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("E_Transcendental.of_int_poly_prod",
     "of_int_poly (prod ?f ?A) = (PROD x:?A. of_int_poly (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("E_Transcendental.higher_pderiv_of_int_poly",
     "(pderiv ^^ ?n) (of_int_poly ?p) = of_int_poly ((pderiv ^^ ?n) ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("E_Transcendental.power_poly_const", "[:?c:] ^ ?n = [:?c ^ ?n:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("E_Transcendental.prime_elem_int_not_dvd_neg1_power",
     "prime_elem ?p ==> ~ ?p dvd (- 1) ^ ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_var 0))
               )
           ))),
    ("E_Transcendental.power_over_fact_tendsto_0'",
     "(%n. ?c * ?x ^ n / fact n) \<longlonglongrightarrow> 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("E_Transcendental.monom_power",
     "Polynomial.monom ?c ?n ^ ?k = Polynomial.monom (?c ^ ?k) (?n * ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("E_Transcendental.pderiv_monom",
     "pderiv (Polynomial.monom ?c ?n) =
      Polynomial.monom (of_nat ?n * ?c) (?n - 1)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("E_Transcendental.higher_pderiv_smult",
     "(pderiv ^^ ?n) (Polynomial.smult ?c ?p) =
      Polynomial.smult ?c ((pderiv ^^ ?n) ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 1),
           template_var 0)))),
    ("E_Transcendental.prime_dvd_fact_iff_int",
     "prime ?p ==> (?p dvd fact ?n) = (?p <= int ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("E_Transcendental.fact_dvd_poly_higher_pderiv_aux'",
     "?m <= ?n ==> fact ?m dvd poly ((pderiv ^^ ?n) ?p) ?x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("E_Transcendental.higher_pderiv_sum",
     "(pderiv ^^ ?n) (sum ?f ?A) = (SUM x:?A. (pderiv ^^ ?n) (?f x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("E_Transcendental.higher_pderiv_monom_eq_zero",
     "?n + 1 < ?m ==> (pderiv ^^ ?m) (Polynomial.monom ?c ?n) = 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_hole 0))),
    ("E_Transcendental.pderiv_power",
     "pderiv (?p ^ ?n) =
      Polynomial.smult (of_nat ?n) (?p ^ (?n - 1) * pderiv ?p)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_app (template_hole 6, template_var 1))))),
    ("E_Transcendental.higher_pderiv_add",
     "(pderiv ^^ ?n) (?p + ?q) = (pderiv ^^ ?n) ?p + (pderiv ^^ ?n) ?q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 1),
           template_var 0)))),
    ("E_Transcendental.coeff_higher_pderiv",
     "poly.coeff ((pderiv ^^ ?m) ?f) ?n =
      pochhammer (of_nat (Suc ?n)) ?m * poly.coeff ?f (?n + ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 5),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("E_Transcendental.fact_dvd_pochhammer",
     "?m <= ?n + 1 ==> fact ?m dvd pochhammer (int ?n - int ?m + 1) ?m",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 0)),
                       template_app (template_hole 1, template_var 1))),
                   template_hole 0)),
               template_var 1))
           ))),
    ("E_Transcendental.int_polyE",
     "[| !!n. poly.coeff ?p n : \<int>;
         !!p'. ?p = of_int_poly p' ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("E_Transcendental.poly_higher_pderiv_aux2",
     "poly ((pderiv ^^ ?n) ([:- ?c, 1::?'a:] ^ ?n * ?p)) ?c =
      fact ?n * poly ?p ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 2),
               template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 1)),
                       template_app
                        (template_app (template_hole 5, template_hole 3),
                         template_hole 2))),
                   template_var 2)),
               template_var 0))),
         template_var 1),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 10, template_var 0),
           template_var 1)))),
    ("E_Transcendental.poly_higher_pderiv_aux1",
     "?k < ?n ==>
      poly ((pderiv ^^ ?k) ([:- ?c, 1::?'a:] ^ ?n * ?p)) ?c = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app (template_hole 8, template_var 3),
                 template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_var 1)),
                         template_app
                          (template_app (template_hole 4, template_hole 2),
                           template_hole 1))),
                     template_var 2)),
                 template_var 0))),
           template_var 1),
         template_hole 0))),
    ("E_Transcendental.algebraicE'",
     "[| algebraic ?x;
         !!p. [| p ~= 0; poly (of_int_poly p) ?x = (0::?'a) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("E_Transcendental.degree_prod_sum_eq",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      degree (prod ?f ?A) = (SUM x:?A. degree (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("E_Transcendental.poly_higher_pderiv_aux1'",
     "[| ?k < ?n; [:- ?c, 1::?'a:] ^ ?n dvd ?p |]
      ==> poly ((pderiv ^^ ?k) ?p) ?c = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 1)),
                      template_app
                       (template_app (template_hole 8, template_hole 6),
                        template_hole 5))),
                  template_var 2)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("E_Transcendental.poly_higher_pderiv_aux3'",
     "[| ?n <= ?k; [:- ?c, 1::?'a:] ^ ?n dvd ?p |]
      ==> fact ?n dvd poly ((pderiv ^^ ?k) ?p) ?c",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 1)),
                      template_app
                       (template_app (template_hole 8, template_hole 6),
                        template_hole 5))),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0),
                   template_var 0)),
               template_var 1))
           ))),
    ("E_Transcendental.poly_higher_pderiv_aux3",
     "?n <= ?k ==>
      EX q. poly ((pderiv ^^ ?k) ([:- ?c, 1::?'a:] ^ ?n * ?p)) ?c =
            fact ?n * poly q ?c",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("E_Transcendental.higher_pderiv_monom",
     "?m <= ?n + 1 ==>
      (pderiv ^^ ?m) (Polynomial.monom ?c ?n) =
      Polynomial.monom (pochhammer (int ?n - int ?m + 1) ?m * ?c)
       (?n - ?m)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_hole 8),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 1)),
                           template_app (template_hole 2, template_var 2))),
                       template_hole 1)),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("E_Transcendental.e_transcendental_aux_bound",
     "(!!C. [| 0 <= C;
               !!x. x : closed_segment 0 (of_nat ?n) ==>
                    cmod (PROD k = 1..?n. x - of_nat k) <= C |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0))),
    ("E_Transcendental.algebraicE'_nonzero",
     "[| algebraic ?x; ?x ~= (0::?'a);
         !!p. [| p ~= 0; poly.coeff p 0 ~= 0;
                 poly (of_int_poly p) ?x = (0::?'a) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("E_Transcendental.lindemann_weierstrass_integral",
     "((%t. exp (?u - t) * poly ?f t) has_contour_integral
       exp ?u * (SUM j<=degree ?f. poly ((pderiv ^^ j) ?f) 0) -
       (SUM j<=degree ?f. poly ((pderiv ^^ j) ?f) ?u))
       (linepath 0 ?u)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 1)),
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0))))),
               template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))))),
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1))
         ))]
