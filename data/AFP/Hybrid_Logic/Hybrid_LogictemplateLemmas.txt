   [("Hybrid_Logic.finite_block_nominals", "finite (block_nominals ?block)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hybrid_Logic.finite_branch_nominals",
     "finite (branch_nominals ?branch)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hybrid_Logic.finite_nominals", "finite (nominals ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hybrid_Logic.omit_id", "omit {} ?ps = ?ps",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.omit_branch_id", "omit_branch {} ?branch = ?branch",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.sub_branch_id", "sub_branch id ?branch = ?branch",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.sub_id", "sub id ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.omit_block_id", "omit_block {} ?block = ?block",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.sub_block_id", "sub_block id ?block = ?block",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.sub_list_id", "sub_list id ?ps = ?ps",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Hybrid_Logic.Extend_mem", "?S <= Extend ?A ?S ?f",
     template_inequation
      (less_equals, template_var 2,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Hybrid_Logic.length_mapi", "length (mapi ?f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Hybrid_Logic.omit_set", "set (omit ?xs ?ps) <= set ?ps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Hybrid_Logic.extend_mem", "?S <= extend ?A ?S ?f ?n",
     template_inequation
      (less_equals, template_var 3,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Hybrid_Logic.sub_block_nominals",
     "block_nominals (sub_block ?f ?block) = ?f ` block_nominals ?block",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.sub_branch_nominals",
     "branch_nominals (sub_branch ?f ?branch) =
      ?f ` branch_nominals ?branch",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.sub_nominals", "nominals (sub ?f ?p) = ?f ` nominals ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.sub_branch_image",
     "set (sub_branch ?f ?branch) = sub_block ?f ` set ?branch",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.rev_nth_zero", "(?xs @ [?x]) !. 0 = Some ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Hybrid_Logic.STA_one",
     "?A, ?n \<turnstile> ?branch ==> ?A, 1 \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             template_var 0)
           ))),
    ("Hybrid_Logic.hequiv_names", "hequiv ?H ?i ?j ==> ?i : names ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Hybrid_Logic.hequiv_refl", "?i : names ?H ==> hequiv ?H ?i ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 1)
           ))),
    ("Hybrid_Logic.sub_branch_comp",
     "sub_branch ?f (sub_branch ?g ?branch) = sub_branch (?f o ?g) ?branch",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Hybrid_Logic.sub_comp", "sub ?f (sub ?g ?p) = sub (?f o ?g) ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Hybrid_Logic.sub_block_comp",
     "sub_block ?f (sub_block ?g ?block) = sub_block (?f o ?g) ?block",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Hybrid_Logic.finite_nominals_set",
     "finite ?S ==> finite (\<Union> (block_nominals ` ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 0)))
           ))),
    ("Hybrid_Logic.STA_potential",
     "?A, ?n \<turnstile> ?branch ==> ?A, Suc ?m \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Hybrid_Logic.STA_Suc",
     "?A, ?n \<turnstile> ?branch ==> ?A, Suc ?n \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Hybrid_Logic.block_nominals_branch",
     "?block \<in>. ?branch ==>
      block_nominals ?block <= branch_nominals ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.Dup_touches",
     "Dup ?p ?i ?branch ?xs ==> only_touches ?i ?branch ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Hybrid_Logic.hequiv_refl'", "(?ps, ?i) : ?H ==> hequiv ?H ?i ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 1)
           ))),
    ("Hybrid_Logic.rev_nth_Suc", "(?xs @ [?x]) !. Suc ?v = ?xs !. ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2), template_var 0))),
    ("Hybrid_Logic.extend_chain",
     "extend ?A ?S ?f ?n <= extend ?A ?S ?f (Suc ?n)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.ex_assignment",
     "Hintikka ?A ?H ==> assign ?A ?H ?i ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Hybrid_Logic.sub_block_mem",
     "?p on ?block ==> sub ?f ?p on sub_block ?f ?block",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hybrid_Logic.STA_add",
     "?A, ?n \<turnstile> ?branch ==> ?A, ?m + ?n \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.new_omit_branch",
     "new ?p ?a ?branch ==> new ?p ?a (omit_branch ?xs ?branch)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hybrid_Logic.Dup_all_is_branch",
     "Dup ?p ?i ?branch ?xs ==> all_is_branch ?p ?i ?branch ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Hybrid_Logic.rev_nth_last", "?xs !. 0 = Some ?x ==> last ?xs = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Hybrid_Logic.rev_nth_Some", "?xs !. ?v = Some ?y ==> ?v < length ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("Hybrid_Logic.witnessed_omit_branch",
     "witnessed ?p ?a (omit_branch ?xs ?branch) ==>
      witnessed ?p ?a ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Hybrid_Logic.consistent_drop_block",
     "consistent ?A ({?block} Un ?S) ==> consistent ?A ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 0)
           ))),
    ("Hybrid_Logic.rev_nth_mem",
     "(?block \<in>. ?branch) = (EX v. ?branch !. v = Some ?block)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Hybrid_Logic.sub_list_comp",
     "sub_list ?f (sub_list ?g ?ps) = sub_list (?f o ?g) ?ps",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Hybrid_Logic.rev_nth_bounded",
     "?v < length ?xs ==> EX x. ?xs !. ?v = Some x",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Hybrid_Logic.Dup_branch_nominals",
     "Dup ?p ?i ?branch ?xs ==>
      branch_nominals (omit_branch ?xs ?branch) = branch_nominals ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Hybrid_Logic.Dup_branch",
     "Dup ?p ?i ?branch ?xs ==> Dup ?p ?i (?extra @ ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.descendants_branch",
     "descendants ?k ?i ?branch ?xs ==>
      descendants ?k ?i (?extra @ ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.on_omit", "?p on (omit ?xs ?ps, ?i) ==> ?p on (?ps, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Hybrid_Logic.block_nominals",
     "[| ?p on ?block; ?i : nominals ?p |] ==> ?i : block_nominals ?block",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Hybrid_Logic.inconsistent_weaken",
     "[| ~ consistent ?A ?S; ?S <= ?S' |] ==> ~ consistent ?A ?S'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)
               )
           ))),
    ("Hybrid_Logic.STA_le",
     "[| ?A, ?n \<turnstile> ?branch; ?n <= ?m |]
      ==> ?A, ?m \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Hybrid_Logic.extend_bound",
     "\<Union> (extend ?A ?S ?f ` {..?m}) = extend ?A ?S ?f ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Hybrid_Logic.mapi_branch_id",
     "mapi_branch (mapper ?f {}) ?branch = ?branch",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_var 0),
       template_var 0)),
    ("Hybrid_Logic.finite_nominals_extend",
     "finite (\<Union> (block_nominals ` ?S)) ==>
      finite (\<Union> (block_nominals ` extend ?A ?S ?f ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 3),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Hybrid_Logic.rev_nth_append",
     "?xs !. ?v = Some ?y ==> (?ys @ ?xs) !. ?v = Some ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("Hybrid_Logic.rev_nth_Cons",
     "?xs !. ?v = Some ?y ==> (?x # ?xs) !. ?v = Some ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("Hybrid_Logic.witness_list_append",
     "EX extra.
         witness_list (?ps @ ?qs) ?used =
         witness_list ?ps ?used @ witness_list ?qs (extra Un ?used)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Hybrid_Logic.swap_id",
     "id(?i := ?j, ?j := ?i) o id(?i := ?j, ?j := ?i) = id",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1),
                   template_var 0)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 0)),
             template_var 0),
           template_var 1)),
       template_hole 0)),
    ("Hybrid_Logic.valid_semantics",
     "valid ?p --> ?M, ?g, ?w \<Turnstile> ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3))
         )),
    ("Hybrid_Logic.omit_oob",
     "length ?ps <= ?v ==> omit ({?v} Un ?xs) ?ps = omit ?xs ?ps",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 2)))),
    ("Hybrid_Logic.sub_block_upd_fresh",
     "?i ~: block_nominals ?block ==>
      sub_block (?f(?i := ?j)) ?block = sub_block ?f ?block",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Hybrid_Logic.sub_branch_upd_fresh",
     "?i ~: branch_nominals ?branch ==>
      sub_branch (?f(?i := ?j)) ?branch = sub_branch ?f ?branch",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Hybrid_Logic.sub_upd_fresh",
     "?i ~: nominals ?p ==> sub (?f(?i := ?j)) ?p = sub ?f ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Hybrid_Logic.rev_nth_mapi_block",
     "?ps !. ?v' = Some ?p ==> ?f ?v' ?p on (mapi ?f ?ps, ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_var 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 0))
           ))),
    ("Hybrid_Logic.STA_nonempty",
     "?A, ?n \<turnstile> ?left @ ?right ==>
      ?A, Suc ?m \<turnstile> filter nonempty ?left @ ?right",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Hybrid_Logic.block_sat",
     "ALL p. p on ?block --> ?M, ?g, ?w \<Turnstile> p ==>
      ?M, ?g \<Turnstile>\<^sub>B ?block",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3)
           ))),
    ("Hybrid_Logic.mapi_append",
     "mapi ?f (?xs @ ?ys) =
      mapi (%v. ?f (v + length ?ys)) ?xs @ mapi ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Hybrid_Logic.mapi_rev_nth",
     "?xs !. ?v = Some ?x ==> mapi ?f ?xs !. ?v = Some (?f ?v ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 0, template_var 2),
             template_var 1))))),
    ("Hybrid_Logic.nominal_in_names",
     "[| Hintikka ?A ?H; EX block:?H. ?i : block_nominals block |]
      ==> ?i : names ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Hybrid_Logic.descendants_bounds_fst",
     "[| descendants ?k ?i ?branch ?xs; (?v, ?v') : ?xs |]
      ==> ?v < length ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 3)))),
    ("Hybrid_Logic.rev_nth_on",
     "(?p on (?ps, ?i)) = ((EX v. ?ps !. v = Some ?p) | ?p = Nom ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Hybrid_Logic.mapi_block_id",
     "mapi_block (mapper ?f {} ?v) (?ps, ?i) = (?ps, ?i)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Hybrid_Logic.omit_branch_oob",
     "length ?branch <= ?v ==>
      omit_branch ({(?v, ?v')} Un ?xs) ?branch = omit_branch ?xs ?branch",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1)),
                   template_hole 0)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 3)))),
    ("Hybrid_Logic.proper_dia",
     "proper_dia ?p = Some ?q ==>
      ?p = (\<^bold>\<diamond> ?q) & (\<nexists>a. ?q = Nom a)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Hybrid_Logic.Dup_head_oob",
     "Dup ?p ?i ((?ps, ?a) # ?branch) ?xs ==>
      (length ?branch, length ?ps) ~: ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 0, template_var 3))),
                 template_var 0)
               )
           ))),
    ("Hybrid_Logic.descendants_oob_head",
     "descendants ?k ?i ((?ps, ?a) # ?branch) ?xs ==>
      (length ?branch, length ?ps) ~: ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 0, template_var 3))),
                 template_var 0)
               )
           ))),
    ("Hybrid_Logic.rev_nth_snoc",
     "(?xs @ [?x]) !. Suc ?v = Some ?y ==> ?xs !. ?v = Some ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2))),
            template_app (template_hole 1, template_var 1)),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Hybrid_Logic.STA_Dup",
     "[| ?A, ?n \<turnstile> ?branch; Dup ?q ?i ?branch ?xs |]
      ==> ?A, ?n \<turnstile> omit_branch ?xs ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Hybrid_Logic.sub_block_repl",
     "?j ~: block_nominals ?block ==>
      ?i ~: block_nominals (sub_block (id(?i := ?j, ?j := ?i)) ?block)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_hole 0),
                                 template_var 0),
                               template_var 2)),
                           template_var 2),
                         template_var 0)),
                     template_var 1)))
               )
           ))),
    ("Hybrid_Logic.sub_branch_repl",
     "?j ~: branch_nominals ?branch ==>
      ?i ~: branch_nominals (sub_branch (id(?i := ?j, ?j := ?i)) ?branch)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_hole 0),
                                 template_var 0),
                               template_var 2)),
                           template_var 2),
                         template_var 0)),
                     template_var 1)))
               )
           ))),
    ("Hybrid_Logic.all_is_branch_nominals'",
     "all_is_branch ?p ?i ?branch ?xs ==>
      nominals ?p Un branch_nominals (omit_branch ?xs ?branch) =
      nominals ?p Un branch_nominals ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 3)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 1, template_var 1))))),
    ("Hybrid_Logic.sub_branch_mem",
     "(?ps, ?i) \<in>. ?branch ==>
      (sub_list ?f ?ps, ?f ?i) \<in>. sub_branch ?f ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 3)),
                 template_app (template_var 0, template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Hybrid_Logic.block_sat_fresh",
     "[| ?M, ?g \<Turnstile>\<^sub>B ?block; ?i ~: block_nominals ?block |]
      ==> ?M, ?g(?i := ?v) \<Turnstile>\<^sub>B ?block",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Hybrid_Logic.omit_mem",
     "[| ?ps !. ?v = Some ?p; ?v ~: ?xs |] ==> ?p \<in>. omit ?xs ?ps",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)))
           ))),
    ("Hybrid_Logic.hequiv_sym'",
     "[| Hintikka ?A ?H; ?i : ?A; hequiv ?H ?i ?j |] ==> hequiv ?H ?j ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Hybrid_Logic.all_is_set",
     "all_is ?p ?ps ?xs ==> {?p} Un set (omit ?xs ?ps) = {?p} Un set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2)),
           template_app (template_hole 1, template_var 1))))),
    ("Hybrid_Logic.semantics_fresh",
     "?i ~: nominals ?p ==>
      (?M, ?g, ?w \<Turnstile> ?p) =
      (?M, ?g(?i := ?v), ?w \<Turnstile> ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app (template_hole 3, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 0)),
             template_var 1),
           template_var 4)))),
    ("Hybrid_Logic.mapi_branch_mem",
     "(?ps, ?i) \<in>. ?branch ==>
      EX v. (mapi (?f v) ?ps, ?i) \<in>. mapi_branch ?f ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Hybrid_Logic.rev_nth_mapi_branch",
     "?branch !. ?v = Some (?ps, ?a) ==>
      (mapi (?f ?v) ?ps, ?a) \<in>. mapi_branch ?f ?branch",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_var 0, template_var 3)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)))
           ))),
    ("Hybrid_Logic.Dup_head_oob'",
     "Dup ?p ?i ((?ps, ?a) # ?branch) ?xs ==>
      (length ?branch, ?k + length ?ps) ~: ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app (template_hole 0, template_var 4)))),
                 template_var 1)
               )
           ))),
    ("Hybrid_Logic.descendants_oob_head'",
     "descendants ?k ?i ((?ps, ?a) # ?branch) ?xs ==>
      (length ?branch, ?m + length ?ps) ~: ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app (template_hole 0, template_var 4)))),
                 template_var 1)
               )
           ))),
    ("Hybrid_Logic.soundness'",
     "[| ?A, ?n \<turnstile> ?branch;
         ?M, ?g \<Turnstile>\<^sub>\<Theta> ?branch |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_app (template_hole 3, t_empty))
            )],
       template_predicate (template_hole 0))),
    ("Hybrid_Logic.soundness",
     "?A, ?n \<turnstile> ?branch ==>
      EX block:set ?branch. EX p. p on block & ~ ?M, ?g, ?w \<Turnstile> p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 3)),
             t_empty)
           ))),
    ("Hybrid_Logic.Dup_block",
     "Dup ?p ?i ((?ps, ?a) # ?branch) ?xs ==>
      Dup ?p ?i ((?ps' @ ?ps, ?a) # ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4)),
                     template_var 3)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.Dup_head",
     "Dup ?p ?i ((?ps, ?a) # ?branch) ?xs ==>
      Dup ?p ?i ((?q # ?ps, ?a) # ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4)),
                     template_var 3)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.descendants_block",
     "descendants ?k ?i ((?ps, ?a) # ?branch) ?xs ==>
      descendants ?k ?i ((?ps' @ ?ps, ?a) # ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4)),
                     template_var 3)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.descendants_no_head",
     "descendants ?k ?i ((?ps, ?a) # ?branch) ?xs ==>
      descendants ?k ?i ((?p # ?ps, ?a) # ?branch) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 4)),
                     template_var 3)),
                 template_var 2)),
             template_var 1)
           ))),
    ("Hybrid_Logic.assign_unique",
     "[| Hintikka ?A ?H; ?a : assign ?A ?H ?i |]
      ==> assign ?A ?H ?a = assign ?A ?H ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Hybrid_Logic.STA_sub",
     "[| ?A \<turnstile> ?branch; finite ?A |]
      ==> ?f ` ?A \<turnstile> sub_branch ?f ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Hybrid_Logic.GoTo'",
     "[| ?A, Suc ?n \<turnstile> ([], ?i) # ?branch;
         ?i : branch_nominals ?branch |]
      ==> ?A, Suc ?n \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app (template_hole 5, template_var 2)),
             template_var 0)
           ))),
    ("Hybrid_Logic.all_is_block_nominals",
     "all_is ?p ?ps ?xs ==>
      nominals ?p Un block_nominals (omit ?xs ?ps, ?i) =
      nominals ?p Un block_nominals (?ps, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Hybrid_Logic.sub_block_fresh",
     "[| ?i ~: branch_nominals ?branch; ?block \<in>. ?branch |]
      ==> sub_block (?f(?i := ?j)) ?block = sub_block ?f ?block",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Hybrid_Logic.Dup_all_is",
     "[| Dup ?p ?i ?branch ?xs; ?branch !. ?v = Some (?ps, ?a) |]
      ==> all_is ?p ?ps (proj ?xs ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Hybrid_Logic.all_is_branch",
     "[| all_is_branch ?p ?i ?branch ?xs; ?branch !. ?v = Some (?ps, ?a) |]
      ==> all_is ?p ?ps (proj ?xs ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Hybrid_Logic.STA_drop_block'",
     "[| ?A, ?n \<turnstile> (?ps, ?a) # ?branch;
         (?ps, ?a) \<in>. ?branch |]
      ==> ?A, Suc ?n \<turnstile> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_app (template_hole 0, template_var 3)),
             template_var 0)
           ))),
    ("Hybrid_Logic.hequiv_sym",
     "[| Hintikka ?A ?H; ?i : ?A; ?j : ?A |]
      ==> hequiv ?H ?i ?j = hequiv ?H ?j ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Hybrid_Logic.omit_all_is",
     "[| all_is ?p ?ps ?xs; ?q \<in>. ?ps; ?q ~: set (omit ?xs ?ps) |]
      ==> ?q = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 2)))
                )
            )],
       template_equation (template_var 0, template_var 3))),
    ("Hybrid_Logic.extend_not_mem",
     "?f ?n ~: extend ?A ?S ?f (Suc ?n) ==>
      ~ consistent ?A ({?f ?n} Un extend ?A ?S ?f ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_var 3, template_var 2)),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 1),
                        template_var 0),
                      template_var 3),
                    template_app (template_hole 4, template_var 2)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_var 3, template_var 2)),
                       template_hole 0)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0),
                       template_var 3),
                     template_var 2)))
               )
           ))),
    ("Hybrid_Logic.UN_finite_bound",
     "[| finite ?A; ?A <= \<Union> (range ?f) |]
      ==> EX m. ?A <= \<Union> (?f ` {..m})",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, t_empty), template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Hybrid_Logic.soundness_fresh",
     "[| ?A, ?n \<turnstile> [([\<^bold>\<not> ?p], ?i)];
         ?i ~: nominals ?p |]
      ==> ?M, ?g, ?w \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 4)),
                        template_hole 5)),
                    template_var 3)),
                template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 4))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("Hybrid_Logic.only_touches_opening",
     "[| only_touches ?i ?branch ?xs; (?v, ?v') : ?xs;
         ?branch !. ?v = Some (?ps, ?a) |]
      ==> ?i = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_equation (template_var 6, template_var 0))),
    ("Hybrid_Logic.Hintikka_Extend",
     "[| infinite UNIV; finite ?A; maximal ?A ?S; consistent ?A ?S;
         saturated ?S |]
      ==> Hintikka ?A ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_hole 4))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Hybrid_Logic.omit_del",
     "[| ?p \<in>. ?ps; ?p ~: set (omit ?xs ?ps) |]
      ==> EX v. ?ps !. v = Some ?p & v : ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_var 1)))
                )
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Hybrid_Logic.witness_used",
     "[| infinite UNIV; finite ?used; ?i ~: block_nominals ?block |]
      ==> ?i ~: block_nominals (witness ?block ({?i} Un ?used))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_hole 6))
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 1),
                           template_hole 0)),
                       template_var 2))))
               )
           ))),
    ("Hybrid_Logic.ex_fresh_gt",
     "[| EX g. surj g; finite ?A; ?i ~: ?A |] ==> EX j. j ~: ?f ` ?A",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 2)
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Hybrid_Logic.consistent_Extend",
     "[| infinite UNIV; finite ?A; consistent ?A ?S;
         finite (\<Union> (block_nominals ` ?S)) |]
      ==> consistent ?A (Extend ?A ?S ?f)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_hole 5))
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hybrid_Logic.omit_branch_mem_diff_opening",
     "[| only_touches ?i ?branch ?xs; (?ps, ?a) \<in>. ?branch; ?i ~= ?a |]
      ==> (?ps, ?a) \<in>. omit_branch ?xs ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 3))
            ),
        template_negation
         (template_equation (template_var 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)))
           ))),
    ("Hybrid_Logic.descendants_bounds_snd",
     "[| descendants ?k ?i ?branch ?xs; (?v, ?v') : ?xs;
         ?branch !. ?v = Some (?ps, ?a) |]
      ==> ?v' < length ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 3),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("Hybrid_Logic.consistent_extend'",
     "[| infinite UNIV; finite ?A; consistent ?A ?S;
         finite (\<Union> (block_nominals ` ?S)) |]
      ==> consistent ?A (extend ?A ?S ?f ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_hole 5))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hybrid_Logic.STA_struct",
     "[| infinite UNIV; finite ?A; ?A, ?n \<turnstile> ?branch;
         set ?branch <= set ?branch' |]
      ==> ?A \<turnstile> ?branch'",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_hole 4))
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Hybrid_Logic.all_is_list_nominals",
     "all_is ?p ?ps ?xs ==>
      nominals ?p Un list_nominals (omit ?xs ?ps) =
      nominals ?p Un list_nominals ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 1, template_var 1))))))),
    ("Hybrid_Logic.ex_witness_list",
     "[| ?p \<in>. ?ps; proper_dia ?p = Some ?q |]
      ==> EX i. {\<^bold>@ i ?q, \<^bold>\<diamond> Nom i}
                <= set (witness_list ?ps ?used)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app (template_hole 11, template_var 2))
            ),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app (template_hole 8, template_var 1))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Hybrid_Logic.hequiv_sym_rel",
     "Hintikka ?A ?H ==> sym (hequiv_rel ?A ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.hequiv_trans_rel",
     "Hintikka ?B ?A ==> trans (hequiv_rel ?B ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.completeness",
     "[| infinite UNIV; ALL M g w. M, g, w \<Turnstile> ?p |]
      ==> nominals ?p, 1 \<turnstile> [([\<^bold>\<not> ?p], ?i)]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_hole 13))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1)),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_hole 1)),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Hybrid_Logic.STA_drop_block",
     "[| set ?ps <= set ?ps'; (?ps', ?a) \<in>. ?branch;
         ?A, ?n \<turnstile> (?ps, ?a) # ?branch |]
      ==> ?A, Suc ?n \<turnstile> ?branch",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 3)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("Hybrid_Logic.main",
     "?i ~: nominals ?p ==>
      valid ?p = (nominals ?p, 1 \<turnstile> [([\<^bold>\<not> ?p], ?i)])",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_app (template_hole 13, template_var 0))
                )
            )],
       template_equation
        (template_app (template_hole 11, t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 13, template_var 0)),
             template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_hole 1)),
                 template_var 1)),
             template_hole 0))))),
    ("Hybrid_Logic.descendants_initial",
     "descendants ?k ?i ?branch ?xs ==>
      EX (v, v'):?xs.
         EX ps.
            ?branch !. v = Some (ps, ?i) &
            ps !. v' = Some (\<^bold>\<diamond> Nom ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 0),
             template_app (template_hole 11, t_empty))
           ))),
    ("Hybrid_Logic.split_list",
     "[| set ?A <= {?x} Un ?X; ?x \<in>. ?A |]
      ==> EX B. set (?x # B) = set ?A & ?x ~: set B",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_hole 6)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 9, template_var 2))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Hybrid_Logic.Dup",
     "[| ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch;
         ~ new ?p ?a ((?ps, ?a) # ?branch) |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2)),
                    template_var 1)),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 1),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1)),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("Hybrid_Logic.consistent_drop_single",
     "[| infinite UNIV; finite ?A; consistent ?A ({(?p # ?ps, ?a)} Un ?S) |]
      ==> consistent ?A ({(?ps, ?a)} Un ?S)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_hole 6))
            ),
        template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app
                           (template_app (template_hole 1, template_var 3),
                            template_var 2)),
                        template_var 1)),
                    template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_hole 0)),
               template_var 0))
           ))),
    ("Hybrid_Logic.hequiv_trans",
     "[| Hintikka ?A ?H; ?i : ?A; ?k : ?A; hequiv ?H ?i ?j;
         hequiv ?H ?j ?k |]
      ==> hequiv ?H ?i ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Hybrid_Logic.omit_branch_mem_dual",
     "?p at ?i in' set (omit_branch ?xs ?branch) ==>
      ?p at ?i in' set ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Hybrid_Logic.branch_sat",
     "ALL (ps, i):set ?branch.
         ALL p. p on (ps, i) --> ?M, ?g, ?w \<Turnstile> p ==>
      ?M, ?g \<Turnstile>\<^sub>\<Theta> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_app (template_hole 6, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 3)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.mem_hequiv_rel",
     "?a : proj (hequiv_rel ?A ?H) ?b ==> ?a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_hole 6, template_app (template_hole 5, t_empty)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3), template_var 1)
           ))),
    ("Hybrid_Logic.saturated_Extend",
     "[| infinite UNIV; finite ?A; consistent ?A ?S;
         finite (\<Union> (block_nominals ` ?S)); surj ?f |]
      ==> saturated (Extend ?A ?S ?f)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_hole 10))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hybrid_Logic.hequiv_rel",
     "Hintikka ?A ?H ==> equiv (names ?H Int ?A) (hequiv_rel ?A ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_var 1)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.hequiv_refl_rel",
     "Hintikka ?A ?H ==> refl_on (names ?H Int ?A) (hequiv_rel ?A ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_var 1)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.list_down_induct",
     "[| ALL y:set ?ys. ?Q y; ?P (?ys @ ?xs);
         !!y xs. [| ?Q y; ?P (y # xs) |] ==> ?P xs |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Hybrid_Logic.maximal_Extend",
     "[| infinite UNIV; finite ?A; consistent ?A ?S;
         finite (\<Union> (block_nominals ` ?S)); surj ?f |]
      ==> maximal ?A (Extend ?A ?S ?f)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_hole 10))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hybrid_Logic.STA_drop_prefix",
     "[| set ?ps <= set ?qs; (?qs, ?a) \<in>. ?branch;
         ?A, ?n \<turnstile> (?ps @ ?ps', ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps', ?a) # ?branch",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 6),
          template_app (template_hole 6, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 0, template_var 6),
                        template_var 0)),
                    template_var 4)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 4)),
               template_var 3))
           ))),
    ("Hybrid_Logic.hequiv_names_rel",
     "Hintikka ?A ?H ==> hequiv_rel ?A ?H <= names ?H \<times> names ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("Hybrid_Logic.witness_list",
     "proper_dia ?p = Some ?q ==>
      witness_list (?p # ?ps) ?used =
      (let i = SOME i. i ~: ?used
       in (\<^bold>@ i ?q) #
          (\<^bold>\<diamond> Nom i) # witness_list ?ps ({i} Un ?used))",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 3),
          template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           t_empty)))),
    ("Hybrid_Logic.branch_sat_fresh",
     "[| ?M, ?g \<Turnstile>\<^sub>\<Theta> ?branch;
         ?i ~: branch_nominals ?branch |]
      ==> ?M, ?g(?i := ?v) \<Turnstile>\<^sub>\<Theta> ?branch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              template_app (template_hole 6, t_empty))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 4))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 4)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Hybrid_Logic.STA_struct_block",
     "[| infinite UNIV; finite ?A; ?A, ?n \<turnstile> (?ps, ?a) # ?branch;
         set ?ps <= set ?ps' |]
      ==> ?A \<turnstile> (?ps', ?a) # ?branch",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_hole 6))
            ),
        template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Hybrid_Logic.witness_list_used",
     "[| infinite UNIV; finite ?used; ?i ~: list_nominals ?ps |]
      ==> ?i ~: list_nominals (witness_list ?ps ({?i} Un ?used))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_hole 9))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, t_empty),
                      template_app (template_hole 4, template_var 0))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 1),
                               template_hole 0)),
                           template_var 2))))))
               )
           ))),
    ("Hybrid_Logic.consistent_extend",
     "[| infinite UNIV; finite ?A; consistent ?A (extend ?A ?S ?f ?n);
         finite (\<Union> (block_nominals ` extend ?A ?S ?f ?n)) |]
      ==> consistent ?A (extend ?A ?S ?f (Suc ?n))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_hole 6))
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2),
                      template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Hybrid_Logic.sub_still_allowed",
     "ALL i. ?p = Nom i | ?p = (\<^bold>\<diamond> Nom i) --> i : ?A ==>
      sub ?f ?p = Nom ?i | sub ?f ?p = (\<^bold>\<diamond> Nom ?i) -->
      ?i : ?f ` ?A",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 3)),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 3)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0))))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("Hybrid_Logic.assign_named",
     "[| Hintikka ?A ?H; ?i : proj (hequiv_rel ?A ?H) ?a |]
      ==> ?i : names ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Hybrid_Logic.Dup_omit_branch_mem",
     "[| Dup ?p ?i ?branch ?xs; ?q at ?a in' set ?branch |]
      ==> ?q at ?a in' set (omit_branch ?xs ?branch)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Hybrid_Logic.Dup_omit_branch_mem_same_opening",
     "[| Dup ?p ?i ?branch ?xs; ?p at ?i in' set ?branch |]
      ==> ?p at ?i in' set (omit_branch ?xs ?branch)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Hybrid_Logic.consistent_witness",
     "[| infinite UNIV; consistent ?A ?S;
         finite (\<Union> (block_nominals ` ?S)); ?block : ?S; finite ?A |]
      ==> consistent ?A
           ({witness ?block (?A Un \<Union> (block_nominals ` ?S))} Un ?S)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_hole 10))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 7, template_hole 6),
                             template_var 1))))),
                   template_hole 0)),
               template_var 1))
           ))),
    ("Hybrid_Logic.mapi_branch_add_oob",
     "length ?branch <= ?v ==>
      mapi_branch (mapper ?f ({(?v, ?v')} Un ?xs)) ?branch =
      mapi_branch (mapper ?f ?xs) ?branch",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 4),
          template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty), template_var 4),
         template_app
          (template_app (template_hole 6, t_empty), template_var 4)))),
    ("Hybrid_Logic.Hintikka_model",
     "[| Hintikka ?A ?H; ?p at ?i in' ?H; nominals ?p <= ?A |]
      ==> Model (reach ?A ?H)
           (val ?H), assign ?A ?H, assign ?A ?H ?i \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2)),
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Hybrid_Logic.Neg'",
     "[| (\<^bold>\<not> \<^bold>\<not> ?p) at ?a in' set
                 ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 5)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 5)),
               template_var 3))
           ))),
    ("Hybrid_Logic.SatP'",
     "[| (\<^bold>@ ?a ?p) at ?b in' set ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 5)),
                    template_var 4)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 5),
                   template_var 4)),
               template_var 3))
           ))),
    ("Hybrid_Logic.consistent_witness_list",
     "[| infinite UNIV; consistent ?A ?S; (?ps, ?a) : ?S; finite ?used;
         ?A Un \<Union> (block_nominals ` ?S) <= ?used |]
      ==> consistent ?A ({(witness_list ?ps ?used, ?a)} Un ?S)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 13, template_hole 12))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 0)),
                       template_var 1)),
                   template_hole 0)),
               template_var 3))
           ))),
    ("Hybrid_Logic.mapi_block_add_oob",
     "length ?ps <= ?v' ==>
      mapi_block (mapper ?f ({(?v, ?v')} Un ?xs) ?v) (?ps, ?i) =
      mapi_block (mapper ?f ?xs ?v) (?ps, ?i)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Hybrid_Logic.Hintikka_model",
     "[| Hintikka ?A ?H; (\<^bold>\<not> ?p) at ?i in' ?H;
         nominals ?p <= ?A |]
      ==> ~ Model (reach ?A ?H)
             (val ?H), assign ?A ?H, assign ?A ?H ?i \<Turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_var 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 3),
                             template_var 2)),
                         template_app (template_hole 1, template_var 2))),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("Hybrid_Logic.STA_sub_inf",
     "[| infinite UNIV; ?A \<turnstile> ?branch; finite ?A;
         ALL i:branch_nominals ?branch. ?f i : ?f ` ?A --> i : ?A |]
      ==> ?f ` ?A \<turnstile> sub_branch ?f ?branch",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_hole 11))
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Hybrid_Logic.SatN'",
     "[| (\<^bold>\<not> (\<^bold>@ ?a ?p)) at ?b in' set
                 ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> ((\<^bold>\<not> ?p) # ?ps, ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 0,
                          template_app (template_hole 3, template_var 2)),
                        template_var 5)),
                    template_var 4)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4)),
               template_var 3))
           ))),
    ("Hybrid_Logic.mapi_branch_head_add_oob",
     "mapi_branch (mapper ?f ({(length ?branch, length ?ps)} Un ?xs))
       ((?ps, ?a) # ?branch) =
      mapi_branch (mapper ?f ?xs) ((?ps, ?a) # ?branch)",
     template_equation
      (template_app
        (template_app (template_hole 10, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 4)),
       template_app
        (template_app (template_hole 10, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 4)))),
    ("Hybrid_Logic.index_Cons",
     "[| ((?ps, ?a) # ?branch) !. ?v = Some (?qs, ?b);
         ?qs !. ?v' = Some ?q |]
      ==> EX qs'.
             ((?p # ?ps, ?a) # ?branch) !. ?v = Some (qs', ?b) &
             qs' !. ?v' = Some ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 8),
                    template_var 7)),
                template_var 6)),
            template_var 5),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Hybrid_Logic.omit_branch_mem_diff_formula",
     "[| all_is_branch ?p ?i ?branch ?xs; ?q at ?i in' set ?branch;
         ?p ~= ?q |]
      ==> ?q at ?i in' set (omit_branch ?xs ?branch)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (template_equation (template_var 4, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Hybrid_Logic.at_in_mapi_branch",
     "[| ?p at ?a in' set ?branch; ?p ~= Nom ?a |]
      ==> EX v v'. ?f v v' ?p at ?a in' set (mapi_branch ?f ?branch)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Hybrid_Logic.STA_sub'",
     "[| !!f i A. [| finite A; i ~: A |] ==> EX j. j ~: f ` A; finite ?A;
         ?A, ?n \<turnstile> ?branch |]
      ==> ?f ` ?A \<turnstile> sub_branch ?f ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Hybrid_Logic.descendants_types",
     "[| descendants ?k ?i ?branch ?xs; (?v, ?v') : ?xs;
         ?branch !. ?v = Some (?ps, ?a); ?ps !. ?v' = Some ?p |]
      ==> ?p = (\<^bold>\<diamond> Nom ?k) |
          (EX q. ?p = (\<^bold>\<not> (\<^bold>@ ?k q)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3)),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 6),
            template_var 4),
          template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1))),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 3),
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 8)))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Hybrid_Logic.DisN'",
     "[| (\<^bold>\<not> (?p \<^bold>\<or>
                          ?q)) at ?a in' set ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> ((\<^bold>\<not> ?q) #
                              (\<^bold>\<not> ?p) # ?ps,
                              ?a) #
                             ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 0,
                          template_app (template_hole 3, template_var 2)),
                        template_app
                         (template_app
                           (template_hole 0,
                            template_app (template_hole 3, template_var 3)),
                          template_var 5))),
                    template_var 6)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 6)),
               template_var 4))
           ))),
    ("Hybrid_Logic.STA_sub_gt",
     "[| EX g. surj g; ?A \<turnstile> ?branch; finite ?A;
         ALL i:branch_nominals ?branch. ?f i : ?f ` ?A --> i : ?A |]
      ==> ?f ` ?A \<turnstile> sub_branch ?f ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Hybrid_Logic.at_in_sub_branch",
     "?p at ?i in' set ((?ps, ?a) # ?branch) ==>
      sub ?f
       ?p at ?f ?i in' set ((sub_list ?f ?ps, ?f ?a) #
                            sub_branch ?f ?branch)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Hybrid_Logic.assign_val",
     "[| Hintikka ?A ?H; Pro ?x at ?a in' ?H;
         (\<^bold>\<not> Pro ?x) at ?i in' ?H; ?a : assign ?A ?H ?i;
         ?i : names ?H |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate (template_hole 0))),
    ("Hybrid_Logic.DisP'",
     "[| (?p \<^bold>\<or> ?q) at ?a in' set ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch;
         ?A, ?n \<turnstile> (?q # ?ps, ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 5)),
                    template_var 6)),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 5)),
                    template_var 6)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 5),
                   template_var 6)),
               template_var 4))
           ))),
    ("Hybrid_Logic.DisP''",
     "[| (?p \<^bold>\<or> ?q) at ?a in' set ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch;
         ?A, ?m \<turnstile> (?q # ?ps, ?a) # ?branch |]
      ==> ?A, max ?n ?m \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 6)),
                    template_var 7)),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 6)),
                    template_var 7)),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 6),
                   template_var 7)),
               template_var 5))
           ))),
    ("Hybrid_Logic.ur_closure",
     "[| Hintikka ?A ?H; ?p at ?i in' ?H;
         ALL a. ?p = Nom a | ?p = (\<^bold>\<diamond> Nom a) --> a : ?A |]
      ==> ALL a:assign ?A ?H ?i. ?p at a in' ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Hybrid_Logic.ur_closure'",
     "[| Hintikka ?A ?H; ?p at ?i in' ?H;
         ALL a. ?p = Nom a | ?p = (\<^bold>\<diamond> Nom a) --> a : ?A |]
      ==> EX a:assign ?A ?H ?i. ?p at a in' ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Hybrid_Logic.assign_proj_refl",
     "[| Hintikka ?A ?H; Nom ?i at ?i in' ?H; ?i : ?A |]
      ==> assign ?A ?H ?i = proj (hequiv_rel ?A ?H) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("Hybrid_Logic.nonempty_Suc",
     "[| ?A, ?n \<turnstile> (?ps, ?a) # filter nonempty ?left @ ?right;
         ?q at ?a in' set ((?ps, ?a) # filter nonempty ?left @ ?right);
         ?q ~= Nom ?a |]
      ==> ?A, Suc ?n \<turnstile> filter nonempty ((?ps, ?a) # ?left) @
                                  ?right",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 2)),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, template_var 6),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_var 4),
                         template_var 3)),
                     template_var 2))),
               template_var 1))
           ))),
    ("Hybrid_Logic.DiaN'",
     "[| (\<^bold>\<not> (\<^bold>\<diamond> ?p)) at ?a in' set
                       ((?ps, ?a) # ?branch);
         (\<^bold>\<diamond> Nom ?i) at ?a in' set ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> ((\<^bold>\<not> (\<^bold>@ ?i ?p)) # ?ps,
                              ?a) #
                             ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 0, template_var 2),
                              template_var 3))),
                        template_var 5)),
                    template_var 6)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 9, template_var 5),
                   template_var 6)),
               template_var 4))
           ))),
    ("Hybrid_Logic.DiaP''",
     "[| (\<^bold>\<diamond> ?p) at ?a in' set ((?ps, ?a) # ?branch);
         ?i ~: ?A Un branch_nominals ((?ps, ?a) # ?branch);
         \<nexists>a. ?p = Nom a; finite ?A;
         ?A \<turnstile> ((\<^bold>@ ?i ?p) #
                          (\<^bold>\<diamond> Nom ?i) # ?ps,
                          ?a) #
                         ?branch |]
      ==> ?A \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app (template_hole 16, template_var 4),
                            template_var 5)),
                        template_var 3))))
                )
            ),
        template_negation
         (template_predicate (template_app (template_hole 7, t_empty))),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Hybrid_Logic.Nom'",
     "[| ?p at ?b in' set ((?ps, ?a) # ?branch);
         Nom ?a at ?b in' set ((?ps, ?a) # ?branch);
         ALL i. ?p = Nom i | ?p = (\<^bold>\<diamond> Nom i) --> i : ?A;
         ?A, ?n \<turnstile> (?p # ?ps, ?a) # ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 5)),
                    template_var 4)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 12, template_var 5),
                   template_var 4)),
               template_var 3))
           ))),
    ("Hybrid_Logic.DiaP'",
     "[| (\<^bold>\<diamond> ?p) at ?a in' set ((?ps, ?a) # ?branch);
         ?i ~: ?A Un branch_nominals ((?ps, ?a) # ?branch);
         \<nexists>a. ?p = Nom a; ~ witnessed ?p ?a ((?ps, ?a) # ?branch);
         ?A, ?n \<turnstile> ((\<^bold>@ ?i ?p) #
                              (\<^bold>\<diamond> Nom ?i) # ?ps,
                              ?a) #
                             ?branch |]
      ==> ?A, ?n \<turnstile> (?ps, ?a) # ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 15, template_var 5),
                            template_var 6)),
                        template_var 4))))
                )
            ),
        template_negation
         (template_predicate (template_app (template_hole 6, t_empty))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 6),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 15, template_var 5),
                        template_var 6)),
                    template_var 4))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app (template_hole 0, template_var 2),
                            template_var 3)),
                        template_app
                         (template_app
                           (template_hole 1,
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 4, template_var 2))),
                          template_var 5))),
                    template_var 6)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 15, template_var 5),
                   template_var 6)),
               template_var 4))
           ))),
    ("Hybrid_Logic.Bridge",
     "[| infinite UNIV; finite ?A; ?j : ?A;
         Nom ?k at ?j in' set ((?ps, ?i) # ?branch);
         (\<^bold>\<diamond> Nom ?j) at ?i in' set ((?ps, ?i) # ?branch);
         ?A \<turnstile> ((\<^bold>\<diamond> Nom ?k) # ?ps, ?i) #
                         ?branch |]
      ==> ?A \<turnstile> (?ps, ?i) # ?branch",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_hole 13))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Hybrid_Logic.hequiv_proj_opening",
     "[| Hintikka ?A ?H; Nom ?a at ?i in' ?H; ?a : ?A; ?i : ?A |]
      ==> proj (hequiv_rel ?A ?H) ?a = proj (hequiv_rel ?A ?H) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 1)))),
    ("Hybrid_Logic.hequiv_proj",
     "[| Hintikka ?A ?H; Nom ?a at ?i in' ?H; ?a : ?A; Nom ?b at ?i in' ?H;
         ?b : ?A |]
      ==> proj (hequiv_rel ?A ?H) ?a = proj (hequiv_rel ?A ?H) ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 1),
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("Hybrid_Logic.bridge'_nominals",
     "nominals (bridge' ?k ?j ?p) Un {?k, ?j} = nominals ?p Un {?k, ?j}",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, t_empty), t_empty),
                       t_empty),
                     t_empty),
                   t_empty),
                 t_empty),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Hybrid_Logic.bridge_proper_dia",
     "\<nexists>a. ?p = Nom a ==>
      bridge ?k ?j ?xs ?v ?v' (\<^bold>\<diamond> ?p) =
      (\<^bold>\<diamond> ?p)",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 12, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 6, t_empty), t_empty),
                       t_empty),
                     t_empty),
                   t_empty),
                 t_empty),
               template_app (template_hole 2, template_var 5))),
           template_app (template_hole 2, template_var 5)),
         template_app (template_hole 2, template_var 5)))),
    ("Hybrid_Logic.bridge_nominals",
     "nominals (bridge ?k ?j ?xs ?v ?v' ?p) Un {?k, ?j} =
      nominals ?p Un {?k, ?j}",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 5),
                         template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 9, t_empty),
                             t_empty),
                           t_empty),
                         t_empty),
                       t_empty),
                     t_empty),
                   template_var 0)),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Hybrid_Logic.bridge_on_Nom",
     "Nom ?i on (?ps, ?a) ==>
      Nom ?i on (mapi (bridge ?k ?j ?xs ?v) ?ps, ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 6)),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app (template_hole 12, template_var 6)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, t_empty),
                   template_var 5)),
               template_var 4))
           ))),
    ("Hybrid_Logic.bridge_branch_nominals",
     "branch_nominals (mapi_branch (bridge ?k ?j ?xs) ?branch) Un {?k, ?j} =
      branch_nominals ?branch Un {?k, ?j}",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, t_empty), template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Hybrid_Logic.bridge_block_nominals",
     "block_nominals (mapi_block (bridge ?k ?j ?xs ?v) (?ps, ?a)) Un
      {?k, ?j} =
      block_nominals (?ps, ?a) Un {?k, ?j}",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("Hybrid_Logic.nominals_mapi_branch_bridge",
     "Nom ?k at ?j in' set ?branch ==>
      branch_nominals (mapi_branch (bridge ?k ?j ?xs) ?branch) =
      branch_nominals ?branch",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), template_var 2)),
         template_app (template_hole 11, template_var 2)))),
    ("Hybrid_Logic.nom_at_in_bridge",
     "Nom ?i at ?a in' set ?branch ==>
      Nom ?i at ?a in' set (mapi_branch (bridge ?k ?j ?xs) ?branch)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("Hybrid_Logic.STA_bridge",
     "[| infinite UNIV; ?A \<turnstile> ?branch;
         descendants ?k ?i ?branch ?xs; Nom ?k at ?j in' set ?branch;
         finite ?A; ?j : ?A |]
      ==> ?A \<turnstile> mapi_branch (bridge ?k ?j ?xs) ?branch",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 23, template_hole 22))
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 3),
                  template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (template_app (template_hole 23, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 5)
            )],
       template_predicate (template_app (template_hole 21, t_empty)))),
    ("Hybrid_Logic.STA_bridge'",
     "[| infinite UNIV; finite ?A; ?j : ?A;
         ?A, ?n \<turnstile> (?ps, ?a) # ?branch;
         descendants ?k ?i ((?ps, ?a) # ?branch) ?xs;
         Nom ?k at ?j in' set ?branch |]
      ==> ?A \<turnstile> mapi_branch (bridge ?k ?j ?xs)
                           ((?ps, ?a) # ?branch)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 24, template_hole 23))
            ),
        template_predicate
         (template_app (template_hole 24, template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 7),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 8),
                template_var 6),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app (template_hole 19, template_var 5),
                    template_var 4)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 2),
                  template_var 1),
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 5),
                      template_var 4)),
                  template_var 3)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Hybrid_Logic.bridge_compl_cases",
     "bridge ?k ?j ?xs ?v ?v' ?p = (\<^bold>\<diamond> Nom ?j) &
      bridge ?k ?j ?xs ?w ?w' (\<^bold>\<not> ?p) =
      (\<^bold>\<not> (\<^bold>\<diamond> Nom ?k)) |
      (EX r. bridge ?k ?j ?xs ?v ?v' ?p =
             (\<^bold>\<not> (\<^bold>@ ?j r)) &
             bridge ?k ?j ?xs ?w ?w' (\<^bold>\<not> ?p) =
             (\<^bold>\<not> \<^bold>\<not> (\<^bold>@ ?k r))) |
      (EX r. bridge ?k ?j ?xs ?v ?v' ?p = (\<^bold>@ ?k r) &
             bridge ?k ?j ?xs ?w ?w' (\<^bold>\<not> ?p) =
             (\<^bold>\<not> (\<^bold>@ ?j r))) |
      bridge ?k ?j ?xs ?v ?v' ?p = ?p &
      bridge ?k ?j ?xs ?w ?w' (\<^bold>\<not> ?p) = (\<^bold>\<not> ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_hole 9, template_var 7),
                                 template_var 6)),
                             template_var 5)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 8, t_empty),
                                     t_empty),
                                   t_empty),
                                 t_empty),
                               t_empty),
                             t_empty),
                           template_var 2)),
                       template_var 2)),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 6, template_var 3)))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_app
                                (template_hole 9, template_var 1),
                               template_var 0)),
                           template_var 5)),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app (template_hole 8, t_empty),
                                   t_empty),
                                 t_empty),
                               t_empty),
                             t_empty),
                           t_empty),
                         template_app (template_hole 5, template_var 2))),
                     template_app (template_hole 5, template_var 2))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 6, template_var 4)))))),
           template_app
            (template_app
              (template_hole 14, template_app (template_hole 0, t_empty)),
             template_app
              (template_app
                (template_hole 14, template_app (template_hole 0, t_empty)),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_hole 9, template_var 7),
                                   template_var 6)),
                               template_var 5)),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 8, t_empty), t_empty),
                                     t_empty),
                                   t_empty),
                                 t_empty),
                               t_empty),
                             template_var 2)),
                         template_var 2)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_hole 9, template_var 1),
                                 template_var 0)),
                             template_var 5)),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 8, t_empty),
                                     t_empty),
                                   t_empty),
                                 t_empty),
                               t_empty),
                             t_empty),
                           template_app (template_hole 5, template_var 2))),
                       template_app (template_hole 5, template_var 2))),
                   template_app (template_hole 5, template_var 2))))))
         ))]
