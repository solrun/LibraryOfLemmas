   [("Expr.is_vals_map_Vals", "is_vals (map Val ?vs) = True",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Expr.calls_map_Val", "calls (map Val ?vs) = None",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Expr.expr_lockss_map_Val", "expr_lockss (map Val ?vs) = (%ad. 0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       t_empty)),
    ("Expr.is_val_iff", "is_val ?e = (EX v. ?e = Val v)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Expr.finals_app_map", "finals (map Val ?vs @ ?es) = finals ?es",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Expr.contains_insync_conv",
     "contains_insync ?e = (EX ad. 0 < expr_locks ?e ad)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Expr.contains_insyncs_conv",
     "contains_insyncs ?es = (EX ad. 0 < expr_lockss ?es ad)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Expr.is_vals_conv", "is_vals ?es = (EX vs. ?es = map Val vs)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Expr.contains_insyncs_append",
     "contains_insyncs (?es @ ?es') =
      (contains_insyncs ?es | contains_insyncs ?es')",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Expr.is_vals_append",
     "is_vals (?es @ ?es') = (is_vals ?es & is_vals ?es')",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Expr.expr_lockss_append",
     "expr_lockss (?es @ ?es') =
      (%ad. expr_lockss ?es ad + expr_lockss ?es' ad)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       t_empty)),
    ("Expr.calls_append",
     "calls (?es @ ?es') =
      (if calls ?es = None & is_vals ?es then calls ?es' else calls ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Expr.final_iff",
     "final ?e = ((EX v. ?e = Val v) | (EX a. ?e = Throw a))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Expr.is_Throws_conv",
     "is_Throws ?es = (EX vs a es'. ?es = map Val vs @ Throw a # es')",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Expr.finals_simps",
     "finals (?e # ?es) =
      ((EX a. ?e = Throw a) | (EX v. ?e = Val v) & finals ?es)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_app (template_hole 9, template_var 0))))),
    ("Expr.is_Throws_simps",
     "is_Throws (?e # ?es) =
      ((EX a. ?e = Throw a) | (EX v. ?e = Val v) & is_Throws ?es)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_app (template_hole 9, template_var 0))))),
    ("Expr.finals_iff",
     "finals ?es =
      ((EX vs. ?es = map Val vs) |
       (EX vs a es'. ?es = map Val vs @ Throw a # es'))",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         template_app (template_hole 9, t_empty))))]
