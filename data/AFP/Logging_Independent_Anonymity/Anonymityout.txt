Loading theory "Draft.Definitions" (required by "Draft.AnonymityMoreTemplates" via "Draft.Anonymity")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.574s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.872s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.365s elapsed time, 1.455s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.941s elapsed time, 3.570s cpu time, 0.787s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 3.771s cpu time, 0.750s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  InvK :: "enc_key => enc_key"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
specification
  sec_prik_inj: inj Sec_PriK
  tok_prik_inj: inj Tok_PriK
  sec_prik_rev: Rev_PriK ~: range Sec_PriK
  tok_prik_rev: Rev_PriK ~: range Tok_PriK
  sec_prik_tok_prik: range Sec_PriK Int range Tok_PriK = {}
### theory "Draft.Definitions"
### 2.069s elapsed time, 6.644s cpu time, 1.077s GC time
Loading theory "Draft.Anonymity" (required by "Draft.AnonymityMoreTemplates")
### theory "HOL-Library.Tree"
### 1.941s elapsed time, 6.099s cpu time, 1.034s GC time
Loading theory "Draft.Templates" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.162s cpu time, 0.053s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AnonymityMoreTemplates")
### theory "Draft.Anonymity"
### 0.243s elapsed time, 0.509s cpu time, 0.053s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.493s elapsed time, 0.726s cpu time, 0.058s GC time
Loading theory "Draft.AnonymityMoreTemplates"
val templateLemmas =
   [("Anonymity.parts_idem", "parts (parts ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Anonymity.parts_msg_agrkey", "parts_msg (AgrKey ?K) = {AgrKey ?K}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.parts_msg_hash", "parts_msg (Hash ?X) = {Hash ?X}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.parts_union", "parts (?H Un ?H') = parts ?H Un parts ?H'",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Anonymity.parts_insert",
     "parts (insert ?X ?H) = parts_msg ?X Un parts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Anonymity.parts_msg_idinfo",
     "parts_msg \<langle>?n, ?X\<rangle> = {\<langle>?n, ?X\<rangle>}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Anonymity.parts_union_1",
     "parts (?H Un ?H') <= parts ?H Un parts ?H'",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Anonymity.parts_union_2",
     "parts ?H Un parts ?H' <= parts (?H Un ?H')",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Anonymity.parts_mono", "?H <= ?H' ==> parts ?H <= parts ?H'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.parts_msg_mono", "?X : ?H ==> parts_msg ?X <= parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.parts_msg_crypt",
     "parts_msg (Crypt ?K ?X) = insert (Crypt ?K ?X) (parts_msg ?X)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Anonymity.state_subset", "?s \<Turnstile> ?s' ==> ?s <= ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_hole 1))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Anonymity.parts_msg_mpair",
     "parts_msg \<lbrace>?X, ?Y\<rbrace> =
      insert \<lbrace>?X, ?Y\<rbrace> (parts_msg ?X Un parts_msg ?Y)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Anonymity.parts_crypt_1",
     "parts {Crypt ?K ?X} <= insert (Crypt ?K ?X) (parts {?X})",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Anonymity.parts_crypt_2",
     "insert (Crypt ?K ?X) (parts {?X}) <= parts {Crypt ?K ?X}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Anonymity.parts_msg_parts",
     "[| (?A, ?X) : ?s; ?Y : parts_msg ?X |] ==> ?Y : parts (used ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Anonymity.spied_subset",
     "?s \<Turnstile> ?s' ==> spied ?s <= spied ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_hole 5))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Anonymity.parts_mpair_1",
     "parts {\<lbrace>?X, ?Y\<rbrace>}
      <= insert \<lbrace>?X, ?Y\<rbrace> (parts {?X} Un parts {?Y})",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1)))))),
    ("Anonymity.parts_mpair_2",
     "insert \<lbrace>?X, ?Y\<rbrace> (parts {?X} Un parts {?Y})
      <= parts {\<lbrace>?X, ?Y\<rbrace>}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Anonymity.sec_prik_eq",
     "{Tok_PriK ?n, Sec_PriK ?m, Rev_PriK} =
      {Tok_PriK ?n, Sec_PriK ?m', Rev_PriK} ==>
      ?m' = ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_app (template_hole 5, template_hole 2),
                template_hole 1))),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 2),
                template_hole 1))))],
       template_equation (template_var 0, template_var 1))),
    ("Anonymity.rtrancl_start",
     "[| (?x, ?y) : ?r^*; ?P ?y; ~ ?P ?x |]
      ==> EX u v.
             (?x, u) : ?r^* & (u, v) : ?r & (v, ?y) : ?r^* & ~ ?P u & ?P v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 3))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Anonymity.prikey_crypt",
     "[| (Spy, Crypt ?K (AgrKey (PriK ?K'))) : ?s;
         insert (Spy, AgrKey (PubK {}))
          (insert (Spy, AgrKey (PubK {Rev_PriK}))
            ({Spy} \<times>
             ((%x. EncKey (SigK x)) ` bad_sigk Un
              (%x. AgrKey (PriK (Sec_PriK x))) ` bad_sec_prik Un
              (%x. AgrKey (PriK (Tok_PriK x))) ` bad_tok_prik Un
              range (%x. EncKey (VerK x)) Un
              range (%x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) Un
              range (%x. AgrKey (PubK {Tok_PriK x})) Un
              range
               (%(n, m).
                   AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) Un
              range
               (%(n, m).
                   Hash
                    (AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) Un
              range (%x. \<langle>x, AgrKey (PubK {Tok_PriK x})\<rangle>) Un
              {\<langle>n, AgrKey (PriK (Tok_PriK n))\<rangle> |n.
               n : bad_tok_prik} Un
              {\<langle>n,
                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\<rangle> |
               n m. (n, m) : bad_id} Un
              {\<langle>n,
                 Hash
                  (AgrKey
                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\<rangle> |
               n m. (n, m) : bad_id}))) \<Turnstile>
         ?s |]
      ==> (Spy, AgrKey (PriK ?K')) : ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 41,
                template_app
                 (template_app (template_hole 40, template_hole 39),
                  template_app
                   (template_app (template_hole 38, template_var 2),
                    template_app
                     (template_hole 37,
                      template_app (template_hole 36, template_var 1))))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_hole 34,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app (template_hole 40, template_hole 39),
                          template_app
                           (template_hole 37,
                            template_app
                             (template_hole 32, template_hole 31)))),
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_hole 40, template_hole 39),
                            template_app
                             (template_hole 37,
                              template_app
                               (template_hole 32,
                                template_app
                                 (template_app
                                   (template_hole 30, template_hole 29),
                                  template_hole 31))))),
                        template_app
                         (template_app
                           (template_hole 28,
                            template_app
                             (template_app
                               (template_hole 27, template_hole 39),
                              template_hole 26)),
                          t_empty)))),
                  template_var 0)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 41,
               template_app
                (template_app (template_hole 40, template_hole 39),
                 template_app
                  (template_hole 37,
                   template_app (template_hole 36, template_var 1)))),
             template_var 0)
           ))),
    ("Anonymity.prikey_mpair_snd",
     "[| (Spy, \<lbrace>?Y, AgrKey (PriK ?K)\<rbrace>) : ?s;
         insert (Spy, AgrKey (PubK {}))
          (insert (Spy, AgrKey (PubK {Rev_PriK}))
            ({Spy} \<times>
             ((%x. EncKey (SigK x)) ` bad_sigk Un
              (%x. AgrKey (PriK (Sec_PriK x))) ` bad_sec_prik Un
              (%x. AgrKey (PriK (Tok_PriK x))) ` bad_tok_prik Un
              range (%x. EncKey (VerK x)) Un
              range (%x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) Un
              range (%x. AgrKey (PubK {Tok_PriK x})) Un
              range
               (%(n, m).
                   AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) Un
              range
               (%(n, m).
                   Hash
                    (AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) Un
              range (%x. \<langle>x, AgrKey (PubK {Tok_PriK x})\<rangle>) Un
              {\<langle>n, AgrKey (PriK (Tok_PriK n))\<rangle> |n.
               n : bad_tok_prik} Un
              {\<langle>n,
                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\<rangle> |
               n m. (n, m) : bad_id} Un
              {\<langle>n,
                 Hash
                  (AgrKey
                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\<rangle> |
               n m. (n, m) : bad_id}))) \<Turnstile>
         ?s |]
      ==> (Spy, AgrKey (PriK ?K)) : ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 41,
                template_app
                 (template_app (template_hole 40, template_hole 39),
                  template_app
                   (template_app (template_hole 38, template_var 2),
                    template_app
                     (template_hole 37,
                      template_app (template_hole 36, template_var 1))))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_hole 34,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app (template_hole 40, template_hole 39),
                          template_app
                           (template_hole 37,
                            template_app
                             (template_hole 32, template_hole 31)))),
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_hole 40, template_hole 39),
                            template_app
                             (template_hole 37,
                              template_app
                               (template_hole 32,
                                template_app
                                 (template_app
                                   (template_hole 30, template_hole 29),
                                  template_hole 31))))),
                        template_app
                         (template_app
                           (template_hole 28,
                            template_app
                             (template_app
                               (template_hole 27, template_hole 39),
                              template_hole 26)),
                          t_empty)))),
                  template_var 0)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 41,
               template_app
                (template_app (template_hole 40, template_hole 39),
                 template_app
                  (template_hole 37,
                   template_app (template_hole 36, template_var 1)))),
             template_var 0)
           ))),
    ("Anonymity.prikey_mpair_fst",
     "[| (Spy, \<lbrace>AgrKey (PriK ?K), ?Y\<rbrace>) : ?s;
         insert (Spy, AgrKey (PubK {}))
          (insert (Spy, AgrKey (PubK {Rev_PriK}))
            ({Spy} \<times>
             ((%x. EncKey (SigK x)) ` bad_sigk Un
              (%x. AgrKey (PriK (Sec_PriK x))) ` bad_sec_prik Un
              (%x. AgrKey (PriK (Tok_PriK x))) ` bad_tok_prik Un
              range (%x. EncKey (VerK x)) Un
              range (%x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) Un
              range (%x. AgrKey (PubK {Tok_PriK x})) Un
              range
               (%(n, m).
                   AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) Un
              range
               (%(n, m).
                   Hash
                    (AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) Un
              range (%x. \<langle>x, AgrKey (PubK {Tok_PriK x})\<rangle>) Un
              {\<langle>n, AgrKey (PriK (Tok_PriK n))\<rangle> |n.
               n : bad_tok_prik} Un
              {\<langle>n,
                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\<rangle> |
               n m. (n, m) : bad_id} Un
              {\<langle>n,
                 Hash
                  (AgrKey
                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\<rangle> |
               n m. (n, m) : bad_id}))) \<Turnstile>
         ?s |]
      ==> (Spy, AgrKey (PriK ?K)) : ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 41,
                template_app
                 (template_app (template_hole 40, template_hole 39),
                  template_app
                   (template_app
                     (template_hole 38,
                      template_app
                       (template_hole 37,
                        template_app (template_hole 36, template_var 2))),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_hole 34,
                    template_app
                     (template_app
                       (template_hole 33,
                        template_app
                         (template_app (template_hole 40, template_hole 39),
                          template_app
                           (template_hole 37,
                            template_app
                             (template_hole 32, template_hole 31)))),
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_app
                             (template_hole 40, template_hole 39),
                            template_app
                             (template_hole 37,
                              template_app
                               (template_hole 32,
                                template_app
                                 (template_app
                                   (template_hole 30, template_hole 29),
                                  template_hole 31))))),
                        template_app
                         (template_app
                           (template_hole 28,
                            template_app
                             (template_app
                               (template_hole 27, template_hole 39),
                              template_hole 26)),
                          t_empty)))),
                  template_var 0)),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 41,
               template_app
                (template_app (template_hole 40, template_hole 39),
                 template_app
                  (template_hole 37,
                   template_app (template_hole 36, template_var 2)))),
             template_var 0)
           ))),
    ("Anonymity.rev_prikey_secret",
     "s\<^sub>0 \<Turnstile> ?s ==> Rev_PriKey ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, template_hole 44),
                          template_hole 43)),
                      t_empty)),
                  template_var 0)),
              template_app (template_hole 4, template_hole 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 28, template_hole 39),
                       template_hole 27),
                     template_hole 35)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app (template_hole 45, template_hole 44),
                     template_hole 43)))
               )
           ))),
    ("Anonymity.sec_prikey_secret",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_sec_prik |]
      ==> Sec_PriKey ?n ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, template_hole 44),
                          template_hole 43)),
                      t_empty)),
                  template_var 1)),
              template_app (template_hole 4, template_hole 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 25)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 28, template_hole 39),
                       template_hole 27),
                     template_app (template_hole 26, template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 45, template_hole 44),
                     template_hole 43)))
               )
           ))),
    ("Anonymity.tok_prikey_secret",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_tok_prik |]
      ==> Tok_PriKey ?n ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, template_hole 44),
                          template_hole 43)),
                      t_empty)),
                  template_var 1)),
              template_app (template_hole 4, template_hole 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 23)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 28, template_hole 39),
                       template_hole 27),
                     template_app (template_hole 24, template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 45, template_hole 44),
                     template_hole 43)))
               )
           ))),
    ("Anonymity.idinfo_spied",
     "[| s\<^sub>0 \<Turnstile> ?s;
         \<langle>?n, ?X\<rangle> : parts (used ?s) |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, template_hole 45),
                          template_hole 44)),
                      t_empty)),
                  template_var 2)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 14, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 46, template_hole 45),
                 template_hole 44)))
           ))),
    ("Anonymity.idinfo_crypt",
     "[| (Spy, Crypt ?K \<langle>?n, ?X\<rangle>) : ?s;
         s\<^sub>0 \<Turnstile> ?s |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 50,
                template_app
                 (template_app (template_hole 49, template_hole 48),
                  template_app
                   (template_app (template_hole 47, template_var 3),
                    template_app
                     (template_app (template_hole 46, template_var 2),
                      template_var 1)))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 45,
                template_app
                 (template_app
                   (template_hole 44,
                    template_app
                     (template_app
                       (template_hole 43,
                        template_app
                         (template_app (template_hole 42, template_hole 48),
                          template_hole 41)),
                      t_empty)),
                  template_var 0)),
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 46, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 42, template_hole 48),
                 template_hole 41)))
           ))),
    ("Anonymity.idinfo_mpair_snd",
     "[| (Spy, \<lbrace>?Y, \<langle>?n, ?X\<rangle>\<rbrace>) : ?s;
         s\<^sub>0 \<Turnstile> ?s |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 50,
                template_app
                 (template_app (template_hole 49, template_hole 48),
                  template_app
                   (template_app (template_hole 47, template_var 3),
                    template_app
                     (template_app (template_hole 46, template_var 2),
                      template_var 1)))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 45,
                template_app
                 (template_app
                   (template_hole 44,
                    template_app
                     (template_app
                       (template_hole 43,
                        template_app
                         (template_app (template_hole 42, template_hole 48),
                          template_hole 41)),
                      t_empty)),
                  template_var 0)),
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 46, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 42, template_hole 48),
                 template_hole 41)))
           ))),
    ("Anonymity.idinfo_mpair_fst",
     "[| (Spy, \<lbrace>\<langle>?n, ?X\<rangle>, ?Y\<rbrace>) : ?s;
         s\<^sub>0 \<Turnstile> ?s |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 50,
                template_app
                 (template_app (template_hole 49, template_hole 48),
                  template_app
                   (template_app
                     (template_hole 47,
                      template_app
                       (template_app (template_hole 46, template_var 3),
                        template_var 2)),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 45,
                template_app
                 (template_app
                   (template_hole 44,
                    template_app
                     (template_app
                       (template_hole 43,
                        template_app
                         (template_app (template_hole 42, template_hole 48),
                          template_hole 41)),
                      t_empty)),
                  template_var 0)),
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 46, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 42, template_hole 48),
                 template_hole 41)))
           ))),
    ("Anonymity.prikey_spied",
     "[| s\<^sub>0 \<Turnstile> ?s; PriKey ?K : parts (used ?s) |]
      ==> PriKey ?K : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, template_hole 45),
                          template_hole 44)),
                      t_empty)),
                  template_var 1)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 29, template_hole 40),
                    template_hole 28),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 29, template_hole 40),
                   template_hole 28),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 46, template_hole 45),
                 template_hole 44)))
           ))),
    ("Anonymity.idinfo_hash_hash",
     "[| (Spy, \<langle>?n, Hash (Hash ?X)\<rangle>) : ?s;
         s\<^sub>0 \<Turnstile> ?s |]
      ==> \<langle>?n, Hash ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app (template_hole 48, template_hole 47),
                  template_app
                   (template_app (template_hole 46, template_var 2),
                    template_app
                     (template_hole 45,
                      template_app (template_hole 45, template_var 1))))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 44,
                template_app
                 (template_app
                   (template_hole 43,
                    template_app
                     (template_app
                       (template_hole 42,
                        template_app
                         (template_app (template_hole 41, template_hole 47),
                          template_hole 40)),
                      t_empty)),
                  template_var 0)),
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 46, template_var 2),
                 template_app (template_hole 45, template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 41, template_hole 47),
                 template_hole 40)))
           ))),
    ("Anonymity.id_identified",
     "[| s\<^sub>0 \<Turnstile> ?s; (?n, ?m) ~: bad_id; ?n ~: bad_tok_prik;
         \<langle>?n, Hash (ID ?n (Sec_PubKey ?m))\<rangle> : spied ?s |]
      ==> ?m : bad_sec_prik &
          (EX m'. m' ~= ?m & m' : bad_sec_prik & (?n, m') : bad_id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, template_hole 45),
                          template_hole 44)),
                      t_empty)),
                  template_var 2)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_var 0)),
                  template_hole 6)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 24)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app (template_hole 19, t_empty),
                                t_empty),
                              t_empty),
                            t_empty),
                          t_empty),
                        t_empty),
                      template_app
                       (template_app
                         (template_app (template_hole 41, template_hole 40),
                          template_hole 39),
                        template_app
                         (template_app
                           (template_hole 37,
                            template_app
                             (template_hole 27, template_var 0)),
                          template_app
                           (template_app
                             (template_hole 37, template_hole 36),
                            template_hole 38))))))),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 46, template_hole 45),
                  template_hole 44)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_hole 26)),
             template_app (template_hole 12, t_empty))
           ))),
    ("Anonymity.id_anonymous",
     "[| s\<^sub>0 \<Turnstile> ?s; (?n, ?m) ~: bad_id; ?n ~: bad_tok_prik;
         ?m ~: bad_sec_prik |
         (\<nexists>m'. m' ~= ?m & m' : bad_sec_prik & (?n, m') : bad_id) |]
      ==> \<langle>?n, Hash (ID ?n (Sec_PubKey ?m))\<rangle> ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 50,
                template_app
                 (template_app
                   (template_hole 49,
                    template_app
                     (template_app
                       (template_hole 48,
                        template_app
                         (template_app (template_hole 47, template_hole 46),
                          template_hole 45)),
                      t_empty)),
                  template_var 2)),
              template_app (template_hole 6, template_hole 5))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 1),
                      template_var 0)),
                  template_hole 7)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_hole 25)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 10, template_var 0),
                    template_hole 27))),
              template_app
               (template_hole 4, template_app (template_hole 13, t_empty)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 1),
                     template_app
                      (template_hole 16,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app (template_hole 20, t_empty),
                                   t_empty),
                                 t_empty),
                               t_empty),
                             t_empty),
                           t_empty),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 42, template_hole 41),
                             template_hole 40),
                           template_app
                            (template_app
                              (template_hole 38,
                               template_app
                                (template_hole 28, template_var 0)),
                             template_app
                              (template_app
                                (template_hole 38, template_hole 37),
                               template_hole 39))))))),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 47, template_hole 46),
                     template_hole 45)))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.AnonymityMoreTemplates"
### 0.450s elapsed time, 0.570s cpu time, 0.052s GC time
val it = (): unit
