   [("Rabin.accept\<^sub>G\<^sub>R_simp2",
     "accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX P:?\<alpha>.
          accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 P ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Rabin.transfer_accept",
     "accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, {?I}) ?w",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Rabin.accept\<^sub>G\<^sub>R_I",
     "[| accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w;
         (?F, ?\<I>) : ?\<alpha> |]
      ==> accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))),
             template_var 1)
           ))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS_I",
     "[| accepting_pair\<^sub>G\<^sub>R_LTS ?\<delta> ?q\<^sub>0 (?F, ?\<I>)
          ?w;
         (?F, ?\<I>) : ?\<alpha> |]
      ==> accept\<^sub>G\<^sub>R_LTS (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))),
             template_var 1)
           ))),
    ("Rabin.transfer_accept",
     "accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0, (%(F, I). (F, {I})) ` ?\<alpha>) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_var 1)))),
         template_var 0))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>G\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0, ?q\<^sub>0, ?\<alpha>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_hole 7),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Rabin.accept\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0, ?q\<^sub>0, ?\<alpha>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_hole 7),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w =
      accepting_pair\<^sub>G\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ?q\<^sub>0 (?F, ?\<I>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5)))),
    ("Rabin.combine_rabin_pairs_UNIV",
     "[| accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?fin, UNIV) ?w;
         accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?fin', ?inf')
          ?w |]
      ==> accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
           (?fin Un ?fin', ?inf') ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_hole 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_var 2)
           ))),
    ("Rabin.accepting_pair\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
      accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0
       (?F Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
        ?I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2)))),
           template_var 5)))),
    ("Rabin.accept\<^sub>R_simp",
     "accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX (Fin, Inf):?\<alpha>.
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Fin = {} &
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Inf ~= {})",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 3),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, t_empty)))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS_E",
     "[| accept\<^sub>G\<^sub>R_LTS ?R ?w;
         !!F I.
            [| (F, I) : snd (snd ?R);
               accepting_pair\<^sub>G\<^sub>R_LTS (fst ?R) (fst (snd ?R))
                (F, I) ?w |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (?F Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
        (%I. I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ` ?\<I>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_hole 6),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 0, t_empty), template_var 0))),
           template_var 5)))),
    ("Rabin.accept\<^sub>G\<^sub>R_simp",
     "accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX (Fin, Inf):?\<alpha>.
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Fin = {} &
          (ALL I:Inf.
              limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int I ~= {}))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 3),
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, t_empty)))),
    ("Rabin.combine_rabin_pairs",
     "(!!x. x : ?I ==>
            accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?f x, ?g x) ?w) ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (\<Union> {?f x |x. x : ?I}, {?g x |x. x : ?I}) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, t_empty))),
                 template_app (template_hole 3, t_empty))),
             template_var 0)
           ))),
    ("Rabin.accept\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>R (?\<delta>, ?q\<^sub>0, {(?f x, ?g x) |x. ?P x}) ?w =
      accept\<^sub>R
       (?\<delta>, ?q\<^sub>0,
        {(?f x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
          ?g x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) |
         x. ?P x})
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_var 6),
            template_hole 11),
          template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app (template_hole 6, t_empty)))),
           template_var 6),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app (template_hole 6, t_empty)))),
           template_var 6)))),
    ("Rabin.accept\<^sub>G\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0, {(?f x, ?g x) |x. ?P x}) ?w =
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0,
        {(?f x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
          (%I. I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ` ?g x) |
         x. ?P x})
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 6),
            template_hole 12),
          template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 4),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app (template_hole 7, t_empty)))),
           template_var 6),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 4),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app (template_hole 7, t_empty)))),
           template_var 6)))),
    ("Rabin.accepting_pair\<^sub>R_abstract",
     "[| finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0);
         finite (reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0');
         range ?w <= ?\<Sigma>;
         run\<^sub>t ?\<delta> ?q\<^sub>0 ?w =
         ?f o run\<^sub>t ?\<delta>' ?q\<^sub>0' ?w;
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?F) = (t : ?F');
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?I) = (t : ?I') |]
      ==> accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
          accepting_pair\<^sub>R ?\<delta>' ?q\<^sub>0' (?F', ?I') ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_app (template_hole 17, template_var 10),
                  template_var 9),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 10),
                  template_var 7),
                template_var 6))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 5),
            template_hole 12),
          template_var 10),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 9),
              template_var 8),
            template_var 5),
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_var 5))),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 9),
               template_var 8),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 5)))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_abstract",
     "[| finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0);
         finite (reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0');
         range ?w <= ?\<Sigma>;
         run\<^sub>t ?\<delta> ?q\<^sub>0 ?w =
         ?f o run\<^sub>t ?\<delta>' ?q\<^sub>0' ?w;
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?F) = (t : ?F');
         !!t i.
            [| i : ?\<I>;
               t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' |]
            ==> (?f t : ?I i) = (t : ?I' i) |]
      ==> accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
           (?F, {?I i |i. i : ?\<I>}) ?w =
          accepting_pair\<^sub>G\<^sub>R ?\<delta>' ?q\<^sub>0'
           (?F', {?I' i |i. i : ?\<I>}) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app
               (template_app
                 (template_app (template_hole 25, template_var 11),
                  template_var 10),
                template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 11),
                  template_var 8),
                template_var 7))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 21, template_var 6),
            template_hole 20),
          template_var 11),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 10),
              template_var 9),
            template_var 6),
          template_app
           (template_app (template_hole 17, template_var 5),
            template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7),
              template_var 6))),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 10),
               template_var 9),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, t_empty))),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 8),
               template_var 7),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, t_empty))),
           template_var 6))))]
