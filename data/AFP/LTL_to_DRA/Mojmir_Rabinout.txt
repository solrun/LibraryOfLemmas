Loading theory "Draft.Map2" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2")
Loading theory "HOL-Library.AList" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.Preliminaries2")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Map2"
### 0.049s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.476s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.796s cpu time, 0.067s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Infinite_Set"
### 0.342s elapsed time, 1.360s cpu time, 0.107s GC time
Loading theory "Draft.Preliminaries2" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.441s cpu time, 0.179s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
Found termination order: "{}"
### theory "Draft.Preliminaries2"
### 0.087s elapsed time, 0.328s cpu time, 0.072s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.318s elapsed time, 1.243s cpu time, 0.186s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.196s elapsed time, 4.603s cpu time, 0.907s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.101s elapsed time, 4.221s cpu time, 0.867s GC time
Loading theory "KBPs.DFS" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.826s cpu time, 0.753s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.List2")
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
### theory "KBPs.DFS"
### 0.222s elapsed time, 0.881s cpu time, 0.073s GC time
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.390s elapsed time, 1.228s cpu time, 0.155s GC time
Loading theory "Draft.List2" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Mapping"
### 1.099s elapsed time, 3.880s cpu time, 0.435s GC time
Loading theory "Draft.Mapping2" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.170s elapsed time, 7.859s cpu time, 1.337s GC time
Loading theory "Draft.Templates" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mojmir_RabinMoreTemplates")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Mapping2"
### 0.341s elapsed time, 1.090s cpu time, 0.159s GC time
Loading theory "Draft.DTS" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.503s elapsed time, 1.598s cpu time, 0.159s GC time
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 384 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###     ("\<^const>HOL.eq" ("_position" \<delta>\<^sub>2)
###       ("_lambda"
###         ("_pttrns"
###           ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###           ("_position" \<nu>))
###         ("_tuple"
###           ("_applC" ("_position" \<delta>\<^sub>1)
###             ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###           ("_tuple_arg"
###             ("_applC" ("_position" \<delta>\<^sub>2)
###               ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.574s elapsed time, 1.335s cpu time, 0.115s GC time
Found termination order: "{}"
### Ambiguous input (line 388 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 512 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 570 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 614 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_transition" ("_position" x))
###       ("_tuple" ("_position" q)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" q')))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q')))))
###       ("_Setcompr"
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))
###         ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q'))))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 618 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_transition" ("_position" x))
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" m')))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m')))))
###       ("_tuple"
###         ("_applC" ("_position" the)
###           ("_applC" ("_position" m) ("_position" x)))
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg"
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" m') ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 622 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S)))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>Set.image"
###               ("\<^const>DTS.embed_transition" ("_position" x))
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 626 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S)))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>DTS.project_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 638 of "$AFP/LTL_to_DRA/DTS.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>) ("_position" i)))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i)))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i))))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" x)
###           ("_applC" ("_position" \<rho>) ("_position" i)))
###         ("_position" \<rho>')))
###     ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 639 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("_applC" ("\<^const>DTS.embed_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("\<^const>DTS.embed_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>') ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/LTL_to_DRA/DTS.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" limit)))
###       ("_position" \<rho>))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>)))
###       ("_applC" ("_position" limit) ("_position" \<rho>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>))))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.image"
###       ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" limit) ("_position" \<rho>)))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>)))
###         ("_position" limit)))
###     ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image"
###         ("\<^const>DTS.embed_transition" ("_position" x))
###         ("_applC" ("_position" limit) ("_position" \<rho>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>DTS.embed_transition"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 679 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" k) ("_position" S)))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" k))
###             ("_position" S))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DTS"
### 1.105s elapsed time, 1.720s cpu time, 0.162s GC time
Loading theory "Draft.Rabin" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin")
Loading theory "Draft.Semi_Mojmir" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin" via "Draft.Mojmir")
locale semi_mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Rabin"
### 0.377s elapsed time, 0.799s cpu time, 0.102s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale semi_mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
  assumes "semi_mojmir \<Sigma> \<delta> q\<^sub>0 w"
Found termination order: "{}"
### theory "Draft.Semi_Mojmir"
### 1.183s elapsed time, 1.662s cpu time, 0.196s GC time
Loading theory "Draft.Mojmir" (required by "Draft.Mojmir_RabinMoreTemplates" via "Draft.Mojmir_Rabin")
locale mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
Found termination order: "{}"
locale mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir \<Sigma> \<delta> q\<^sub>0 w F"
### theory "Draft.Mojmir"
### 0.453s elapsed time, 0.496s cpu time, 0.060s GC time
Loading theory "Draft.Mojmir_Rabin" (required by "Draft.Mojmir_RabinMoreTemplates")
locale mojmir_to_rabin_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
locale mojmir_to_rabin
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir_to_rabin \<Sigma> \<delta> q\<^sub>0 w F"
### theory "Draft.Mojmir_Rabin"
### 0.485s elapsed time, 0.506s cpu time, 0.027s GC time
Loading theory "Draft.Mojmir_RabinMoreTemplates"
val templateLemmas =
   [("Mojmir_Rabin.function_set_finite",
     "[| finite ?R; finite ?A |]
      ==> finite
           {f. (ALL x. x ~: ?R --> f x = ?c) &
               (ALL x. x : ?R --> f x : ?A)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 8, template_app (template_hole 7, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Mojmir_RabinMoreTemplates"
### 0.335s elapsed time, 0.489s cpu time, 0.069s GC time
val it = (): unit
