Loading theory "Draft.Map2" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS" via "Draft.Mapping2")
Loading theory "HOL-Library.AList" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS" via "Draft.Mapping2" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS" via "HOL-Library.Omega_Words_Fun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Map2"
### 0.049s elapsed time, 0.233s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.541s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.301s elapsed time, 1.208s cpu time, 0.116s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.854s cpu time, 0.071s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.293s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.326s elapsed time, 1.282s cpu time, 0.221s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.AList"
### 1.226s elapsed time, 4.710s cpu time, 1.013s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS" via "Draft.Mapping2")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.089s elapsed time, 4.158s cpu time, 0.866s GC time
Loading theory "KBPs.DFS" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.042s elapsed time, 3.972s cpu time, 0.917s GC time
Found termination order: "size <*mlex*> {}"
### theory "KBPs.DFS"
### 0.214s elapsed time, 0.798s cpu time, 0.069s GC time
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Mapping"
### 1.019s elapsed time, 3.048s cpu time, 0.363s GC time
Loading theory "Draft.Mapping2" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 6.777s cpu time, 1.298s GC time
Loading theory "Draft.Templates" (required by "Draft.RabinMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RabinMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Mapping2"
### 0.302s elapsed time, 0.688s cpu time, 0.103s GC time
Loading theory "Draft.DTS" (required by "Draft.RabinMoreTemplates" via "Draft.Rabin")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 384 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###     ("\<^const>HOL.eq" ("_position" \<delta>\<^sub>2)
###       ("_lambda"
###         ("_pttrns"
###           ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###           ("_position" \<nu>))
###         ("_tuple"
###           ("_applC" ("_position" \<delta>\<^sub>1)
###             ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###           ("_tuple_arg"
###             ("_applC" ("_position" \<delta>\<^sub>2)
###               ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.181s cpu time, 0.131s GC time
Found termination order: "{}"
### Ambiguous input (line 388 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 512 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 570 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 614 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_transition" ("_position" x))
###       ("_tuple" ("_position" q)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" q')))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q')))))
###       ("_Setcompr"
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))
###         ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q'))))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 618 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_transition" ("_position" x))
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" m')))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m')))))
###       ("_tuple"
###         ("_applC" ("_position" the)
###           ("_applC" ("_position" m) ("_position" x)))
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg"
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" m') ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 622 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S)))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>Set.image"
###               ("\<^const>DTS.embed_transition" ("_position" x))
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 626 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S)))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>DTS.project_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 638 of "$AFP/LTL_to_DRA/DTS.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>) ("_position" i)))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i)))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i))))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" x)
###           ("_applC" ("_position" \<rho>) ("_position" i)))
###         ("_position" \<rho>')))
###     ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 639 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("_applC" ("\<^const>DTS.embed_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("\<^const>DTS.embed_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>') ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/LTL_to_DRA/DTS.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" limit)))
###       ("_position" \<rho>))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>)))
###       ("_applC" ("_position" limit) ("_position" \<rho>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>))))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.image"
###       ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" limit) ("_position" \<rho>)))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>)))
###         ("_position" limit)))
###     ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image"
###         ("\<^const>DTS.embed_transition" ("_position" x))
###         ("_applC" ("_position" limit) ("_position" \<rho>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>DTS.embed_transition"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 679 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" k) ("_position" S)))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" k))
###             ("_position" S))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DTS"
### 1.102s elapsed time, 1.691s cpu time, 0.181s GC time
Loading theory "Draft.Rabin" (required by "Draft.RabinMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Rabin"
### 0.340s elapsed time, 0.377s cpu time, 0.048s GC time
Loading theory "Draft.RabinMoreTemplates"
val templateLemmas =
   [("Rabin.accept\<^sub>G\<^sub>R_simp2",
     "accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX P:?\<alpha>.
          accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 P ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Rabin.transfer_accept",
     "accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, {?I}) ?w",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Rabin.accept\<^sub>G\<^sub>R_I",
     "[| accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w;
         (?F, ?\<I>) : ?\<alpha> |]
      ==> accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))),
             template_var 1)
           ))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS_I",
     "[| accepting_pair\<^sub>G\<^sub>R_LTS ?\<delta> ?q\<^sub>0 (?F, ?\<I>)
          ?w;
         (?F, ?\<I>) : ?\<alpha> |]
      ==> accept\<^sub>G\<^sub>R_LTS (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))),
             template_var 1)
           ))),
    ("Rabin.transfer_accept",
     "accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0, (%(F, I). (F, {I})) ` ?\<alpha>) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_var 1)))),
         template_var 0))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>G\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0, ?q\<^sub>0, ?\<alpha>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_hole 7),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Rabin.accept\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      accept\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0, ?q\<^sub>0, ?\<alpha>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_hole 7),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_LTS",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w =
      accepting_pair\<^sub>G\<^sub>R_LTS
       (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ?q\<^sub>0 (?F, ?\<I>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5)))),
    ("Rabin.combine_rabin_pairs_UNIV",
     "[| accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?fin, UNIV) ?w;
         accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?fin', ?inf')
          ?w |]
      ==> accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
           (?fin Un ?fin', ?inf') ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_hole 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_var 2)
           ))),
    ("Rabin.accepting_pair\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
      accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0
       (?F Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
        ?I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2)))),
           template_var 5)))),
    ("Rabin.accept\<^sub>R_simp",
     "accept\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX (Fin, Inf):?\<alpha>.
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Fin = {} &
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Inf ~= {})",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 3),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, t_empty)))),
    ("Rabin.accept\<^sub>G\<^sub>R_LTS_E",
     "[| accept\<^sub>G\<^sub>R_LTS ?R ?w;
         !!F I.
            [| (F, I) : snd (snd ?R);
               accepting_pair\<^sub>G\<^sub>R_LTS (fst ?R) (fst (snd ?R))
                (F, I) ?w |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?\<I>) ?w =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (?F Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
        (%I. I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ` ?\<I>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_hole 6),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 0, t_empty), template_var 0))),
           template_var 5)))),
    ("Rabin.accept\<^sub>G\<^sub>R_simp",
     "accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w =
      (EX (Fin, Inf):?\<alpha>.
          limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int Fin = {} &
          (ALL I:Inf.
              limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w) Int I ~= {}))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 3),
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, t_empty)))),
    ("Rabin.combine_rabin_pairs",
     "(!!x. x : ?I ==>
            accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?f x, ?g x) ?w) ==>
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (\<Union> {?f x |x. x : ?I}, {?g x |x. x : ?I}) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, t_empty))),
                 template_app (template_hole 3, t_empty))),
             template_var 0)
           ))),
    ("Rabin.accept\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>R (?\<delta>, ?q\<^sub>0, {(?f x, ?g x) |x. ?P x}) ?w =
      accept\<^sub>R
       (?\<delta>, ?q\<^sub>0,
        {(?f x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
          ?g x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) |
         x. ?P x})
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_var 6),
            template_hole 11),
          template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app (template_hole 6, t_empty)))),
           template_var 6),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app (template_hole 6, t_empty)))),
           template_var 6)))),
    ("Rabin.accept\<^sub>G\<^sub>R_restrict",
     "range ?w <= ?\<Sigma> ==>
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0, {(?f x, ?g x) |x. ?P x}) ?w =
      accept\<^sub>G\<^sub>R
       (?\<delta>, ?q\<^sub>0,
        {(?f x Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0,
          (%I. I Int reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ` ?g x) |
         x. ?P x})
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 6),
            template_hole 12),
          template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 4),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app (template_hole 7, t_empty)))),
           template_var 6),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 4),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app (template_hole 7, t_empty)))),
           template_var 6)))),
    ("Rabin.accepting_pair\<^sub>R_abstract",
     "[| finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0);
         finite (reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0');
         range ?w <= ?\<Sigma>;
         run\<^sub>t ?\<delta> ?q\<^sub>0 ?w =
         ?f o run\<^sub>t ?\<delta>' ?q\<^sub>0' ?w;
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?F) = (t : ?F');
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?I) = (t : ?I') |]
      ==> accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 (?F, ?I) ?w =
          accepting_pair\<^sub>R ?\<delta>' ?q\<^sub>0' (?F', ?I') ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_app (template_hole 17, template_var 10),
                  template_var 9),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 10),
                  template_var 7),
                template_var 6))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 5),
            template_hole 12),
          template_var 10),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 9),
              template_var 8),
            template_var 5),
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_var 5))),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 9),
               template_var 8),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 5)))),
    ("Rabin.accepting_pair\<^sub>G\<^sub>R_abstract",
     "[| finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0);
         finite (reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0');
         range ?w <= ?\<Sigma>;
         run\<^sub>t ?\<delta> ?q\<^sub>0 ?w =
         ?f o run\<^sub>t ?\<delta>' ?q\<^sub>0' ?w;
         !!t. t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' ==>
              (?f t : ?F) = (t : ?F');
         !!t i.
            [| i : ?\<I>;
               t : reach\<^sub>t ?\<Sigma> ?\<delta>' ?q\<^sub>0' |]
            ==> (?f t : ?I i) = (t : ?I' i) |]
      ==> accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
           (?F, {?I i |i. i : ?\<I>}) ?w =
          accepting_pair\<^sub>G\<^sub>R ?\<delta>' ?q\<^sub>0'
           (?F', {?I' i |i. i : ?\<I>}) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app
               (template_app
                 (template_app (template_hole 25, template_var 11),
                  template_var 10),
                template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 11),
                  template_var 8),
                template_var 7))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 21, template_var 6),
            template_hole 20),
          template_var 11),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 18, template_var 10),
              template_var 9),
            template_var 6),
          template_app
           (template_app (template_hole 17, template_var 5),
            template_app
             (template_app
               (template_app (template_hole 16, template_var 8),
                template_var 7),
              template_var 6))),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 10),
               template_var 9),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app (template_hole 7, t_empty))),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 8),
               template_var 7),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, t_empty))),
           template_var 6))))]:
   (string * thm * template) list
### theory "Draft.RabinMoreTemplates"
### 0.339s elapsed time, 0.481s cpu time, 0.051s GC time
val it = (): unit
