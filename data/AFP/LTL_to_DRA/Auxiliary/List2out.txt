Loading theory "HOL-Library.Function_Algebras" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.List2MoreTemplates" via "Draft.List2" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.518s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.817s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.333s elapsed time, 1.346s cpu time, 0.120s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.List2MoreTemplates" via "Draft.List2")
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.441s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.316s elapsed time, 1.241s cpu time, 0.213s GC time
Loading theory "List-Index.List_Index" (required by "Draft.List2MoreTemplates" via "Draft.List2")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.795s cpu time, 0.954s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.572s elapsed time, 2.100s cpu time, 0.667s GC time
Loading theory "Draft.List2" (required by "Draft.List2MoreTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.109s elapsed time, 4.007s cpu time, 0.974s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.509s elapsed time, 1.318s cpu time, 0.176s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.967s elapsed time, 5.953s cpu time, 1.191s GC time
Loading theory "Draft.Templates" (required by "Draft.List2MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.List2MoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.503s cpu time, 0.058s GC time
Loading theory "Draft.List2MoreTemplates"
val templateLemmas =
   [("List2.remdups_fwd_distinct", "distinct (remdups_fwd ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("List2.remdups_fwd_acc_distinct",
     "distinct (remdups_fwd_acc ?Acc ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("List2.remdups_fwd_set", "set (remdups_fwd ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("List2.remdups_fwd_acc_set",
     "set (remdups_fwd_acc ?Acc ?xs) = set ?xs - ?Acc",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("List2.remdups_fwd_eq", "remdups_fwd ?xs = (rev o remdups o rev) ?xs",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_hole 1),
         template_var 0))),
    ("List2.remdups_fwd_filter",
     "remdups_fwd (filter ?P ?xs) = filter ?P (remdups_fwd ?xs)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("List2.remdups_fwd_acc_empty",
     "(set ?xs <= ?Acc) = (remdups_fwd_acc ?Acc ?xs = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("List2.remdups_fwd_acc_filter",
     "remdups_fwd_acc ?Acc (filter ?P ?xs) =
      filter ?P (remdups_fwd_acc ?Acc ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("List2.suffixes_append",
     "suffixes (?xs @ ?ys) =
      suffixes ?ys @ map (%zs. zs @ ?ys) (suffixes ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("List2.remdups_fwd_acc_append",
     "remdups_fwd_acc ?Acc (?xs @ ?ys) =
      remdups_fwd_acc ?Acc ?xs @ remdups_fwd_acc (?Acc Un set ?xs) ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("List2.finite_lists_length_eqE",
     "finite ?A ==> finite {xs. set xs = ?A & length xs = ?n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("List2.set_list",
     "[| finite (set ` ?XS); !!xs. xs : ?XS ==> distinct xs |]
      ==> finite ?XS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List2.takeWhile_foo",
     "?x ~: set ?ys ==> ?ys = takeWhile (%y. y ~= ?x) (?ys @ ?x # ?zs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("List2.finite_set2",
     "[| card ?A = ?n; finite ?A |]
      ==> finite {xs. set xs = ?A & distinct xs}",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("List2.list_empty_prefix",
     "[| ?xs @ ?y # ?zs = ?y # ?us; ?y ~: set ?xs |] ==> ?xs = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 3))
                )
            )],
       template_equation (template_var 3, template_hole 0))),
    ("List2.remdups_fwd_acc_drop",
     "set ?ys <= ?Acc Un set ?xs ==>
      remdups_fwd_acc ?Acc (?xs @ ?ys @ ?zs) =
      remdups_fwd_acc ?Acc (?xs @ ?zs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app (template_hole 4, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("List2.set_foldl_append",
     "set (foldl (@) ?i ?xs) = set ?i Un \<Union> {set x |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("List2.takeWhile_distinct",
     "distinct (?xs' @ ?x # ?xs'') ==>
      (?y : set (takeWhile (%y. y ~= ?x) (?xs' @ ?x # ?xs''))) =
      (?y : set ?xs')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 3))))),
    ("List2.foldl_break_append",
     "foldl_break ?f ?s ?a (?xs @ ?ys) =
      (if ?s (foldl_break ?f ?s ?a ?xs) then foldl_break ?f ?s ?a ?xs
       else foldl_break ?f ?s (foldl_break ?f ?s ?a ?xs) ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("List2.sorted_pre",
     "(!!x y xs ys. ?zs = xs @ [x, y] @ ys ==> x <= y) ==> sorted ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("List2.filter_split'",
     "filter ?P ?xs = ?ys @ ?zs ==>
      EX us vs. ?xs = us @ vs & filter ?P us = ?ys & filter ?P vs = ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("List2.remdups_fwd_split",
     "remdups_fwd_acc ?Acc ?xs = ?ys @ ?zs ==>
      EX us vs.
         ?xs = us @ vs &
         remdups_fwd_acc ?Acc us = ?ys &
         remdups_fwd_acc (?Acc Un set ?ys) vs = ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("List2.filter_map_split_iff",
     "(filter ?P (map ?f ?xs) = ?ys @ ?zs) =
      (EX us vs.
          ?xs = us @ vs &
          filter ?P (map ?f us) = ?ys & filter ?P (map ?f vs) = ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 4),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("List2.takeWhile_split",
     "[| ?x : set ?xs; ?y : set (takeWhile (%y. y ~= ?x) ?xs) |]
      ==> EX xs' xs'' xs'''. ?xs = xs' @ ?y # xs'' @ ?x # xs'''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 1)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("List2.filter_splitE",
     "[| filter ?P ?xs = ?ys @ ?zs;
         !!us vs.
            [| ?xs = us @ vs; filter ?P us = ?ys; filter ?P vs = ?zs |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("List2.map_splitE",
     "[| map ?f ?xs = ?ys @ ?zs;
         !!us vs.
            [| ?xs = us @ vs; map ?f us = ?ys; map ?f vs = ?zs |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("List2.sorted_list",
     "[| ?x : set ?xs; ?y : set ?xs; sorted (map ?f ?xs); ?f ?x < ?f ?y |]
      ==> EX xs' xs'' xs'''. ?xs = xs' @ ?x # xs'' @ ?y # xs'''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 2))
            ),
        template_inequation
         (less_than, template_app (template_var 0, template_var 3),
          template_app (template_var 0, template_var 1))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("List2.filter_map_splitE",
     "[| filter ?P (map ?f ?xs) = ?ys @ ?zs;
         !!us vs.
            [| ?xs = us @ vs; filter ?P (map ?f us) = ?ys;
               filter ?P (map ?f vs) = ?zs |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("List2.remdups_fwd_split_exact_iff",
     "(remdups_fwd_acc ?Acc ?xs = ?ys @ ?x # ?zs) =
      (EX us vs.
          ?xs = us @ ?x # vs &
          ?x ~: ?Acc &
          ?x ~: set us &
          remdups_fwd_acc ?Acc us = ?ys &
          remdups_fwd_acc (?Acc Un set ?ys Un {?x}) vs = ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 4),
             template_var 3)),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app (template_hole 7, t_empty))),
    ("List2.remdups_fwd_split_exact",
     "remdups_fwd_acc ?Acc ?xs = ?ys @ ?x # ?zs ==>
      EX us vs.
         ?xs = us @ ?x # vs &
         ?x ~: ?Acc &
         ?x ~: set ?ys &
         remdups_fwd_acc ?Acc us = ?ys &
         remdups_fwd_acc (?Acc Un set ?ys Un {?x}) vs = ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("List2.remdups_fwd_split_exactE",
     "[| remdups_fwd_acc ?Acc ?xs = ?ys @ ?x # ?zs;
         !!us vs.
            [| ?xs = us @ ?x # vs; ?x ~: set us;
               remdups_fwd_acc ?Acc us = ?ys;
               remdups_fwd_acc (?Acc Un set ?ys Un {?x}) vs = ?zs |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.List2MoreTemplates"
### 0.324s elapsed time, 0.476s cpu time, 0.071s GC time
val it = (): unit
