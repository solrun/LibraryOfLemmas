Loading theory "Draft.Map2" (required by "Draft.DTSMoreTemplates" via "Draft.DTS" via "Draft.Mapping2")
Loading theory "HOL-Library.AList" (required by "Draft.DTSMoreTemplates" via "Draft.DTS" via "Draft.Mapping2" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.DTSMoreTemplates" via "Draft.DTS" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Map2"
### 0.049s elapsed time, 0.231s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.612s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.333s elapsed time, 1.335s cpu time, 0.110s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.DTSMoreTemplates" via "Draft.DTS")
### theory "HOL-Library.Nat_Bijection"
### 0.308s elapsed time, 1.201s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.868s cpu time, 0.067s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.317s elapsed time, 1.234s cpu time, 0.181s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.AList"
### 1.215s elapsed time, 4.665s cpu time, 0.980s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.DTSMoreTemplates" via "Draft.DTS" via "Draft.Mapping2")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.217s cpu time, 0.938s GC time
Loading theory "KBPs.DFS" (required by "Draft.DTSMoreTemplates" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.925s cpu time, 0.900s GC time
Found termination order: "size <*mlex*> {}"
### theory "KBPs.DFS"
### 0.240s elapsed time, 0.940s cpu time, 0.142s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Mapping"
### 1.018s elapsed time, 3.037s cpu time, 0.324s GC time
Loading theory "Draft.Mapping2" (required by "Draft.DTSMoreTemplates" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.054s elapsed time, 6.655s cpu time, 1.233s GC time
Loading theory "Draft.Templates" (required by "Draft.DTSMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DTSMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Mapping2"
### 0.293s elapsed time, 0.647s cpu time, 0.092s GC time
Loading theory "Draft.DTS" (required by "Draft.DTSMoreTemplates")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 384 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###     ("\<^const>HOL.eq" ("_position" \<delta>\<^sub>2)
###       ("_lambda"
###         ("_pttrns"
###           ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###           ("_position" \<nu>))
###         ("_tuple"
###           ("_applC" ("_position" \<delta>\<^sub>1)
###             ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###           ("_tuple_arg"
###             ("_applC" ("_position" \<delta>\<^sub>2)
###               ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 388 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.165s cpu time, 0.113s GC time
### Ambiguous input (line 397 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 512 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 570 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 614 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_transition" ("_position" x))
###       ("_tuple" ("_position" q)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" q')))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q')))))
###       ("_Setcompr"
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))
###         ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q'))))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 618 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_transition" ("_position" x))
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" m')))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m')))))
###       ("_tuple"
###         ("_applC" ("_position" the)
###           ("_applC" ("_position" m) ("_position" x)))
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg"
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" m') ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 622 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S)))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>Set.image"
###               ("\<^const>DTS.embed_transition" ("_position" x))
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 626 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S)))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>DTS.project_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 638 of "$AFP/LTL_to_DRA/DTS.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>) ("_position" i)))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i)))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i))))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" x)
###           ("_applC" ("_position" \<rho>) ("_position" i)))
###         ("_position" \<rho>')))
###     ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 639 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("_applC" ("\<^const>DTS.embed_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("\<^const>DTS.embed_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>') ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/LTL_to_DRA/DTS.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" limit)))
###       ("_position" \<rho>))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>)))
###       ("_applC" ("_position" limit) ("_position" \<rho>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>))))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.image"
###       ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" limit) ("_position" \<rho>)))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>)))
###         ("_position" limit)))
###     ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image"
###         ("\<^const>DTS.embed_transition" ("_position" x))
###         ("_applC" ("_position" limit) ("_position" \<rho>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>DTS.embed_transition"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 679 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" k) ("_position" S)))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" k))
###             ("_position" S))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DTS"
### 1.108s elapsed time, 1.718s cpu time, 0.165s GC time
Loading theory "Draft.DTSMoreTemplates"
val templateLemmas =
   [("DTS.reach_reach\<^sub>t_fst",
     "reach ?\<Sigma> ?\<delta> ?q\<^sub>0 =
      fst ` reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.finite_reach",
     "finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) ==>
      finite (reach ?\<Sigma> ?\<delta> ?q\<^sub>0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("DTS.run_foldl",
     "run ?\<Delta> ?q\<^sub>0 ?w ?i =
      foldl ?\<Delta> ?q\<^sub>0 (map ?w [0..<?i])",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("DTS.product_run_None",
     "?\<iota>\<^sub>m ?k = None ==>
      run (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m) ?\<iota>\<^sub>m ?w ?i
       ?k =
      None",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3), template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_hole 2))),
    ("DTS.product_run_project_fst",
     "project_transition_fst
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w ?i) =
      run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w ?i",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("DTS.product_run_project_snd",
     "project_transition_snd
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w ?i) =
      run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w ?i",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("DTS.product_run_embed_fst",
     "run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
       (?q\<^sub>1, ?q\<^sub>2) ?w ?i
      : embed_transition_fst
         (run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 1),
               template_var 0)))
         )),
    ("DTS.product_run_embed_snd",
     "run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
       (?q\<^sub>1, ?q\<^sub>2) ?w ?i
      : embed_transition_snd
         (run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("DTS.finite_reach\<^sub>t",
     "[| finite (reach ?\<Sigma> ?\<delta> ?q\<^sub>0); finite ?\<Sigma> |]
      ==> finite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("DTS.run_parametric",
     "rel_fun (rel_fun ?A (rel_fun ?B ?A))
       (rel_fun ?A (rel_fun (rel_fun (=) ?B) (rel_fun (=) ?A))) run run",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_hole 3),
                     template_var 1)))),
             template_hole 1),
           template_hole 0)
         )),
    ("DTS.product_abs_run_None",
     "Mapping.lookup ?\<iota>\<^sub>m ?k = None ==>
      Mapping.lookup
       (run (\<up>\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
         ?\<iota>\<^sub>m ?w ?i)
       ?k =
      None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_hole 2))),
    ("DTS.limit_subseteq_reach",
     "range ?w <= ?\<Sigma> ==>
      limit (run ?\<delta> ?q\<^sub>0 ?w)
      <= reach ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4),
          template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.limit_subseteq_reach",
     "range ?w <= ?\<Sigma> ==>
      limit (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w)
      <= reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4),
          template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.run_subseteq_reach",
     "range ?w <= ?\<Sigma> ==>
      range (run ?\<delta> ?q\<^sub>0 ?w)
      <= reach ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4),
          template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 3)),
           template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.run_subseteq_reach",
     "range ?w <= ?\<Sigma> ==>
      range (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w)
      <= reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4),
          template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 3)),
           template_hole 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.Q\<^sub>L_reach",
     "finite (reach (set ?\<Sigma>) ?\<delta> ?q\<^sub>0) ==>
      Q\<^sub>L ?\<Sigma> ?\<delta> ?q\<^sub>0 =
      reach (set ?\<Sigma>) ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("DTS.\<delta>\<^sub>L_reach",
     "finite (reach\<^sub>t (set ?\<Sigma>) ?\<delta> ?q\<^sub>0) ==>
      \<delta>\<^sub>L ?\<Sigma> ?\<delta> ?q\<^sub>0 =
      reach\<^sub>t (set ?\<Sigma>) ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("DTS.Q\<^sub>L_eq_\<delta>\<^sub>L",
     "finite (reach\<^sub>t (set ?\<Sigma>) ?\<delta> ?q\<^sub>0) ==>
      Q\<^sub>L ?\<Sigma> ?\<delta> ?q\<^sub>0 =
      fst ` \<delta>\<^sub>L ?\<Sigma> ?\<delta> ?q\<^sub>0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("DTS.reach_card_0",
     "?\<Sigma> ~= {} ==>
      infinite (reach ?\<Sigma> ?\<delta> ?q\<^sub>0) =
      (card (reach ?\<Sigma> ?\<delta> ?q\<^sub>0) = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1),
                    template_var 0)))
              )],
         template_equation
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("DTS.reach\<^sub>t_card_0",
     "?\<Sigma> ~= {} ==>
      infinite (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) =
      (card (reach\<^sub>t ?\<Sigma> ?\<delta> ?q\<^sub>0) = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1),
                    template_var 0)))
              )],
         template_equation
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("DTS.product_run_finite_fst",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      finite (range (run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 0)),
               template_hole 3))
           ))),
    ("DTS.product_run_finite_snd",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      finite (range (run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 0)),
               template_hole 3))
           ))),
    ("DTS.product_parametric",
     "rel_fun (rel_fun ?A (rel_fun ?B (rel_fun ?C ?B)))
       (rel_fun (rel_fun ?A (rel_option ?B))
         (rel_fun ?C (rel_fun ?A (rel_option ?B))))
       \<Delta>\<^sub>\<times> \<Delta>\<^sub>\<times>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 1)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app (template_hole 3, template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app (template_hole 3, template_var 1))))),
             template_hole 1),
           template_hole 0)
         )),
    ("DTS.simple_product_run",
     "run ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
       (?q\<^sub>1, ?q\<^sub>2) ?w ?i =
      (run ?\<delta>\<^sub>1 ?q\<^sub>1 ?w ?i,
       run ?\<delta>\<^sub>2 ?q\<^sub>2 ?w ?i)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("DTS.product_run_Some",
     "?\<iota>\<^sub>m ?k = Some ?q\<^sub>0 ==>
      run (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m) ?\<iota>\<^sub>m ?w ?i
       ?k =
      Some (run (?\<delta>\<^sub>m ?k) ?q\<^sub>0 ?w ?i)",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 5),
               template_var 1),
             template_var 0),
           template_var 4),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 4)),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("DTS.product_run_project",
     "?\<iota>\<^sub>m ?x = Some ?q\<^sub>0 ==>
      \<downharpoonleft>\<^sub>?x
       (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
         ?\<iota>\<^sub>m ?w ?i) =
      run\<^sub>t (?\<delta>\<^sub>m ?x) ?q\<^sub>0 ?w ?i",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 5),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 4)),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("DTS.product_run_embed",
     "?\<iota>\<^sub>m ?x = Some ?q\<^sub>0 ==>
      run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
       ?\<iota>\<^sub>m ?w ?i
      : \<upharpoonleft>\<^sub>?x
         (run\<^sub>t (?\<delta>\<^sub>m ?x) ?q\<^sub>0 ?w ?i)",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     template_var 5),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_var 2, template_var 4)),
                     template_var 3),
                   template_var 1),
                 template_var 0)))
           ))),
    ("DTS.reach_parametric",
     "[| bi_total ?B; bi_unique ?B |]
      ==> rel_fun (rel_set ?B)
           (rel_fun (rel_fun ?A (rel_fun ?B ?A)) (rel_fun ?A (rel_set ?A)))
           reach reach",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app (template_hole 2, template_var 0)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("DTS.finite_reach_simple_product",
     "[| finite (reach ?\<Sigma> ?\<delta>\<^sub>1 ?q\<^sub>1);
         finite (reach ?\<Sigma> ?\<delta>\<^sub>2 ?q\<^sub>2) |]
      ==> finite
           (reach ?\<Sigma> ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
             (?q\<^sub>1, ?q\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("DTS.product_abs_run_Some",
     "Mapping.lookup ?\<iota>\<^sub>m ?k = Some ?q\<^sub>0 ==>
      Mapping.lookup
       (run (\<up>\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
         ?\<iota>\<^sub>m ?w ?i)
       ?k =
      Some (run (?\<delta>\<^sub>m ?k) ?q\<^sub>0 ?w ?i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_var 5),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 4)),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("DTS.run\<^sub>t_finite",
     "[| finite (reach ?\<Sigma> ?\<delta> ?q\<^sub>0); finite ?\<Sigma>;
         range ?w <= ?\<Sigma> |]
      ==> finite (range (run\<^sub>t ?\<delta> ?q\<^sub>0 ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_hole 3))
           ))),
    ("DTS.embed_transition_snd_unfold",
     "embed_transition_snd ?t =
      {((x, fst ?t), fst (snd ?t), y, snd (snd ?t)) |x y. True}",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app (template_hole 11, t_empty))),
    ("DTS.run\<^sub>t_foldl",
     "run\<^sub>t ?\<Delta> ?q\<^sub>0 ?w ?i =
      (foldl ?\<Delta> ?q\<^sub>0 (map ?w [0..<?i]), ?w ?i,
       foldl ?\<Delta> ?q\<^sub>0 (map ?w [0..<Suc ?i]))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 1, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 0, template_var 0)))))))),
    ("DTS.finite_reach_product",
     "[| finite (dom ?\<iota>\<^sub>m);
         !!x. x : dom ?\<iota>\<^sub>m ==>
              finite
               (reach ?\<Sigma> (?\<delta>\<^sub>m x)
                 (the (?\<iota>\<^sub>m x))) |]
      ==> finite
           (reach ?\<Sigma> (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
             ?\<iota>\<^sub>m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("DTS.product_run_project_limit_fst",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      project_transition_fst `
      limit
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w) =
      limit (run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0))))),
    ("DTS.product_run_project_limit_snd",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      project_transition_snd `
      limit
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w) =
      limit (run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0))))),
    ("DTS.finite_reach_product_abs",
     "[| finite (Mapping.keys ?\<iota>\<^sub>m);
         !!x. x : Mapping.keys ?\<iota>\<^sub>m ==>
              finite
               (reach ?\<Sigma> (?\<delta>\<^sub>m x)
                 (the (Mapping.lookup ?\<iota>\<^sub>m x))) |]
      ==> finite
           (reach ?\<Sigma> (\<up>\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
             ?\<iota>\<^sub>m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("DTS.product_run_embed_limit_fst",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      limit
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w)
      <= \<Union>
          (embed_transition_fst `
           limit (run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 7))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 3)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 0))))))),
    ("DTS.product_run_embed_limit_snd",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      limit
       (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
         (?q\<^sub>1, ?q\<^sub>2) ?w)
      <= \<Union>
          (embed_transition_snd `
           limit (run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_var 3)),
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1)),
                    template_var 0)),
                template_hole 7))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 3)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0))))))),
    ("DTS.product_run_project_limit",
     "[| ?\<iota>\<^sub>m ?x = Some ?q\<^sub>0;
         finite
          (range
            (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
              ?\<iota>\<^sub>m ?w)) |]
      ==> \<downharpoonleft>\<^sub>?x `
          limit
           (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
             ?\<iota>\<^sub>m ?w) =
          limit (run\<^sub>t (?\<delta>\<^sub>m ?x) ?q\<^sub>0 ?w)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 1)),
                      template_var 4),
                    template_var 0)),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_var 4),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3)),
               template_var 2),
             template_var 0))))),
    ("DTS.embed_transition_unfold",
     "\<upharpoonleft>\<^sub>?x ?t =
      {(m, fst (snd ?t), m') |m m'.
       m ?x = Some (fst ?t) & m' ?x = Some (snd (snd ?t))}",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app (template_hole 11, t_empty))),
    ("DTS.product_run_embed_limit",
     "[| ?\<iota>\<^sub>m ?x = Some ?q\<^sub>0;
         finite
          (range
            (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
              ?\<iota>\<^sub>m ?w)) |]
      ==> limit
           (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
             ?\<iota>\<^sub>m ?w)
          <= \<Union>
              (\<upharpoonleft>\<^sub>?x `
               limit (run\<^sub>t (?\<delta>\<^sub>m ?x) ?q\<^sub>0 ?w))",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 1)),
                      template_var 4),
                    template_var 0)),
                template_hole 7))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 1)),
               template_var 4),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 3)),
                   template_var 2),
                 template_var 0))))))),
    ("DTS.product_run_embed_limit_finiteness_fst",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      (limit
        (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
          (?q\<^sub>1, ?q\<^sub>2) ?w) Int
       \<Union> (embed_transition_fst ` ?S) =
       {}) =
      (limit (run\<^sub>t ?\<delta>\<^sub>1 ?q\<^sub>1 ?w) Int ?S = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app (template_hole 15, template_var 5),
                          template_var 4)),
                      template_app
                       (template_app (template_hole 14, template_var 3),
                        template_var 2)),
                    template_var 1)),
                template_hole 13))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 15, template_var 5),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 14, template_var 3),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0))),
           template_hole 5),
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 3),
                   template_var 1))),
             template_var 0),
           template_hole 0)))),
    ("DTS.product_run_embed_limit_finiteness_snd",
     "finite
       (range
         (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
           (?q\<^sub>1, ?q\<^sub>2) ?w)) ==>
      (limit
        (run\<^sub>t ?\<delta>\<^sub>1 \<times> ?\<delta>\<^sub>2
          (?q\<^sub>1, ?q\<^sub>2) ?w) Int
       \<Union> (embed_transition_snd ` ?S') =
       {}) =
      (limit (run\<^sub>t ?\<delta>\<^sub>2 ?q\<^sub>2 ?w) Int ?S' = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app (template_hole 15, template_var 5),
                          template_var 4)),
                      template_app
                       (template_app (template_hole 14, template_var 3),
                        template_var 2)),
                    template_var 1)),
                template_hole 13))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 15, template_var 5),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 14, template_var 3),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0))),
           template_hole 5),
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2),
                   template_var 1))),
             template_var 0),
           template_hole 0)))),
    ("DTS.product_run_embed_limit_finiteness",
     "[| ?\<iota>\<^sub>m ?k = Some ?q\<^sub>0;
         finite
          (range
            (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
              ?\<iota>\<^sub>m ?w)) |]
      ==> (limit
            (run\<^sub>t (\<Delta>\<^sub>\<times> ?\<delta>\<^sub>m)
              ?\<iota>\<^sub>m ?w) Int
           \<Union> (\<upharpoonleft>\<^sub>?k ` ?S) =
           {}) =
          (limit (run\<^sub>t (?\<delta>\<^sub>m ?k) ?q\<^sub>0 ?w) Int ?S =
           {})",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 18, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 15,
                        template_app (template_hole 14, template_var 2)),
                      template_var 5),
                    template_var 1)),
                template_hole 13))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 15,
                       template_app (template_hole 14, template_var 2)),
                     template_var 5),
                   template_var 1))),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 4)),
                 template_var 0))),
           template_hole 5),
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_var 2, template_var 4)),
                     template_var 3),
                   template_var 1))),
             template_var 0),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.DTSMoreTemplates"
### 0.352s elapsed time, 0.531s cpu time, 0.052s GC time
val it = (): unit
