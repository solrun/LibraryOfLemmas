   [("LTL_Rabin_Unfold_Opt.finite_reach_af_G_opt",
     "finite (reach ?\<Sigma> \<up>af\<^sub>G\<^sub>\<UU> (Abs ?\<phi>))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("LTL_Rabin_Unfold_Opt.finite_reach_af_opt",
     "finite (reach ?\<Sigma> \<up>af\<^sub>\<UU> (Abs ?\<phi>))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("LTL_Rabin_Unfold_Opt.ltl_to_generalized_rabin_af\<^sub>\<UU>_wellformed",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ltl_to_rabin_af_unf ?\<Sigma> ?w",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL_Rabin_Unfold_Opt.ltl_to_generalized_rabin_af\<^sub>\<UU>_correct",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ?w \<Turnstile> ?\<phi> =
          accept\<^sub>G\<^sub>R
           (ltl_to_generalized_rabin_af\<^sub>\<UU> ?\<Sigma> ?\<phi>) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("LTL_Rabin_Unfold_Opt.wellformed_mojmir_opt",
     "[| Only_G ?\<G>; finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> mojmir ?\<Sigma> \<up>af\<^sub>G\<^sub>\<UU> (Abs ?\<phi>) ?w
           {q. ?\<G> \<Turnstile>\<^sub>P Rep q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3), t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4),
                 template_app (template_hole 3, template_var 0)),
               template_var 1),
             template_app (template_hole 2, t_empty))
           ))),
    ("LTL_Rabin_Unfold_Opt.unfold_accept_eq",
     "[| Only_G ?\<G>; finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> mojmir_def.accept \<up>af\<^sub>G (Abs ?\<phi>) ?w
           {q. ?\<G> \<Turnstile>\<^sub>P Rep q} =
          mojmir_def.accept \<up>af\<^sub>G\<^sub>\<UU>
           (Abs (Unf\<^sub>G ?\<phi>)) ?w
           {q. ?\<G> \<Turnstile>\<^sub>P Rep q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_hole 9),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 0)),
             template_var 1),
           template_app (template_hole 4, t_empty)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_hole 1),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 0))),
             template_var 1),
           template_app (template_hole 4, t_empty))))),
    ("LTL_Rabin_Unfold_Opt.unfold_token_run_eq",
     "[| Only_G ?\<G>; finite ?\<Sigma>; range ?w <= ?\<Sigma>; ?x <= ?n |]
      ==> semi_mojmir_def.token_run \<up>af\<^sub>G (Abs ?\<phi>) ?w ?x
           (Suc ?n) =
          \<up>step
           (semi_mojmir_def.token_run \<up>af\<^sub>G\<^sub>\<UU>
             (Abs (Unf\<^sub>G ?\<phi>)) ?w ?x ?n)
           (?w ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5), t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_hole 9),
          template_var 4),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 0)),
               template_var 3),
             template_var 2),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_hole 1),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 0, template_var 0))),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_app (template_var 3, template_var 1))))),
    ("LTL_Rabin_Unfold_Opt.unfold_token_succeeds_eq",
     "[| Only_G ?\<G>; finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> mojmir_def.token_succeeds \<up>af\<^sub>G (Abs ?\<phi>) ?w
           {q. ?\<G> \<Turnstile>\<^sub>P Rep q} ?x =
          mojmir_def.token_succeeds \<up>af\<^sub>G\<^sub>\<UU>
           (Abs (Unf\<^sub>G ?\<phi>)) ?w
           {q. ?\<G> \<Turnstile>\<^sub>P Rep q} ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4), t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 2),
            template_hole 9),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, template_var 1)),
               template_var 2),
             template_app (template_hole 4, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 1),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 0, template_var 1))),
               template_var 2),
             template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("LTL_Rabin_Unfold_Opt.unfold_\<S>_eq",
     "[| Only_G ?\<G>; finite ?\<Sigma>; range ?w <= ?\<Sigma>;
         mojmir_def.accept \<up>af\<^sub>G (Abs ?\<phi>) ?w
          {q. ?\<G> \<Turnstile>\<^sub>P Rep q} |]
      ==> MOST n.
             mojmir_def.\<S> ?\<Sigma> \<up>af\<^sub>G (Abs ?\<phi>) ?w
              {q. ?\<G> \<Turnstile>\<^sub>P Rep q} (Suc n) =
             (%q. \<up>step q (?w n)) `
             mojmir_def.\<S> ?\<Sigma> \<up>af\<^sub>G\<^sub>\<UU>
              (Abs (Unf\<^sub>G ?\<phi>)) ?w
              {q. ?\<G> \<Turnstile>\<^sub>P Rep q} n Un
             {Abs ?\<phi>} Un
             {q. ?\<G> \<Turnstile>\<^sub>P Rep q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 3), t_empty)
            ),
        template_predicate
         (template_app (template_hole 21, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 19, template_var 1),
            template_hole 18),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_app (template_hole 15, template_var 0)),
                template_var 1),
              template_app (template_hole 14, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           )))]
