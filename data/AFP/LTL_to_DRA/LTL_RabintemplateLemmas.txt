   [("LTL_Rabin.finite_reach_af",
     "finite (reach ?\<Sigma> \<up>af (Abs ?\<phi>))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("LTL_Rabin.run_af_G_letter_abs_eq_Abs_af_G_letter",
     "run \<up>af\<^sub>G (Abs ?\<phi>) ?w ?i =
      Abs (run af_G_letter ?\<phi> ?w ?i)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("LTL_Rabin.ltl_to_generalized_rabin_af_wellformed",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ltl_to_rabin_af ?\<Sigma> ?w",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("LTL_Rabin.combine_pairs_prop",
     "(ALL P:?\<P>. accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 P ?w) =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (combine_pairs ?\<P>) ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 3)),
         template_var 0))),
    ("LTL_Rabin.combine_pairs'_prop",
     "(ALL P:?\<P>. accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 P ?w) =
      accepting_pair\<^sub>G\<^sub>R ?\<delta> ?q\<^sub>0
       (combine_pairs' ?\<P>) ?w",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3), t_empty),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 3)),
         template_var 0))),
    ("LTL_Rabin.ltl_FG_to_generalized_rabin_wellformed",
     "finite ?\<Sigma> ==>
      finite
       (reach ?\<Sigma>
         (fst (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>))
         (fst (snd (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))))
           ))),
    ("LTL_Rabin.ltl_semi_mojmir",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> semi_mojmir ?\<Sigma> \<up>af\<^sub>G (Abs ?\<psi>) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1),
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("LTL_Rabin.ltl_to_generalized_rabin_af_correct",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ?w \<Turnstile> ?\<phi> =
          accept\<^sub>G\<^sub>R
           (ltl_to_generalized_rabin_af ?\<Sigma> ?\<phi>) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("LTL_Rabin.ltl_FG_to_generalized_rabin_correct",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ?w \<Turnstile> F G ?\<phi> =
          accept\<^sub>G\<^sub>R
           (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>) ?w",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("LTL_Rabin.combine_pairs2",
     "[| combine_pairs ?\<P> : ?\<alpha>;
         !!P. P : ?\<P> ==>
              accepting_pair\<^sub>R ?\<delta> ?q\<^sub>0 P ?w |]
      ==> accept\<^sub>G\<^sub>R (?\<delta>, ?q\<^sub>0, ?\<alpha>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3))),
             template_var 0)
           ))),
    ("LTL_Rabin.ltl_to_rabin_correct",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
      ==> ?w \<Turnstile> F G ?\<phi> =
          (EX \<G><=\<^bold>G (G ?\<phi>).
              G ?\<phi> : \<G> &
              (ALL \<psi>.
                  G \<psi> : \<G> -->
                  accept\<^sub>R (ltl_to_rabin ?\<Sigma> \<psi> \<G>) ?w))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 14, template_var 1),
            template_hole 13),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1),
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 8, t_empty)))),
    ("LTL_Rabin.\<F>_eq_\<S>",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma>;
         Logical_Characterization.closed ?\<G> ?w; G ?\<psi> : ?\<G> |]
      ==> MOST j.
             ALL S.
                (S \<Turnstile>\<^sub>P \<F> ?\<psi> ?w ?\<G> j &
                 ?\<G> <= S) =
                (ALL q.
                    q : mojmir_def.\<S> ?\<Sigma> \<up>af\<^sub>G
                         (Abs ?\<psi>) ?w
                         {q. ?\<G> \<Turnstile>\<^sub>P Rep q} j -->
                    S \<Turnstile>\<^sub>P Rep q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 27, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 25, template_var 2),
            template_hole 24),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 1)),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app (template_hole 21, template_var 1),
                    t_empty)),
                template_app (template_hole 17, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, t_empty), template_hole 0)
           ))),
    ("LTL_Rabin.\<F>_eq_\<S>_generalized",
     "[| finite ?\<Sigma>; range ?w <= ?\<Sigma>;
         Logical_Characterization.closed ?\<G> ?w |]
      ==> MOST j.
             ALL \<psi>.
                G \<psi> : ?\<G> -->
                (ALL S.
                    (S \<Turnstile>\<^sub>P \<F> \<psi> ?w ?\<G> j &
                     ?\<G> <= S) =
                    (ALL q.
                        q : mojmir_def.\<S> ?\<Sigma> \<up>af\<^sub>G
                             (Abs \<psi>) ?w
                             {q. ?\<G> \<Turnstile>\<^sub>P Rep q} j -->
                        S \<Turnstile>\<^sub>P Rep q))",
     template_implication
      ([template_predicate
         (template_app (template_hole 27, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 25, template_var 1),
            template_hole 24),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 0)),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app (template_hole 21, template_var 0),
                    t_empty)),
                template_app (template_hole 17, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, t_empty), template_hole 0)
           )))]
