Loading theory "HOL-Library.Function_Algebras" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.afMoreTemplates" via "Draft.af" via "Draft.LTL_FGXU" via "HOL-Library.Omega_Words_Fun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.500s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.023s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.376s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.378s elapsed time, 1.514s cpu time, 0.119s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.afMoreTemplates" via "Draft.af" via "Draft.LTL_FGXU")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Omega_Words_Fun"
### 0.318s elapsed time, 1.252s cpu time, 0.197s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.afMoreTemplates" via "Draft.af")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.028s elapsed time, 3.916s cpu time, 0.921s GC time
Loading theory "List-Index.List_Index" (required by "Draft.afMoreTemplates" via "Draft.af" via "Draft.List2")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.120s elapsed time, 4.273s cpu time, 1.019s GC time
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.408s elapsed time, 1.372s cpu time, 0.177s GC time
Loading theory "Draft.List2" (required by "Draft.afMoreTemplates" via "Draft.af")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.758s elapsed time, 2.372s cpu time, 0.994s GC time
### theory "HOL-Library.Tree"
### 2.394s elapsed time, 8.398s cpu time, 2.168s GC time
Loading theory "Draft.Templates" (required by "Draft.afMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.afMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.157s cpu time, 0.114s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.LTL_FGXU"
### 3.979s elapsed time, 9.772s cpu time, 2.988s GC time
Loading theory "Draft.af" (required by "Draft.afMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.af"
### 1.126s elapsed time, 1.466s cpu time, 0.245s GC time
Loading theory "Draft.afMoreTemplates"
val templateLemmas =
   [("af.Rep_Abs_equiv", "Rep (Abs ?\<phi>) \<equiv>\<^sub>P ?\<phi>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("af.af\<^sub>G_simps", "af\<^sub>G false ?w = false",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("af.af\<^sub>G_simps", "af\<^sub>G true ?w = true",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("af.af_simps", "af false ?w = false",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("af.af_simps", "af true ?w = true",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("af.nested_propos",
     "nested_propos (Unf ?\<phi>) <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("af.nested_propos",
     "nested_propos (Unf\<^sub>G ?\<phi>) <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("af.af_G_nested_propos",
     "nested_propos (af_G_letter ?\<phi> ?\<nu>) <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("af.nested_propos",
     "nested_propos (af_G_letter_opt ?\<phi> ?\<nu>)
      <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("af.af_nested_propos",
     "nested_propos (af_letter ?\<phi> ?\<nu>) <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("af.nested_propos",
     "nested_propos (af_letter_opt ?\<phi> ?\<nu>)
      <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("af.nested_propos",
     "nested_propos (step ?\<phi> ?\<nu>) <= nested_propos ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("af.G_af\<^sub>G_simp",
     "\<^bold>G (af\<^sub>G ?\<phi> ?w) = \<^bold>G ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)),
       template_app (template_hole 2, template_var 1))),
    ("af.G_af_simp", "\<^bold>G (af ?\<phi> ?w) = \<^bold>G ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)),
       template_app (template_hole 2, template_var 1))),
    ("Tree.Leaf_mirror",
     "(\<langle>\<rangle> = mirror ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_equation (template_var 0, template_hole 1))),
    ("Tree.mirror_Leaf",
     "(mirror ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("af.af\<^sub>G_simps", "af\<^sub>G (G ?\<phi>) ?w = G ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("af.af_G_letter_abs_opt_split",
     "\<up>Unf\<^sub>G (\<up>step ?\<Phi> ?\<nu>) =
      \<up>af\<^sub>G\<^sub>\<UU> ?\<Phi> ?\<nu>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Tree.eq_Leaf_map_tree",
     "(\<langle>\<rangle> = map_tree ?f ?t) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Tree.eq_map_tree_Leaf",
     "(map_tree ?f ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("af.af_equals_af\<^sub>G_base_cases",
     "af false ?w = af\<^sub>G false ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 1),
         template_var 0))),
    ("af.af_equals_af\<^sub>G_base_cases",
     "af true ?w = af\<^sub>G true ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 0),
           template_hole 1),
         template_var 0))),
    ("af.Rep_step",
     "Rep (\<up>step ?\<Phi> ?\<nu>) \<equiv>\<^sub>P
      step (Rep ?\<Phi>) ?\<nu>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))
         )),
    ("af.respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      Unf ?\<phi> \<equiv>\<^sub>P Unf ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      Unf\<^sub>G ?\<phi> \<equiv>\<^sub>P Unf\<^sub>G ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      Unf ?\<phi> \<longrightarrow>\<^sub>P Unf ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      Unf\<^sub>G ?\<phi> \<longrightarrow>\<^sub>P Unf\<^sub>G ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("af.af_equals_af\<^sub>G_base_cases",
     "af p(?a) ?w = af\<^sub>G p(?a) ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 0),
           template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("af.af_equals_af\<^sub>G_base_cases",
     "af (np(?a)) ?w = af\<^sub>G (np(?a)) ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 0),
           template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("af.af_to_af_opt",
     "Unf (af ?\<phi> ?w) = af\<^sub>\<UU> (Unf ?\<phi>) ?w",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 0),
           template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("af.af_to_af_opt",
     "Unf\<^sub>G (af\<^sub>G ?\<phi> ?w) =
      af\<^sub>G\<^sub>\<UU> (Unf\<^sub>G ?\<phi>) ?w",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 0),
           template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("af.af_ltl_continuation",
     "(?w \<frown> ?w') \<Turnstile> ?\<phi> =
      ?w' \<Turnstile> af ?\<phi> ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 2)))),
    ("af.af\<^sub>G_simps",
     "af\<^sub>G (X ?\<phi>) (?x # ?xs) = af\<^sub>G ?\<phi> ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_var 0))),
    ("af.af_simps", "af (X ?\<phi>) (?x # ?xs) = af ?\<phi> ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 2),
         template_var 0))),
    ("af.af_G_respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af_G_letter ?\<phi> ?\<nu> \<equiv>\<^sub>P
      af_G_letter ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af_G_letter_opt ?\<phi> ?\<nu> \<equiv>\<^sub>P
      af_G_letter_opt ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af_respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af_letter ?\<phi> ?\<nu> \<equiv>\<^sub>P af_letter ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af_letter_opt ?\<phi> ?\<nu> \<equiv>\<^sub>P
      af_letter_opt ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      step ?\<phi> ?\<nu> \<equiv>\<^sub>P step ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af_G_respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af_G_letter ?\<phi> ?\<nu> \<longrightarrow>\<^sub>P
      af_G_letter ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af_G_letter_opt ?\<phi> ?\<nu> \<longrightarrow>\<^sub>P
      af_G_letter_opt ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af_respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af_letter ?\<phi> ?\<nu> \<longrightarrow>\<^sub>P
      af_letter ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af_letter_opt ?\<phi> ?\<nu> \<longrightarrow>\<^sub>P
      af_letter_opt ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      step ?\<phi> ?\<nu> \<longrightarrow>\<^sub>P step ?\<psi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af_G_letter_free_F",
     "\<^bold>G ?\<phi> = {} ==>
      \<^bold>G (af_G_letter ?\<phi> ?\<nu>) = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("af.af_G_letter_free_F",
     "\<^bold>G ?\<phi> = {} ==> \<^bold>G (af_letter ?\<phi> ?\<nu>) = {}",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("af.af_G_respectfulness'",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af\<^sub>G ?\<phi> ?w \<equiv>\<^sub>P af\<^sub>G ?\<psi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_respectfulness'",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      af ?\<phi> ?w \<equiv>\<^sub>P af ?\<psi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_G_respectfulness'",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af\<^sub>G ?\<phi> ?w \<longrightarrow>\<^sub>P
      af\<^sub>G ?\<psi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_respectfulness'",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      af ?\<phi> ?w \<longrightarrow>\<^sub>P af ?\<psi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_implies_af\<^sub>G",
     "?S \<Turnstile>\<^sub>P af ?\<phi> ?w ==>
      ?S \<Turnstile>\<^sub>P af\<^sub>G ?\<phi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_implies_af\<^sub>G_2",
     "?w \<Turnstile> af ?\<phi> ?xs ==>
      ?w \<Turnstile> af\<^sub>G ?\<phi> ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af_ltl_continuation_suffix",
     "?w \<Turnstile> ?\<phi> =
      suffix ?i ?w \<Turnstile> af ?\<phi> (prefix ?i ?w)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2), template_var 1),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             template_var 0))))),
    ("af.af_G_free",
     "\<^bold>G ?\<phi> = {} ==> af ?\<phi> ?w = af\<^sub>G ?\<phi> ?w",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("af.af\<^sub>G_decompose",
     "af\<^sub>G (?\<phi> and ?\<psi>) ?w =
      af\<^sub>G ?\<phi> ?w and af\<^sub>G ?\<psi> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)))),
    ("af.af\<^sub>G_decompose",
     "af\<^sub>G (?\<phi> or ?\<psi>) ?w =
      af\<^sub>G ?\<phi> ?w or af\<^sub>G ?\<psi> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)))),
    ("af.af_decompose",
     "af (?\<phi> and ?\<psi>) ?w = af ?\<phi> ?w and af ?\<psi> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)))),
    ("af.af_decompose",
     "af (?\<phi> or ?\<psi>) ?w = af ?\<phi> ?w or af ?\<psi> ?w",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)))),
    ("af.af_equiv",
     "af ?\<phi> (?w @ [?\<nu>]) =
      step (af\<^sub>\<UU> (Unf ?\<phi>) ?w) ?\<nu>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("af.af_abs_equiv",
     "foldl \<up>af ?\<psi> (?xs @ [?x]) =
      \<up>step (foldl \<up>af\<^sub>\<UU> (\<up>Unf ?\<psi>) ?xs) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Tree.neq_Leaf_iff",
     "(?t ~= \<langle>\<rangle>) =
      (EX l a r. ?t = \<langle>l, a, r\<rangle>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app (template_hole 2, t_empty))),
    ("af.af\<^sub>G_F",
     "af\<^sub>G (F ?\<phi>) ?w =
      Or (F ?\<phi> # map (af\<^sub>G ?\<phi>) (suffixes ?w))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("af.af_F",
     "af (F ?\<phi>) ?w = Or (F ?\<phi> # map (af ?\<phi>) (suffixes ?w))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("af.af_G",
     "af (G ?\<phi>) ?w = And (G ?\<phi> # map (af ?\<phi>) (suffixes ?w))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("af.af_equiv'",
     "af ?\<phi> (prefix (Suc ?i) ?w) =
      step (af\<^sub>\<UU> (Unf ?\<phi>) (prefix ?i ?w)) (?w ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4),
               template_var 0))),
         template_app (template_var 1, template_var 0)))),
    ("af.Unf\<^sub>G_\<G>",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P Unf\<^sub>G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("af.af_G_letter_sat_core",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P af_G_letter ?\<phi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af_G_letter_opt_sat_core",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P af_G_letter_opt ?\<phi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.step_\<G>",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P step ?\<phi> ?\<nu>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("af.af\<^sub>G_sat_core",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P af\<^sub>G ?\<phi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af\<^sub>G_keeps_F_and_S",
     "[| ?ys ~= []; ?S \<Turnstile>\<^sub>P af\<^sub>G ?\<phi> ?ys |]
      ==> ?S \<Turnstile>\<^sub>P af\<^sub>G (F ?\<phi>) (?xs @ ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)))
           ))),
    ("af.af_G_letter_sat_core_lifted",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P Rep ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P Rep (\<up>af\<^sub>G ?\<phi> ?\<nu>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("af.af_G_letter_opt_sat_core_lifted",
     "[| Only_G ?\<G>; ?\<G> \<Turnstile>\<^sub>P Rep ?\<phi> |]
      ==> ?\<G> \<Turnstile>\<^sub>P
          Rep (\<up>af\<^sub>G\<^sub>\<UU> ?\<phi> ?\<nu>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Real_Vector_Spaces.real_vector_eq_affinity",
     "?m ~= 0 ==>
      (?y = ?m *\<^sub>R ?x + ?c) =
      (?y /\<^sub>R ?m - ?c /\<^sub>R ?m = ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 0)),
           template_var 1)))),
    ("Real_Vector_Spaces.real_vector_affinity_eq",
     "?m ~= 0 ==>
      (?m *\<^sub>R ?x + ?c = ?y) =
      (?x = ?y /\<^sub>R ?m - ?c /\<^sub>R ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)))))),
    ("af.af_G_ltl_continuation",
     "ALL \<psi>:\<^bold>G ?\<phi>.
         ?w' \<Turnstile> \<psi> = (?w \<frown> ?w') \<Turnstile> \<psi> ==>
      (?w \<frown> ?w') \<Turnstile> ?\<phi> =
      ?w' \<Turnstile> af\<^sub>G ?\<phi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2),
             template_var 0))))),
    ("af.af\<^sub>G_eval\<^sub>G",
     "Only_G ?\<G> ==>
      ?\<G> \<Turnstile>\<^sub>P
      af\<^sub>G (eval\<^sub>G ?\<G> ?\<phi>) ?w =
      ?\<G> \<Turnstile>\<^sub>P
      eval\<^sub>G ?\<G> (af\<^sub>G ?\<phi> ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1),
               template_var 0)))))),
    ("af.af\<^sub>G_U",
     "af\<^sub>G (?\<phi> U ?\<psi>) (?x # ?xs) =
      af\<^sub>G (?\<phi> U ?\<psi>)
       ?xs and af\<^sub>G ?\<phi>
                (?x # ?xs) or af\<^sub>G ?\<psi> (?x # ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("af.af_U",
     "af (?\<phi> U ?\<psi>) (?x # ?xs) =
      af (?\<phi> U ?\<psi>)
       ?xs and af ?\<phi> (?x # ?xs) or af ?\<psi> (?x # ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("af.af\<^sub>G_ltl_continuation_suffix",
     "ALL \<psi>:\<^bold>G ?\<phi>.
         ?w \<Turnstile> \<psi> = suffix ?i ?w \<Turnstile> \<psi> ==>
      ?w \<Turnstile> ?\<phi> =
      suffix ?i ?w \<Turnstile> af\<^sub>G ?\<phi> (prefix ?i ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 0)))))),
    ("af.af\<^sub>G_sat_core_generalized",
     "[| Only_G ?\<G>; ?i <= ?j;
         ?\<G> \<Turnstile>\<^sub>P af\<^sub>G ?\<phi> (prefix ?i ?w) |]
      ==> ?\<G> \<Turnstile>\<^sub>P af\<^sub>G ?\<phi> (prefix ?j ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4), t_empty)
            ),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 0),
                    template_hole 0),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0),
                 template_var 2)))
           ))),
    ("af.af\<^sub>G_subsequence_U",
     "af\<^sub>G (?\<phi> U ?\<psi>) (prefix (Suc ?n) ?w) =
      af\<^sub>G (?\<phi> U ?\<psi>)
       (?w [1 \<rightarrow> Suc ?n]) and af\<^sub>G ?\<phi>
    (prefix (Suc ?n) ?w) or af\<^sub>G ?\<psi> (prefix (Suc ?n) ?w)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 0),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4),
                 template_app (template_hole 3, template_var 0))))),
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4),
             template_app (template_hole 3, template_var 0)))))),
    ("af.af\<^sub>G_implies_af_eval\<^sub>G'",
     "[| ?S \<Turnstile>\<^sub>P eval\<^sub>G ?\<G> (af\<^sub>G ?\<phi> ?w);
         !!\<psi>. G \<psi> : ?\<G> ==> ?S \<Turnstile>\<^sub>P G \<psi>;
         !!\<psi> i.
            [| G \<psi> : ?\<G>; i < length ?w |]
            ==> ?S \<Turnstile>\<^sub>P
                eval\<^sub>G ?\<G> (af\<^sub>G \<psi> (drop i ?w)) |]
      ==> ?S \<Turnstile>\<^sub>P af ?\<phi> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 1),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 9, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("af.af\<^sub>G_implies_af_eval\<^sub>G",
     "[| ?S \<Turnstile>\<^sub>P
         eval\<^sub>G ?\<G> (af\<^sub>G ?\<phi> (prefix ?j ?w));
         !!\<psi>. G \<psi> : ?\<G> ==> ?S \<Turnstile>\<^sub>P G \<psi>;
         !!\<psi> i.
            [| G \<psi> : ?\<G>; i <= ?j |]
            ==> ?S \<Turnstile>\<^sub>P
                eval\<^sub>G ?\<G>
                 (af\<^sub>G \<psi> (?w [i \<rightarrow> ?j])) |]
      ==> ?S \<Turnstile>\<^sub>P af ?\<phi> (prefix ?j ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 2),
                  template_app
                   (template_app
                     (template_app (template_hole 7, template_var 1),
                      template_hole 6),
                    template_var 0))))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 9, template_hole 0),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 6),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.afMoreTemplates"
### 0.383s elapsed time, 0.592s cpu time, 0.087s GC time
val it = (): unit
