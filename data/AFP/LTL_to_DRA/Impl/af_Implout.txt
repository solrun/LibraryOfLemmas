Loading theory "HOL-Library.AList" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.LTL_Impl" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.af" via "Draft.LTL_FGXU" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.515s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.292s elapsed time, 1.173s cpu time, 0.108s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.af" via "Draft.LTL_FGXU")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.778s cpu time, 0.068s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.327s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.314s elapsed time, 1.224s cpu time, 0.186s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.af")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.241s elapsed time, 4.753s cpu time, 0.986s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.LTL_Impl" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.163s elapsed time, 4.420s cpu time, 1.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 1.167s elapsed time, 4.416s cpu time, 1.381s GC time
Loading theory "List-Index.List_Index" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.af" via "Draft.List2")
### theory "HOL-Library.Mapping"
### 1.454s elapsed time, 5.540s cpu time, 1.546s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.LTL_Impl")
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
### theory "HOL-Library.Tree"
### 2.600s elapsed time, 9.892s cpu time, 2.566s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.LTL_Impl" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
### theory "HOL-Library.AList_Mapping"
### 0.129s elapsed time, 0.500s cpu time, 0.095s GC time
Loading theory "Draft.Templates" (required by "Draft.af_ImplMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.429s elapsed time, 1.683s cpu time, 0.237s GC time
Loading theory "Draft.List2" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.af")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.af_ImplMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.563s elapsed time, 2.198s cpu time, 0.261s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.722s elapsed time, 2.697s cpu time, 0.310s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif :: "('a, bool) mapping => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale reduced_bdt_checkers
  fixes ifex_of :: "'b => 'a ifex"
    and val :: "'b => ('a => bool) => bool"
  assumes "reduced_bdt_checkers ifex_of val"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.LTL_FGXU"
### 4.421s elapsed time, 14.844s cpu time, 3.116s GC time
Loading theory "Draft.af" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  val_bool_expr :: "'a bool_expr => ('a => bool) => bool"
Found termination order: "size <*mlex*> {}"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers"
### 2.845s elapsed time, 8.109s cpu time, 1.013s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl" via "Draft.LTL_Impl")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  normif_alist ::
    "('a * bool) list => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping"
### 0.285s elapsed time, 0.624s cpu time, 0.073s GC time
Loading theory "Draft.LTL_Impl" (required by "Draft.af_ImplMoreTemplates" via "Draft.af_Impl")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.af"
### 1.316s elapsed time, 2.937s cpu time, 0.326s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.LTL_Impl"
### 1.552s elapsed time, 2.448s cpu time, 0.298s GC time
Loading theory "Draft.af_Impl" (required by "Draft.af_ImplMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.af_Impl"
### 4.537s elapsed time, 6.618s cpu time, 2.511s GC time
Loading theory "Draft.af_ImplMoreTemplates"
val templateLemmas =
   [("af_Impl.remove_and_or_correct",
     "?S \<Turnstile>\<^sub>P remove_and_or ?x =
      ?S \<Turnstile>\<^sub>P ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("af_Impl.Unf_simp_correct",
     "?S \<Turnstile>\<^sub>P Unf ?\<phi> =
      ?S \<Turnstile>\<^sub>P Unf_simp ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("af_Impl.Unf\<^sub>G_simp_correct",
     "?S \<Turnstile>\<^sub>P Unf\<^sub>G ?\<phi> =
      ?S \<Turnstile>\<^sub>P Unf\<^sub>G_simp ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("af_Impl.af_G_letter_simp_correct",
     "?S \<Turnstile>\<^sub>P af_G_letter ?\<phi> ?\<nu> =
      ?S \<Turnstile>\<^sub>P af_G_letter_simp ?\<phi> ?\<nu>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("af_Impl.af_G_letter_opt_simp_correct",
     "?S \<Turnstile>\<^sub>P af_G_letter_opt ?\<phi> ?\<nu> =
      ?S \<Turnstile>\<^sub>P af_G_letter_opt_simp ?\<phi> ?\<nu>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("af_Impl.af_letter_simp_correct",
     "?S \<Turnstile>\<^sub>P af_letter ?\<phi> ?\<nu> =
      ?S \<Turnstile>\<^sub>P af_letter_simp ?\<phi> ?\<nu>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("af_Impl.af_letter_opt_simp_correct",
     "?S \<Turnstile>\<^sub>P af_letter_opt ?\<phi> ?\<nu> =
      ?S \<Turnstile>\<^sub>P af_letter_opt_simp ?\<phi> ?\<nu>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("af_Impl.step_simp_correct",
     "?S \<Turnstile>\<^sub>P step ?\<phi> ?\<nu> =
      ?S \<Turnstile>\<^sub>P step_simp ?\<phi> ?\<nu>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.af_ImplMoreTemplates"
### 0.442s elapsed time, 0.611s cpu time, 0.079s GC time
val it = (): unit
