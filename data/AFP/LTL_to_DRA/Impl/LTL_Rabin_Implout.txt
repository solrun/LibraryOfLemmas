Loading theory "Draft.Map2" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl")
Loading theory "HOL-Library.AList" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.Preliminaries2")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Map2"
### 0.044s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.573s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.351s elapsed time, 1.402s cpu time, 0.112s GC time
Loading theory "Draft.Preliminaries2" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.240s cpu time, 0.112s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
### theory "HOL-Library.Set_Algebras"
### 0.265s elapsed time, 1.041s cpu time, 0.076s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Preliminaries2"
### 0.137s elapsed time, 0.534s cpu time, 0.086s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.320s elapsed time, 1.256s cpu time, 0.174s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Logical_Characterization" via "Draft.af")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Library.AList"
### 1.236s elapsed time, 4.713s cpu time, 1.014s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2")
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.205s elapsed time, 4.571s cpu time, 1.080s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Mapping"
### 1.175s elapsed time, 4.629s cpu time, 0.589s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl")
### theory "HOL-Library.BigO"
### 0.888s elapsed time, 3.488s cpu time, 0.478s GC time
Loading theory "Draft.Mapping2" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.340s elapsed time, 9.038s cpu time, 1.647s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Mapping2"
### 0.375s elapsed time, 1.473s cpu time, 0.174s GC time
Loading theory "Draft.Templates" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.AList_Mapping"
### 0.122s elapsed time, 0.473s cpu time, 0.070s GC time
Loading theory "KBPs.DFS" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.352s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LTL_Rabin_ImplMoreTemplates")
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "KBPs.DFS"
### 0.213s elapsed time, 0.840s cpu time, 0.044s GC time
Loading theory "Draft.DTS" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.751s elapsed time, 2.947s cpu time, 0.378s GC time
Loading theory "List-Index.List_Index" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.List2")
consts
  normif :: "('a, bool) mapping => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
consts
  find_index :: "('a => bool) => 'a list => nat"
### Ambiguous input (line 384 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###     ("\<^const>HOL.eq" ("_position" \<delta>\<^sub>2)
###       ("_lambda"
###         ("_pttrns"
###           ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###           ("_position" \<nu>))
###         ("_tuple"
###           ("_applC" ("_position" \<delta>\<^sub>1)
###             ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###           ("_tuple_arg"
###             ("_applC" ("_position" \<delta>\<^sub>2)
###               ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 388 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale reduced_bdt_checkers
  fixes ifex_of :: "'b => 'a ifex"
    and val :: "'b => ('a => bool) => bool"
  assumes "reduced_bdt_checkers ifex_of val"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
### theory "List-Index.List_Index"
### 0.802s elapsed time, 3.002s cpu time, 1.471s GC time
Loading theory "Draft.List2" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
Found termination order: "{}"
### Ambiguous input (line 512 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
### Ambiguous input (line 543 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 570 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 614 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_transition" ("_position" x))
###       ("_tuple" ("_position" q)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" q')))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q')))))
###       ("_Setcompr"
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))
###         ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q'))))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 618 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_transition" ("_position" x))
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" m')))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m')))))
###       ("_tuple"
###         ("_applC" ("_position" the)
###           ("_applC" ("_position" m) ("_position" x)))
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg"
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" m') ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 622 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S)))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>Set.image"
###               ("\<^const>DTS.embed_transition" ("_position" x))
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 626 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S)))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>DTS.project_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 638 of "$AFP/LTL_to_DRA/DTS.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>) ("_position" i)))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i)))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i))))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" x)
###           ("_applC" ("_position" \<rho>) ("_position" i)))
###         ("_position" \<rho>')))
###     ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 639 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("_applC" ("\<^const>DTS.embed_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("\<^const>DTS.embed_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>') ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/LTL_to_DRA/DTS.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" limit)))
###       ("_position" \<rho>))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>)))
###       ("_applC" ("_position" limit) ("_position" \<rho>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>))))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.image"
###       ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" limit) ("_position" \<rho>)))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>)))
###         ("_position" limit)))
###     ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image"
###         ("\<^const>DTS.embed_transition" ("_position" x))
###         ("_applC" ("_position" limit) ("_position" \<rho>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>DTS.embed_transition"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 679 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" k) ("_position" S)))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" k))
###             ("_position" S))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.998s elapsed time, 3.736s cpu time, 1.672s GC time
### theory "Draft.DTS"
### 2.402s elapsed time, 9.064s cpu time, 3.459s GC time
Loading theory "Draft.Rabin" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
Loading theory "Draft.Semi_Mojmir" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir")
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
locale semi_mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.Rabin"
### 0.520s elapsed time, 2.056s cpu time, 0.183s GC time
Found termination order: "{}"
### theory "Draft.LTL_FGXU"
### 5.487s elapsed time, 20.977s cpu time, 5.421s GC time
Loading theory "Draft.af" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Logical_Characterization")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  val_bool_expr :: "'a bool_expr => ('a => bool) => bool"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers"
### 4.192s elapsed time, 15.761s cpu time, 4.216s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl")
locale semi_mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
  assumes "semi_mojmir \<Sigma> \<delta> q\<^sub>0 w"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif_alist ::
    "('a * bool) list => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping"
### 0.321s elapsed time, 1.009s cpu time, 0.088s GC time
Loading theory "Draft.LTL_Impl" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Semi_Mojmir"
### 1.707s elapsed time, 5.821s cpu time, 0.567s GC time
Loading theory "Draft.Mojmir" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
Found termination order: "size <*mlex*> {}"
locale mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.af"
### 1.596s elapsed time, 5.037s cpu time, 0.485s GC time
Loading theory "Draft.Logical_Characterization" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin")
locale mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir \<Sigma> \<delta> q\<^sub>0 w F"
### theory "Draft.Mojmir"
### 0.656s elapsed time, 2.022s cpu time, 0.238s GC time
Loading theory "Draft.Mojmir_Rabin" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale mojmir_to_rabin_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Logical_Characterization"
### 0.828s elapsed time, 2.638s cpu time, 0.279s GC time
locale mojmir_to_rabin
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir_to_rabin \<Sigma> \<delta> q\<^sub>0 w F"
### theory "Draft.Mojmir_Rabin"
### 0.722s elapsed time, 2.283s cpu time, 0.265s GC time
Loading theory "Draft.Mojmir_Rabin_Impl" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl")
Loading theory "Draft.LTL_Rabin" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl")
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale ltl_FG_to_rabin_def
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
Found termination order: "{}"
### theory "Draft.LTL_Impl"
### 2.083s elapsed time, 6.474s cpu time, 0.780s GC time
Loading theory "Draft.af_Impl" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl")
Found termination order: "{}"
Found termination order: "{}"
locale ltl_FG_to_rabin
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
  assumes "ltl_FG_to_rabin \<Sigma> \<G> w"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 340 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ltl_FG_to_generalized_rabin)
###       ("_position" \<phi>))
###     ("_tuple"
###       ("_applC" ("\<^const>DTS.product")
###         ("_lambda" ("_position" \<chi>)
###           ("_applC" ("_position" ltl_FG_to_rabin_def.\<delta>\<^sub>R)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_applC" ("_position" theG) ("_position" \<chi>))))))
###       ("_tuple_args"
###         ("_applC" ("\<^const>LTL_Rabin.product_initial_state")
###           ("_cargs"
###             ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###               ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>)))
###             ("_lambda" ("_position" \<chi>)
###               ("_applC" ("_position" ltl_FG_to_rabin_def.q\<^sub>R)
###                 ("_applC" ("_position" theG) ("_position" \<chi>))))))
###         ("_tuple_arg"
###           ("_Setcompr"
###             ("_applC" ("_position" combine_pairs')
###               ("_Setcompr"
###                 ("_applC" ("_position" embed_pair)
###                   ("_cargs" ("_position" \<chi>)
###                     ("_applC" ("_position" ltl_FG_to_rabin_def.Acc\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_cargs"
###                           ("_applC" ("_position" theG) ("_position" \<chi>))
###                           ("_cargs" ("_position" \<G>)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>))))))))
###                 ("_position" \<chi>)
###                 ("\<^const>Set.member" ("_position" \<chi>)
###                   ("_position" \<G>))))
###             ("_idts" ("_position" \<G>) ("_position" \<pi>))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq" ("_position" \<G>)
###                 ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))
###                   ("_position" \<G>))
###                 ("\<^const>HOL.All_binder" ("_position" \<chi>)
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" \<pi>) ("_position" \<chi>))
###                     ("_applC"
###                       ("_position" ltl_FG_to_rabin_def.max_rank\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_applC" ("_position" theG)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ltl_FG_to_generalized_rabin)
###       ("_position" \<phi>))
###     ("_tuple"
###       ("_applC" ("\<^const>DTS.product")
###         ("_lambda" ("_position" \<chi>)
###           ("_applC" ("_position" ltl_FG_to_rabin_def.\<delta>\<^sub>R)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_applC" ("_position" theG) ("_position" \<chi>))))))
###       ("_tuple_args"
###         ("_applC" ("\<^const>local.product_initial_state")
###           ("_cargs"
###             ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###               ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>)))
###             ("_lambda" ("_position" \<chi>)
###               ("_applC" ("_position" ltl_FG_to_rabin_def.q\<^sub>R)
###                 ("_applC" ("_position" theG) ("_position" \<chi>))))))
###         ("_tuple_arg"
###           ("_Setcompr"
###             ("_applC" ("_position" combine_pairs')
###               ("_Setcompr"
###                 ("_applC" ("_position" embed_pair)
###                   ("_cargs" ("_position" \<chi>)
###                     ("_applC" ("_position" ltl_FG_to_rabin_def.Acc\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_cargs"
###                           ("_applC" ("_position" theG) ("_position" \<chi>))
###                           ("_cargs" ("_position" \<G>)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>))))))))
###                 ("_position" \<chi>)
###                 ("\<^const>Set.member" ("_position" \<chi>)
###                   ("_position" \<G>))))
###             ("_idts" ("_position" \<G>) ("_position" \<pi>))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq" ("_position" \<G>)
###                 ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))
###                   ("_position" \<G>))
###                 ("\<^const>HOL.All_binder" ("_position" \<chi>)
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" \<pi>) ("_position" \<chi>))
###                     ("_applC"
###                       ("_position" ltl_FG_to_rabin_def.max_rank\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_applC" ("_position" theG)
###                           ("_position" \<chi>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Dropping global mixfix syntax: "ltl_FG_to_generalized_rabin" (\<open>\<P>\<close>)
Found termination order: "{}"
locale ltl_to_rabin_base_def
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
### Ambiguous input (line 569 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("_applC"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>)
###         ("\<^const>DTS.product"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta)
###     ("_cargs"
###       ("\<^const>DTS.simple_product"
###         ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###         ("\<^const>DTS.product"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.simple_product"
###     ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###       ("_position" \<delta>))
###     ("_applC" ("\<^const>DTS.product")
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta)
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("\<^const>Product_Type.Times" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("\<^const>DTS.simple_product" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" delta) ("_position" \<Sigma>))
###         ("_position" \<delta>))
###       ("\<^const>DTS.product"))
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" semi_mojmir_def.step)
###           ("_cargs" ("_position" \<Sigma>) ("_position" \<delta>\<^sub>M)))
###         ("_position" q\<^sub>0\<^sub>M))
###       ("_position" theG))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 583 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 589 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_inf)
###       ("_cargs" ("_position" \<pi>) ("_position" \<chi>)))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("_applC" ("_position" mojmir_to_rabin_def.succeed\<^sub>R)
###               ("_cargs" ("_position" \<delta>\<^sub>M)
###                 ("_cargs"
###                   ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                     ("_applC" ("_position" theG) ("_position" \<chi>)))
###                   ("_cargs"
###                     ("_Coll" ("_position" q)
###                       ("_applC" ("_position" dom)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" \<pi>) ("_position" q))))
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>)
###                         ("_position" \<chi>)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_inf)
###       ("_cargs" ("_position" \<pi>) ("_position" \<chi>)))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("_applC" ("_position" mojmir_to_rabin_def.succeed\<^sub>R)
###               ("_cargs" ("_position" \<delta>\<^sub>M)
###                 ("_cargs"
###                   ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                     ("_applC" ("_position" theG) ("_position" \<chi>)))
###                   ("_cargs"
###                     ("_Coll" ("_position" q)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>)
###                         ("_position" \<chi>)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Mojmir_Rabin_Impl"
### 2.197s elapsed time, 6.695s cpu time, 0.775s GC time
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale ltl_to_rabin_base
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes
    "ltl_to_rabin_base \<delta> \<delta>\<^sub>M q\<^sub>0 q\<^sub>0\<^sub>M
      M_fin \<Sigma> w"
### Ambiguous input (line 707 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("_Coll" ("_position" q)
###   ("_applC" ("_position" dom)
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" \<pi>)
###       ("_position" q))))
### ("_Coll" ("_position" q)
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("_applC" ("_position" dom) ("_position" \<pi>)) ("_position" q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 765 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" \<delta>\<^sub>M)
###               ("_cargs"
###                 ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<A>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" \<delta>\<^sub>M)
###               ("_cargs"
###                 ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<A>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 849 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 162 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q))))))
###               ("_position" S))
###             ("_position" \<phi>')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###           ("\<^const>HOL.All_binder" ("_position" S)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q))))))
###               ("_position" S)))
###           ("_position" \<phi>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("_applC" ("_position" Abs) ("_position" \<chi>)))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_position" q))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" Abs) ("_position" \<chi>))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" Abs) ("_position" \<chi>))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_position" Abs))
###                   ("_position" \<chi>))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_position" Abs))
###                 ("_position" \<chi>))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_position" q))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("_applC" ("_position" Abs) ("_position" \<chi>)))
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_position" S)))
###                   ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                 ("_cargs" ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" q))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                     ("\<^const>HOL.All_binder" ("_position" q)
###                       ("\<^const>HOL.implies"
###                         ("_Ex_greater_eq" ("_position" j)
###                           ("_applC" ("_position" the)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>)))
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" the)
###                               ("_cargs"
###                                 ("_applC" ("_position" m)
###                                   ("_position" \<chi>))
###                                 ("_position" q)))
###                             ("_applC" ("_position" Some) ("_position" j))))
###                         ("_position" S)))
###                     ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                   ("_cargs" ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" q)))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ltl_to_rabin_af
  fixes \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes "ltl_to_rabin_af \<Sigma> w"
Found termination order: "{}"
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_to_generalized_rabin_af ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> F G ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>)
     ?w
### theory "Draft.LTL_Rabin"
### 3.591s elapsed time, 9.830s cpu time, 1.289s GC time
Loading theory "Draft.LTL_Rabin_Unfold_Opt" (required by "Draft.LTL_Rabin_ImplMoreTemplates" via "Draft.LTL_Rabin_Impl")
locale ltl_FG_to_rabin_opt_def
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
Found termination order: "size <*mlex*> {}"
locale ltl_FG_to_rabin_opt
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
  assumes "ltl_FG_to_rabin_opt \<Sigma> \<G> w"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.af_Impl"
### 16.568s elapsed time, 48.366s cpu time, 36.843s GC time
### Ambiguous input (line 298 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 3240 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###             ("\<^const>HOL.implies"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("\<^const>HOL.conj"
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("_position" Abs)
###                         ("_cargs"
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("\<^const>HOL.conj" ("_position" \<chi>)
###                               ("_position" S))
###                             ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                           ("_applC" ("_position" dom)
###                             ("_position" \<pi>)))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_applC" ("\<^const>af.step_abs")
###                             ("_cargs" ("_position" q)
###                               ("_position" \<nu>)))))))))
###               ("_position" S))
###             ("_applC" ("\<^const>af.step_abs")
###               ("_cargs" ("_position" \<phi>') ("_position" \<nu>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###           ("\<^const>HOL.All_binder" ("_position" S)
###             ("\<^const>HOL.implies"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("\<^const>HOL.conj"
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("_position" Abs)
###                         ("_cargs"
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("\<^const>HOL.conj" ("_position" \<chi>)
###                               ("_position" S))
###                             ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                           ("_applC" ("_position" dom)
###                             ("_position" \<pi>)))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_applC" ("\<^const>af.step_abs")
###                             ("_cargs" ("_position" q)
###                               ("_position" \<nu>)))))))))
###               ("_position" S)))
###           ("_applC" ("\<^const>af.step_abs")
###             ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_applC" ("_position" Abs)
###                       ("_cargs"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("\<^const>HOL.conj" ("_position" \<chi>)
###                             ("_position" S))
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs)
###                     ("_cargs"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("\<^const>HOL.conj" ("_position" \<chi>)
###                           ("_position" S))
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" Abs) ("_position" \<chi>))
###                           ("_position" S))
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" Abs) ("_position" \<chi>))
###                         ("_position" S))
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_applC" ("_position" dom) ("_position" \<pi>))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" Abs) ("_position" \<chi>))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" Abs) ("_position" \<chi>))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("\<^const>HOL.conj"
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_Ball" ("_position" \<chi>)
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" S))
###                         ("_position" Abs))
###                       ("_position" \<chi>))
###                     ("_position" S))
###                   ("_applC" ("\<^const>LTL_FGXU.eval\<^sub>G_abs")
###                     ("_applC" ("_position" dom) ("_position" \<pi>))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" Abs) ("_position" \<chi>))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("\<^const>LTL_FGXU.eval\<^sub>G_abs")
###                         ("_applC" ("_position" dom) ("_position" \<pi>))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
locale ltl_to_rabin_af_unf
  fixes \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes "ltl_to_rabin_af_unf \<Sigma> w"
### Ambiguous input (line 317 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("\<^const>af.af_G_letter_abs")
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<A>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("\<^const>af.af_G_letter_abs")
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<A>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<UU>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<UU>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" af_G_letter_abs_opt)
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" Unf\<^sub>G)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<UU>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<UU>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<UU>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" af_G_letter_abs_opt)
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" Unf\<^sub>G)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<UU>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> F G ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_to_generalized_rabin_af ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R
     (ltl_to_generalized_rabin_af\<^sub>\<UU> ?\<Sigma> ?\<phi>) ?w
### theory "Draft.LTL_Rabin_Unfold_Opt"
### 15.451s elapsed time, 43.816s cpu time, 36.301s GC time
Loading theory "Draft.LTL_Rabin_Impl" (required by "Draft.LTL_Rabin_ImplMoreTemplates")
locale ltl_to_rabin_base_code_def
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and
    M_fin\<^sub>C ::
      "'a ltl
       => ('a ltl, nat) mapping
          => ('a ltl_prop_equiv_quotient *
              ('a ltl, 'a ltl_prop_equiv_quotient list) mapping) *
             'a set *
             'a ltl_prop_equiv_quotient *
             ('a ltl, 'a ltl_prop_equiv_quotient list) mapping
             => bool"
### Ambiguous input (line 25 of "$AFP/LTL_to_DRA/Impl/LTL_Rabin_Impl.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("_applC"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>)
###         ("\<^const>DTS.product_abs"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta\<^sub>C)
###     ("_cargs"
###       ("\<^const>DTS.simple_product"
###         ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###         ("\<^const>DTS.product_abs"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.simple_product"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###       ("_position" \<delta>))
###     ("_applC" ("\<^const>DTS.product_abs")
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta\<^sub>C)
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("\<^const>Product_Type.Times" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("\<^const>DTS.simple_product" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###         ("_position" \<delta>))
###       ("\<^const>DTS.product_abs"))
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" nxt)
###           ("_cargs" ("_position" \<Sigma>) ("_position" \<delta>\<^sub>M)))
###         ("_position" q\<^sub>0\<^sub>M))
###       ("_position" theG))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale ltl_to_rabin_base_code
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
    and
    M_fin\<^sub>C ::
      "'a ltl
       => ('a ltl, nat) mapping
          => ('a ltl_prop_equiv_quotient *
              ('a ltl, 'a ltl_prop_equiv_quotient list) mapping) *
             'a set *
             'a ltl_prop_equiv_quotient *
             ('a ltl, 'a ltl_prop_equiv_quotient list) mapping
             => bool"
  assumes
    "ltl_to_rabin_base_code \<delta> \<delta>\<^sub>M q\<^sub>0
      q\<^sub>0\<^sub>M M_fin \<Sigma> w M_fin\<^sub>C"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.LTL_Rabin_Impl"
### 1.511s elapsed time, 1.640s cpu time, 0.169s GC time
Loading theory "Draft.LTL_Rabin_ImplMoreTemplates"
val templateLemmas =
   [("LTL_Rabin_Impl.ltl_to_generalized_rabin\<^sub>C_af_correct",
     "range ?w <= set ?\<Sigma> ==>
      ?w \<Turnstile> ?\<phi> =
      accept\<^sub>G\<^sub>R_LTS
       (ltl_to_generalized_rabin\<^sub>C_af ?\<Sigma> ?\<phi>) ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("LTL_Rabin_Impl.ltl_to_generalized_rabin\<^sub>C_af\<^sub>\<UU>_correct",
     "range ?w <= set ?\<Sigma> ==>
      ?w \<Turnstile> ?\<phi> =
      accept\<^sub>G\<^sub>R_LTS
       (ltl_to_generalized_rabin\<^sub>C_af\<^sub>\<UU> ?\<Sigma> ?\<phi>)
       ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("LTL_Rabin_Impl.M_fin\<^sub>C_af_correct",
     "[| ?t : reach\<^sub>t ?\<Sigma>
               (ltl_to_rabin_base_code_def.delta\<^sub>C \<up>af
                 \<up>af\<^sub>G Abs ?\<Sigma>)
               (ltl_to_rabin_base_code_def.initial\<^sub>C Abs Abs ?\<phi>);
         dom ?\<pi> <= \<^bold>G ?\<phi> |]
      ==> (abstract_transition ?t : M_fin ?\<pi>) =
          M_fin\<^sub>C_af ?\<phi> (mapping.Mapping ?\<pi>) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_hole 11),
                      template_hole 10),
                    template_var 2)),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 10),
                    template_hole 10),
                  template_var 1)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 3)))),
    ("LTL_Rabin_Impl.M_fin\<^sub>C_af\<^sub>\<UU>_correct",
     "[| ?t : reach\<^sub>t ?\<Sigma>
               (ltl_to_rabin_base_code_def.delta\<^sub>C \<up>af\<^sub>\<UU>
                 \<up>af\<^sub>G\<^sub>\<UU> (Abs o Unf\<^sub>G) ?\<Sigma>)
               (ltl_to_rabin_base_code_def.initial\<^sub>C (Abs o Unf)
                 (Abs o Unf\<^sub>G) ?\<phi>);
         dom ?\<pi> <= \<^bold>G ?\<phi> |]
      ==> (abstract_transition ?t : M\<^sub>\<UU>_fin ?\<pi>) =
          M_fin\<^sub>C_af\<^sub>\<UU> ?\<phi> (mapping.Mapping ?\<pi>) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_hole 15),
                        template_hole 14),
                      template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_hole 11)),
                    template_var 2)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_hole 9)),
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_hole 11)),
                  template_var 1)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 3)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.LTL_Rabin_ImplMoreTemplates"
### 0.471s elapsed time, 0.653s cpu time, 0.076s GC time
val it = (): unit
