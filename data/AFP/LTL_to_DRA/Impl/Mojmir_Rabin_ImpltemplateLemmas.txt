   [("Mojmir_Rabin_Impl.rk_eq_index_option",
     "rk ?xs ?x = index_option 0 ?xs ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Mojmir_Rabin_Impl.nxt_run_distinct",
     "distinct
       (run (nxt ?\<Sigma> ?\<Delta> ?q\<^sub>0) (init ?q\<^sub>0) ?w ?n)",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2)),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0))
         )),
    ("Mojmir_Rabin_Impl.rk_facts", "(?x : set ?xs) = (rk ?xs ?x ~= None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Mojmir_Rabin_Impl.rk_bounded",
     "rk ?xs ?x = Some ?i ==> ?i < length ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 2)))),
    ("Mojmir_Rabin_Impl.rk_facts",
     "(?x : set ?xs) = (EX i. rk ?xs ?x = Some i)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Mojmir_Rabin_Impl.rk_split",
     "?y ~: set ?xs ==> rk (?xs @ ?y # ?zs) ?y = Some (length ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Mojmir_Rabin_Impl.nxt_run_sink_free",
     "?q : set (run (nxt ?\<Sigma> ?\<delta> ?q\<^sub>0) (init ?q\<^sub>0)
                 ?w ?n) ==>
      ~ semi_mojmir_def.sink ?\<Sigma> ?\<delta> ?q\<^sub>0 ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 4),
                            template_var 3),
                          template_var 2)),
                      template_app (template_hole 2, template_var 2)),
                    template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 5)
               )
           ))),
    ("Mojmir_Rabin_Impl.drop_rk",
     "distinct ?xs ==>
      set (drop ?i ?xs) = {q. EX j>=?i. rk ?xs q = Some j}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 1)),
         template_app (template_hole 6, t_empty)))),
    ("Mojmir_Rabin_Impl.take_rk",
     "distinct ?xs ==> set (take ?i ?xs) = {q. EX j<?i. rk ?xs q = Some j}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 1)),
         template_app (template_hole 6, t_empty)))),
    ("Mojmir_Rabin_Impl.rk_split_card",
     "[| ?y ~: set ?xs; distinct ?xs |]
      ==> rk (?xs @ ?y # ?zs) ?y = Some (card (set ?xs))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 1)))))),
    ("Mojmir_Rabin_Impl.rk_split_card_takeWhile",
     "[| ?x : set ?xs; distinct ?xs |]
      ==> rk ?xs ?x = Some (card (set (takeWhile (%y. y ~= ?x) ?xs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_var 0))))))),
    ("Mojmir_Rabin_Impl.fail_filt_eq",
     "fail_filt ?\<Sigma> ?\<delta> ?q\<^sub>0 ?P (?x, ?\<nu>, ?y) =
      ((rk ?x, ?\<nu>, ?y')
       : mojmir_to_rabin_def.fail\<^sub>R ?\<Sigma> ?\<delta> ?q\<^sub>0
          {x. ?P x})",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_var 5),
           template_app (template_hole 0, t_empty))))),
    ("Mojmir_Rabin_Impl.merge_filt_eq",
     "merge_filt ?\<delta> ?q\<^sub>0 ?P ?i (?x, ?\<nu>, ?y) =
      ((rk ?x, ?\<nu>, ?y')
       : mojmir_to_rabin_def.merge\<^sub>R ?\<delta> ?q\<^sub>0 {x. ?P x}
          ?i)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_app (template_hole 0, t_empty)),
           template_var 4)))),
    ("Mojmir_Rabin_Impl.succeed_filt_eq",
     "succeed_filt ?\<delta> ?q\<^sub>0 ?P ?i (?x, ?\<nu>, ?y) =
      ((rk ?x, ?\<nu>, ?y')
       : mojmir_to_rabin_def.succeed\<^sub>R ?\<delta> ?q\<^sub>0 {x. ?P x}
          ?i)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_app (template_hole 0, t_empty)),
           template_var 4)))),
    ("Mojmir_Rabin_Impl.nxt_run_reverse_step",
     "[| ?q : set (run (nxt ?\<Sigma> ?\<delta> ?q\<^sub>0)
                    (init ?q\<^sub>0) ?w (Suc ?n));
         ?q ~= ?q\<^sub>0 |]
      ==> EX q':set (run (nxt ?\<Sigma> ?\<delta> ?q\<^sub>0)
                      (init ?q\<^sub>0) ?w ?n).
             ?\<delta> q' (?w ?n) = ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 4),
                            template_var 3),
                          template_var 2)),
                      template_app (template_hole 4, template_var 2)),
                    template_var 1),
                  template_app (template_hole 3, template_var 0))))
            ),
        template_negation
         (template_equation (template_var 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app (template_hole 5, template_var 4),
                             template_var 3),
                           template_var 2)),
                       template_app (template_hole 4, template_var 2)),
                     template_var 1),
                   template_var 0))),
             t_empty)
           )))]
