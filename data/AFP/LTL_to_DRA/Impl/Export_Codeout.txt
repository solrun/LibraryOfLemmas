Loading theory "Draft.Map2" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl")
Loading theory "HOL-Library.AList" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "HOL-Library.Code_Target_Numeral")
### theory "Draft.Map2"
### 0.046s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.060s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### theory "HOL-Library.Code_Target_Int"
### 0.153s elapsed time, 0.633s cpu time, 0.027s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Compat" via "LTL.LTL" via "HOL-Library.Omega_Words_Fun")
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.553s cpu time, 0.027s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
### theory "HOL-Library.Code_Target_Nat"
### 0.179s elapsed time, 0.695s cpu time, 0.027s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Code_Target_Numeral"
### 0.149s elapsed time, 0.584s cpu time, 0.063s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.271s elapsed time, 1.069s cpu time, 0.063s GC time
Loading theory "Draft.Preliminaries2" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
Found termination order: "{}"
### theory "Draft.Preliminaries2"
### 0.100s elapsed time, 0.393s cpu time, 0.090s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Compat" via "LTL.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.357s elapsed time, 1.408s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.453s elapsed time, 1.774s cpu time, 0.286s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Omega_Words_Fun"
### 0.325s elapsed time, 1.280s cpu time, 0.196s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Compat")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.AList"
### 1.237s elapsed time, 4.733s cpu time, 0.976s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS" via "Draft.Mapping2")
### theory "HOL-Library.Set_Algebras"
### 0.410s elapsed time, 1.476s cpu time, 0.600s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.158s elapsed time, 4.405s cpu time, 1.095s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting" via "HOL-Library.Extended_Nat")
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Mapping"
### 1.168s elapsed time, 4.597s cpu time, 0.616s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.215s elapsed time, 4.781s cpu time, 0.588s GC time
Loading theory "Draft.Mapping2" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Mapping2"
### 0.387s elapsed time, 1.513s cpu time, 0.213s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.118s elapsed time, 8.319s cpu time, 1.100s GC time
Loading theory "Draft.Templates" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.AList_Mapping"
### 0.119s elapsed time, 0.462s cpu time, 0.061s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.340s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Export_CodeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif :: "('a, bool) mapping => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale reduced_bdt_checkers
  fixes ifex_of :: "'b => 'a ifex"
    and val :: "'b => ('a => bool) => bool"
  assumes "reduced_bdt_checkers ifex_of val"
### theory "HOL-Library.Countable_Set"
### 0.481s elapsed time, 1.893s cpu time, 0.200s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
### theory "HOL-Library.BigO"
### 1.229s elapsed time, 4.640s cpu time, 1.600s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Export_CodeMoreTemplates")
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
Found termination order: "{}"
### theory "Draft.ExtrEqs"
### 1.080s elapsed time, 4.080s cpu time, 1.582s GC time
Loading theory "KBPs.DFS" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir" via "Draft.DTS")
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
### theory "KBPs.DFS"
### 0.220s elapsed time, 0.857s cpu time, 0.062s GC time
Loading theory "Draft.DTS" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir" via "Draft.Semi_Mojmir")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.LTL_FGXU"
### 5.335s elapsed time, 20.449s cpu time, 5.054s GC time
Loading theory "LTL.LTL" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Compat")
consts
  val_bool_expr :: "'a bool_expr => ('a => bool) => bool"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers"
### 4.081s elapsed time, 15.664s cpu time, 3.958s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl" via "Draft.LTL_Impl")
### Ambiguous input (line 384 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###       ("_position" \<delta>\<^sub>2))
###     ("_lambda"
###       ("_pttrns"
###         ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###         ("_position" \<nu>))
###       ("_tuple"
###         ("_applC" ("_position" \<delta>\<^sub>1)
###           ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###         ("_tuple_arg"
###           ("_applC" ("_position" \<delta>\<^sub>2)
###             ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>simple_product" ("_position" \<delta>\<^sub>1)
###     ("\<^const>HOL.eq" ("_position" \<delta>\<^sub>2)
###       ("_lambda"
###         ("_pttrns"
###           ("_pattern" ("_position" q\<^sub>1) ("_position" q\<^sub>2))
###           ("_position" \<nu>))
###         ("_tuple"
###           ("_applC" ("_position" \<delta>\<^sub>1)
###             ("_cargs" ("_position" q\<^sub>1) ("_position" \<nu>)))
###           ("_tuple_arg"
###             ("_applC" ("_position" \<delta>\<^sub>2)
###               ("_cargs" ("_position" q\<^sub>2) ("_position" \<nu>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 388 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" finite)
###     ("_applC" ("_position" reach)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs"
###           ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###             ("_position" \<delta>\<^sub>2))
###           ("_tuple" ("_position" q\<^sub>1)
###             ("_tuple_arg" ("_position" q\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif_alist ::
    "('a * bool) list => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping"
### 0.369s elapsed time, 1.451s cpu time, 0.156s GC time
Loading theory "Draft.LTL_Impl" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.af_Impl")
Found termination order: "{}"
### theory "HOL-Library.Countable_Complete_Lattices"
### 3.001s elapsed time, 11.458s cpu time, 3.368s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting" via "HOL-Library.Extended_Nat")
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 512 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 543 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 570 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>Product_Type.Times" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### ("\<^const>Pure.eq" ("_position" \<rho>)
###   ("_applC" ("_position" run\<^sub>t)
###     ("_cargs"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>\<^sub>1)
###         ("_position" \<delta>\<^sub>2))
###       ("_cargs"
###         ("_tuple" ("_position" q\<^sub>1)
###           ("_tuple_arg" ("_position" q\<^sub>2)))
###         ("_position" w)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 614 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_transition" ("_position" x))
###       ("_tuple" ("_position" q)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" q')))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q')))))
###       ("_Setcompr"
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))
###         ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" q'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" q)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" q'))))))
###     ("_Setcompr"
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>) ("_tuple_arg" ("_position" m'))))
###       ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" m') ("_position" x))
###           ("_applC" ("_position" Some) ("_position" q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 618 of "$AFP/LTL_to_DRA/DTS.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_transition" ("_position" x))
###       ("_tuple" ("_position" m)
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg" ("_position" m')))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m')))))
###       ("_tuple"
###         ("_applC" ("_position" the)
###           ("_applC" ("_position" m) ("_position" x)))
###         ("_tuple_args" ("_position" \<nu>)
###           ("_tuple_arg"
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" m') ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_transition"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" m)
###           ("_tuple_args" ("_position" \<nu>)
###             ("_tuple_arg" ("_position" m'))))))
###     ("_tuple"
###       ("_applC" ("_position" the)
###         ("_applC" ("_position" m) ("_position" x)))
###       ("_tuple_args" ("_position" \<nu>)
###         ("_tuple_arg"
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" m') ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 622 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S)))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>DTS.embed_transition"
###               ("\<^const>Set.image" ("_position" x) ("_position" S')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>embed_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S))))
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Complete_Lattices.Union")
###             ("\<^const>Set.image"
###               ("\<^const>DTS.embed_transition" ("_position" x))
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>embed_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>DTS.embed_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S))))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>embed_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("_applC" ("\<^const>Complete_Lattices.Union")
###         ("\<^const>Set.image"
###           ("\<^const>DTS.embed_transition" ("_position" x))
###           ("_position" S)))
###       ("_tuple_arg"
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" x))
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 626 of "$AFP/LTL_to_DRA/DTS.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S)))
###         ("_tuple_arg"
###           ("\<^const>Set.image"
###             ("\<^const>DTS.project_transition" ("_position" x))
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>project_pair"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###       ("_tuple"
###         ("\<^const>Set.image"
###           ("\<^const>DTS.project_transition" ("_position" x))
###           ("_position" S))
###         ("_tuple_arg"
###           ("\<^const>DTS.project_transition"
###             ("\<^const>Set.image" ("_position" x) ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>project_pair"
###       ("_applC" ("_position" x)
###         ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S')))))
###     ("_tuple"
###       ("\<^const>Set.image"
###         ("\<^const>DTS.project_transition" ("_position" x)) ("_position" S))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^fixed>project_pair" ("_position" x))
###       ("_tuple" ("_position" S) ("_tuple_arg" ("_position" S'))))
###     ("_tuple"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" S)))
###       ("_tuple_arg"
###         ("\<^const>DTS.project_transition"
###           ("\<^const>Set.image" ("_position" x) ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 638 of "$AFP/LTL_to_DRA/DTS.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>) ("_position" i)))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i)))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>) ("_position" i))))
###     ("_applC" ("_position" \<rho>') ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" x)
###           ("_applC" ("_position" \<rho>) ("_position" i)))
###         ("_position" \<rho>')))
###     ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 639 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("_applC" ("\<^const>DTS.embed_transition" ("_position" x))
###       ("_applC" ("_position" \<rho>') ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" \<rho>) ("_position" i))
###     ("\<^const>DTS.embed_transition"
###       ("_applC" ("_position" x)
###         ("_applC" ("_position" \<rho>') ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 648 of "$AFP/LTL_to_DRA/DTS.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>DTS.project_transition"
###         ("\<^const>Set.image" ("_position" x) ("_position" limit)))
###       ("_position" \<rho>))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.project_transition"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>)))
###       ("_applC" ("_position" limit) ("_position" \<rho>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>Set.image" ("_position" x)
###         ("_applC" ("_position" limit) ("_position" \<rho>))))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.image"
###       ("\<^const>DTS.project_transition" ("_position" x))
###       ("_applC" ("_position" limit) ("_position" \<rho>)))
###     ("_applC" ("_position" limit) ("_position" \<rho>'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.project_transition"
###       ("\<^const>HOL.eq"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>)))
###         ("_position" limit)))
###     ("_position" \<rho>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image"
###         ("\<^const>DTS.embed_transition" ("_position" x))
###         ("_applC" ("_position" limit) ("_position" \<rho>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" limit) ("_position" \<rho>))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>DTS.embed_transition"
###         ("\<^const>Set.image" ("_position" x)
###           ("_applC" ("_position" limit) ("_position" \<rho>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 679 of "$AFP/LTL_to_DRA/DTS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>DTS.embed_transition"
###             ("\<^const>Set.image" ("_position" k) ("_position" S)))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>))
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("\<^const>DTS.embed_transition" ("_position" k))
###             ("_position" S))))
###       ("\<^const>Set.empty"))
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" limit) ("_position" \<rho>'))
###         ("_position" S))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DTS"
### 1.583s elapsed time, 6.231s cpu time, 0.687s GC time
Loading theory "Draft.Rabin" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
### theory "HOL-Library.Order_Continuity"
### 0.677s elapsed time, 2.648s cpu time, 0.362s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "LTL.Rewriting")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
### theory "Draft.Rabin"
### 0.540s elapsed time, 2.110s cpu time, 0.259s GC time
Loading theory "Draft.Semi_Mojmir" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.Mojmir")
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
locale semi_mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
### theory "HOL-Library.Extended_Nat"
### 0.747s elapsed time, 2.921s cpu time, 0.337s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin" via "Draft.List2")
Found termination order: "{}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "{}"
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.432s elapsed time, 1.688s cpu time, 0.206s GC time
Loading theory "Draft.List2" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
locale semi_mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
  assumes "semi_mojmir \<Sigma> \<delta> q\<^sub>0 w"
Found termination order: "length <*mlex*> {}"
### theory "Draft.LTL_Impl"
### 2.538s elapsed time, 9.913s cpu time, 1.259s GC time
### theory "Draft.List2"
### 0.609s elapsed time, 2.368s cpu time, 0.354s GC time
Loading theory "Draft.af" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Logical_Characterization")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Semi_Mojmir"
### 1.849s elapsed time, 6.905s cpu time, 0.914s GC time
Loading theory "Draft.Mojmir" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin" via "Draft.Mojmir_Rabin")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale mojmir_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
locale mojmir
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir \<Sigma> \<delta> q\<^sub>0 w F"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Mojmir"
### 0.675s elapsed time, 2.068s cpu time, 0.289s GC time
Loading theory "Draft.Mojmir_Rabin" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.af"
### 1.684s elapsed time, 5.422s cpu time, 0.718s GC time
Loading theory "Draft.Logical_Characterization" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl" via "Draft.LTL_Rabin")
Loading theory "Draft.af_Impl" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl")
locale mojmir_to_rabin_def
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale mojmir_to_rabin
  fixes \<Sigma> :: "'a set"
    and \<delta> :: "'b => 'a => 'b"
    and q\<^sub>0 :: "'b"
    and w :: "nat => 'a"
    and F :: "'b set"
  assumes "mojmir_to_rabin \<Sigma> \<delta> q\<^sub>0 w F"
### theory "Draft.Mojmir_Rabin"
### 0.815s elapsed time, 2.845s cpu time, 0.370s GC time
Loading theory "Draft.Mojmir_Rabin_Impl" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Logical_Characterization"
### 1.897s elapsed time, 6.806s cpu time, 3.387s GC time
Loading theory "Draft.LTL_Rabin" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl")
Found termination order: "size <*mlex*> {}"
locale ltl_FG_to_rabin_def
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
Found termination order: "size <*mlex*> {}"
locale ltl_FG_to_rabin
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
  assumes "ltl_FG_to_rabin \<Sigma> \<G> w"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 340 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ltl_FG_to_generalized_rabin)
###       ("_position" \<phi>))
###     ("_tuple"
###       ("_applC" ("\<^const>DTS.product")
###         ("_lambda" ("_position" \<chi>)
###           ("_applC" ("_position" ltl_FG_to_rabin_def.\<delta>\<^sub>R)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_applC" ("_position" theG) ("_position" \<chi>))))))
###       ("_tuple_args"
###         ("_applC" ("\<^const>LTL_Rabin.product_initial_state")
###           ("_cargs"
###             ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###               ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>)))
###             ("_lambda" ("_position" \<chi>)
###               ("_applC" ("_position" ltl_FG_to_rabin_def.q\<^sub>R)
###                 ("_applC" ("_position" theG) ("_position" \<chi>))))))
###         ("_tuple_arg"
###           ("_Setcompr"
###             ("_applC" ("_position" combine_pairs')
###               ("_Setcompr"
###                 ("_applC" ("_position" embed_pair)
###                   ("_cargs" ("_position" \<chi>)
###                     ("_applC" ("_position" ltl_FG_to_rabin_def.Acc\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_cargs"
###                           ("_applC" ("_position" theG) ("_position" \<chi>))
###                           ("_cargs" ("_position" \<G>)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>))))))))
###                 ("_position" \<chi>)
###                 ("\<^const>Set.member" ("_position" \<chi>)
###                   ("_position" \<G>))))
###             ("_idts" ("_position" \<G>) ("_position" \<pi>))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq" ("_position" \<G>)
###                 ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))
###                   ("_position" \<G>))
###                 ("\<^const>HOL.All_binder" ("_position" \<chi>)
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" \<pi>) ("_position" \<chi>))
###                     ("_applC"
###                       ("_position" ltl_FG_to_rabin_def.max_rank\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_applC" ("_position" theG)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ltl_FG_to_generalized_rabin)
###       ("_position" \<phi>))
###     ("_tuple"
###       ("_applC" ("\<^const>DTS.product")
###         ("_lambda" ("_position" \<chi>)
###           ("_applC" ("_position" ltl_FG_to_rabin_def.\<delta>\<^sub>R)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_applC" ("_position" theG) ("_position" \<chi>))))))
###       ("_tuple_args"
###         ("_applC" ("\<^const>local.product_initial_state")
###           ("_cargs"
###             ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###               ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>)))
###             ("_lambda" ("_position" \<chi>)
###               ("_applC" ("_position" ltl_FG_to_rabin_def.q\<^sub>R)
###                 ("_applC" ("_position" theG) ("_position" \<chi>))))))
###         ("_tuple_arg"
###           ("_Setcompr"
###             ("_applC" ("_position" combine_pairs')
###               ("_Setcompr"
###                 ("_applC" ("_position" embed_pair)
###                   ("_cargs" ("_position" \<chi>)
###                     ("_applC" ("_position" ltl_FG_to_rabin_def.Acc\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_cargs"
###                           ("_applC" ("_position" theG) ("_position" \<chi>))
###                           ("_cargs" ("_position" \<G>)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>))))))))
###                 ("_position" \<chi>)
###                 ("\<^const>Set.member" ("_position" \<chi>)
###                   ("_position" \<G>))))
###             ("_idts" ("_position" \<G>) ("_position" \<pi>))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq" ("_position" \<G>)
###                 ("_applC" ("\<^const>LTL_FGXU.G_nested_propos")
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member"
###                   ("\<^const>LTL_FGXU.ltl.LTLGlobal" ("_position" \<phi>))
###                   ("_position" \<G>))
###                 ("\<^const>HOL.All_binder" ("_position" \<chi>)
###                   ("\<^const>Orderings.ord_class.less"
###                     ("_applC" ("_position" \<pi>) ("_position" \<chi>))
###                     ("_applC"
###                       ("_position" ltl_FG_to_rabin_def.max_rank\<^sub>R)
###                       ("_cargs" ("_position" \<Sigma>)
###                         ("_applC" ("_position" theG)
###                           ("_position" \<chi>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
### Dropping global mixfix syntax: "ltl_FG_to_generalized_rabin" (\<open>\<P>\<close>)
Found termination order: "{}"
locale ltl_to_rabin_base_def
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
### Ambiguous input (line 569 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("_applC"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>)
###         ("\<^const>DTS.product"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta)
###     ("_cargs"
###       ("\<^const>DTS.simple_product"
###         ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###         ("\<^const>DTS.product"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.simple_product"
###     ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###       ("_position" \<delta>))
###     ("_applC" ("\<^const>DTS.product")
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" semi_mojmir_def.step)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta)
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("\<^const>Product_Type.Times" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" delta) ("_position" \<Sigma>))
###     ("\<^const>DTS.simple_product" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" semi_mojmir_def.step)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" delta) ("_position" \<Sigma>))
###         ("_position" \<delta>))
###       ("\<^const>DTS.product"))
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" semi_mojmir_def.step)
###           ("_cargs" ("_position" \<Sigma>) ("_position" \<delta>\<^sub>M)))
###         ("_position" q\<^sub>0\<^sub>M))
###       ("_position" theG))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Mojmir_Rabin_Impl"
### 3.431s elapsed time, 12.647s cpu time, 4.145s GC time
Found termination order: "{}"
### Ambiguous input (line 583 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_fin)
###       ("_cargs" ("_position" \<Sigma>)
###         ("_cargs" ("_position" \<pi>) ("_position" \<chi>))))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("\<^const>Set.union"
###               ("_applC" ("_position" mojmir_to_rabin_def.fail\<^sub>R)
###                 ("_cargs" ("_position" \<Sigma>)
###                   ("_cargs" ("_position" \<delta>\<^sub>M)
###                     ("_cargs"
###                       ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                         ("_applC" ("_position" theG) ("_position" \<chi>)))
###                       ("_Coll" ("_position" q)
###                         ("_applC" ("_position" dom)
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("_position" \<pi>) ("_position" q))))))))
###               ("_applC" ("_position" mojmir_to_rabin_def.merge\<^sub>R)
###                 ("_cargs" ("_position" \<delta>\<^sub>M)
###                   ("_cargs"
###                     ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                       ("_applC" ("_position" theG) ("_position" \<chi>)))
###                     ("_cargs"
###                       ("_Coll" ("_position" q)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>)
###                           ("_position" \<chi>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 589 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_inf)
###       ("_cargs" ("_position" \<pi>) ("_position" \<chi>)))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("_applC" ("_position" mojmir_to_rabin_def.succeed\<^sub>R)
###               ("_cargs" ("_position" \<delta>\<^sub>M)
###                 ("_cargs"
###                   ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                     ("_applC" ("_position" theG) ("_position" \<chi>)))
###                   ("_cargs"
###                     ("_Coll" ("_position" q)
###                       ("_applC" ("_position" dom)
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" \<pi>) ("_position" q))))
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>)
###                         ("_position" \<chi>)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Acc_inf)
###       ("_cargs" ("_position" \<pi>) ("_position" \<chi>)))
###     ("_applC" ("\<^const>Complete_Lattices.Union")
###       ("\<^const>Set.image" ("_position" embed_transition_snd)
###         ("_applC" ("\<^const>Complete_Lattices.Union")
###           ("\<^const>Set.image"
###             ("_applC" ("_position" embed_transition) ("_position" \<chi>))
###             ("_applC" ("_position" mojmir_to_rabin_def.succeed\<^sub>R)
###               ("_cargs" ("_position" \<delta>\<^sub>M)
###                 ("_cargs"
###                   ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                     ("_applC" ("_position" theG) ("_position" \<chi>)))
###                   ("_cargs"
###                     ("_Coll" ("_position" q)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>)
###                         ("_position" \<chi>)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale ltl_to_rabin_base
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes
    "ltl_to_rabin_base \<delta> \<delta>\<^sub>M q\<^sub>0 q\<^sub>0\<^sub>M
      M_fin \<Sigma> w"
### Ambiguous input (line 707 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("_Coll" ("_position" q)
###   ("_applC" ("_position" dom)
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" \<pi>)
###       ("_position" q))))
### ("_Coll" ("_position" q)
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("_applC" ("_position" dom) ("_position" \<pi>)) ("_position" q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 765 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" \<delta>\<^sub>M)
###               ("_cargs"
###                 ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<A>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" \<delta>\<^sub>M)
###               ("_cargs"
###                 ("_applC" ("_position" q\<^sub>0\<^sub>M)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<A>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 849 of "$AFP/LTL_to_DRA/LTL_Rabin.thy") produces 162 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q))))))
###               ("_position" S))
###             ("_position" \<phi>')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###           ("\<^const>HOL.All_binder" ("_position" S)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q))))))
###               ("_position" S)))
###           ("_position" \<phi>'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("_applC" ("_position" Abs) ("_position" \<chi>)))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_position" q))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("_position" S))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" Abs) ("_position" \<chi>))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" Abs) ("_position" \<chi>))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" q))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_position" Abs))
###                   ("_position" \<chi>))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_position" q)))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_position" Abs))
###                 ("_position" \<chi>))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_position" q))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("_applC" ("_position" Abs) ("_position" \<chi>)))
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_position" S)))
###                   ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                 ("_cargs" ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" q))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                   ("_applC" ("_position" Abs) ("_position" \<chi>)))
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                     ("\<^const>HOL.All_binder" ("_position" q)
###                       ("\<^const>HOL.implies"
###                         ("_Ex_greater_eq" ("_position" j)
###                           ("_applC" ("_position" the)
###                             ("_applC" ("_position" \<pi>)
###                               ("_position" \<chi>)))
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" the)
###                               ("_cargs"
###                                 ("_applC" ("_position" m)
###                                   ("_position" \<chi>))
###                                 ("_position" q)))
###                             ("_applC" ("_position" Some) ("_position" j))))
###                         ("_position" S)))
###                     ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                   ("_cargs" ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" q)))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL.LTL"
### 21.601s elapsed time, 71.256s cpu time, 40.665s GC time
Loading theory "Draft.LTL_Compat" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code")
Loading theory "LTL.Rewriting" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code")
Found termination order: "{}"
locale ltl_to_rabin_af
  fixes \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes "ltl_to_rabin_af \<Sigma> w"
Found termination order: "{}"
### theory "Draft.LTL_Rabin"
### 15.174s elapsed time, 47.888s cpu time, 35.160s GC time
Loading theory "Draft.LTL_Rabin_Unfold_Opt" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code" via "Draft.LTL_Rabin_Impl")
locale ltl_FG_to_rabin_opt_def
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LTL_Compat"
### 0.902s elapsed time, 3.540s cpu time, 0.364s GC time
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_to_generalized_rabin_af ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> F G ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>)
     ?w
Found termination order: "size <*mlex*> {}"
locale ltl_FG_to_rabin_opt
  fixes \<Sigma> :: "'a set set"
    and \<phi> :: "'a ltl"
    and \<G> :: "'a ltl set"
    and w :: "nat => 'a set"
  assumes "ltl_FG_to_rabin_opt \<Sigma> \<G> w"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.af_Impl"
### 18.243s elapsed time, 58.856s cpu time, 38.975s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "syntactical_implies"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 298 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 3240 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###             ("\<^const>HOL.implies"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("\<^const>HOL.conj"
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("_position" Abs)
###                         ("_cargs"
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("\<^const>HOL.conj" ("_position" \<chi>)
###                               ("_position" S))
###                             ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                           ("_applC" ("_position" dom)
###                             ("_position" \<pi>)))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_applC" ("\<^const>af.step_abs")
###                             ("_cargs" ("_position" q)
###                               ("_position" \<nu>)))))))))
###               ("_position" S))
###             ("_applC" ("\<^const>af.step_abs")
###               ("_cargs" ("_position" \<phi>') ("_position" \<nu>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###           ("\<^const>HOL.All_binder" ("_position" S)
###             ("\<^const>HOL.implies"
###               ("_Ball" ("_position" \<chi>)
###                 ("_applC" ("_position" dom) ("_position" \<pi>))
###                 ("\<^const>HOL.conj"
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("_position" Abs)
###                         ("_cargs"
###                           ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                             ("\<^const>HOL.conj" ("_position" \<chi>)
###                               ("_position" S))
###                             ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                           ("_applC" ("_position" dom)
###                             ("_position" \<pi>)))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))
###                   ("\<^const>HOL.All_binder" ("_position" q)
###                     ("\<^const>HOL.implies"
###                       ("_Ex_greater_eq" ("_position" j)
###                         ("_applC" ("_position" the)
###                           ("_applC" ("_position" \<pi>)
###                             ("_position" \<chi>)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" the)
###                             ("_cargs"
###                               ("_applC" ("_position" m)
###                                 ("_position" \<chi>))
###                               ("_position" q)))
###                           ("_applC" ("_position" Some) ("_position" j))))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_cargs"
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_applC" ("\<^const>af.step_abs")
###                             ("_cargs" ("_position" q)
###                               ("_position" \<nu>)))))))))
###               ("_position" S)))
###           ("_applC" ("\<^const>af.step_abs")
###             ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_applC" ("_position" Abs)
###                       ("_cargs"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("\<^const>HOL.conj" ("_position" \<chi>)
###                             ("_position" S))
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC" ("_position" Abs)
###                     ("_cargs"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("\<^const>HOL.conj" ("_position" \<chi>)
###                           ("_position" S))
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" Abs) ("_position" \<chi>))
###                           ("_position" S))
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" Abs) ("_position" \<chi>))
###                         ("_position" S))
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_applC" ("_position" dom) ("_position" \<pi>))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("_Ball" ("_position" \<chi>)
###               ("_applC" ("_position" dom) ("_position" \<pi>))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" Abs) ("_position" \<chi>))
###                       ("_applC"
###                         ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                           ("_position" S)
###                           ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                         ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                   ("_applC" ("_position" Abs)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("\<^const>HOL.All_binder" ("_position" q)
###                   ("\<^const>HOL.implies"
###                     ("_Ex_greater_eq" ("_position" j)
###                       ("_applC" ("_position" the)
###                         ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" the)
###                           ("_cargs"
###                             ("_applC" ("_position" m) ("_position" \<chi>))
###                             ("_position" q)))
###                         ("_applC" ("_position" Some) ("_position" j))))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_cargs"
###                         ("_applC" ("_position" dom) ("_position" \<pi>))
###                         ("_applC" ("\<^const>af.step_abs")
###                           ("_cargs" ("_position" q)
###                             ("_position" \<nu>)))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("_Ball" ("_position" \<chi>)
###                     ("_applC" ("_position" dom) ("_position" \<pi>))
###                     ("_position" S))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" Abs) ("_position" \<chi>))
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" S)
###                         ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                       ("_applC" ("_position" dom) ("_position" \<pi>)))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                   ("\<^const>HOL.conj"
###                     ("_applC"
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_Ball" ("_position" \<chi>)
###                           ("_applC" ("_position" dom) ("_position" \<pi>))
###                           ("_position" S))
###                         ("_position" Abs))
###                       ("_position" \<chi>))
###                     ("_position" S))
###                   ("_applC" ("\<^const>LTL_FGXU.eval\<^sub>G_abs")
###                     ("_applC" ("_position" dom) ("_position" \<pi>))))
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" M\<^sub>\<UU>_fin) ("_position" \<pi>))
###     ("_Coll"
###       ("_pattern" ("_pattern" ("_position" \<phi>') ("_position" m))
###         ("_patterns" ("_position" \<nu>) ("_position" p)))
###       ("\<^const>HOL.Not"
###         ("\<^const>HOL.All_binder" ("_position" S)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                 ("_Ball" ("_position" \<chi>)
###                   ("_applC" ("_position" dom) ("_position" \<pi>))
###                   ("_position" S))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" Abs) ("_position" \<chi>))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("_applC" ("\<^const>LTL_FGXU.eval\<^sub>G_abs")
###                         ("_applC" ("_position" dom) ("_position" \<pi>))))
###                     ("_applC" ("_position" Abs)
###                       ("_applC" ("_position" theG) ("_position" \<chi>))))))
###               ("\<^const>HOL.All_binder" ("_position" q)
###                 ("\<^const>HOL.implies"
###                   ("_Ex_greater_eq" ("_position" j)
###                     ("_applC" ("_position" the)
###                       ("_applC" ("_position" \<pi>) ("_position" \<chi>)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" the)
###                         ("_cargs"
###                           ("_applC" ("_position" m) ("_position" \<chi>))
###                           ("_position" q)))
###                       ("_applC" ("_position" Some) ("_position" j))))
###                   ("_applC"
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_position" S)
###                       ("\<^const>LTL_FGXU.eval\<^sub>G_abs"))
###                     ("_cargs"
###                       ("_applC" ("_position" dom) ("_position" \<pi>))
###                       ("_applC" ("\<^const>af.step_abs")
###                         ("_cargs" ("_position" q) ("_position" \<nu>))))))))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_applC" ("\<^const>af.step_abs")
###                 ("_cargs" ("_position" \<phi>') ("_position" \<nu>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "LTL.Rewriting"
### 6.779s elapsed time, 21.214s cpu time, 7.796s GC time
locale ltl_to_rabin_af_unf
  fixes \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
  assumes "ltl_to_rabin_af_unf \<Sigma> w"
### Ambiguous input (line 317 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("\<^const>af.af_G_letter_abs")
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<A>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<A>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<A>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("\<^const>af.af_G_letter_abs")
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" theG) ("_position" \<chi>)))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<A>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/LTL_to_DRA/LTL_Rabin_Unfold_Opt.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<UU>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<UU>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" af_G_letter_abs_opt)
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" Unf\<^sub>G)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("_applC" ("_position" dom)
###                       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                         ("_position" \<pi>\<^sub>\<UU>)
###                         ("_position" q)))))))))))))
### ("\<^const>Pure.all_binder" ("_position" \<chi>)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" \<chi>)
###         ("_applC" ("_position" dom) ("_position" \<pi>\<^sub>\<UU>))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<pi>\<^sub>\<UU>) ("_position" \<chi>))
###         ("_applC" ("_position" mojmir_def.smallest_accepting_rank)
###           ("_cargs" ("_position" \<Sigma>)
###             ("_cargs" ("_position" af_G_letter_abs_opt)
###               ("_cargs"
###                 ("_applC" ("_position" Abs)
###                   ("_applC" ("_position" Unf\<^sub>G)
###                     ("_applC" ("_position" theG) ("_position" \<chi>))))
###                 ("_cargs" ("_position" w)
###                   ("_Coll" ("_position" q)
###                     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###                       ("_applC" ("_position" dom)
###                         ("_position" \<pi>\<^sub>\<UU>))
###                       ("_position" q))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> F G ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_FG_to_generalized_rabin ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R (ltl_to_generalized_rabin_af ?\<Sigma> ?\<phi>)
     ?w
[| finite ?\<Sigma>; range ?w <= ?\<Sigma> |]
==> ?w \<Turnstile> ?\<phi> =
    accept\<^sub>G\<^sub>R
     (ltl_to_generalized_rabin_af\<^sub>\<UU> ?\<Sigma> ?\<phi>) ?w
### theory "Draft.LTL_Rabin_Unfold_Opt"
### 6.631s elapsed time, 20.056s cpu time, 7.688s GC time
Loading theory "Draft.LTL_Rabin_Impl" (required by "Draft.Export_CodeMoreTemplates" via "Draft.Export_Code")
locale ltl_to_rabin_base_code_def
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and
    M_fin\<^sub>C ::
      "'a ltl
       => ('a ltl, nat) mapping
          => ('a ltl_prop_equiv_quotient *
              ('a ltl, 'a ltl_prop_equiv_quotient list) mapping) *
             'a set *
             'a ltl_prop_equiv_quotient *
             ('a ltl, 'a ltl_prop_equiv_quotient list) mapping
             => bool"
### Ambiguous input (line 25 of "$AFP/LTL_to_DRA/Impl/LTL_Rabin_Impl.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("_applC"
###       ("\<^const>DTS.simple_product" ("_position" \<delta>)
###         ("\<^const>DTS.product_abs"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta\<^sub>C)
###     ("_cargs"
###       ("\<^const>DTS.simple_product"
###         ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###         ("\<^const>DTS.product_abs"))
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>DTS.simple_product"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###       ("_position" \<delta>))
###     ("_applC" ("\<^const>DTS.product_abs")
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp"
###           ("_applC" ("_position" nxt)
###             ("_cargs" ("_position" \<Sigma>)
###               ("_position" \<delta>\<^sub>M)))
###           ("_position" q\<^sub>0\<^sub>M))
###         ("_position" theG)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" delta\<^sub>C)
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq" ("_position" \<Sigma>) ("_position" \<delta>))
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("\<^const>Product_Type.Times" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###     ("\<^const>DTS.simple_product" ("_position" \<delta>)
###       ("_applC" ("\<^const>DTS.product_abs")
###         ("\<^const>Fun.comp"
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" nxt)
###               ("_cargs" ("_position" \<Sigma>)
###                 ("_position" \<delta>\<^sub>M)))
###             ("_position" q\<^sub>0\<^sub>M))
###           ("_position" theG))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>DTS.simple_product"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" delta\<^sub>C) ("_position" \<Sigma>))
###         ("_position" \<delta>))
###       ("\<^const>DTS.product_abs"))
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" nxt)
###           ("_cargs" ("_position" \<Sigma>) ("_position" \<delta>\<^sub>M)))
###         ("_position" q\<^sub>0\<^sub>M))
###       ("_position" theG))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale ltl_to_rabin_base_code
  fixes
    \<delta> ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and
    \<delta>\<^sub>M ::
      "'a ltl_prop_equiv_quotient => 'a set => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and q\<^sub>0\<^sub>M :: "'a ltl => 'a ltl_prop_equiv_quotient"
    and
    M_fin ::
      "('a ltl => nat option)
       => (('a ltl_prop_equiv_quotient *
            ('a ltl => ('a ltl_prop_equiv_quotient => nat option) option)) *
           'a set *
           'a ltl_prop_equiv_quotient *
           ('a ltl
            => ('a ltl_prop_equiv_quotient => nat option) option)) set"
    and \<Sigma> :: "'a set set"
    and w :: "nat => 'a set"
    and
    M_fin\<^sub>C ::
      "'a ltl
       => ('a ltl, nat) mapping
          => ('a ltl_prop_equiv_quotient *
              ('a ltl, 'a ltl_prop_equiv_quotient list) mapping) *
             'a set *
             'a ltl_prop_equiv_quotient *
             ('a ltl, 'a ltl_prop_equiv_quotient list) mapping
             => bool"
  assumes
    "ltl_to_rabin_base_code \<delta> \<delta>\<^sub>M q\<^sub>0
      q\<^sub>0\<^sub>M M_fin \<Sigma> w M_fin\<^sub>C"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.LTL_Rabin_Impl"
### 1.496s elapsed time, 1.624s cpu time, 0.163s GC time
Loading theory "Draft.Export_Code" (required by "Draft.Export_CodeMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
### Legacy feature! export_code with file argument (line 129 of "$AFP/LTL_to_DRA/Impl/Export_Code.thy")
### theory "Draft.Export_Code"
### 11.605s elapsed time, 11.908s cpu time, 0.420s GC time
Loading theory "Draft.Export_CodeMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Export_CodeMoreTemplates"
### 0.665s elapsed time, 0.841s cpu time, 0.073s GC time
val it = (): unit
