Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.LTL_FGXU" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.554s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.917s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.310s elapsed time, 1.237s cpu time, 0.120s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.LTL_FGXU")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.309s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.315s elapsed time, 1.238s cpu time, 0.179s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.LTL_FGXUMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.875s cpu time, 0.942s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.131s elapsed time, 4.134s cpu time, 0.943s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 6.346s cpu time, 1.206s GC time
Loading theory "Draft.Templates" (required by "Draft.LTL_FGXUMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LTL_FGXUMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.165s cpu time, 0.145s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.LTL_FGXU"
### 3.297s elapsed time, 7.090s cpu time, 1.265s GC time
Loading theory "Draft.LTL_FGXUMoreTemplates"
val templateLemmas =
   [("LTL_FGXU.G_nested_finite", "finite (\<^bold>G ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.finite_propos", "finite (nested_propos ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.finite_propos", "finite (propos ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.ltl\<^sub>P_abs_rep", "Abs (Rep ?\<phi>) = ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("LTL_FGXU.propos_subset", "propos ?\<phi> <= nested_propos ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("LTL_FGXU.G_not_in_G", "G ?\<phi> ~: \<^bold>G ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("LTL_FGXU.eval\<^sub>G_G_nested",
     "\<^bold>G (eval\<^sub>G ?\<G> ?\<phi>) <= \<^bold>G ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL_FGXU.\<G>_finite", "?\<G> <= \<^bold>G ?\<phi> ==> finite ?\<G>",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("LTL_FGXU.Rep_Abs_prop_entailment",
     "?A \<Turnstile>\<^sub>P Rep (Abs ?\<phi>) =
      ?A \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_prop_entailment",
     "?S \<Turnstile>\<^sub>P eval\<^sub>G ?S ?\<phi> =
      ?S \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("LTL_FGXU.sat_models_invariant",
     "(?A : sat_models (Abs ?\<phi>)) = ?A \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL_FGXU.LTL_prop_entailment_restrict_to_propos",
     "?S \<Turnstile>\<^sub>P ?\<phi> =
      (?S Int propos ?\<phi>) \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_And_map",
     "eval\<^sub>G ?S (And ?xs) = And (map (eval\<^sub>G ?S) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL_FGXU.eval\<^sub>G_Or_map",
     "eval\<^sub>G ?S (Or ?xs) = Or (map (eval\<^sub>G ?S) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL_FGXU.And_append",
     "And (?xs @ ?ys) \<equiv>\<^sub>P And ?xs and And ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("LTL_FGXU.Or_append",
     "Or (?xs @ ?ys) \<equiv>\<^sub>P Or ?xs or Or ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("LTL_FGXU.G_nested_propos_Only_G", "Only_G (\<^bold>G ?\<phi>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("LTL_FGXU.ltl_models_equiv_prop_entailment",
     "?w \<Turnstile> ?\<phi> =
      {\<chi>. ?w \<Turnstile> \<chi>} \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("LTL_FGXU.ltl_prop_implies_equiv",
     "(?\<phi> \<longrightarrow>\<^sub>P ?\<psi> &
       ?\<psi> \<longrightarrow>\<^sub>P ?\<phi>) =
      ?\<phi> \<equiv>\<^sub>P ?\<psi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_subst",
     "eval\<^sub>G ?S ?\<phi> =
      subst ?\<phi> (%\<chi>. Some (eval\<^sub>G ?S \<chi>))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("LTL_FGXU.G_subset_G",
     "?\<psi> : \<^bold>G ?\<phi> ==>
      \<^bold>G ?\<psi> <= \<^bold>G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL_FGXU.And_prop_entailment",
     "?S \<Turnstile>\<^sub>P And ?xs =
      (ALL x:set ?xs. ?S \<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.Or_prop_entailment",
     "?S \<Turnstile>\<^sub>P Or ?xs =
      (EX x:set ?xs. ?S \<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.And_prop_entailment_abs",
     "?S \<up>\<Turnstile>\<^sub>P \<up>And ?xs =
      (ALL x:set ?xs. ?S \<up>\<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.And_semantics",
     "?w \<Turnstile> And ?xs = (ALL x:set ?xs. ?w \<Turnstile> x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.Or_semantics",
     "?w \<Turnstile> Or ?xs = (EX x:set ?xs. ?w \<Turnstile> x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.ltl_prop_equiv_implies_ltl_equiv",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      ?w \<Turnstile> ?\<phi> = ?w \<Turnstile> ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      eval\<^sub>G ?S ?\<phi> \<equiv>\<^sub>P eval\<^sub>G ?S ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<equiv>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      eval\<^sub>G ?S ?\<phi> \<longrightarrow>\<^sub>P
      eval\<^sub>G ?S ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<longrightarrow>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL_FGXU.LTL_suffix_G",
     "?w \<Turnstile> G ?\<phi> ==> suffix ?i ?w \<Turnstile> G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("LTL_FGXU.G_subset_G",
     "G ?\<psi> : \<^bold>G ?\<phi> ==>
      \<^bold>G ?\<psi> <= \<^bold>G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL_FGXU.and_abs_conjunction",
     "?S \<up>\<Turnstile>\<^sub>P ?\<phi> \<up>and ?\<psi> =
      (?S \<up>\<Turnstile>\<^sub>P ?\<phi> &
       ?S \<up>\<Turnstile>\<^sub>P ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("LTL_FGXU.LTL_FG_suffix",
     "suffix ?i ?w \<Turnstile> F G ?\<phi> = ?w \<Turnstile> F G ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("LTL_FGXU.LTL_GF_suffix",
     "suffix ?i ?w \<Turnstile> G (F ?\<phi>) =
      ?w \<Turnstile> G (F ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("LTL_FGXU.LTL_prop_entailment_monotonI",
     "[| ?S \<Turnstile>\<^sub>P ?\<phi>; ?S <= ?S' |]
      ==> ?S' \<Turnstile>\<^sub>P ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("LTL_FGXU.ltl_prop_implication_implies_ltl_implication",
     "[| ?w \<Turnstile> ?\<phi>;
         ?\<phi> \<longrightarrow>\<^sub>P ?\<psi> |]
      ==> ?w \<Turnstile> ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("LTL_FGXU.LTL_F_one_step_unfolding",
     "?w \<Turnstile> F ?\<phi> =
      (?w \<Turnstile> ?\<phi> | ?w \<Turnstile> X (F ?\<phi>))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("LTL_FGXU.LTL_G_one_step_unfolding",
     "?w \<Turnstile> G ?\<phi> =
      (?w \<Turnstile> ?\<phi> & ?w \<Turnstile> X (G ?\<phi>))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("LTL_FGXU.LTL_FG_almost_all_suffixes",
     "?w \<Turnstile> F G ?\<phi> =
      (MOST i. suffix i ?w \<Turnstile> ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL_FGXU.LTL_GF_infinitely_many_suffixes",
     "?w \<Turnstile> G (F ?\<phi>) =
      (INFM i. suffix i ?w \<Turnstile> ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL_FGXU.And_append_S",
     "?S \<Turnstile>\<^sub>P And (?xs @ ?ys) =
      ?S \<Turnstile>\<^sub>P And ?xs and And ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("LTL_FGXU.Or_append_S",
     "?S \<Turnstile>\<^sub>P Or (?xs @ ?ys) =
      ?S \<Turnstile>\<^sub>P Or ?xs or Or ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("LTL_FGXU.\<G>_elements",
     "?\<G> <= \<^bold>G ?\<phi> ==> Only_G ?\<G>",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("LTL_FGXU.And_append_syntactic",
     "?xs ~= [] ==> And (?xs @ ?ys) = And (And ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("LTL_FGXU.Or_append_syntactic",
     "?xs ~= [] ==> Or (?xs @ ?ys) = Or (Or ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("LTL_FGXU.And_propos",
     "propos (And ?xs) = \<Union> {propos x |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("LTL_FGXU.Or_propos",
     "propos (Or ?xs) = \<Union> {propos x |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("LTL_FGXU.foldl_LTLAnd_prop_entailment",
     "?S \<Turnstile>\<^sub>P foldl LTLAnd ?i ?xs =
      (?S \<Turnstile>\<^sub>P ?i &
       (ALL y:set ?xs. ?S \<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.foldl_LTLOr_prop_entailment",
     "?S \<Turnstile>\<^sub>P foldl LTLOr ?i ?xs =
      (?S \<Turnstile>\<^sub>P ?i |
       (EX y:set ?xs. ?S \<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.foldl_LTLAnd_prop_entailment_abs",
     "?S \<up>\<Turnstile>\<^sub>P foldl and_abs ?i ?xs =
      (?S \<up>\<Turnstile>\<^sub>P ?i &
       (ALL y:set ?xs. ?S \<up>\<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.ltl_prop_equiv_quotient_restricted_to_P_finite",
     "finite ?P ==>
      finite {Abs \<phi> |\<phi>. nested_propos \<phi> <= ?P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("LTL_FGXU.LTL_U_one_step_unfolding",
     "?w \<Turnstile> ?\<phi> U ?\<psi> =
      (?w \<Turnstile> ?\<psi> |
       ?w \<Turnstile> ?\<phi> & ?w \<Turnstile> X (?\<phi> U ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL_FGXU.sat_models_finite_image",
     "finite ?P ==>
      finite
       (sat_models ` {Abs \<phi> |\<phi>. nested_propos \<phi> <= ?P})",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, t_empty)))
           ))),
    ("LTL_FGXU.ltl_prop_equiv_subst_S",
     "?S \<Turnstile>\<^sub>P subst ?\<phi> ?m =
      (?S - dom ?m Un
       {uu_.
        EX \<chi> \<chi>'.
           uu_ = \<chi> &
           \<chi> : dom ?m &
           ?m \<chi> = Some \<chi>' &
           ?S \<Turnstile>\<^sub>P \<chi>'}) \<Turnstile>\<^sub>P
      ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 6, t_empty))),
         template_var 1))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness_generalized",
     "[| !!\<A>.
            (!!x. x : ?S ==> \<A> \<Turnstile>\<^sub>P x) ==>
            \<A> \<Turnstile>\<^sub>P ?y;
         !!x. x : ?S ==> ?\<A> \<Turnstile>\<^sub>P eval\<^sub>G ?P x |]
      ==> ?\<A> \<Turnstile>\<^sub>P eval\<^sub>G ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment_generalized",
     "[| !!\<A>.
            (!!x. x : ?S ==> \<A> \<Turnstile>\<^sub>P x) ==>
            \<A> \<Turnstile>\<^sub>P ?y;
         !!x. x : ?S ==> ?\<A> \<Turnstile>\<^sub>P subst x ?m |]
      ==> ?\<A> \<Turnstile>\<^sub>P subst ?y ?m",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("LTL_FGXU.propos_foldl",
     "(!!x y. propos (?f x y) = propos x Un propos y) ==>
      \<Union> {propos y |y. y = ?i | y : set ?xs} =
      propos (foldl ?f ?i ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("LTL_FGXU.ltl_G_stabilize",
     "[| finite ?\<G>; Only_G ?\<G>;
         !!i. (!!\<chi> j.
                  \<chi> : ?\<G> ==>
                  suffix i ?w \<Turnstile> \<chi> =
                  suffix (i + j) ?w \<Turnstile> \<chi>) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("LTL_FGXU.decomposable_function_subst",
     "[| ?f true = true; ?f false = false;
         !!\<phi> \<psi>. ?f (\<phi> and \<psi>) = ?f \<phi> and ?f \<psi>;
         !!\<phi> \<psi>. ?f (\<phi> or \<psi>) = ?f \<phi> or ?f \<psi> |]
      ==> ?f ?\<phi> = subst ?\<phi> (%\<chi>. Some (?f \<chi>))",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 6), template_hole 6),
        template_equation
         (template_app (template_var 1, template_hole 5), template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("LTL_FGXU.ltl_G_stabilize_property",
     "[| finite ?\<G>; Only_G ?\<G>;
         !!\<chi> j.
            \<chi> : ?\<G> ==>
            suffix ?i ?w \<Turnstile> \<chi> =
            suffix (?i + j) ?w \<Turnstile> \<chi>;
         G ?\<psi> : ?\<G> Int {\<chi>. ?w \<Turnstile> F \<chi>} |]
      ==> suffix ?i ?w \<Turnstile> G ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3), t_empty)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app (template_hole 10, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.LTL_FGXUMoreTemplates"
### 0.361s elapsed time, 0.568s cpu time, 0.056s GC time
val it = (): unit
