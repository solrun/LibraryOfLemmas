   [("LTL_FGXU.G_nested_finite", "finite (\<^bold>G ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.finite_propos", "finite (nested_propos ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.finite_propos", "finite (propos ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL_FGXU.ltl\<^sub>P_abs_rep", "Abs (Rep ?\<phi>) = ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("LTL_FGXU.propos_subset", "propos ?\<phi> <= nested_propos ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("LTL_FGXU.G_not_in_G", "G ?\<phi> ~: \<^bold>G ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("LTL_FGXU.eval\<^sub>G_G_nested",
     "\<^bold>G (eval\<^sub>G ?\<G> ?\<phi>) <= \<^bold>G ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL_FGXU.\<G>_finite", "?\<G> <= \<^bold>G ?\<phi> ==> finite ?\<G>",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("LTL_FGXU.Rep_Abs_prop_entailment",
     "?A \<Turnstile>\<^sub>P Rep (Abs ?\<phi>) =
      ?A \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_prop_entailment",
     "?S \<Turnstile>\<^sub>P eval\<^sub>G ?S ?\<phi> =
      ?S \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("LTL_FGXU.sat_models_invariant",
     "(?A : sat_models (Abs ?\<phi>)) = ?A \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL_FGXU.LTL_prop_entailment_restrict_to_propos",
     "?S \<Turnstile>\<^sub>P ?\<phi> =
      (?S Int propos ?\<phi>) \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_And_map",
     "eval\<^sub>G ?S (And ?xs) = And (map (eval\<^sub>G ?S) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL_FGXU.eval\<^sub>G_Or_map",
     "eval\<^sub>G ?S (Or ?xs) = Or (map (eval\<^sub>G ?S) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("LTL_FGXU.And_append",
     "And (?xs @ ?ys) \<equiv>\<^sub>P And ?xs and And ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("LTL_FGXU.Or_append",
     "Or (?xs @ ?ys) \<equiv>\<^sub>P Or ?xs or Or ?ys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("LTL_FGXU.G_nested_propos_Only_G", "Only_G (\<^bold>G ?\<phi>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           t_empty)
         )),
    ("LTL_FGXU.ltl_models_equiv_prop_entailment",
     "?w \<Turnstile> ?\<phi> =
      {\<chi>. ?w \<Turnstile> \<chi>} \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("LTL_FGXU.ltl_prop_implies_equiv",
     "(?\<phi> \<longrightarrow>\<^sub>P ?\<psi> &
       ?\<psi> \<longrightarrow>\<^sub>P ?\<phi>) =
      ?\<phi> \<equiv>\<^sub>P ?\<psi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL_FGXU.eval\<^sub>G_subst",
     "eval\<^sub>G ?S ?\<phi> =
      subst ?\<phi> (%\<chi>. Some (eval\<^sub>G ?S \<chi>))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("LTL_FGXU.G_subset_G",
     "?\<psi> : \<^bold>G ?\<phi> ==>
      \<^bold>G ?\<psi> <= \<^bold>G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL_FGXU.And_prop_entailment",
     "?S \<Turnstile>\<^sub>P And ?xs =
      (ALL x:set ?xs. ?S \<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.Or_prop_entailment",
     "?S \<Turnstile>\<^sub>P Or ?xs =
      (EX x:set ?xs. ?S \<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.And_prop_entailment_abs",
     "?S \<up>\<Turnstile>\<^sub>P \<up>And ?xs =
      (ALL x:set ?xs. ?S \<up>\<Turnstile>\<^sub>P x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.And_semantics",
     "?w \<Turnstile> And ?xs = (ALL x:set ?xs. ?w \<Turnstile> x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.Or_semantics",
     "?w \<Turnstile> Or ?xs = (EX x:set ?xs. ?w \<Turnstile> x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("LTL_FGXU.ltl_prop_equiv_implies_ltl_equiv",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      ?w \<Turnstile> ?\<phi> = ?w \<Turnstile> ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      eval\<^sub>G ?S ?\<phi> \<equiv>\<^sub>P eval\<^sub>G ?S ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment",
     "?\<phi> \<equiv>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<equiv>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      eval\<^sub>G ?S ?\<phi> \<longrightarrow>\<^sub>P
      eval\<^sub>G ?S ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<longrightarrow>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL_FGXU.LTL_suffix_G",
     "?w \<Turnstile> G ?\<phi> ==> suffix ?i ?w \<Turnstile> G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("LTL_FGXU.G_subset_G",
     "G ?\<psi> : \<^bold>G ?\<phi> ==>
      \<^bold>G ?\<psi> <= \<^bold>G ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL_FGXU.and_abs_conjunction",
     "?S \<up>\<Turnstile>\<^sub>P ?\<phi> \<up>and ?\<psi> =
      (?S \<up>\<Turnstile>\<^sub>P ?\<phi> &
       ?S \<up>\<Turnstile>\<^sub>P ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("LTL_FGXU.LTL_FG_suffix",
     "suffix ?i ?w \<Turnstile> F G ?\<phi> = ?w \<Turnstile> F G ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("LTL_FGXU.LTL_GF_suffix",
     "suffix ?i ?w \<Turnstile> G (F ?\<phi>) =
      ?w \<Turnstile> G (F ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("LTL_FGXU.LTL_prop_entailment_monotonI",
     "[| ?S \<Turnstile>\<^sub>P ?\<phi>; ?S <= ?S' |]
      ==> ?S' \<Turnstile>\<^sub>P ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("LTL_FGXU.ltl_prop_implication_implies_ltl_implication",
     "[| ?w \<Turnstile> ?\<phi>;
         ?\<phi> \<longrightarrow>\<^sub>P ?\<psi> |]
      ==> ?w \<Turnstile> ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("LTL_FGXU.LTL_F_one_step_unfolding",
     "?w \<Turnstile> F ?\<phi> =
      (?w \<Turnstile> ?\<phi> | ?w \<Turnstile> X (F ?\<phi>))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("LTL_FGXU.LTL_G_one_step_unfolding",
     "?w \<Turnstile> G ?\<phi> =
      (?w \<Turnstile> ?\<phi> & ?w \<Turnstile> X (G ?\<phi>))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("LTL_FGXU.LTL_FG_almost_all_suffixes",
     "?w \<Turnstile> F G ?\<phi> =
      (MOST i. suffix i ?w \<Turnstile> ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL_FGXU.LTL_GF_infinitely_many_suffixes",
     "?w \<Turnstile> G (F ?\<phi>) =
      (INFM i. suffix i ?w \<Turnstile> ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL_FGXU.And_append_S",
     "?S \<Turnstile>\<^sub>P And (?xs @ ?ys) =
      ?S \<Turnstile>\<^sub>P And ?xs and And ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("LTL_FGXU.Or_append_S",
     "?S \<Turnstile>\<^sub>P Or (?xs @ ?ys) =
      ?S \<Turnstile>\<^sub>P Or ?xs or Or ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("LTL_FGXU.\<G>_elements",
     "?\<G> <= \<^bold>G ?\<phi> ==> Only_G ?\<G>",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("LTL_FGXU.And_append_syntactic",
     "?xs ~= [] ==> And (?xs @ ?ys) = And (And ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("LTL_FGXU.Or_append_syntactic",
     "?xs ~= [] ==> Or (?xs @ ?ys) = Or (Or ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("LTL_FGXU.And_propos",
     "propos (And ?xs) = \<Union> {propos x |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("LTL_FGXU.Or_propos",
     "propos (Or ?xs) = \<Union> {propos x |x. x : set ?xs}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("LTL_FGXU.foldl_LTLAnd_prop_entailment",
     "?S \<Turnstile>\<^sub>P foldl LTLAnd ?i ?xs =
      (?S \<Turnstile>\<^sub>P ?i &
       (ALL y:set ?xs. ?S \<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.foldl_LTLOr_prop_entailment",
     "?S \<Turnstile>\<^sub>P foldl LTLOr ?i ?xs =
      (?S \<Turnstile>\<^sub>P ?i |
       (EX y:set ?xs. ?S \<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.foldl_LTLAnd_prop_entailment_abs",
     "?S \<up>\<Turnstile>\<^sub>P foldl and_abs ?i ?xs =
      (?S \<up>\<Turnstile>\<^sub>P ?i &
       (ALL y:set ?xs. ?S \<up>\<Turnstile>\<^sub>P y))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("LTL_FGXU.ltl_prop_equiv_quotient_restricted_to_P_finite",
     "finite ?P ==>
      finite {Abs \<phi> |\<phi>. nested_propos \<phi> <= ?P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("LTL_FGXU.LTL_U_one_step_unfolding",
     "?w \<Turnstile> ?\<phi> U ?\<psi> =
      (?w \<Turnstile> ?\<psi> |
       ?w \<Turnstile> ?\<phi> & ?w \<Turnstile> X (?\<phi> U ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL_FGXU.sat_models_finite_image",
     "finite ?P ==>
      finite
       (sat_models ` {Abs \<phi> |\<phi>. nested_propos \<phi> <= ?P})",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, t_empty)))
           ))),
    ("LTL_FGXU.ltl_prop_equiv_subst_S",
     "?S \<Turnstile>\<^sub>P subst ?\<phi> ?m =
      (?S - dom ?m Un
       {uu_.
        EX \<chi> \<chi>'.
           uu_ = \<chi> &
           \<chi> : dom ?m &
           ?m \<chi> = Some \<chi>' &
           ?S \<Turnstile>\<^sub>P \<chi>'}) \<Turnstile>\<^sub>P
      ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 6, t_empty))),
         template_var 1))),
    ("LTL_FGXU.eval\<^sub>G_respectfulness_generalized",
     "[| !!\<A>.
            (!!x. x : ?S ==> \<A> \<Turnstile>\<^sub>P x) ==>
            \<A> \<Turnstile>\<^sub>P ?y;
         !!x. x : ?S ==> ?\<A> \<Turnstile>\<^sub>P eval\<^sub>G ?P x |]
      ==> ?\<A> \<Turnstile>\<^sub>P eval\<^sub>G ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("LTL_FGXU.subst_respects_ltl_prop_entailment_generalized",
     "[| !!\<A>.
            (!!x. x : ?S ==> \<A> \<Turnstile>\<^sub>P x) ==>
            \<A> \<Turnstile>\<^sub>P ?y;
         !!x. x : ?S ==> ?\<A> \<Turnstile>\<^sub>P subst x ?m |]
      ==> ?\<A> \<Turnstile>\<^sub>P subst ?y ?m",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("LTL_FGXU.propos_foldl",
     "(!!x y. propos (?f x y) = propos x Un propos y) ==>
      \<Union> {propos y |y. y = ?i | y : set ?xs} =
      propos (foldl ?f ?i ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("LTL_FGXU.ltl_G_stabilize",
     "[| finite ?\<G>; Only_G ?\<G>;
         !!i. (!!\<chi> j.
                  \<chi> : ?\<G> ==>
                  suffix i ?w \<Turnstile> \<chi> =
                  suffix (i + j) ?w \<Turnstile> \<chi>) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("LTL_FGXU.decomposable_function_subst",
     "[| ?f true = true; ?f false = false;
         !!\<phi> \<psi>. ?f (\<phi> and \<psi>) = ?f \<phi> and ?f \<psi>;
         !!\<phi> \<psi>. ?f (\<phi> or \<psi>) = ?f \<phi> or ?f \<psi> |]
      ==> ?f ?\<phi> = subst ?\<phi> (%\<chi>. Some (?f \<chi>))",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 6), template_hole 6),
        template_equation
         (template_app (template_var 1, template_hole 5), template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("LTL_FGXU.ltl_G_stabilize_property",
     "[| finite ?\<G>; Only_G ?\<G>;
         !!\<chi> j.
            \<chi> : ?\<G> ==>
            suffix ?i ?w \<Turnstile> \<chi> =
            suffix (?i + j) ?w \<Turnstile> \<chi>;
         G ?\<psi> : ?\<G> Int {\<chi>. ?w \<Turnstile> F \<chi>} |]
      ==> suffix ?i ?w \<Turnstile> G ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3), t_empty)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app (template_hole 10, template_var 0))
           )))]
