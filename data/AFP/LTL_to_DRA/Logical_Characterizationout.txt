Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization" via "Draft.af" via "Draft.LTL_FGXU" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.547s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.837s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.304s elapsed time, 1.212s cpu time, 0.119s GC time
Loading theory "Draft.Preliminaries2" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.270s cpu time, 0.119s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization" via "Draft.af" via "Draft.LTL_FGXU")
Found termination order: "{}"
### theory "Draft.Preliminaries2"
### 0.072s elapsed time, 0.293s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.330s elapsed time, 1.303s cpu time, 0.184s GC time
Loading theory "Draft.LTL_FGXU" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization" via "Draft.af")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.034s elapsed time, 3.931s cpu time, 0.966s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization" via "Draft.af" via "Draft.List2")
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  find_index :: "('a => bool) => 'a list => nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.172s elapsed time, 4.462s cpu time, 1.066s GC time
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.436s elapsed time, 1.598s cpu time, 0.179s GC time
Loading theory "Draft.List2" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization" via "Draft.af")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.List2"
### 0.776s elapsed time, 2.422s cpu time, 0.993s GC time
### theory "HOL-Library.Tree"
### 2.430s elapsed time, 8.490s cpu time, 2.138s GC time
Loading theory "Draft.Templates" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.166s cpu time, 0.054s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Logical_CharacterizationMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.185s cpu time, 0.122s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL_FGXU.ltl. This will cause problems later on.
instantiation
  ltl_prop_equiv_quotient :: (type) equal
  equal_ltl_prop_equiv_quotient == equal_class.equal ::
    'a ltl_prop_equiv_quotient => 'a ltl_prop_equiv_quotient => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 551 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" i)
###           ("_Ball" ("_position" y)
###             ("_applC" ("_position" set) ("_position" xs))
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" y))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs))))
###       ("\<^const>HOL.conj"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" i))
###         ("_Ball" ("_position" y)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("_position" foldl)
###         ("_cargs" ("_position" and_abs)
###           ("_cargs" ("_position" i) ("_position" xs)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" foldl))
###       ("_cargs" ("_position" and_abs)
###         ("_cargs" ("_position" i) ("_position" xs))))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl) ("_position" and_abs)))
###       ("_cargs" ("_position" i) ("_position" xs)))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_applC" ("_position" foldl)
###           ("_cargs" ("_position" and_abs) ("_position" i))))
###       ("_position" xs))
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" i))
###       ("_Ball" ("_position" y) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 556 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs)) ("_position" S))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("_position" S))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs)))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>LTL_FGXU.And_abs") ("_position" xs))
###       ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>LTL_FGXU.And_abs"))
###       ("_position" xs))
###     ("_Ball" ("_position" x) ("_applC" ("_position" set) ("_position" xs))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/LTL_to_DRA/LTL_FGXU.thy") produces 118 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.conj"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###         ("\<^const>HOL.iff"
###           ("\<^const>LTL_FGXU.and_abs"
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<phi>))
###             ("_position" \<psi>))
###           ("_position" S))
###         ("_position" \<phi>))
###       ("_position" S))
###     ("_position" \<psi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff"
###         ("\<^const>LTL_FGXU.and_abs"
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<phi>))
###           ("_position" \<psi>))
###         ("_position" S))
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs"
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<phi>))
###         ("_position" \<psi>))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("_position" \<psi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>HOL.iff" ("_position" \<psi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###       ("\<^const>HOL.iff" ("_position" \<psi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("\<^const>HOL.conj" ("_position" \<phi>)
###             ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###               ("_position" \<psi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>)))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###     ("\<^const>HOL.iff"
###       ("\<^const>LTL_FGXU.and_abs" ("_position" \<phi>)
###         ("_position" \<psi>))
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("\<^const>HOL.conj" ("_position" \<phi>)
###           ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###             ("_position" \<psi>)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###     ("\<^const>LTL_FGXU.and_abs"
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<phi>))
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S)))
###     ("\<^const>HOL.conj" ("_position" \<phi>)
###       ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###         ("_position" \<psi>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>LTL_FGXU.and_abs"
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###       ("_position" \<phi>))
###     ("\<^const>LTL_FGXU.ltl_prop_entails_abs"
###       ("\<^const>HOL.iff" ("_position" \<psi>) ("_position" S))
###       ("\<^const>HOL.conj" ("_position" \<phi>)
###         ("\<^const>LTL_FGXU.ltl_prop_entails_abs" ("_position" S)
###           ("_position" \<psi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale lift_ltl_transformer
  fixes f :: "'a ltl => 'b => 'a ltl"
  assumes "lift_ltl_transformer f"
### theory "Draft.LTL_FGXU"
### 3.736s elapsed time, 9.237s cpu time, 2.202s GC time
Loading theory "Draft.af" (required by "Draft.Logical_CharacterizationMoreTemplates" via "Draft.Logical_Characterization")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.af"
### 1.110s elapsed time, 1.318s cpu time, 0.114s GC time
Loading theory "Draft.Logical_Characterization" (required by "Draft.Logical_CharacterizationMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Logical_Characterization"
### 0.579s elapsed time, 0.668s cpu time, 0.056s GC time
Loading theory "Draft.Logical_CharacterizationMoreTemplates"
val templateLemmas =
   [("Logical_Characterization.\<G>\<^sub>F\<^sub>G_suffix",
     "\<G>\<^sub>F\<^sub>G ?\<phi> (suffix ?i ?w) =
      \<G>\<^sub>F\<^sub>G ?\<phi> ?w",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Logical_Characterization.\<G>\<^sub>F\<^sub>G_Only_G",
     "Only_G (\<G>\<^sub>F\<^sub>G ?\<phi> ?w)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Logical_Characterization.almost_all_eventually_provable_suffix",
     "\<PP>\<^sub>\<infinity> ?\<phi> ?\<G>' ?w ==>
      \<PP>\<^sub>\<infinity> ?\<phi> ?\<G>' (suffix ?i ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Logical_Characterization.almost_all_eventually_provable_monotonI",
     "[| \<PP>\<^sub>\<infinity> ?\<phi> ?\<G> ?w; ?\<G> <= ?\<G>' |]
      ==> \<PP>\<^sub>\<infinity> ?\<phi> ?\<G>' ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Logical_Characterization.ltl_implies_provable",
     "?w \<Turnstile> ?\<phi> ==>
      EX j. \<G>\<^sub>F\<^sub>G ?\<phi> ?w \<Turnstile>\<^sub>P
            af\<^sub>G ?\<phi> (prefix j ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Logical_Characterization.ltl_implies_provable_almost_all",
     "?w \<Turnstile> ?\<phi> ==>
      MOST i.
         \<G>\<^sub>F\<^sub>G ?\<phi> ?w \<Turnstile>\<^sub>P
         af\<^sub>G ?\<phi> (prefix i ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, t_empty), template_hole 0)
           ))),
    ("Logical_Characterization.threshold_suffix_2",
     "[| threshold ?\<psi> ?w ?\<G>' = Some ?k; ?k <= ?l |]
      ==> threshold ?\<psi> (suffix ?l ?w) ?\<G>' = Some 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_var 2),
         template_app (template_hole 3, template_hole 0)))),
    ("Logical_Characterization.almost_all_eventually_provable_restrict_to_G",
     "[| \<PP>\<^sub>\<infinity> ?\<phi> ?\<G> ?w; Only_G ?\<G> |]
      ==> \<PP>\<^sub>\<infinity> ?\<phi> (?\<G> Int \<^bold>G ?\<phi>) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 2))),
             template_var 0)
           ))),
    ("Logical_Characterization.threshold_properties",
     "[| threshold ?\<phi> ?w ?\<G> = Some ?i; ?i <= ?j |]
      ==> \<PP> ?\<phi> ?\<G> ?w ?j",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Logical_Characterization.threshold_suffix",
     "[| threshold ?\<phi> ?w ?\<G> = Some ?k;
         threshold ?\<phi> (suffix ?i ?w) ?\<G> = Some ?k' |]
      ==> ?k <= ?k' + ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 4)),
            template_var 3),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Logical_Characterization.\<F>_drop",
     "[| \<PP>\<^sub>\<infinity> ?\<phi> ?\<G>' ?w;
         ?S \<Turnstile>\<^sub>P \<F> ?\<phi> ?w ?\<G>' (?i + ?j) |]
      ==> ?S \<Turnstile>\<^sub>P \<F> ?\<phi> (suffix ?i ?w) ?\<G>' ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_var 4),
               template_var 0))
           ))),
    ("Logical_Characterization.threshold_properties",
     "[| threshold ?\<phi> ?w ?\<G> = Some ?i; 0 < ?i |]
      ==> ~ ?\<G> \<Turnstile>\<^sub>P
            af\<^sub>G ?\<phi> (?w [?i - 1 \<rightarrow> ?k])",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_inequation (less_than, template_hole 7, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 4),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0)),
                     template_var 0)))
               )
           ))),
    ("Logical_Characterization.almost_all_eventually_provable_restrict_to_G_depth",
     "[| \<PP>\<^sub>\<infinity> ?\<phi> ?\<G> ?w; Only_G ?\<G> |]
      ==> \<PP>\<^sub>\<infinity> ?\<phi>
           (?\<G> Int {\<psi>. G_depth \<psi> <= G_depth ?\<phi>}) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, t_empty))),
             template_var 0)
           ))),
    ("Logical_Characterization.closed_\<G>\<^sub>F\<^sub>G",
     "Logical_Characterization.closed (\<G>\<^sub>F\<^sub>G ?\<phi> ?w) ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 t_empty)),
             template_app (template_hole 3, t_empty)))
         )),
    ("Logical_Characterization.lemmaD",
     "[| ?w \<Turnstile> ?\<phi>;
         !!\<psi>.
            G \<psi> : \<G>\<^sub>F\<^sub>G ?\<phi> ?w ==>
            threshold \<psi> ?w (\<G>\<^sub>F\<^sub>G ?\<phi> ?w) =
            Some 0 |]
      ==> accept\<^sub>M ?\<phi> (\<G>\<^sub>F\<^sub>G ?\<phi> ?w) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1)),
             template_var 1)
           ))),
    ("Logical_Characterization.closed_FG",
     "[| Logical_Characterization.closed ?\<G> ?w; G ?\<psi> : ?\<G> |]
      ==> ?w \<Turnstile> F G ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    t_empty)),
                template_app (template_hole 5, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 6, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 0)))
           ))),
    ("Logical_Characterization.ltl_logical_characterization",
     "?w \<Turnstile> ?\<phi> =
      (EX \<G><=\<^bold>G ?\<phi>.
          accept\<^sub>M ?\<phi> \<G> ?w &
          Logical_Characterization.closed \<G> ?w)",
     template_equation
      (template_app
        (template_app (template_hole 14, template_var 1), template_var 0),
       template_app (template_hole 13, t_empty))),
    ("Logical_Characterization.ltl_FG_logical_characterization",
     "?w \<Turnstile> F G ?\<phi> =
      (EX \<G><=\<^bold>G (F G ?\<phi>).
          G ?\<phi> : \<G> & Logical_Characterization.closed \<G> ?w)",
     template_equation
      (template_app
        (template_app (template_hole 14, template_var 1),
         template_app
          (template_hole 13,
           template_app (template_hole 12, template_var 0))),
       template_app (template_hole 11, t_empty))),
    ("Logical_Characterization.threshold_closed",
     "Logical_Characterization.closed ?\<G> ?w ==>
      EX k. ALL \<psi>.
               G \<psi> : ?\<G> -->
               threshold \<psi> (suffix k ?w) ?\<G> = Some 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    t_empty)),
                template_app (template_hole 9, t_empty)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Logical_Characterization.almost_all_commutative''",
     "[| finite ?S; Only_G ?S; !!x. G x : ?S ==> MOST i. ?P x i |]
      ==> MOST i. ALL x. G x : ?S --> ?P x i",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1), t_empty)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 2)
           ))),
    ("Logical_Characterization.almost_all_suffixes_model_\<F>",
     "[| Logical_Characterization.closed ?\<G> ?w; G ?\<phi> : ?\<G> |]
      ==> MOST j.
             suffix j ?w \<Turnstile>
             eval\<^sub>G ?\<G> (\<F> ?\<phi> ?w ?\<G> j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 2)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 13, template_var 2),
                    t_empty)),
                template_app (template_hole 9, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty), template_hole 0)
           ))),
    ("Logical_Characterization.almost_all_suffixes_model_\<F>_generalized",
     "Logical_Characterization.closed ?\<G> ?w ==>
      MOST j.
         ALL \<psi>.
            G \<psi> : ?\<G> -->
            suffix j ?w \<Turnstile>
            eval\<^sub>G ?\<G> (\<F> \<psi> ?w ?\<G> j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    t_empty)),
                template_app (template_hole 9, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty), template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Logical_CharacterizationMoreTemplates"
### 0.346s elapsed time, 0.440s cpu time, 0.000s GC time
val it = (): unit
