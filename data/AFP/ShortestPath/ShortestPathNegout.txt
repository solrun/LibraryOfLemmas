Loading theory "Graph_Theory.Rtrancl_On" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
Proofs for inductive predicate(s) "rtrancl_onp"
  Proving monotonicity ...
### theory "Graph_Theory.Rtrancl_On"
### 0.157s elapsed time, 0.649s cpu time, 0.024s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Combinatorics.Transposition"
### 0.182s elapsed time, 0.745s cpu time, 0.024s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.099s elapsed time, 0.395s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.448s elapsed time, 1.784s cpu time, 0.162s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.FuncSet"
### 0.471s elapsed time, 1.873s cpu time, 0.162s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.319s elapsed time, 1.245s cpu time, 0.138s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.418s cpu time, 0.265s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.315s elapsed time, 1.222s cpu time, 0.222s GC time
Loading theory "HOL-Library.Rewrite" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Kuratowski")
infix 1 then_cconv
infix 0 else_cconv
type cconv = conv
signature BASIC_CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    type cconv = conv
    val else_cconv: cconv * cconv -> cconv
    val then_cconv: cconv * cconv -> cconv
  end
signature CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    val abs_cconv:
       (cterm * Proof.context -> cconv) -> Proof.context -> cconv
    val all_cconv: cconv
    val arg1_cconv: cconv -> cconv
    val arg_cconv: cconv -> cconv
    type cconv = conv
    val comb_cconv: cconv -> cconv
    val combination_cconv: cconv -> cconv -> cconv
    val concl_cconv: int -> cconv -> cconv
    val else_cconv: cconv * cconv -> cconv
    val fconv_rule: cconv -> thm -> thm
    val first_cconv: cconv list -> cconv
    val fun2_cconv: cconv -> cconv
    val fun_cconv: cconv -> cconv
    val gconv_rule: cconv -> int -> thm -> thm
    val no_cconv: cconv
    val params_cconv:
       int -> (Proof.context -> cconv) -> Proof.context -> cconv
    val prems_cconv: int -> cconv -> cconv
    val rewr_cconv: thm -> cconv
    val rewrs_cconv: thm list -> cconv
    val then_cconv: cconv * cconv -> cconv
    val with_prems_cconv: int -> cconv -> cconv
  end
structure CConv: CCONV
structure Basic_CConv: BASIC_CCONV
val then_cconv = fn: cconv * cconv -> cconv
val CCONVERSION = fn: cconv -> int -> tactic
val else_cconv = fn: cconv * cconv -> cconv
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.637s elapsed time, 2.353s cpu time, 0.788s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
infix 1 then_pconv
infix 0 else_pconv
signature REWRITE =
  sig
    val abs_pconv: patconv -> string option * typ -> patconv
    val all_pconv: patconv
    val arg_pconv: patconv -> patconv
    val asm_pconv: patconv -> patconv
    val asms_pconv: patconv -> patconv
    val concl_pconv: patconv -> patconv
    val else_pconv: patconv * patconv -> patconv
    val for_pconv: patconv -> (string option * typ option) list -> patconv
    val forall_pconv: patconv -> string option * typ option -> patconv
    val fun_pconv: patconv -> patconv
    val imp_pconv: patconv -> patconv
    val in_pconv: patconv -> patconv
    val judgment_pconv: patconv -> patconv
    val match_pconv: patconv -> term * (string option * typ) list -> patconv
    val mk_hole: int -> typ -> term
    val params_pconv: patconv -> patconv
    type patconv =
       Proof.context -> Type.tyenv * (string * term) list -> cconv
    datatype ('a, 'b) pattern
    = Asm | At | Concl | For of 'b list | In | Term of 'a
    val rewrite_conv:
       Proof.context ->
         (term * (string * typ) list, string * typ option) pattern list *
         term option
           -> thm list -> conv
    val rewrs_pconv: term option -> thm list -> patconv
    val then_pconv: patconv * patconv -> patconv
  end
structure Rewrite: REWRITE
### theory "HOL-Library.Rewrite"
### 0.396s elapsed time, 1.417s cpu time, 0.612s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.920s cpu time, 0.072s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.149s elapsed time, 4.377s cpu time, 0.972s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Countable"
### 1.275s elapsed time, 5.009s cpu time, 0.606s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.887s elapsed time, 3.481s cpu time, 0.412s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.490s elapsed time, 1.920s cpu time, 0.220s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.Liminf_Limsup"
### 0.525s elapsed time, 2.053s cpu time, 0.220s GC time
### theory "HOL-Library.Tree"
### 2.113s elapsed time, 8.211s cpu time, 0.943s GC time
Loading theory "Draft.Templates" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ShortestPathNegMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.638s elapsed time, 1.921s cpu time, 0.164s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.817s elapsed time, 13.590s cpu time, 2.012s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Bidirected_Digraph")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.240s elapsed time, 6.042s cpu time, 1.596s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Combinatorics.Permutations"
### 1.114s elapsed time, 2.824s cpu time, 1.256s GC time
Loading theory "HOL-Combinatorics.Orbits" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Subdivision" via "Graph_Theory.Auxiliary")
Proofs for inductive predicate(s) "orbitp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Orbits"
### 0.226s elapsed time, 0.477s cpu time, 0.060s GC time
Loading theory "Graph_Theory.Auxiliary" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Subdivision")
Proofs for inductive predicate(s) "segmentp"
  Proving monotonicity ...
### theory "Graph_Theory.Auxiliary"
### 0.159s elapsed time, 0.353s cpu time, 0.079s GC time
### theory "HOL-Library.Order_Continuity"
### 0.479s elapsed time, 1.020s cpu time, 0.139s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.898s elapsed time, 1.805s cpu time, 1.277s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 1.870s elapsed time, 2.094s cpu time, 0.303s GC time
Loading theory "Graph_Theory.Stuff" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph")
### theory "Graph_Theory.Stuff"
### 0.485s elapsed time, 1.786s cpu time, 1.455s GC time
Loading theory "Graph_Theory.Digraph" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Graph_Theory.Digraph"
### 0.963s elapsed time, 1.560s cpu time, 0.175s GC time
Loading theory "Graph_Theory.Arc_Walk" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Bidirected_Digraph" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
### theory "Graph_Theory.Bidirected_Digraph"
### 0.367s elapsed time, 0.772s cpu time, 0.081s GC time
Found termination order: "{}"
### theory "Graph_Theory.Arc_Walk"
### 0.924s elapsed time, 1.438s cpu time, 0.236s GC time
Loading theory "Graph_Theory.Vertex_Walk" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph_Component_Vwalk")
Loading theory "Graph_Theory.Pair_Digraph" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Digraph_Component")
Loading theory "Graph_Theory.Weighted_Graph" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory" via "Graph_Theory.Shortest_Path")
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Graph_Theory.Weighted_Graph"
### 0.074s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Graph_Theory.Shortest_Path" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
Found termination order: "length <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  pawalk_verts :: "'a => ('a * 'a) list => 'a list"
### theory "Graph_Theory.Vertex_Walk"
### 0.511s elapsed time, 1.576s cpu time, 0.191s GC time
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_wf_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_wf_digraph G"
locale pair_fin_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_fin_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_loopfree_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_loopfree_digraph G"
locale pair_bidirected_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_bidirected_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
locale pair_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_graph G"
### theory "Graph_Theory.Shortest_Path"
### 0.658s elapsed time, 1.850s cpu time, 0.285s GC time
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
consts
  rev_path :: "('a * 'a) list => ('a * 'a) list"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
### theory "Graph_Theory.Pair_Digraph"
### 3.063s elapsed time, 4.647s cpu time, 0.615s GC time
Loading theory "Graph_Theory.Digraph_Component" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
### Ambiguous input (line 336 of "$AFP/Graph_Theory/Digraph_Component.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Digraph.dominates_indexed" ("_position" u) ("_indexdefault")
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" u) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale max_reachable_set
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and S :: "'a set"
  assumes "max_reachable_set G S"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
"LEAST x. P x"
  :: "'a"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Graph_Theory.Digraph_Component"
### 1.593s elapsed time, 1.787s cpu time, 0.262s GC time
Loading theory "Graph_Theory.Digraph_Component_Vwalk" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Digraph_Isomorphism" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
Loading theory "Graph_Theory.Subdivision" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
Proofs for inductive predicate(s) "subdivision"
  Proving monotonicity ...
### theory "Graph_Theory.Digraph_Component_Vwalk"
### 0.259s elapsed time, 0.791s cpu time, 0.086s GC time
locale subdiv_step
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
  assumes "subdiv_step G rev_G H rev_H u v w uv uw vw"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale subdiv_step
  fixes G :: "('a, 'b) pre_digraph"
    and rev_G :: "'b => 'b"
    and H :: "('a, 'b) pre_digraph"
    and rev_H :: "'b => 'b"
    and u :: "'a"
    and v :: "'a"
    and w :: "'a"
    and uv :: "'b"
    and uw :: "'b"
    and vw :: "'b"
  assumes "subdiv_step G rev_G H rev_H u v w uv uw vw"
Proofs for inductive predicate(s) "pair_sd"
  Proving monotonicity ...
### theory "Graph_Theory.Subdivision"
### 0.808s elapsed time, 1.946s cpu time, 0.204s GC time
Loading theory "Graph_Theory.Kuratowski" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
### theory "Graph_Theory.Digraph_Isomorphism"
### 0.941s elapsed time, 2.241s cpu time, 0.277s GC time
Loading theory "Graph_Theory.Euler" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath" via "Graph_Theory.Graph_Theory")
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Graph_Theory.Euler"
### 0.687s elapsed time, 1.470s cpu time, 0.216s GC time
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
### theory "Graph_Theory.Kuratowski"
### 2.490s elapsed time, 3.626s cpu time, 0.538s GC time
Loading theory "Graph_Theory.Graph_Theory" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg" via "Draft.ShortestPath")
### theory "Graph_Theory.Graph_Theory"
### 0.444s elapsed time, 0.483s cpu time, 0.050s GC time
Loading theory "Draft.ShortestPath" (required by "Draft.ShortestPathNegMoreTemplates" via "Draft.ShortestPathNeg")
locale basic_sp
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and dist :: "'a => ereal"
    and c :: "'b => real"
    and s :: "'a"
  assumes "basic_sp G dist c s"
locale basic_just_sp
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and dist :: "'a => ereal"
    and c :: "'b => real"
    and s :: "'a"
    and num :: "'a => enat"
  assumes "basic_just_sp G dist c s num"
locale shortest_path_pos_cost
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and dist :: "'a => ereal"
    and c :: "'b => real"
    and s :: "'a"
    and num :: "'a => enat"
  assumes "shortest_path_pos_cost G dist c s num"
locale basic_just_sp_pred
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and dist :: "'a => ereal"
    and c :: "'b => real"
    and s :: "'a"
    and num :: "'a => enat"
    and pred :: "'a => 'b option"
  assumes "basic_just_sp_pred G dist c s num pred"
locale shortest_path_pos_cost_pred
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and dist :: "'a => ereal"
    and c :: "'b => real"
    and s :: "'a"
    and num :: "'a => enat"
    and pred :: "'a => 'b option"
  assumes "shortest_path_pos_cost_pred G dist c s num pred"
### theory "Draft.ShortestPath"
### 0.886s elapsed time, 0.970s cpu time, 0.113s GC time
Loading theory "Draft.ShortestPathNeg" (required by "Draft.ShortestPathNegMoreTemplates")
locale shortest_paths_locale_step1
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and s :: "'a"
    and c :: "'b => real"
    and num :: "'a => nat"
    and parent_edge :: "'a => 'b option"
    and dist :: "'a => ereal"
  assumes "shortest_paths_locale_step1 G s num parent_edge dist"
locale shortest_paths_locale_step2
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and s :: "'a"
    and c :: "'b => real"
    and num :: "'a => nat"
    and parent_edge :: "'a => 'b option"
    and dist :: "'a => ereal"
  assumes "shortest_paths_locale_step2 G s c num parent_edge dist"
locale shortest_paths_locale_step3
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and s :: "'a"
    and c :: "'b => real"
    and num :: "'a => nat"
    and parent_edge :: "'a => 'b option"
    and dist :: "'a => ereal"
    and C :: "('a * 'b list) set"
  assumes "shortest_paths_locale_step3 G s c num parent_edge dist C"
locale shortest_paths_locale_step2_pred
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and s :: "'a"
    and c :: "'b => real"
    and num :: "'a => nat"
    and parent_edge :: "'a => 'b option"
    and dist :: "'a => ereal"
    and pred :: "'a => 'b option"
  assumes "shortest_paths_locale_step2_pred G s c num parent_edge dist pred"
### theory "Draft.ShortestPathNeg"
### 1.293s elapsed time, 1.441s cpu time, 0.201s GC time
Loading theory "Draft.ShortestPathNegMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ShortestPathNegMoreTemplates"
### 0.488s elapsed time, 0.675s cpu time, 0.061s GC time
val it = (): unit
