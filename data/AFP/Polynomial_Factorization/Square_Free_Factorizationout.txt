Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.117s elapsed time, 0.494s cpu time, 0.033s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Infinite_Set"
### 0.286s elapsed time, 1.146s cpu time, 0.100s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.175s elapsed time, 0.686s cpu time, 0.067s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.429s elapsed time, 1.719s cpu time, 0.170s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.Set_Algebras"
### 0.187s elapsed time, 0.740s cpu time, 0.070s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.302s elapsed time, 1.187s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.800s elapsed time, 3.177s cpu time, 0.323s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.Stream"
### 0.960s elapsed time, 3.667s cpu time, 0.796s GC time
Loading theory "Matrix.Utility" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization")
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.BigO"
### 0.756s elapsed time, 2.980s cpu time, 0.340s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "Matrix.Utility"
### 0.446s elapsed time, 1.535s cpu time, 0.763s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.125s elapsed time, 6.947s cpu time, 1.835s GC time
Loading theory "Draft.Templates" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Square_Free_FactorizationMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.174s cpu time, 0.140s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.331s elapsed time, 9.018s cpu time, 2.123s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.771s elapsed time, 5.827s cpu time, 1.420s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Polynomial_Interpolation.Ring_Hom_Poly")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
Found termination order: "length <*mlex*> {}"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
consts
  Poly :: "'a list => 'a poly"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.129s elapsed time, 4.541s cpu time, 0.419s GC time
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.757s elapsed time, 9.534s cpu time, 0.913s GC time
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 5.028s elapsed time, 14.100s cpu time, 1.332s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.206s elapsed time, 0.414s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.245s elapsed time, 16.926s cpu time, 1.523s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.312s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility" via "Polynomial_Interpolation.Missing_Polynomial")
### Cannot skip proof of schematic goal statement
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.751s elapsed time, 0.875s cpu time, 0.109s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization" via "Draft.Polynomial_Divisibility")
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.650s elapsed time, 0.762s cpu time, 0.148s GC time
Loading theory "Draft.Order_Polynomial" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization")
Loading theory "Draft.Polynomial_Divisibility" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization")
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization")
### theory "Draft.Polynomial_Divisibility"
### 0.057s elapsed time, 0.172s cpu time, 0.000s GC time
### theory "Draft.Order_Polynomial"
### 0.085s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Square_Free_FactorizationMoreTemplates" via "Draft.Square_Free_Factorization")
### theory "Draft.Fundamental_Theorem_Algebra_Factorized"
### 0.230s elapsed time, 0.462s cpu time, 0.000s GC time
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 1.205s elapsed time, 1.659s cpu time, 0.104s GC time
Loading theory "Draft.Square_Free_Factorization" (required by "Draft.Square_Free_FactorizationMoreTemplates")
locale yun_gcd
  fixes Gcd :: "'a poly => 'a poly => 'a poly"
locale monic_factorization
  fixes as :: "('a poly * nat) set"
    and p :: "'a poly"
  assumes "monic_factorization as p"
Found termination order:
  "case_sum (case_sum size size) (case_sum size size) <*mlex*>
   case_sum (case_sum (%x. Suc 0) (%x. 0)) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. 0) (%x. Suc 0)) <*mlex*> {}"
locale field_hom_0'
  fixes hom :: "'a => 'b"
  assumes "field_hom_0' hom"
### theory "Draft.Square_Free_Factorization"
### 1.415s elapsed time, 1.579s cpu time, 0.208s GC time
Loading theory "Draft.Square_Free_FactorizationMoreTemplates"
val templateLemmas =
   [("Square_Free_Factorization.square_free_iff_separable",
     "square_free ?f = separable ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Square_Free_Factorization.irreducible\<^sub>d_square_free",
     "irreducible\<^sub>d ?p ==> square_free ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.rsquarefree_square_free_complex",
     "rsquarefree ?p ==> square_free ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.separable_imp_square_free",
     "separable ?f ==> square_free ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.square_free_rsquarefree",
     "square_free ?f ==> rsquarefree ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.square_free_imp_separable",
     "square_free ?f ==> separable ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.yun_factorization_0",
     "yun_factorization ?Gcd 0 = (0::?'a, [])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Square_Free_Factorization.square_free_multD",
     "square_free (?f * ?g) ==> square_free ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("Square_Free_Factorization.square_free_multD",
     "square_free (?f * ?g) ==> square_free ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Square_Free_Factorization.square_free_factorizationD",
     "square_free_factorization ?p (?c, ?bs) ==> distinct ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.yun_factorization",
     "yun_factorization gcd ?p = ?c_bs ==>
      square_free_factorization ?p ?c_bs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Square_Free_Factorization.square_free_factor",
     "[| ?a dvd ?p; square_free ?p |] ==> square_free ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Square_Free_Factorization.square_free_factorizationD'",
     "square_free_factorization ?p (?c, ?bs) ==>
      square_free (prod_list (map fst ?bs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Square_Free_Factorization.square_free_poly",
     "(poly (square_free_poly gcd ?p) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_hole 0),
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 0))),
    ("Square_Free_Factorization.square_free_smult_iff",
     "?c ~= (0::?'a) ==> square_free (smult ?c ?f) = square_free ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Square_Free_Factorization.constant_square_free_factorization",
     "degree ?p = 0 ==> square_free_factorization ?p (coeff ?p 0, [])",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 4)),
               template_hole 0))
           ))),
    ("Square_Free_Factorization.monic_factorization",
     "monic ?p ==> EX as. monic_factorization as ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Square_Free_Factorization.square_free_smult",
     "[| ?c ~= (0::?'a); square_free ?f |] ==> square_free (smult ?c ?f)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization.prod_list_pow_suc",
     "(PROD x<-?bs. x * x ^ ?i) = prod_list ?bs * prod_list ?bs ^ ?i",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 1)))),
    ("Square_Free_Factorization.yun_monic_factorization",
     "[| yun_gcd.yun_monic_factorization gcd ?p = ?bs; monic ?p |]
      ==> distinct (map snd ?bs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 1),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 1),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Square_Free_Factorization.square_free_factorizationD",
     "[| square_free_factorization ?p (?c, ?bs); ?p = 0 |]
      ==> ?c = (0::?'a) & ?bs = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_equation (template_var 2, template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Square_Free_Factorization.square_free_factorizationD'",
     "[| square_free_factorization ?p (?c, ?bs); ?p = 0 |]
      ==> ?c = (0::?'a) & ?bs = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_equation (template_var 2, template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Square_Free_Factorization.square_free_square_free_factorization",
     "[| square_free ?p; degree ?p ~= 0 |]
      ==> square_free_factorization ?p (1::?'a, [(?p, 0)])",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 6)),
                 template_hole 0)))
           ))),
    ("Square_Free_Factorization.yun_monic_factorization",
     "[| yun_gcd.yun_monic_factorization gcd ?p = ?bs; monic ?p |]
      ==> square_free_factorization ?p (1::?'a, ?bs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 1),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 0))
           ))),
    ("Square_Free_Factorization.square_free_factorizationD'",
     "[| square_free_factorization ?p (?c, ?bs); (?b, ?i) : set ?bs |]
      ==> degree ?b ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 2))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Square_Free_Factorization.square_free_multD",
     "[| square_free (?f * ?g); ?h dvd ?f; ?h dvd ?g |] ==> degree ?h = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Square_Free_Factorization.square_free_factorizationD",
     "square_free_factorization ?p (?c, ?bs) ==>
      ?p = smult ?c (PROD (a, i):set ?bs. a ^ Suc i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 0, template_var 0)))))),
    ("Square_Free_Factorization.square_free_factorization_prod_list",
     "square_free_factorization ?p (?c, ?bs) ==>
      ?p = smult ?c (PROD (a, i)<-?bs. a ^ Suc i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 0)))))),
    ("Square_Free_Factorization.square_free_factorizationD'",
     "square_free_factorization ?p (?c, ?bs) ==>
      ?p = smult ?c (PROD (a, i)<-?bs. a ^ Suc i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 0)))))),
    ("Square_Free_Factorization.square_free_monic_poly",
     "monic ?p ==>
      (poly (yun_gcd.square_free_monic_poly gcd ?p) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1),
            template_app (template_hole 6, template_var 1)),
          template_hole 5)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0),
           template_hole 0),
         template_equation
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Square_Free_Factorization.square_free_prod_list_distinct",
     "[| square_free (prod_list ?us); !!u. u : set ?us ==> 0 < degree u |]
      ==> distinct ?us",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.square_free_factorization_smult",
     "[| ?c ~= (0::?'a); square_free_factorization ?p (?d, ?bs) |]
      ==> square_free_factorization (smult ?c ?p) (?c * ?d, ?bs)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0))
           ))),
    ("Square_Free_Factorization.yun_factorization",
     "[| yun_factorization gcd ?p = ?c_bs; (?b, ?i) : set (snd ?c_bs) |]
      ==> monic ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Square_Free_Factorization.square_free_factorizationD",
     "[| square_free_factorization ?p (?c, ?bs); (?a, ?i) : set ?bs |]
      ==> square_free ?a & degree ?a ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)))
           ))),
    ("Square_Free_Factorization.square_free_separable_main",
     "[| square_free ?f; ~ separable ?f |]
      ==> EX g k. ?f = g * k & degree g ~= 0 & pderiv g = 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 0))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Square_Free_Factorization.yun_monic_factorization",
     "[| yun_gcd.yun_monic_factorization gcd ?p = ?bs; monic ?p;
         (?b, ?i) : set ?bs |]
      ==> monic ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app (template_hole 4, template_var 3)),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 4, template_var 1)),
         template_hole 3))),
    ("Square_Free_Factorization.square_free_prodD",
     "[| square_free (\<Prod>?fs); finite ?fs; ?f : ?fs; ?g : ?fs;
         ?f ~= ?g |]
      ==> coprime ?f ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 2))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Square_Free_Factorization.square_freeI",
     "[| !!q. [| 0 < degree q; q ~= 0; q * q dvd ?p |] ==> False; ?p ~= 0 |]
      ==> square_free ?p",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization.square_free_factorization_order_root_mem",
     "[| square_free_factorization ?p (?c, ?bs); ?p ~= 0;
         (?a, ?i) : set ?bs; poly ?a ?x = (0::?'a) |]
      ==> order ?x ?p = Suc ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 5),
         template_app (template_hole 0, template_var 1)))),
    ("Square_Free_Factorization.square_free_factorizationD",
     "[| square_free_factorization ?p (?c, ?bs); (?a, ?i) : set ?bs;
         (?b, ?j) : set ?bs; (?a, ?i) ~= (?b, ?j) |]
      ==> coprime ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 4))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Square_Free_Factorization.monic_square_free_irreducible_factorization",
     "[| monic ?f; square_free ?f |]
      ==> EX P. finite P &
                ?f = \<Prod>P & P <= {q. irreducible q & monic q}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 0),
            template_app (template_hole 10, template_var 0)),
          template_hole 9),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Square_Free_Factorization.square_free_factorization_order_root_no_mem",
     "[| square_free_factorization ?p (?c, ?bs); ?p ~= 0;
         !!a i. (a, i) : set ?bs ==> poly a ?x ~= (0::?'a) |]
      ==> order ?x ?p = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 3),
         template_hole 0))),
    ("Square_Free_Factorization.square_free_factorization_root",
     "[| square_free_factorization ?p (?c, ?bs); ?p ~= 0 |]
      ==> {x. poly ?p x = (0::?'a)} =
          {x. EX a i. (a, i) : set ?bs & poly a x = (0::?'a)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 11))],
       template_equation
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 9, t_empty)))),
    ("Square_Free_Factorization.square_free_factorization_prod_listI",
     "[| square_free_factorization ?p
          (?c, ?bs1.0 @ (prod_list ?bs, ?i) # ?bs2.0);
         !!b. b : set ?bs ==> 0 < degree b |]
      ==> square_free_factorization ?p
           (?c, ?bs1.0 @ map (%b. (b, ?i)) ?bs @ ?bs2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_app
               (template_app (template_hole 11, template_var 4),
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 2)),
                        template_var 1)),
                    template_var 0))))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 5),
             template_app
              (template_app (template_hole 11, template_var 4),
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 2)),
                   template_var 0))))
           ))),
    ("Square_Free_Factorization.square_free_factorization_smult_prod_listI",
     "[| square_free_factorization ?p
          (?c, ?bs1.0 @ (smult ?b (prod_list ?bs), ?i) # ?bs2.0);
         !!b. b : set ?bs ==> 0 < degree b |]
      ==> square_free_factorization ?p
           (?c * ?b ^ Suc ?i, ?bs1.0 @ map (%b. (b, ?i)) ?bs @ ?bs2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app
               (template_app (template_hole 15, template_var 5),
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 3),
                            template_app
                             (template_hole 10, template_var 2))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 16, template_var 6),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app (template_hole 1, template_var 1)))),
               template_app
                (template_app (template_hole 14, template_var 4),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 2)),
                   template_var 0))))
           ))),
    ("Square_Free_Factorization.square_free_factorization_factorI",
     "[| square_free_factorization ?p (?c, ?bs1.0 @ (?a, ?i) # ?bs2.0);
         degree ?r ~= 0; degree ?s ~= 0; ?a = ?r * ?s |]
      ==> square_free_factorization ?p
           (?c, ?bs1.0 @ (?r, ?i) # (?s, ?i) # ?bs2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3)),
                    template_var 2))))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 7),
             template_app
              (template_app (template_hole 9, template_var 6),
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 3)),
                     template_var 2)))))
           ))),
    ("Square_Free_Factorization.monic_factorization_uniqueness",
     "[| finite ?P; \<Prod>?P = \<Prod>?Q;
         ?P <= {q. irreducible\<^sub>d q & monic q}; finite ?Q;
         ?Q <= {q. irreducible\<^sub>d q & monic q} |]
      ==> ?P = ?Q",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 9, t_empty), template_var 1),
          template_app
           (template_app (template_hole 9, t_empty), template_var 0)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Square_Free_Factorization.square_free_factorizationI'",
     "[| ?p = smult ?c (PROD (a, i)<-?bs. a ^ Suc i);
         square_free (prod_list (map fst ?bs));
         !!b i. (b, i) : set ?bs ==> 0 < degree b;
         ?p = 0 ==> ?c = (0::?'a) & ?bs = [] |]
      ==> square_free_factorization ?p (?c, ?bs)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 23, template_var 1),
            template_app
             (template_hole 22,
              template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, t_empty)),
                template_var 0)))),
        template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 16),
                  template_var 0)))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 7)],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 4)),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2))
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization.square_free_factorization_order_root",
     "[| square_free_factorization ?p (?c, ?bs); ?p ~= 0 |]
      ==> (order ?x ?p = ?i) =
          (?i = 0 & (ALL a j. (a, j) : set ?bs --> poly a ?x ~= (0::?'a)) |
           (EX a j. (a, j) : set ?bs & poly a ?x = (0::?'a) & ?i = Suc j))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 4),
              template_app
               (template_app (template_hole 21, template_var 3),
                template_var 2))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 18))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 15, template_var 1),
             template_var 4),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 16, template_var 0),
                       template_hole 12)),
                   template_app (template_hole 11, t_empty))),
               template_app (template_hole 2, t_empty))
             )))),
    ("Square_Free_Factorization.yun_factorization_induct",
     "[| !!bn cn. bn = 1 ==> ?P bn cn;
         !!bn cn.
            [| bn ~= 1;
               ?P (bn div gcd bn (cn - pderiv bn))
                ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) |]
            ==> ?P bn cn;
         ?bn = ?p div gcd ?p (pderiv ?p);
         ?cn = pderiv ?p div gcd ?p (pderiv ?p); monic ?p |]
      ==> ?P ?bn ?cn",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 4, template_var 1)))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 4, template_var 1)),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 4, template_var 1)))),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 1)),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 0)
           ))),
    ("Square_Free_Factorization.square_free_factorization_further_factorization",
     "[| square_free_factorization ?p (?c, ?bs);
         !!b i d fs.
            [| (b, i) : set ?bs; ?f b = (d, fs) |]
            ==> b = smult d (prod_list fs) & (ALL f:set fs. 0 < degree f);
         ?h =
         (%(b, i).
             case ?f b of (d, fs) => (d ^ Suc i, map (%f. (f, i)) fs));
         ?gs = map ?h ?bs; ?d = ?c * prod_list (map fst ?gs);
         ?es = concat (map snd ?gs) |]
      ==> square_free_factorization ?p (?d, ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 36, template_var 7),
              template_app
               (template_app (template_hole 35, template_var 6),
                template_var 5))
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_equation
         (template_var 3, template_app (template_hole 15, t_empty)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 5)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 7, template_var 6),
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2)))),
        template_equation
         (template_var 0,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 36, template_var 7),
             template_app
              (template_app (template_hole 35, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Square_Free_FactorizationMoreTemplates"
### 0.499s elapsed time, 0.659s cpu time, 0.000s GC time
val it = (): unit
