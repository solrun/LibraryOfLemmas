   [("Missing_Polynomial_Factorial.degree_unit_factor",
     "degree (unit_factor ?f) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Missing_Polynomial_Factorial.degree_normalize",
     "degree (normalize ?f) = degree ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Missing_Polynomial_Factorial.primitive_part_idemp",
     "primitive_part (primitive_part ?f) = primitive_part ?f",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Polynomial_Factorial.primitive_iff_content_eq_1",
     "primitive ?f = (content ?f = (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Missing_Polynomial_Factorial.primitive_part_normalize",
     "primitive_part (normalize ?f) = normalize (primitive_part ?f)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Missing_Polynomial_Factorial.length_coeffs_primitive_part",
     "length (coeffs (primitive_part ?f)) = length (coeffs ?f)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("Missing_Polynomial_Factorial.content_field_poly",
     "content ?f = (if ?f = 0 then 0::?'a else (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_dunno)),
    ("Missing_Polynomial_Factorial.content_pCons",
     "content (pCons ?a ?p) = gcd ?a (content ?p)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_Polynomial_Factorial.content_gcd_content",
     "content (gcd ?f ?g) = gcd (content ?f) (content ?g)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_Polynomial_Factorial.gcd_primitive_part",
     "gcd (primitive_part ?f) (primitive_part ?g) =
      normalize (primitive_part (gcd ?f ?g))",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Missing_Polynomial_Factorial.is_unit_field_poly",
     "is_unit ?p = (?p ~= 0 & degree ?p = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_dunno)),
    ("Missing_Polynomial_Factorial.content_iff",
     "(?x dvd content ?p) = (ALL c:set (coeffs ?p). ?x dvd c)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         t_empty))),
    ("Missing_Polynomial_Factorial.primitive_part_gcd",
     "primitive_part (gcd ?f ?g) =
      unit_factor (gcd ?f ?g) *
      gcd (primitive_part ?f) (primitive_part ?g)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Missing_Polynomial_Factorial.gcd_smult",
     "gcd (smult ?a ?f) ?g =
      (if ?a = (0::?'a) | ?f = 0 then normalize ?g
       else smult (gcd ?a (content ?g div gcd (content ?f) (content ?g)))
             (gcd ?f ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Missing_Polynomial_Factorial.gcd_poly_code_code",
     "gcd_poly_code ?p ?q =
      (if ?p = 0 then normalize ?q
       else if ?q = 0 then normalize ?p
            else let c1 = content ?p; c2 = content ?q;
                     p' = map_poly (%x. x div c1) ?p;
                     q' = map_poly (%x. x div c2) ?q
                 in smult (gcd c1 c2) (gcd_poly_code_aux p' q'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_dunno))]
