Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "Draft.Missing_List" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Function_Algebras"
### 0.101s elapsed time, 0.431s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Adhoc_Overloading"
### 0.103s elapsed time, 0.444s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "Draft.Missing_List")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Monad_Syntax"
### 0.038s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.280s cpu time, 0.071s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.841s cpu time, 0.071s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.452s elapsed time, 1.798s cpu time, 0.160s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.936s cpu time, 0.916s GC time
Loading theory "Matrix.Utility" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "Draft.Missing_List")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.097s elapsed time, 4.168s cpu time, 0.916s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.266s elapsed time, 0.884s cpu time, 0.095s GC time
Loading theory "Draft.Missing_List" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.393s elapsed time, 8.385s cpu time, 2.181s GC time
Loading theory "Draft.Templates" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.ExtrEqs")
consts
  list_union :: "'a list => 'a list => 'a list"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Prime_FactorizationMoreTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.668s elapsed time, 2.056s cpu time, 0.225s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Missing_List"
### 1.995s elapsed time, 5.858s cpu time, 1.436s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.016s elapsed time, 11.705s cpu time, 3.412s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
Loading theory "Draft.Missing_Multiset" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization")
### theory "Draft.Missing_Multiset"
### 0.210s elapsed time, 0.575s cpu time, 0.104s GC time
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.436s elapsed time, 5.048s cpu time, 0.530s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization" via "HOL-Computational_Algebra.Primes")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.077s elapsed time, 6.427s cpu time, 0.385s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Prime_FactorizationMoreTemplates" via "Draft.Prime_Factorization")
### theory "HOL-Computational_Algebra.Primes"
### 0.177s elapsed time, 0.195s cpu time, 0.000s GC time
Loading theory "Draft.Prime_Factorization" (required by "Draft.Prime_FactorizationMoreTemplates")
(%n. mset (prime_factorization_nat n)) = prime_factorization
### theory "Draft.Prime_Factorization"
### 0.412s elapsed time, 0.437s cpu time, 0.000s GC time
Loading theory "Draft.Prime_FactorizationMoreTemplates"
val templateLemmas =
   [("Prime_Factorization.divisors_int", "distinct (divisors_int ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Prime_Factorization.divisors_int_pos",
     "distinct (divisors_int_pos ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Prime_Factorization.divisors_nat", "distinct (divisors_nat ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Prime_Factorization.prime_nat", "prime_nat ?n = prime ?n",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Prime_Factorization.prime_factorization_nat",
     "Ball (set (prime_factorization_nat ?n)) prime",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Prime_Factorization.multiset_prime_factorization_nat_correct",
     "prime_factorization ?n = mset (prime_factorization_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Prime_Factorization.prime_factorization_nat",
     "?n = 0 ==> prime_factorization_nat ?n = []",
     template_implication
      ([template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Prime_Factorization.prime_factorization_nat",
     "?n ~= 0 ==> prod_list (prime_factorization_nat ?n) = ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Prime_Factorization.prod_mset_multiset_prime_factorization_nat",
     "?x ~= 0 ==> \<Prod>\<^sub># (prime_factorization ?x) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> distinct ?ps",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> candidate_invariant ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Prime_Factorization.divisors_int",
     "?x ~= 0 ==> set (divisors_int ?x) = {i. i dvd ?x}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("Prime_Factorization.divisors_nat",
     "?n ~= 0 ==> set (divisors_nat ?n) = {p. p dvd ?n}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> sorted ?ps",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> ?n < ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_inequation (less_than, template_var 2, template_var 1))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> ?ps ~= []",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Prime_Factorization.divisors_int_pos",
     "?x ~= 0 ==> set (divisors_int_pos ?x) = {i. i dvd ?x & 0 < i}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Prime_Factorization.divisors_funD",
     "[| divisors_fun ?df; ?x ~= (0::?'a); ?d dvd ?x |]
      ==> ?d : set (?df ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)))
           ))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> set ?ps <= {2..} Int {?n..<?m}",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Prime_Factorization.prime_factorization_unique''",
     "[| !!p. p :# ?A ==> prime p; \<Prod>\<^sub># ?A = normalize ?x |]
      ==> prime_factorization ?x = ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Prime_Factorization.prime_divisor",
     "[| 2 <= ?j; ?j dvd ?n |] ==> EX p. prime p & p dvd ?j & p dvd ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Prime_Factorization.divisors_pos_funD",
     "[| divisors_pos_fun ?df; ?x ~= (0::?'a); ?d dvd ?x; (0::?'a) < ?d |]
      ==> ?d : set (?df ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)))
           ))),
    ("Prime_Factorization.next_candidates",
     "[| next_candidates ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> {i. prime i & ?n <= i & i < ?m} <= set ?ps",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_inequation
        (less_equals, template_app (template_hole 5, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Prime_Factorization.prime_sqrtI",
     "[| 2 <= ?n; !!j. [| 2 <= j; j < ?i |] ==> ~ j dvd ?n;
         ~ ?i * ?i <= ?n |]
      ==> prime ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 1),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Prime_Factorization.remove_prime_factor",
     "[| remove_prime_factor ?i ?n ?ps = (?m, ?qs); 1 < ?i; ?n ~= 0 |]
      ==> EX rs.
             ?qs = rs @ ?ps &
             ?n = ?m * prod_list rs & ~ ?i dvd ?m & set rs <= {?i}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 14, template_var 4),
        template_negation
         (template_equation (template_var 3, template_hole 11))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Prime_Factorization.prime_test_iterate2",
     "[| !!j. [| 2 <= j; j < ?i |] ==> ~ j dvd ?n; odd ?n; 3 <= ?n; 3 <= ?i;
         odd ?i; ~ ?i dvd ?n; 2 <= ?j; ?j < ?i + 2 |]
      ==> ~ ?j dvd ?n",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 1)
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 1, template_hole 5)),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 1, template_hole 5)),
          template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 0, template_var 2),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5))))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)
               )
           ))),
    ("Prime_Factorization.prime_nat_main",
     "[| ?ni = (?n, ?i, ?is); 2 <= ?i; 2 <= ?n;
         !!j. [| 2 <= j; j < ?i |] ==> ~ j dvd ?n;
         !!j. [| ?i <= j; j < ?jj; prime j |] ==> j : set ?is; ?i <= ?jj;
         sorted ?is; distinct ?is; candidate_invariant ?jj;
         set ?is <= {?i..<?jj}; ?res = prime_nat_main ?n ?jj ?is |]
      ==> ?res = prime ?n",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 19, template_var 4),
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_hole 14)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 15, template_hole 14)),
          template_var 4),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 17),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 0, template_var 4),
              template_var 1),
            template_var 2))],
       template_equation
        (template_var 0, template_app (template_hole 9, template_var 4)))),
    ("Prime_Factorization.prime_factorization_nat_main",
     "[| ?ni = (?n, ?i, ?is); 2 <= ?i; 2 <= ?n;
         !!j. [| 2 <= j; j < ?i |] ==> ~ j dvd ?n;
         !!j. [| ?i <= j; j < ?jj; prime j |] ==> j : set ?is; ?i <= ?jj;
         sorted ?is; distinct ?is; candidate_invariant ?jj;
         set ?is <= {?i..<?jj};
         ?res = prime_factorization_nat_main ?n ?jj ?is ?ps |]
      ==> EX qs. ?res = qs @ ?ps & Ball (set qs) prime & ?n = prod_list qs",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 25, template_var 5),
            template_app
             (template_app (template_hole 24, template_var 4),
              template_var 3))),
        template_inequation
         (less_equals,
          template_app
           (template_hole 22,
            template_app (template_hole 21, template_hole 20)),
          template_var 4),
        template_inequation
         (less_equals,
          template_app
           (template_hole 22,
            template_app (template_hole 21, template_hole 20)),
          template_var 5),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_inequation (less_equals, template_var 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 23),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 13, template_var 3),
          template_app
           (template_app (template_hole 8, template_var 4),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 2),
              template_var 3),
            template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Prime_FactorizationMoreTemplates"
### 0.464s elapsed time, 0.783s cpu time, 0.199s GC time
val it = (): unit
