   [("Gauss_Lemma.abs_content_int", "\<bar>content ?p\<bar> = content ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Lemma.irreducible\<^sub>d_as_irreducible",
     "irreducible\<^sub>d ?p = irreducible (primitive_part ?p)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gauss_Lemma.irreducible\<^sub>d_primitive_part",
     "irreducible\<^sub>d (primitive_part ?p) = irreducible\<^sub>d ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gauss_Lemma.content_smult_int",
     "content (smult ?a ?p) = \<bar>?a\<bar> * content ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Gauss_Lemma.primitive_part_smult_int",
     "primitive_part (smult ?d ?f) = smult (sgn ?d) (primitive_part ?f)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gauss_Lemma.irreducible_smult",
     "irreducible (smult ?c ?p) = (irreducible ?p & ?c ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Gauss_Lemma.gcd_rat_to_gcd_int",
     "gcd (of_int_poly ?f) (of_int_poly ?g) =
      smult (inverse (rat_of_int (lead_coeff (gcd ?f ?g))))
       (of_int_poly (gcd ?f ?g))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Gauss_Lemma.rat_to_normalized_int_poly_code",
     "rat_to_normalized_int_poly ?p =
      (if ?p = 0 then (1, 0)
       else case rat_to_int_poly ?p of
            (s, q) =>
              let c = content q
              in (rat_of_int c / rat_of_int s, sdiv_poly q c))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_dunno))]
