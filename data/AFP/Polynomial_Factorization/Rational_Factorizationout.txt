Loading theory "Containers.Extend_Partial_Order" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
Loading theory "Deriving.Comparator" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Containers.List_Fusion" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Lexicographic_Order")
Loading theory "Deriving.Derive_Manager" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Containers_Generator")
Proofs for inductive predicate(s) "terminates_onp"
  Proving monotonicity ...
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.055s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "Deriving.Generator_Aux" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Containers_Generator")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
### theory "Containers.Extend_Partial_Order"
### 0.129s elapsed time, 0.517s cpu time, 0.057s GC time
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.154s elapsed time, 0.602s cpu time, 0.057s GC time
Loading theory "HOL-Library.AList" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "HOL-Library.RBT_Mapping" via "HOL-Library.Mapping")
locale list
  fixes g :: "('a, 's) generator"
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
consts
  list_has_next :: "'a list => bool"
### No equation for constructor "[]"
consts
  list_next :: "'a list => 'a * 'a list"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "{}"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
### theory "Deriving.Comparator"
### 0.800s elapsed time, 3.030s cpu time, 0.566s GC time
Loading theory "Deriving.Compare" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
Proofs for inductive predicate(s) "filter_has_next"
  Proving monotonicity ...
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "Containers.List_Fusion"
### 0.987s elapsed time, 3.763s cpu time, 0.586s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.881s elapsed time, 3.332s cpu time, 0.530s GC time
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation" via "HOL-Library.Monad_Syntax")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.084s elapsed time, 0.323s cpu time, 0.058s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Containers.Containers_Auxiliary" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.047s elapsed time, 3.974s cpu time, 0.653s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
### Dropping global mixfix syntax: "less_eq_prod" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod" (infix \<open>\<sqsubset>\<close> 50)
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
### theory "Containers.Containers_Auxiliary"
### 0.174s elapsed time, 0.683s cpu time, 0.066s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Lexicographic_Order")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.075s elapsed time, 0.289s cpu time, 0.051s GC time
Loading theory "Containers.Lexicographic_Order" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.598s elapsed time, 2.352s cpu time, 0.195s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Improved_Code_Equations" via "HOL-Library.Code_Target_Nat")
### theory "HOL-Library.Code_Abstract_Nat"
### 0.049s elapsed time, 0.194s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Improved_Code_Equations")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.530s elapsed time, 2.087s cpu time, 0.174s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Code_Target_Nat"
### 0.124s elapsed time, 0.487s cpu time, 0.027s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Containers.Lexicographic_Order"
### 0.248s elapsed time, 0.986s cpu time, 0.027s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.401s elapsed time, 1.581s cpu time, 0.078s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.Function_Algebras"
### 0.096s elapsed time, 0.384s cpu time, 0.000s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "HOL-Library.RBT_Mapping")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  enumerate :: "'a set => nat => 'a"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.489s elapsed time, 1.775s cpu time, 0.713s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
### theory "HOL-Library.Infinite_Set"
### 0.485s elapsed time, 1.755s cpu time, 0.734s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
### theory "HOL-Library.More_List"
### 0.210s elapsed time, 0.831s cpu time, 0.083s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.510s elapsed time, 2.005s cpu time, 0.214s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "HOL-Library.Cardinality")
Found termination order: "size_list size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Nat_Bijection"
### 0.362s elapsed time, 1.425s cpu time, 0.176s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs")
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Mapping"
### 1.314s elapsed time, 5.048s cpu time, 0.994s GC time
Loading theory "HOL-Library.RBT_Impl" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.RBT_ext")
### theory "HOL-Library.Phantom_Type"
### 0.869s elapsed time, 3.229s cpu time, 1.151s GC time
Loading theory "Containers.Containers_Generator" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
signature CONTAINERS_GENERATOR =
  sig
    val HOLogic_list_conj: term list -> term
    val all_tys: term -> typ list -> term -> term
    val derive_is_c_dots_lemma:
       typ -> string -> thm list -> string -> theory -> theory
    val derive_none:
       string -> sort -> (typ -> term) -> string -> theory -> theory
    val derive_set_map_impl:
       string ->
         sort ->
           (string * term) list -> string -> string -> theory -> theory
    val is_class_instance: theory -> string -> sort -> bool
    val mk_Some: term -> term
    val mk_is_c_dots: typ -> string -> term
    val register_is_c_dots_lemma:
       string -> string -> thm -> theory -> theory
  end
structure Containers_Generator: CONTAINERS_GENERATOR
### theory "Containers.Containers_Generator"
### 0.449s elapsed time, 1.758s cpu time, 0.223s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.301s elapsed time, 4.928s cpu time, 1.281s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Additional type variable(s) in locale specification "card2": 'a
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.946s cpu time, 0.116s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
consts
  entries :: "('a, 'b) rbt => ('a * 'b) list"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.765s elapsed time, 3.030s cpu time, 0.290s GC time
Loading theory "Containers.Set_Linorder" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
consts
  rbt_sorted :: "('a, 'b) rbt => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  rbt_lookup :: "('a, 'b) rbt => 'a => 'b option"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  color_of :: "('a, 'b) rbt => color"
consts
  bheight :: "('a, 'b) rbt => nat"
consts
  inv1 :: "('a, 'b) rbt => bool"
consts
  inv1l :: "('a, 'b) rbt => bool"
consts
  inv2 :: "('a, 'b) rbt => bool"
Found termination order: "size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
specification
  finite_complement_partition: finite ?A ==> ?A : infinite_complement_partition
  complement_partition: infinite UNIV ==>
(?A : infinite_complement_partition) =
(- ?A ~: infinite_complement_partition)
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.397s elapsed time, 17.021s cpu time, 3.121s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
Found termination order: "size <*mlex*> {}"
class proper_interval = proper_intrvl +
  assumes
    "proper_interval_simps": "proper_interval None None = True"
      "!!y. proper_interval None (Some y) = (EX z. z < y)"
      "!!x. proper_interval (Some x) None = (EX z. x < z)"
      "!!x y. proper_interval (Some x) (Some y) = (EX z>x. z < y)"
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
### theory "HOL-Library.Tree"
### 2.199s elapsed time, 8.681s cpu time, 1.026s GC time
Loading theory "Draft.Templates" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Cauchy.CauchysMeanTheorem" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Sqrt_Babylonian.Sqrt_Babylonian" via "Sqrt_Babylonian.NthRoot_Impl")
### theory "Cauchy.CauchysMeanTheorem"
### 0.259s elapsed time, 1.027s cpu time, 0.103s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "HOL-Library.BigO"
### 0.877s elapsed time, 3.467s cpu time, 0.477s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rational_FactorizationMoreTemplates")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.252s elapsed time, 4.686s cpu time, 2.160s GC time
Loading theory "Sqrt_Babylonian.Sqrt_Babylonian_Auxiliary" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Sqrt_Babylonian.Sqrt_Babylonian")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "Sqrt_Babylonian.Sqrt_Babylonian_Auxiliary"
### 0.452s elapsed time, 1.787s cpu time, 0.109s GC time
Loading theory "Polynomial_Interpolation.Is_Rat_To_Rat" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class is_rat = field_char_0 +
  fixes is_rat :: "'a => bool"
    and to_rat :: "'a => rat"
  assumes
    "is_rat":
      "!!x. is_rat x = (x : field_char_0.Rats (/) (1::'a) (+) (0::'a) (-))"
    and
    "to_rat":
      "!!x. to_rat x =
            (if x : field_char_0.Rats (/) (1::'a) (+) (0::'a) (-)
             then THE y.
                     x = field_char_0.of_rat (/) (1::'a) (+) (0::'a) (-) y
             else 0)"
instantiation
  rat :: is_rat
  is_rat_rat == is_rat :: rat => bool
  to_rat_rat == to_rat :: rat => rat
instantiation
  real :: is_rat
  is_rat_real == is_rat :: real => bool
  to_rat_real == to_rat :: real => rat
instantiation
  complex :: is_rat
  is_rat_complex == is_rat :: complex => bool
  to_rat_complex == to_rat :: complex => rat
### theory "Polynomial_Interpolation.Is_Rat_To_Rat"
### 0.989s elapsed time, 3.912s cpu time, 0.188s GC time
Loading theory "Sqrt_Babylonian.Log_Impl" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Sqrt_Babylonian.Sqrt_Babylonian" via "Sqrt_Babylonian.NthRoot_Impl")
### theory "Sqrt_Babylonian.Log_Impl"
### 0.226s elapsed time, 0.898s cpu time, 0.000s GC time
Loading theory "Sqrt_Babylonian.NthRoot_Impl" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Sqrt_Babylonian.Sqrt_Babylonian")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
locale fixed_root
  fixes p :: "nat"
    and pm :: "nat"
  assumes "fixed_root p pm"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale fixed_root
  fixes p :: "nat"
    and pm :: "nat"
  assumes "fixed_root p pm"
### theory "Sqrt_Babylonian.NthRoot_Impl"
### 0.565s elapsed time, 2.248s cpu time, 0.158s GC time
Loading theory "Sqrt_Babylonian.Sqrt_Babylonian" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
locale sqrt_approximation
  fixes \<epsilon> :: "'a"
    and n :: "'a"
  assumes "sqrt_approximation \<epsilon> n"
### theory "Sqrt_Babylonian.Sqrt_Babylonian"
### 0.334s elapsed time, 1.328s cpu time, 0.139s GC time
Loading theory "Matrix.Utility" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Missing_List")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 1.008s elapsed time, 3.595s cpu time, 2.523s GC time
Loading theory "Draft.Missing_List" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
instantiation
  unit :: proper_interval
  proper_interval_unit == proper_interval ::
    unit option => unit option => bool
Found termination order: "{}"
instantiation
  bool :: proper_interval
  proper_interval_bool == proper_interval ::
    bool option => bool option => bool
Found termination order: "{}"
Found termination order: "size_list length <*mlex*> {}"
instantiation
  nat :: proper_interval
  proper_interval_nat == proper_interval :: nat option => nat option => bool
Found termination order: "{}"
instantiation
  int :: proper_interval
  proper_interval_int == proper_interval :: int option => int option => bool
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
instantiation
  integer :: proper_interval
  proper_interval_integer == proper_interval ::
    integer option => integer option => bool
instantiation
  natural :: proper_interval
  proper_interval_natural == proper_interval ::
    natural option => natural option => bool
instantiation
  char :: proper_interval
  proper_interval_char == proper_interval ::
    char option => char option => bool
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
instantiation
  Enum.finite_1 :: proper_interval
  proper_interval_finite_1 == proper_interval ::
    Enum.finite_1 option => Enum.finite_1 option => bool
instantiation
  Enum.finite_2 :: proper_interval
  proper_interval_finite_2 == proper_interval ::
    Enum.finite_2 option => Enum.finite_2 option => bool
Found termination order: "{}"
instantiation
  Enum.finite_3 :: proper_interval
  proper_interval_finite_3 == proper_interval ::
    Enum.finite_3 option => Enum.finite_3 option => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
consts
  list_union :: "'a list => 'a list => 'a list"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Containers.Set_Linorder"
### 9.393s elapsed time, 36.513s cpu time, 7.198s GC time
Loading theory "Containers.Collection_Order" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ccompare = type +
  fixes ccompare :: "('a => 'a => order) option"
  assumes "ccompare": "!!comp. ccompare = Some comp ==> comparator comp"
class ccompare = type +
  fixes ccompare :: "('a => 'a => order) option"
  assumes "ccompare": "!!comp. ccompare = Some comp ==> comparator comp"
### theory "Draft.Missing_List"
### 1.954s elapsed time, 7.749s cpu time, 0.643s GC time
Loading theory "Draft.Missing_Multiset" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Prime_Factorization")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 8.387s elapsed time, 32.540s cpu time, 6.696s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
signature CCOMPARE_GENERATOR =
  sig
    val ccompare_instance_via_comparator: string -> theory -> theory
    val ccompare_instance_via_compare: string -> theory -> theory
    val derive_no_ccompare: string -> theory -> theory
  end
structure CCompare_Generator: CCOMPARE_GENERATOR
deriving "compare_order" instance for type "Enum.finite_1"
deriving "compare" instance for type "Enum.finite_1"
deriving "compare_order" instance for type "Enum.finite_2"
deriving "compare" instance for type "Enum.finite_2"
deriving "compare_order" instance for type "Enum.finite_3"
deriving "compare" instance for type "Enum.finite_3"
deriving "compare_order" instance for type "Code_Numeral.natural"
deriving "compare" instance for type "Code_Numeral.natural"
deriving "compare_order" instance for type "String.literal"
deriving "compare" instance for type "String.literal"
deriving "ccompare_order" instance for type "Product_Type.unit" via compare_order
derived is_ccompare_unit-lemma
deriving "ccompare_order" instance for type "HOL.bool" via compare_order
derived is_ccompare_bool-lemma
deriving "ccompare_order" instance for type "Nat.nat" via compare_order
derived is_ccompare_nat-lemma
deriving "ccompare_order" instance for type "Int.int" via compare_order
derived is_ccompare_int-lemma
deriving "ccompare_order" instance for type "Enum.finite_1" via compare_order
derived is_ccompare_finite_1-lemma
deriving "ccompare_order" instance for type "Enum.finite_2" via compare_order
derived is_ccompare_finite_2-lemma
deriving "ccompare_order" instance for type "Enum.finite_3" via compare_order
derived is_ccompare_finite_3-lemma
deriving "ccompare_order" instance for type "Code_Numeral.integer" via compare_order
derived is_ccompare_integer-lemma
deriving "ccompare_order" instance for type "Code_Numeral.natural" via compare_order
derived is_ccompare_natural-lemma
deriving "ccompare_order" instance for type "String.char" via compare_order
derived is_ccompare_char-lemma
deriving "ccompare_order" instance for type "String.literal" via compare_order
derived is_ccompare_literal-lemma
use None as trivial implementation of ccompare for type finite_4
registered finite_4 in class ccompare
use None as trivial implementation of ccompare for type finite_5
registered finite_5 in class ccompare
deriving "ccompare" instance for type "Sum_Type.sum"
### theory "Draft.Missing_Multiset"
### 0.240s elapsed time, 0.958s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial")
derived is_ccompare_sum-lemma
deriving "ccompare" instance for type "List.list"
derived is_ccompare_list-lemma
deriving "ccompare" instance for type "Option.option"
derived is_ccompare_option-lemma
deriving "ccompare" instance for type "Product_Type.prod"
derived is_ccompare_prod-lemma
use None as trivial implementation of ccompare for type fun
registered fun in class ccompare
instantiation
  set :: (ccompare) ccompare
  ccompare_set == ccompare :: ('a set => 'a set => order) option
use None as trivial implementation of ccompare for type pred
registered pred in class ccompare
class cproper_interval = ccompare +
  fixes cproper_interval :: "'a option => 'a option => bool"
  assumes
    "cproper_interval":
      "[| ID ccompare ~= None; finite UNIV |]
       ==> class.proper_interval cless cproper_interval"
instantiation
  unit :: cproper_interval
  cproper_interval_unit == cproper_interval ::
    unit option => unit option => bool
instantiation
  bool :: cproper_interval
  cproper_interval_bool == cproper_interval ::
    bool option => bool option => bool
instantiation
  nat :: cproper_interval
  cproper_interval_nat == cproper_interval ::
    nat option => nat option => bool
instantiation
  int :: cproper_interval
  cproper_interval_int == cproper_interval ::
    int option => int option => bool
instantiation
  integer :: cproper_interval
  cproper_interval_integer == cproper_interval ::
    integer option => integer option => bool
instantiation
  natural :: cproper_interval
  cproper_interval_natural == cproper_interval ::
    natural option => natural option => bool
instantiation
  char :: cproper_interval
  cproper_interval_char == cproper_interval ::
    char option => char option => bool
instantiation
  Enum.finite_1 :: cproper_interval
  cproper_interval_finite_1 == cproper_interval ::
    Enum.finite_1 option => Enum.finite_1 option => bool
instantiation
  Enum.finite_2 :: cproper_interval
  cproper_interval_finite_2 == cproper_interval ::
    Enum.finite_2 option => Enum.finite_2 option => bool
instantiation
  Enum.finite_3 :: cproper_interval
  cproper_interval_finite_3 == cproper_interval ::
    Enum.finite_3 option => Enum.finite_3 option => bool
instantiation
  Enum.finite_4 :: cproper_interval
  cproper_interval_finite_4 == cproper_interval ::
    Enum.finite_4 option => Enum.finite_4 option => bool
instantiation
  Enum.finite_5 :: cproper_interval
  cproper_interval_finite_5 == cproper_interval ::
    Enum.finite_5 option => Enum.finite_5 option => bool
instantiation
  sum :: (cproper_interval, cproper_interval) cproper_interval
  cproper_interval_sum == cproper_interval ::
    ('a + 'b) option => ('a + 'b) option => bool
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 Empty == Branch B Empty ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty ==
### Branch B (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1) ==
### Branch B Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1)
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
instantiation
  prod :: (cproper_interval, cproper_interval) cproper_interval
  cproper_interval_prod == cproper_interval ::
    ('a * 'b) option => ('a * 'b) option => bool
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  paint :: "color => ('a, 'b) rbt => ('a, 'b) rbt"
Found termination order: "{}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
instantiation
  list :: (ccompare) cproper_interval
  cproper_interval_list == cproper_interval ::
    'a list option => 'a list option => bool
instantiation
  String.literal :: cproper_interval
  cproper_interval_literal == cproper_interval ::
    String.literal option => String.literal option => bool
instantiation
  option :: (cproper_interval) cproper_interval
  cproper_interval_option == cproper_interval ::
    'a option option => 'a option option => bool
Found termination order: "{}"
instantiation
  set :: (cproper_interval) cproper_interval
  cproper_interval_set == cproper_interval ::
    'a set option => 'a set option => bool
### Not an equation, in theorem:
### cproper_interval_set_dom (None, None) ==> cproper_interval None None == True
### Not an equation, in theorem:
### cproper_interval_set_dom (None, Some ?B) ==>
### cproper_interval None (Some ?B) == ?B ~= {}
### Not an equation, in theorem:
### cproper_interval_set_dom (Some ?A, None) ==>
### cproper_interval (Some ?A) None == ?A ~= UNIV
### Not an equation, in theorem:
### cproper_interval_set_dom (Some ?A, Some ?B) ==>
### cproper_interval (Some ?A) (Some ?B) ==
### finite UNIV & (EX C. cless ?A C & cless C ?B)
Found termination order: "{}"
instantiation
  fun :: (type, type) cproper_interval
  cproper_interval_fun == cproper_interval ::
    ('a => 'b) option => ('a => 'b) option => bool
### theory "Containers.Collection_Order"
### 1.793s elapsed time, 7.135s cpu time, 0.497s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.324s elapsed time, 5.260s cpu time, 0.497s GC time
Loading theory "Polynomial_Interpolation.Divmod_Int" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation")
### theory "Polynomial_Interpolation.Divmod_Int"
### 0.033s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
consts
  Poly :: "'a list => 'a poly"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order: "{}"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order: "{}"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.152s elapsed time, 12.538s cpu time, 0.920s GC time
Loading theory "Show.Show" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Show.Show_Poly" via "Show.Show_Instances")
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class show = type +
  fixes shows_prec :: "nat => 'a => char list => char list"
    and shows_list :: "'a list => char list => char list"
  assumes
    "shows_prec_append":
      "!!p x r s. shows_prec p x (r @ s) = shows_prec p x r @ s"
    and
    "shows_list_append":
      "!!xs r s. shows_list xs (r @ s) = shows_list xs r @ s"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
instantiation
  char :: show
  shows_prec_char == shows_prec :: nat => char => char list => char list
  shows_list_char == shows_list :: char list => char list => char list
signature SHOW_GENERATOR =
  sig
    val generate_showsp: string -> local_theory -> local_theory
    val register_foreign_partial_and_full_showsp:
       string ->
         int ->
           term ->
             term ->
               thm option ->
                 term ->
                   thm option ->
                     bool list -> thm -> local_theory -> local_theory
    val register_foreign_showsp:
       typ -> term -> thm -> local_theory -> local_theory
    val show_instance: string -> theory -> theory
  end
structure Show_Generator: SHOW_GENERATOR
instantiation
  list :: (show) show
  shows_prec_list == shows_prec :: nat => 'a list => char list => char list
  shows_list_list == shows_list :: 'a list list => char list => char list
instantiation
  String.literal :: show
  shows_prec_literal == shows_prec ::
    nat => String.literal => char list => char list
  shows_list_literal == shows_list ::
    String.literal list => char list => char list
### theory "Show.Show"
### 0.793s elapsed time, 3.157s cpu time, 0.101s GC time
Loading theory "Show.Show_Instances" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Show.Show_Poly")
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
consts
  showsp_bool :: "nat => bool => char list => char list"
consts
  pshowsp_prod ::
    "nat
     => (char list => char list) * (char list => char list)
        => char list => char list"
Found termination order: "{}"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
deriving "show" instance for type "Option.option"
generating show function for type "Option.option"
deriving "show" instance for type "Sum_Type.sum"
generating show function for type "Sum_Type.sum"
deriving "show" instance for type "Product_Type.prod"
deriving "show" instance for type "Product_Type.unit"
deriving "show" instance for type "HOL.bool"
deriving "show" instance for type "Nat.nat"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
deriving "show" instance for type "Int.int"
deriving "show" instance for type "Rat.rat"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Show.Show_Instances"
### 1.118s elapsed time, 4.449s cpu time, 0.258s GC time
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 6.142s elapsed time, 24.435s cpu time, 1.553s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Square_Free_Factorization" via "Draft.Fundamental_Theorem_Algebra_Factorized")
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (case_sum (%p. size (snd (snd (snd (snd p)))))
      (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.317s elapsed time, 1.252s cpu time, 0.187s GC time
Loading theory "Polynomial_Interpolation.Improved_Code_Equations" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation")
### Code generator: dropping subsumed code equation
### divmod_integer ?k ?l ==
### if ?k = 0 then (0, 0)
### else if 0 < ?l
###      then if 0 < ?k then Code_Numeral.divmod_abs ?k ?l
###           else case Code_Numeral.divmod_abs ?k ?l of
###                (r, s) => if s = 0 then (- r, 0) else (- r - 1, ?l - s)
###      else if ?l = 0 then (0, ?k)
###           else apsnd uminus
###                 (if ?k < 0 then Code_Numeral.divmod_abs ?k ?l
###                  else case Code_Numeral.divmod_abs ?k ?l of
###                       (r, s) =>
###                         if s = 0 then (- r, 0) else (- r - 1, - ?l - s))
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### let k = integer_of_nat ?m; l = integer_of_nat ?n
### in map_prod nat_of_integer nat_of_integer
###     (if k = 0 then (0, 0)
###      else if l = 0 then (0, k) else Code_Numeral.divmod_abs k l)
### Code generator: dropping subsumed code equation
### ?n choose ?k ==
### if ?n < ?k then 0
### else if ?n < 2 * ?k then ?n choose (?n - ?k)
###      else fold_atLeastAtMost_nat (*) (?n - ?k + 1) ?n 1 div fact ?k
### theory "Polynomial_Interpolation.Improved_Code_Equations"
### 0.285s elapsed time, 1.148s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Neville_Aitken_Interpolation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Polynomial_Interpolation.Neville_Aitken_Interpolation"
### 0.606s elapsed time, 2.403s cpu time, 0.163s GC time
Loading theory "Show.Show_Poly" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  rbt_map_entry :: "'a => ('b => 'b) => ('a, 'b) rbt => ('a, 'b) rbt"
consts
  map :: "('a => 'b => 'c) => ('a, 'b) rbt => ('a, 'c) rbt"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: ({one,zero,show}) show
  shows_prec_poly == shows_prec :: nat => 'a poly => char list => char list
  shows_list_poly == shows_list :: 'a poly list => char list => char list
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 9.502s elapsed time, 37.811s cpu time, 2.397s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "Show.Show_Poly"
### 0.791s elapsed time, 3.154s cpu time, 0.152s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Prime_Factorization")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Computational_Algebra.Primes"
### 0.327s elapsed time, 1.298s cpu time, 0.209s GC time
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Gauss_Lemma")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.514s elapsed time, 2.036s cpu time, 0.209s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots" via "Polynomial_Interpolation.Missing_Polynomial")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
### Cannot skip proof of schematic goal statement
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
"(215912063945802350977 / 152672884556058511392,
  1104427674243920646305299201 / 23309009678667569523128057147486993777664,
  True)"
  :: "rat * rat * bool"
Loading theory "Draft.Prime_Factorization" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.132s elapsed time, 4.512s cpu time, 0.168s GC time
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.085s elapsed time, 4.327s cpu time, 0.168s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Explicit_Roots")
(%n. mset (prime_factorization_nat n)) = prime_factorization
### theory "Draft.Prime_Factorization"
### 0.652s elapsed time, 2.597s cpu time, 0.165s GC time
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.838s elapsed time, 2.277s cpu time, 0.165s GC time
Loading theory "Draft.Order_Polynomial" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Square_Free_Factorization")
Loading theory "Draft.Missing_Polynomial_Factorial" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Gauss_Lemma")
Loading theory "Draft.Polynomial_Divisibility" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Square_Free_Factorization")
### theory "Draft.Polynomial_Divisibility"
### 0.060s elapsed time, 0.240s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Lagrange_Interpolation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation")
### theory "Draft.Order_Polynomial"
### 0.091s elapsed time, 0.364s cpu time, 0.000s GC time
Loading theory "Draft.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Square_Free_Factorization")
### Ignoring duplicate rewrite rule:
### is_unit ?p1 == ?p1 ~= 0 & degree ?p1 = 0
### theory "Draft.Missing_Polynomial_Factorial"
### 0.141s elapsed time, 0.563s cpu time, 0.000s GC time
Loading theory "Draft.Explicit_Roots" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
### theory "Polynomial_Interpolation.Lagrange_Interpolation"
### 0.085s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation" via "Polynomial_Interpolation.Newton_Interpolation")
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Fundamental_Theorem_Algebra_Factorized"
### 0.365s elapsed time, 1.437s cpu time, 0.330s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Explicit_Roots"
### 0.513s elapsed time, 1.828s cpu time, 0.330s GC time
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
Found termination order: "{}"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 3.091s elapsed time, 9.294s cpu time, 5.597s GC time
Loading theory "Draft.Dvd_Int_Poly" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
Loading theory "Draft.Gauss_Lemma" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
Loading theory "Draft.Square_Free_Factorization" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
### theory "Draft.Dvd_Int_Poly"
### 0.682s elapsed time, 2.713s cpu time, 0.154s GC time
Loading theory "Polynomial_Interpolation.Newton_Interpolation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Polynomial_Interpolation.Polynomial_Interpolation")
locale yun_gcd
  fixes Gcd :: "'a poly => 'a poly => 'a poly"
### theory "Draft.Gauss_Lemma"
### 1.271s elapsed time, 5.065s cpu time, 0.154s GC time
Loading theory "Draft.Gcd_Rat_Poly" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
### theory "Draft.Gcd_Rat_Poly"
### 0.168s elapsed time, 0.658s cpu time, 0.365s GC time
Loading theory "Draft.Rational_Root_Test" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale monic_factorization
  fixes as :: "('a poly * nat) set"
    and p :: "'a poly"
  assumes "monic_factorization as p"
### Ambiguous input (line 1808 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" map_of)
###                 ("_cargs" ("_position" ys) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" map_of)
###                   ("_cargs" ("_position" ys) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "case_sum (case_sum size size) (case_sum size size) <*mlex*>
   case_sum (case_sum (%x. Suc 0) (%x. 0)) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. 0) (%x. Suc 0)) <*mlex*> {}"
### theory "Draft.Rational_Root_Test"
### 0.389s elapsed time, 1.553s cpu time, 0.000s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale field_hom_0'
  fixes hom :: "'a => 'b"
  assumes "field_hom_0' hom"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va b c. divided_differences_impl (v # va) b c [] = undefined
### theory "Draft.Square_Free_Factorization"
### 2.139s elapsed time, 8.274s cpu time, 0.519s GC time
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va b c. divided_differences_impl_int (v # va) b c [] = undefined
Found termination order:
  "(%p. size_list (nat o abs) (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list (nat o abs) (snd p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Newton_Interpolation"
### 2.296s elapsed time, 7.583s cpu time, 0.620s GC time
Loading theory "Polynomial_Interpolation.Polynomial_Interpolation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Polynomial_Interpolation.Polynomial_Interpolation"
### 1.469s elapsed time, 3.221s cpu time, 0.244s GC time
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2563 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" f)
###                     ("_cargs" ("_position" k)
###                       ("_cargs" ("_position" w) ("_position" v)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" w))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" w) ("_position" v)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2939 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2972 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None) ("_position" None))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### keys (Branch ?c ?l ?k ?v ?r) == keys ?l @ ?k # keys ?r
### Code generator: dropping subsumed code equation
### keys Empty == []
### theory "HOL-Library.RBT_Impl"
### 38.827s elapsed time, 121.924s cpu time, 17.847s GC time
Loading theory "Containers.RBT_ext" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2")
Loading theory "Deriving.RBT_Comparator_Impl" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2" via "Containers.RBT_Mapping2")
Loading theory "HOL-Library.RBT" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "HOL-Library.RBT_Mapping")
consts
  rbt_comp_lookup :: "('a, 'b) rbt => 'a => 'b option"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.RBT"
### 0.486s elapsed time, 1.949s cpu time, 0.297s GC time
Loading theory "HOL-Library.RBT_Mapping" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation")
### theory "HOL-Library.RBT_Mapping"
### 0.188s elapsed time, 0.752s cpu time, 0.000s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
consts
  RBT_Impl_diag :: "('a, 'b) rbt => ('a * 'a, 'b) rbt"
Found termination order: "{}"
### Missing patterns in function definition:
### rbt_keys_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### rbt_entries_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Containers.RBT_ext"
### 3.006s elapsed time, 10.248s cpu time, 6.309s GC time
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (case_sum (%p. size (snd (snd (snd (snd p)))))
      (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
consts
  rbt_comp_map_entry :: "'a => ('b => 'b) => ('a, 'b) rbt => ('a, 'b) rbt"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Deriving.RBT_Comparator_Impl"
### 5.853s elapsed time, 13.205s cpu time, 6.434s GC time
Loading theory "Containers.RBT_Mapping2" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation" via "Containers.RBT_Set2")
### Ambiguous input (line 247 of "$AFP/Containers/RBT_Mapping2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lookup)
###       ("_applC" ("_position" meet)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_constrain" ("_position" t1)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" mapping_rbt)))
###             ("_position" t2)))))
###     ("_lambda" ("_position" k)
###       ("_case_syntax"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v1))
###             ("_case_syntax"
###               ("_applC" ("_position" lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" v2))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v1)
###                           ("_position" v2))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lookup)
###       ("_applC" ("_position" meet)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_constrain" ("_position" t1)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" mapping_rbt)))
###             ("_position" t2)))))
###     ("_lambda" ("_position" k)
###       ("_case_syntax"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v1))
###               ("_case_syntax"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None) ("_position" None))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" v2))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v1) ("_position" v2))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Containers.RBT_Mapping2"
### 0.971s elapsed time, 0.974s cpu time, 0.000s GC time
Loading theory "Containers.RBT_Set2" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization" via "Draft.Precomputation")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Containers.RBT_Set2"
### 1.170s elapsed time, 1.601s cpu time, 0.568s GC time
Loading theory "Draft.Precomputation" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization" via "Draft.Kronecker_Factorization")
### theory "Draft.Precomputation"
### 0.193s elapsed time, 0.202s cpu time, 0.000s GC time
Loading theory "Draft.Kronecker_Factorization" (required by "Draft.Rational_FactorizationMoreTemplates" via "Draft.Rational_Factorization")
### theory "Draft.Kronecker_Factorization"
### 1.174s elapsed time, 1.256s cpu time, 0.000s GC time
Loading theory "Draft.Rational_Factorization" (required by "Draft.Rational_FactorizationMoreTemplates")
### theory "Draft.Rational_Factorization"
### 1.725s elapsed time, 1.727s cpu time, 0.000s GC time
Loading theory "Draft.Rational_FactorizationMoreTemplates"
val templateLemmas =
   [("Rational_Factorization.irreducible_root_free",
     "irreducible ?p ==> root_free ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Rational_Factorization.factorize_rat_poly_basic",
     "factorize_rat_poly_basic ?p = (?c, ?qs) ==>
      ?p = smult ?c (prod_list ?qs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Rational_Factorization.factorize_root_free",
     "factorize_root_free ?p = (?c, ?qs) ==> ?p = smult ?c (prod_list ?qs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Rational_Factorization.rational_proper_factor",
     "[| 0 < degree ?p; rational_proper_factor ?p = None |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Rational_Factorization.factorize_rat_poly_main_wf_rel_sub",
     "((?a, ?b, ?ps), ?c, ?d, ?p # ?ps) : factorize_rat_poly_main_wf_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3))))),
           template_hole 0)
         )),
    ("Rational_Factorization.factorize_rat_poly_basic",
     "[| factorize_rat_poly_basic ?p = (?c, ?qs); ?q : set ?qs |]
      ==> irreducible\<^sub>d ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Rational_Factorization.roots_of_rat_poly",
     "?p ~= 0 ==> set (roots_of_rat_poly ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Rational_Factorization.roots_of_rat_poly_main",
     "?p ~= 0 ==> set (roots_of_rat_poly_main ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Rational_Factorization.degree_1_dvd_root",
     "[| degree ?q = 1; !!x. poly ?p x ~= (0::?'a) |] ==> ~ ?q dvd ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("Rational_Factorization.factorize_rat_poly_main",
     "[| factorize_rat_poly_main ?c ?irr ?ps = (?d, ?qs);
         Ball (set ?irr) irreducible\<^sub>d |]
      ==> Ball (set ?qs) irreducible\<^sub>d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Rational_Factorization.rational_proper_factor",
     "rational_proper_factor ?p = Some ?q ==>
      ?q dvd ?p & 1 <= degree ?q & degree ?q < degree ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 1, template_var 1))))
           ))),
    ("Rational_Factorization.factorize_rat_poly_main",
     "[| factorize_rat_poly_main ?c ?irr ?ps = (?d, ?qs);
         Ball (set ?irr) irreducible\<^sub>d |]
      ==> smult ?c (prod_list (?irr @ ?ps)) = smult ?d (prod_list ?qs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Rational_Factorization.factorize_root_free",
     "[| factorize_root_free ?p = (?c, ?qs); ?q : set ?qs |]
      ==> root_free ?q & monic ?q & degree ?q ~= 0",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app (template_hole 4, template_var 0))),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 0))))
           ))),
    ("Rational_Factorization.factorize_rat_poly_main_wf_rel_two",
     "[| degree ?q < degree ?p; degree ?r < degree ?p |]
      ==> ((?a, ?b, ?q # ?r # ?ps), ?c, ?d, ?p # ?ps)
          : factorize_rat_poly_main_wf_rel",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 7),
          template_app (template_hole 6, template_var 6)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 5),
          template_app (template_hole 6, template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 7),
                         template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 2))))),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 2))))),
             template_hole 0)
           ))),
    ("Rational_Factorization.roots_of_rat_poly_main_code",
     "roots_of_rat_poly_main ?p =
      (let n = degree ?p
       in if n = 0 then []
          else if n = 1 then [roots1 ?p]
               else if n = 2 then rat_roots2 ?p
                    else case rational_root_test ?p of None => []
                         | Some x =>
                             x #
                             roots_of_rat_poly_main (?p div [:- x, 1:]))",
     template_equation
      (template_app (template_hole 20, template_var 0),
       template_app
        (template_app
          (template_hole 19,
           template_app (template_hole 18, template_var 0)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Rational_FactorizationMoreTemplates"
### 0.967s elapsed time, 1.530s cpu time, 0.495s GC time
val it = (): unit
