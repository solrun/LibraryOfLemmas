   [("Gauss_Lemma.content_ge_0_int", "0 <= content ?p",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Lemma.abs_content_int", "\<bar>content ?p\<bar> = content ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Lemma.irreducible\<^sub>d_as_irreducible",
     "irreducible\<^sub>d ?p = irreducible (primitive_part ?p)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gauss_Lemma.irreducible\<^sub>d_primitive_part",
     "irreducible\<^sub>d (primitive_part ?p) = irreducible\<^sub>d ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gauss_Lemma.irreducible\<^sub>d_int_rat",
     "irreducible\<^sub>d ?p ==> irreducible\<^sub>d (of_int_poly ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Gauss_Lemma.content_smult_int",
     "content (smult ?a ?p) = \<bar>?a\<bar> * content ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Gauss_Lemma.primitive_part_smult_int",
     "primitive_part (smult ?d ?f) = smult (sgn ?d) (primitive_part ?f)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gauss_Lemma.common_denom",
     "common_denom ?xs = (?dd, ?ys) ==> 0 < ?dd",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("Gauss_Lemma.rat_to_int_poly",
     "rat_to_int_poly ?p = (?d, ?q) ==> 0 < ?d",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("Gauss_Lemma.rat_to_normalized_int_poly",
     "rat_to_normalized_int_poly ?p = (?d, ?q) ==> 0 < ?d",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("Gauss_Lemma.irreducible_smult",
     "irreducible (smult ?c ?p) = (irreducible ?p & ?c ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Gauss_Lemma.normalize_non_0_smult",
     "EX a. a ~= (0::?'a) & smult a (primitive_part ?p) = ?p",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Gauss_Lemma.sdiv_poly_smult",
     "?c ~= (0::?'a) ==> sdiv_poly (smult ?c ?f) ?c = ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Gauss_Lemma.irreducible\<^sub>d_smult_int",
     "?c ~= 0 ==>
      irreducible\<^sub>d (smult ?c ?p) = irreducible\<^sub>d ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Gauss_Lemma.rat_to_normalized_int_poly",
     "rat_to_normalized_int_poly ?p = (?d, ?q) ==> degree ?q = degree ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Gauss_Lemma.irreducible\<^sub>d_rat_to_normalized_int_poly",
     "[| rat_to_normalized_int_poly ?rp = (?a, ?ip);
         irreducible\<^sub>d ?ip |]
      ==> irreducible\<^sub>d ?rp",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Gauss_Lemma.gcd_smult_right",
     "?c ~= (0::?'b) ==> gcd ?f (smult ?c ?g) = gcd ?f ?g",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Gauss_Lemma.gcd_smult_left",
     "?c ~= (0::?'b) ==> gcd (smult ?c ?f) ?g = gcd ?f ?g",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Gauss_Lemma.rat_to_normalized_int_poly",
     "rat_to_normalized_int_poly ?p = (?d, ?q) ==>
      ?p = smult ?d (of_int_poly ?q)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Gauss_Lemma.content_dvd_1",
     "[| content ?f = (1::?'a); ?g dvd ?f |] ==> content ?g = (1::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1))),
    ("Gauss_Lemma.rat_to_int_poly",
     "rat_to_int_poly ?p = (?d, ?q) ==>
      ?p = smult (inverse (rat_of_int ?d)) (of_int_poly ?q)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0))))),
    ("Gauss_Lemma.dvd_smult_int",
     "[| ?c ~= 0; ?q dvd smult ?c ?p |] ==> primitive_part ?q dvd ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Gauss_Lemma.dvd_content_dvd",
     "[| content ?f dvd content ?g;
         primitive_part ?f dvd primitive_part ?g |]
      ==> ?f dvd ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Gauss_Lemma.common_denom",
     "common_denom ?xs = (?dd, ?ys) ==>
      ?xs = map (%i. rat_of_int i / rat_of_int ?dd) ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Gauss_Lemma.rat_to_normalized_int_poly",
     "[| rat_to_normalized_int_poly ?p = (?d, ?q); ?p ~= 0 |]
      ==> content ?q = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Gauss_Lemma.gcd_rat_to_gcd_int",
     "gcd (of_int_poly ?f) (of_int_poly ?g) =
      smult (inverse (rat_of_int (lead_coeff (gcd ?f ?g))))
       (of_int_poly (gcd ?f ?g))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Gauss_Lemma.rat_to_int_factor_explicit",
     "[| of_int_poly ?p = ?g * ?h;
         rat_to_normalized_int_poly ?g = (?r, ?rg) |]
      ==> EX r. ?p = ?rg * smult (content ?p) r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 4),
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 6, template_var 3),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Gauss_Lemma.rat_to_normalized_int_poly_code",
     "rat_to_normalized_int_poly ?p =
      (if ?p = 0 then (1, 0)
       else case rat_to_int_poly ?p of
            (s, q) =>
              let c = content q
              in (rat_of_int c / rat_of_int s, sdiv_poly q c))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 0),
                   template_hole 10)),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_hole 7)),
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Gauss_Lemma.rat_to_int_factor",
     "of_int_poly ?p = ?g * ?h ==>
      EX g' h'.
         ?p = g' * h' & degree g' = degree ?g & degree h' = degree ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Gauss_Lemma.rat_to_int_factor_normalized_int_poly",
     "[| ?p = ?g * ?h; rat_to_normalized_int_poly ?p = (?i, ?ip) |]
      ==> EX g' h'. ?ip = g' * h' & degree g' = degree ?g",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Gauss_Lemma.common_denom",
     "[| common_denom ?xs = (?dd, ?ys); ?x : set ?xs |]
      ==> rat_of_int (case quotient_of ?x of (n, x) => n * ?dd div x) /
          rat_of_int ?dd =
          ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, t_empty),
                 template_app (template_hole 0, template_var 0)))),
           template_app (template_hole 4, template_var 2)),
         template_var 0))),
    ("Gauss_Lemma.rat_to_int_factor_content_1",
     "[| content ?p = 1; of_int_poly ?p = ?g * ?h;
         rat_to_normalized_int_poly ?g = (?r, ?rg);
         rat_to_normalized_int_poly ?h = (?s, ?sh); ?p ~= 0 |]
      ==> ?p = ?rg * ?sh",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 6),
          template_hole 11),
        template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 6),
          template_app
           (template_app (template_hole 7, template_var 5),
            template_var 4)),
        template_equation
         (template_app (template_hole 5, template_var 5),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 6, template_hole 1))],
       template_equation
        (template_var 6,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]
