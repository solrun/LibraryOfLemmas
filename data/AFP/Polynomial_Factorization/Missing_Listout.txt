Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Missing_ListMoreTemplates" via "Draft.Missing_List" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.122s elapsed time, 0.509s cpu time, 0.032s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Missing_ListMoreTemplates" via "Draft.Missing_List")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.627s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.041s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Matrix.Utility" (required by "Draft.Missing_ListMoreTemplates" via "Draft.Missing_List")
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.913s cpu time, 0.032s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.368s elapsed time, 1.475s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.245s elapsed time, 0.963s cpu time, 0.080s GC time
Loading theory "Draft.Missing_List" (required by "Draft.Missing_ListMoreTemplates")
Found termination order: "size_list length <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.039s elapsed time, 3.930s cpu time, 0.959s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.126s elapsed time, 4.094s cpu time, 0.971s GC time
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.065s elapsed time, 6.522s cpu time, 1.273s GC time
Loading theory "Draft.Templates" (required by "Draft.Missing_ListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Missing_ListMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Missing_List"
### 2.194s elapsed time, 6.638s cpu time, 2.075s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.786s elapsed time, 1.540s cpu time, 0.939s GC time
Loading theory "Draft.Missing_ListMoreTemplates"
val templateLemmas =
   [("Missing_List.remdups_sort", "distinct (remdups_sort ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Missing_List.remdups_sort", "sorted (remdups_sort ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Missing_List.map_id", "map id ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Missing_List.empty_subseqs", "[] : set (subseqs ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Missing_List.adjust_idx_i", "adjust_idx ?i ?j ~= ?i",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Missing_List.remdups_sort", "set (remdups_sort ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Missing_List.adjust_idx_rev1",
     "adjust_idx_rev ?i (adjust_idx ?i ?j) = ?j",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Missing_List.concat_map_empty", "concat (map (%_. []) ?xs) = []",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_hole 0)),
    ("Missing_List.set_subset_insertI",
     "set ?xs <= set (List.insert ?x ?xs)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Missing_List.set_removeAll_subset",
     "set (removeAll ?x ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Missing_List.remdups_gen_subset",
     "set (remdups_gen ?f ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Missing_List.subset_subtract_listed_sorted",
     "set (subtract_list_sorted ?xs ?ys) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Missing_List.sum_list_concat",
     "sum_list (concat ?ls) = sum_list (map sum_list ?ls)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Missing_List.concat_lists_listset",
     "set (concat_lists ?xs) = listset (map set ?xs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Missing_List.is_partition_code",
     "is_partition ?as = (??.Missing_List.is_partition_impl ?as ~= None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Missing_List.concat_map_concat",
     "concat (map concat ?xs) = concat (concat ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Missing_List.set_subtract_list_distinct",
     "distinct ?xs ==> distinct (subtract_list_sorted ?xs ?ys)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Missing_List.remdups_adj_sorted_distinct",
     "sorted ?xs ==> distinct (remdups_adj ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Missing_List.foldl_foldr_o_id", "foldl (o) id ?fs = foldr (o) ?fs id",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 2), template_var 0),
         template_hole 1))),
    ("Missing_List.sum_list_replicate_length",
     "sum_list (replicate (length ?xs) (Suc 0)) = length ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_hole 0))),
       template_app (template_hole 2, template_var 0))),
    ("Missing_List.finite_distinct",
     "finite {xs. distinct xs & set xs = ?X}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Missing_List.set_list_diff",
     "set (list_diff ?xs ?ys) = set ?xs - set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_List.set_list_inter",
     "set (list_inter ?xs ?ys) = set ?xs Int set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_List.set_list_union",
     "set (list_union ?xs ?ys) = set ?xs Un set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_List.min_list",
     "?x : set ?xs ==> Missing_List.min_list ?xs <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Missing_List.mem_idx_sound2",
     "(?x ~: set ?as) = (mem_idx ?x ?as = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Missing_List.span",
     "Missing_List.span ?P ?xs = (takeWhile ?P ?xs, dropWhile ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Missing_List.zip_size_aux",
     "size_list (size o snd) (zip ?ts ?ls) <= size_list size ?ls",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 3), template_var 0))),
    ("Missing_List.remove_nth_id",
     "length ?xs <= ?n ==> remove_nth ?n ?xs = ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Missing_List.foldr_o_o_id",
     "foldr ((o) o ?f) ?xs id ?a = foldr ?f ?xs ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2)),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Missing_List.concat_concat_map",
     "concat (concat (map ?f ?xs)) = concat (map (concat o ?f) ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 4),
               template_var 1)),
           template_var 0)))),
    ("Missing_List.subseqs_length_simple",
     "?b : set (subseqs ?xs) ==> length ?b <= length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_List.remdups_gen_elem_imp_elem",
     "?x : set (remdups_gen ?f ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Missing_List.mem_idx_sound",
     "(?x : set ?as) = (EX i. mem_idx ?x ?as = Some i)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Missing_List.subset_set_code",
     "(set ?xs <= set ?ys) = list_all (%x. x : set ?ys) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Missing_List.adjust_idx_rev2",
     "?j ~= ?i ==> adjust_idx ?i (adjust_idx_rev ?i ?j) = ?j",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Missing_List.zip_fst", "?p : set (zip ?as ?bs) ==> fst ?p : set ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Missing_List.zip_snd", "?p : set (zip ?as ?bs) ==> snd ?p : set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Missing_List.map_upt_len_conv",
     "map (%i. ?f (?xs ! i)) [0..<length ?xs] = map ?f ?xs",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Missing_List.finite_distinct_subset",
     "finite ?X ==> finite {xs. distinct xs & set xs <= ?X}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Missing_List.remove_nth_sound_l",
     "?p < ?n ==> remove_nth ?n ?xs ! ?p = ?xs ! ?p",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Missing_List.sum_list_replicate_mono",
     "?w1.0 <= ?w2.0 ==>
      sum_list (replicate ?n ?w1.0) <= sum_list (replicate ?n ?w2.0)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Missing_List.min_list_ex",
     "?xs ~= [] ==> EX x:set ?xs. Missing_List.min_list ?xs = x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Missing_List.remove_nth_len",
     "?i < length ?xs ==> length ?xs = Suc (length (remove_nth ?i ?xs))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Missing_List.case_prod_partition",
     "(case partition ?p ?xs of (x, xa) => ?f x xa) =
      ?f (filter ?p ?xs) (filter (Not o ?p) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Missing_List.is_partition_Cons",
     "is_partition (?x # ?xs) =
      (is_partition ?xs & ?x Int \<Union> (set ?xs) = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)))),
               template_hole 0))
           ))),
    ("Missing_List.foldr_append2_Nil",
     "foldr ((@) o ?f) ?xs [] @ ?zs = foldr ((@) o ?f) ?xs ?zs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 3),
                   template_var 2)),
               template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Missing_List.append_Cons_nth_middle",
     "?i = length ?xs ==> (?xs @ ?y # ?zs) ! ?i = ?y",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 3),
         template_var 1))),
    ("Missing_List.remove_nth_length",
     "?n < length ?xs ==> length (remove_nth ?n ?xs) = length ?xs - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_hole 0)))),
    ("Missing_List.subseqs_length_simple_False",
     "[| ?b : set (subseqs ?xs); length ?xs < length ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate (template_hole 0))),
    ("Missing_List.nth_drop_0",
     "0 < length ?ss ==> ?ss ! 0 # drop (Suc 0) ?ss = ?ss",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_hole 6)),
             template_var 0)),
         template_var 0))),
    ("Missing_List.permut_sound",
     "?i < length ?as ==> permut ?as ?f ! ?i = ?as ! ?f ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_var 0, template_var 2))))),
    ("Missing_List.map_of_append_None",
     "map_of ?xs ?y = None ==> map_of (?xs @ ?ys) ?y = map_of ?ys ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Missing_List.map_of_append_Some",
     "map_of ?xs ?y = Some ?z ==> map_of (?xs @ ?ys) ?y = Some ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("Missing_List.is_partition_sublist",
     "is_partition (?us @ ?xs @ ?ys @ ?zs @ ?vs) ==>
      is_partition (?xs @ ?zs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_app
                     (template_app (template_hole 0, template_var 1),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Missing_List.set_generate_lists",
     "set (generate_lists ?n ?xs) =
      {as. length as = ?n & set as <= set ?xs}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Missing_List.full_list_subseqs",
     "{ys: set (subseqs ?xs). length ys = length ?xs} = {?xs}",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Missing_List.map_upt_add'",
     "map ?f [?a..<?a + ?b] = map (%i. ?f (?a + i)) [0..<?b]",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 0),
           template_var 0)))),
    ("Missing_List.foldr_append2",
     "foldr ((@) o ?f) ?xs (?ys @ ?zs) = foldr ((@) o ?f) ?xs ?ys @ ?zs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Missing_List.map_of_filter",
     "?P ?x ==> map_of (filter (%(x', y). ?P x') ?ys) ?x = map_of ?ys ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Missing_List.permut_aux_sound",
     "?i < length ?as ==> permut_aux ?as ?f ?bs ! ?i = ?bs ! ?f ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_var 1, template_var 3))))),
    ("Missing_List.adjust_idx_nth",
     "?i < length ?xs ==> remove_nth ?i ?xs ! ?j = ?xs ! adjust_idx ?i ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Missing_List.append_Cons_nth_left",
     "?i < length ?xs ==> (?xs @ ?u # ?ys) ! ?i = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 3)))),
    ("Missing_List.nth_append_take",
     "?i <= length ?xs ==> (take ?i ?xs @ ?y # ?ys) ! ?i = ?y",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 3),
         template_var 1))),
    ("Missing_List.elem_imp_remdups_gen_elem",
     "?x : set ?xs ==> EX y:set (remdups_gen ?f ?xs). ?f ?x = ?f y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Missing_List.find_map_filter_None",
     "find_map_filter ?f ?p ?as = None ==> ALL b:?f ` set ?as. ~ ?p b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             t_empty)
           ))),
    ("Missing_List.permut_length",
     "bij_betw ?f {..<length ?as} {..<length ?as} ==>
      length (permut ?as ?f) = length ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Missing_List.ex_set_conv_ex_nth",
     "(EX x:set ?xs. ?P x) = (EX i<length ?xs. ?P (?xs ! i))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         t_empty),
       template_app (template_hole 4, t_empty))),
    ("Missing_List.take_upt_idx",
     "?i < length ?ls ==> take ?i ?ls = map ((!) ?ls) [0..<?i]",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Missing_List.mem_idx_sound_output",
     "mem_idx ?x ?as = Some ?i ==> ?i < length ?as & ?as ! ?i = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Missing_List.find_map_filter_Some",
     "find_map_filter ?f ?p ?as = Some ?b ==> ?p ?b & ?b : ?f ` set ?as",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_var 2, template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Missing_List.permut_aux_length",
     "bij_betw ?f {..<length ?as} {..<length ?bs} ==>
      length (permut_aux ?as ?f ?bs) = length ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("Missing_List.set_foldr_remdups_set_map_conv",
     "set (foldr (%x xs. remdups (?f x @ xs)) ?xs []) =
      \<Union> (set (map (set o ?f) ?xs))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, t_empty), template_var 0),
           template_hole 4)),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 8),
                 template_var 1)),
             template_var 0))))),
    ("Missing_List.take_drop_imp_nth",
     "take ?i ?ss @ ?x # drop (Suc ?i) ?ss = ?ss ==> ?x = ?ss ! ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_var 1))),
          template_var 1)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Missing_List.distinct_take_drop",
     "[| distinct ?vs; ?i < length ?vs |]
      ==> distinct (take ?i ?vs @ drop (Suc ?i) ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))
           ))),
    ("Missing_List.is_partition_inj_map",
     "[| is_partition ?xs; inj_on ?f (UN x:set ?xs. x) |]
      ==> is_partition (map ((`) ?f) ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty),
                  template_app (template_hole 3, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Missing_List.min_list_subset",
     "[| set ?ys <= set ?xs; Missing_List.min_list ?xs : set ?ys |]
      ==> Missing_List.min_list ?xs = Missing_List.min_list ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Missing_List.mem_idx_sound_output2",
     "mem_idx ?x ?as = Some ?i ==> ALL j<?i. ?as ! j ~= ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Missing_List.set_subtract_list_sorted",
     "[| sorted ?xs; sorted ?ys |]
      ==> set (subtract_list_sorted ?xs ?ys) = set ?xs - set ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Missing_List.adjust_idx_length",
     "[| ?i < length ?xs; ?j < length (remove_nth ?i ?xs) |]
      ==> adjust_idx ?i ?j < length ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app (template_hole 2, template_var 1)))),
    ("Missing_List.append_Cons_nth_right",
     "length ?xs < ?i ==> (?xs @ ?u # ?ys) ! ?i = (?xs @ ?z # ?ys) ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 4),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 3)))),
    ("Missing_List.map_upt_len_same_len_conv",
     "length ?xs = length ?ys ==>
      map (%i. ?f (?xs ! i)) [0..<length ?ys] = map ?f ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Missing_List.remove_nth_sound_r",
     "[| ?n <= ?p; ?p < length ?xs |]
      ==> remove_nth ?n ?xs ! ?p = ?xs ! Suc ?p",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Missing_List.UN_upt_len_conv",
     "length ?xs = ?n ==>
      (UN i:{0..<?n}. ?f (?xs ! i)) = \<Union> (set (map ?f ?xs))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_hole 6,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)))))),
    ("Missing_List.Ball_at_Least0LessThan_conv",
     "length ?xs = ?n ==>
      (ALL i:{0..<?n}. ?P (?xs ! i)) = (ALL x:set ?xs. ?P x)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Missing_List.append_Cons_nth_not_middle",
     "?i ~= length ?xs ==> (?xs @ ?u # ?ys) ! ?i = (?xs @ ?z # ?ys) ! ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 4)))),
    ("Missing_List.nth_append_take_is_nth_conv",
     "[| ?i < ?j; ?j <= length ?xs |]
      ==> (take ?j ?xs @ ?ys) ! ?i = ?xs ! ?i",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 3)))),
    ("Missing_List.nth_remove_nth_conv",
     "?i < length (remove_nth ?n ?xs) ==>
      remove_nth ?n ?xs ! ?i = ?xs ! (if ?i < ?n then ?i else Suc ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1)),
               template_var 2),
             template_app (template_hole 0, template_var 2)))))),
    ("Missing_List.list_all2_map_map",
     "(!!x. x : set ?xs ==> ?R (?f x) (?g x)) ==>
      list_all2 ?R (map ?f ?xs) (map ?g ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Missing_List.adjust_idx_rev_nth",
     "[| ?i < length ?xs; ?j ~= ?i |]
      ==> remove_nth ?i ?xs ! adjust_idx_rev ?i ?j = ?xs ! ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Missing_List.map_eq_set_zipD",
     "[| map ?f ?xs = map ?f ?ys; (?x, ?y) : set (zip ?xs ?ys) |]
      ==> ?f ?x = ?f ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app (template_var 4, template_var 1),
         template_app (template_var 4, template_var 0)))),
    ("Missing_List.listset",
     "listset ?xs =
      {ys. length ys = length ?xs & (ALL i<length ?xs. ys ! i : ?xs ! i)}",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app (template_hole 10, t_empty))),
    ("Missing_List.map_nth_conv",
     "map ?f ?ss = map ?g ?ts ==>
      ALL i<length ?ss. ?f (?ss ! i) = ?g (?ts ! i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Missing_List.filter2_sound",
     "ALL i<length (fst (filter2 ?P ?as ?bs)).
         ?P (fst (filter2 ?P ?as ?bs) ! i) (snd (filter2 ?P ?as ?bs) ! i)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Missing_List.distinct_eq_append",
     "distinct_eq ?eq (?xs @ ?ys) =
      (distinct_eq ?eq ?xs &
       distinct_eq ?eq ?ys & (ALL x:set ?xs. ALL y:set ?ys. ~ ?eq y x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty))))),
    ("Missing_List.fun_merge_part",
     "[| is_partition ?as; ?i < length ?as; ?a : ?as ! ?i |]
      ==> fun_merge ?fs ?as ?a = (?fs ! ?i) ?a",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Missing_List.adjust_idx_rev_length",
     "[| ?i < length ?xs; ?j < length ?xs; ?j ~= ?i |]
      ==> adjust_idx_rev ?i ?j < length (remove_nth ?i ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Missing_List.set_concat_lists",
     "set (concat_lists ?xs) =
      {as.
       length as = length ?xs &
       (ALL i<length ?xs. as ! i : set (?xs ! i))}",
     template_equation
      (template_app
        (template_hole 13, template_app (template_hole 12, template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Missing_List.UNION_set_zip",
     "\<Union> (?g ` set (zip [0..<length ?xs] (map ?f ?xs))) =
      (UN i<length ?xs. ?g (i, ?f (?xs ! i)))",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))))),
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 1)))))),
    ("Missing_List.map_nth_eq_conv",
     "length ?xs = length ?ys ==>
      (map ?f ?xs = ?ys) = (ALL i<length ?ys. ?f (?xs ! i) = ?ys ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 2)),
           template_var 1),
         template_app (template_hole 5, t_empty)))),
    ("Missing_List.max_list_mono",
     "(!!x. x : set ?xs - set ?ys ==> EX y. y : set ?ys & x <= y) ==>
      max_list ?xs <= max_list ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_List.min_list_Cons",
     "[| ?x <= ?y; length ?xs = length ?ys;
         Missing_List.min_list ?xs <= Missing_List.min_list ?ys |]
      ==> Missing_List.min_list (?x # ?xs)
          <= Missing_List.min_list (?y # ?ys)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Missing_List.partition2_sound_P",
     "ALL i<length (fst (fst (partition2 ?P ?as ?bs))).
         ?P (fst (fst (partition2 ?P ?as ?bs)) ! i)
          (snd (fst (partition2 ?P ?as ?bs)) ! i)",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Missing_List.min_list_nth",
     "[| length ?xs = length ?ys;
         !!i. i < length ?ys ==> ?xs ! i <= ?ys ! i |]
      ==> Missing_List.min_list ?xs <= Missing_List.min_list ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_List.nth_take_prefix",
     "[| length ?ys <= length ?xs; ALL i<length ?ys. ?xs ! i = ?ys ! i |]
      ==> take (length ?ys) ?xs = ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 1)),
           template_var 0),
         template_var 1))),
    ("Missing_List.list_all2_in_set2",
     "[| list_all2 ?P ?xs ?ys; ?y : set ?ys;
         !!x. [| x : set ?xs; ?P x ?y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Missing_List.all_gt_0_sum_list_map",
     "[| !!x. 0 < ?f x; ?x : set ?xs; 1 < length ?xs |]
      ==> ?f ?x < sum_list (map ?f ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_app (template_var 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Missing_List.partition2_sound_nP",
     "ALL i<length (fst (snd (partition2 ?P ?as ?bs))).
         ~ ?P (fst (snd (partition2 ?P ?as ?bs)) ! i)
            (snd (snd (partition2 ?P ?as ?bs)) ! i)",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Missing_List.map_eq_conv'",
     "(map ?f ?xs = map ?g ?ys) =
      (length ?xs = length ?ys &
       (ALL i<length ?xs. ?f (?xs ! i) = ?g (?ys ! i)))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 11, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2)),
                 template_app (template_hole 6, template_var 0))),
             template_app (template_hole 5, t_empty))
           ))),
    ("Missing_List.Ex_list_of_length_P",
     "ALL i<?n. EX x. ?P x i ==>
      EX xs. length xs = ?n & (ALL i<?n. ?P (xs ! i) i)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Missing_List.foldr_assoc",
     "(!!f g h. ?b (?b f g) h = ?b f (?b g h)) ==>
      foldr ?b ?xs (?b ?y ?z) = ?b (foldr ?b ?xs ?y) ?z",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Missing_List.foldl_assoc",
     "(!!f g h. ?b f (?b g h) = ?b (?b f g) h) ==>
      foldl ?b (?b ?x ?y) ?zs = ?b ?x (foldl ?b ?y ?zs)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0))))),
    ("Missing_List.nth_concat_split",
     "?i < length (concat ?xs) ==>
      EX j k.
         j < length ?xs &
         k < length (?xs ! j) & concat ?xs ! ?i = ?xs ! j ! k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 0)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Missing_List.take_drop_update_second",
     "[| ?j < length ?ds; length ?cs = length ?ds |]
      ==> (take ?j ?ds @ drop ?j ?cs)[?j := ?cs ! ?j] =
          take ?j ?ds @ drop ?j ?cs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Missing_List.eq_length_concat_nth",
     "[| length ?xs = length ?ys;
         !!i. i < length ?xs ==> length (?xs ! i) = length (?ys ! i) |]
      ==> length (concat ?xs) = length (concat ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Missing_List.nth_append_drop_is_nth_conv",
     "[| ?j < ?i; ?j <= length ?xs; ?i <= length ?xs |]
      ==> (take ?j ?xs @ ?y # drop (Suc ?j) ?xs) ! ?i = ?xs ! ?i",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 1)))),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 2)))),
    ("Missing_List.nth_append_take_drop_is_nth_conv",
     "[| ?i <= length ?xs; ?j <= length ?xs; ?i ~= ?j |]
      ==> (take ?j ?xs @ ?y # drop (Suc ?j) ?xs) ! ?i = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 9, template_var 2)),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 2)))),
           template_var 3),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 3)))),
    ("Missing_List.take_drop_update_first",
     "[| ?j < length ?ds; length ?cs = length ?ds |]
      ==> (take ?j ?ds @ drop ?j ?cs)[?j := ?ds ! ?j] =
          take (Suc ?j) ?ds @ drop (Suc ?j) ?cs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_equation
         (template_app (template_hole 8, template_var 0),
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Missing_List.list_3_cases",
     "[| ?xs = [] ==> ?P; !!x. ?xs = [x] ==> ?P;
         !!x y ys. ?xs = x # y # ys ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Missing_List.remove_nth_P_compat",
     "[| length ?as = length ?bs;
         ALL i<length ?as. ?P (?as ! i) (?bs ! i) |]
      ==> ALL i<length (remove_nth ?p ?as).
             ?P (remove_nth ?p ?as ! i) (remove_nth ?p ?bs ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Missing_List.list_4_cases",
     "[| ?xs = [] ==> ?P; !!x. ?xs = [x] ==> ?P; !!x y. ?xs = [x, y] ==> ?P;
         !!x y z zs. ?xs = x # y # z # zs ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Missing_List.fun_merge",
     "[| ?i < length ?as; ?a : ?as ! ?i;
         !!i j a.
            [| i < length ?as; j < length ?as; a : ?as ! i; a : ?as ! j |]
            ==> (?fs ! i) a = (?fs ! j) a |]
      ==> fun_merge ?fs ?as ?a = (?fs ! ?i) ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Missing_List.P_as_bs_extend",
     "[| length ?as = length ?bs; length ?cs = length ?ds;
         ALL i<length ?bs. ?P (?as ! i) (?bs ! i);
         ALL i<length ?ds. ?P (?cs ! i) (?ds ! i) |]
      ==> ALL i<length (?bs @ ?ds). ?P ((?as @ ?cs) ! i) ((?bs @ ?ds) ! i)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Missing_List.parallel_list_update",
     "[| !!xs i y.
            [| length xs = ?n; i < ?n; ?r (xs ! i) y; ?p xs |]
            ==> ?p (xs[i := y]);
         length ?xs = ?n; ?p ?xs; length ?ys = ?n;
         !!i. i < ?n ==> ?r (?xs ! i) (?ys ! i) |]
      ==> ?p ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 4),
        template_predicate (template_app (template_var 2, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 4),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Missing_List.nth_concat_two_lists",
     "[| ?i < length (concat ?xs); length ?ys = length ?xs;
         !!i. i < length ?xs ==> length (?ys ! i) = length (?xs ! i) |]
      ==> EX j k.
             j < length ?xs &
             k < length (?xs ! j) &
             concat ?xs ! ?i = ?xs ! j ! k & concat ?ys ! ?i = ?ys ! j ! k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_var 1))),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Missing_List.concat_all_nth",
     "[| length ?xs = length ?ys;
         !!i. i < length ?xs ==> length (?xs ! i) = length (?ys ! i);
         !!i j.
            [| i < length ?xs; j < length (?xs ! i) |]
            ==> ?P (?xs ! i ! j) (?ys ! i ! j) |]
      ==> ALL k<length (concat ?xs). ?P (concat ?xs ! k) (concat ?ys ! k)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Missing_List.take_nth_drop_concat",
     "[| ?i < length ?xss; ?xss ! ?i = ?ys; ?j < length ?ys;
         ?ys ! ?j = ?z |]
      ==> EX k<length (concat ?xss).
             take k (concat ?xss) = concat (take ?i ?xss) @ take ?j ?ys &
             concat ?xss ! k = ?xss ! ?i ! ?j &
             drop (Suc k) (concat ?xss) =
             drop (Suc ?j) ?ys @ concat (drop (Suc ?i) ?xss)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 14, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 3),
            template_var 4),
          template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 11, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Missing_List.nth_concat_diff",
     "[| ?i1.0 < length (concat ?xs); ?i2.0 < length (concat ?xs);
         ?i1.0 ~= ?i2.0 |]
      ==> EX j1 k1 j2 k2.
             (j1, k1) ~= (j2, k2) &
             j1 < length ?xs &
             j2 < length ?xs &
             k1 < length (?xs ! j1) &
             k2 < length (?xs ! j2) &
             concat ?xs ! ?i1.0 = ?xs ! j1 ! k1 &
             concat ?xs ! ?i2.0 = ?xs ! j2 ! k2",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 1))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 1))),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Missing_ListMoreTemplates"
### 0.364s elapsed time, 0.512s cpu time, 0.000s GC time
val it = (): unit
