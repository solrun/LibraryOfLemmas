Loading theory "HOL-Library.Dual_Ordered_Lattice" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Product_Plus" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts" via "HOL-Library.Product_Order")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.505s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Product_Plus"
### 0.124s elapsed time, 0.513s cpu time, 0.040s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts")
instantiation
  dual :: (equal) equal
  equal_dual == equal_class.equal :: 'a dual => 'a dual => bool
instantiation
  dual :: (ord) ord
  less_eq_dual == less_eq :: 'a dual => 'a dual => bool
  less_dual == less :: 'a dual => 'a dual => bool
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  dual :: (sup) inf
  inf_dual == inf :: 'a dual => 'a dual => 'a dual
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  dual :: (inf) sup
  sup_dual == sup :: 'a dual => 'a dual => 'a dual
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
Found termination order: "size_list size <*mlex*> {}"
instantiation
  dual :: (top) bot
  bot_dual == bot :: 'a dual
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  dual :: (bot) top
  top_dual == top :: 'a dual
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
instantiation
  dual :: (uminus) uminus
  uminus_dual == uminus :: 'a dual => 'a dual
instantiation
  dual :: (boolean_algebra) boolean_algebra
  minus_dual == minus :: 'a dual => 'a dual => 'a dual
instantiation
  dual :: (Sup) Inf
  Inf_dual == Inf :: 'a dual set => 'a dual
instantiation
  dual :: (Inf) Sup
  Sup_dual == Sup :: 'a dual set => 'a dual
### theory "HOL-Library.Product_Order"
### 0.196s elapsed time, 0.766s cpu time, 0.076s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.337s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Dual_Ordered_Lattice"
### 0.339s elapsed time, 1.356s cpu time, 0.116s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts" via "Draft.Choice_Functions" via "Draft.Basis")
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.861s cpu time, 0.076s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.While_Combinator"
### 0.412s elapsed time, 1.627s cpu time, 0.167s GC time
Loading theory "Draft.Basis" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts" via "Draft.Choice_Functions")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  map_of_default :: "'v => ('k * 'v) list => 'k => 'v"
locale MaxR
  fixes r :: "('a * 'a) set"
  assumes "MaxR r"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  linord_of_listP :: "'a => 'a => 'a list => bool"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "sorted_on"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  insort_key_on :: "('a * 'a) set => ('b => 'a) => 'b => 'b list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Basis"
### 0.574s elapsed time, 2.112s cpu time, 0.705s GC time
Loading theory "Draft.Choice_Functions" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.035s elapsed time, 3.920s cpu time, 0.923s GC time
Loading theory "HOL-Library.Bourbaki_Witt_Fixpoint" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP" via "Draft.Contracts")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 4.127s cpu time, 0.923s GC time
locale bourbaki_witt_fixpoint
  fixes lub :: "'a set => 'a"
    and leq :: "('a * 'a) set"
    and f :: "'a => 'a"
  assumes "bourbaki_witt_fixpoint lub leq f"
Proofs for inductive predicate(s) "iterates_abovep"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale bourbaki_witt_fixpoint
  fixes lub :: "'a set => 'a"
    and leq :: "('a * 'a) set"
    and f :: "'a => 'a"
  assumes "bourbaki_witt_fixpoint lub leq f"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Bourbaki_Witt_Fixpoint"
### 0.266s elapsed time, 0.858s cpu time, 0.063s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale linear_cf
  fixes r :: "('a * 'a) set"
    and linear_cf :: "'a set => 'a set"
  assumes "linear_cf r linear_cf"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Choice_Functions"
### 0.807s elapsed time, 2.064s cpu time, 0.262s GC time
Loading theory "Draft.Contracts" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness" via "Draft.COP")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.037s elapsed time, 6.420s cpu time, 1.188s GC time
Loading theory "Draft.Templates" (required by "Draft.BossinessMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BossinessMoreTemplates")
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.134s cpu time, 0.122s GC time
instantiation
  D2 :: enum
  enum_D2 == enum_class.enum :: D2 list
  enum_all_D2 == enum_class.enum_all :: (D2 => bool) => bool
  enum_ex_D2 == enum_class.enum_ex :: (D2 => bool) => bool
consts
  X4d :: "X4 => D2"
consts
  PX4d :: "D2 => (X4 * X4) set"
### Partially applied constant "Contracts.PX4d" on left hand side of equation, in theorem:
### StableNoDecomp.Cd ?d (set ?X) ==
### set_option (fold (StableNoDecomp.MaxR_f ?d) ?X None)
locale ContractsWithIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithIRC Xd Xh Pd Ch"
locale ContractsWithIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithIRC Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutes Xd Xh Pd Ch"
locale ContractsWithSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutesAndIRC Xd Xh Pd Ch"
locale ContractsWithSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutes Xd Xh Pd Ch"
consts
  P_D2_H2_d :: "D2 => ((D2 * H2) * D2 * H2) set"
consts
  P_D2_H2_h :: "H2 => (D2 * H2) set => (D2 * H2) set"
instantiation
  H2 :: enum
  enum_H2 == enum_class.enum :: H2 list
  enum_all_H2 == enum_class.enum_all :: (H2 => bool) => bool
  enum_ex_H2 == enum_class.enum_ex :: (H2 => bool) => bool
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutes Xd Xh Pd Ch"
locale ContractsWithSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutesAndIRC Xd Xh Pd Ch"
locale ContractsWithSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutesAndIRC Xd Xh Pd Ch"
locale ContractsWithLAD
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithLAD Xd Xh Pd Ch"
locale ContractsWithSubstitutesAndLAD
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutesAndLAD Xd Xh Pd Ch"
locale ContractsWithSubstitutesAndLAD
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutesAndLAD Xd Xh Pd Ch"
consts
  X3d :: "X3 => D2"
consts
  PX3d :: "D2 => (X3 * X3) set"
### Partially applied constant "Contracts.PX3d" on left hand side of equation, in theorem:
### Theorem_9.Cd ?d (set ?X) == set_option (fold (Theorem_9.MaxR_f ?d) ?X None)
### Partially applied constant "Contracts.PX3d" on left hand side of equation, in theorem:
### Theorem_9.gfp_F ?ds ==
### map_prod id undual
###  (while (%A. Theorem_9.F ?ds A ~= A) (Theorem_9.F ?ds) top)
### Partially applied constant "Contracts.PX3d" on left hand side of equation, in theorem:
### Theorem_9.lfp_F ?ds ==
### map_prod id undual
###  (while (%A. Theorem_9.F ?ds A ~= A) (Theorem_9.F ?ds) bot)
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithSubstitutes Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithIRC Xd Xh Pd Ch"
### theory "Draft.Contracts"
### 2.949s elapsed time, 4.038s cpu time, 0.480s GC time
Loading theory "Draft.COP" (required by "Draft.BossinessMoreTemplates" via "Draft.Bossiness")
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithBilateralSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithBilateralSubstitutes Xd Xh Pd Ch"
locale ContractsWithBilateralSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithBilateralSubstitutesAndIRC Xd Xh Pd Ch"
locale ContractsWithBilateralSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithBilateralSubstitutesAndIRC Xd Xh Pd Ch"
consts
  X5d :: "X5 => D2"
consts
  X5h :: "X5 => H2"
consts
  PX5d :: "D2 => (X5 * X5) set"
consts
  CX5h :: "H2 => X5 set => X5 set"
### Partially applied constant "COP.PX5d" on left hand side of equation, in theorem:
### BSI.Cd ?d (set ?X) == set_option (fold (BSI.MaxR_f ?d) ?X None)
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutes
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutes Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutesAndIRC Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutesAndIRC Xd Xh Pd Ch"
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale ContractsWithIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithIRC Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutesAndIRC
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutesAndIRC Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutesAndIRCAndLAD
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutesAndIRCAndLAD Xd Xh Pd Ch"
locale ContractsWithUnilateralSubstitutesAndIRCAndLAD
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
  assumes "ContractsWithUnilateralSubstitutesAndIRCAndLAD Xd Xh Pd Ch"
### theory "Draft.COP"
### 1.523s elapsed time, 2.362s cpu time, 1.107s GC time
Loading theory "Draft.Bossiness" (required by "Draft.BossinessMoreTemplates")
locale Contracts
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and Pd :: "'d => ('x * 'x) set"
    and Ch :: "'h => 'x set => 'x set"
  assumes "Contracts Xd Xh Pd Ch"
locale BossyConstants
  fixes Xd :: "'x => 'd"
    and Xh :: "'x => 'h"
    and d1h1 :: "'x"
    and d1h2 :: "'x"
    and d1h3 :: "'x"
    and d2h1 :: "'x"
    and d2h2 :: "'x"
    and d2h3 :: "'x"
    and d3h1 :: "'x"
    and d3h2 :: "'x"
    and d3h3 :: "'x"
    and ds :: "'d set"
  assumes
    "BossyConstants Xd Xh d1h1 d1h2 d1h3 d2h1 d2h2 d2h3 d3h1 d3h2 d3h3 ds"
locale ContractsWithBossyConstants
  fixes Xd :: "'a => 'b"
    and Xh :: "'a => 'c"
    and Pd :: "'b => ('a * 'a) set"
    and Ch :: "'c => 'a set => 'a set"
    and d1h1 :: "'a"
    and d1h2 :: "'a"
    and d1h3 :: "'a"
    and d2h1 :: "'a"
    and d2h2 :: "'a"
    and d2h3 :: "'a"
    and d3h1 :: "'a"
    and d3h2 :: "'a"
    and d3h3 :: "'a"
    and ds :: "'b set"
  assumes
    "ContractsWithBossyConstants Xd Xh Pd Ch d1h1 d1h2 d1h3 d2h1 d2h2 d2h3
      d3h1 d3h2 d3h3 ds"
### theory "Draft.Bossiness"
### 0.510s elapsed time, 0.626s cpu time, 0.107s GC time
Loading theory "Draft.BossinessMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.BossinessMoreTemplates"
### 0.443s elapsed time, 0.658s cpu time, 0.048s GC time
val it = (): unit
