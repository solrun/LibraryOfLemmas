Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.510s cpu time, 0.047s GC time
Loading theory "Draft.Impossible_Geometry" (required by "Draft.Impossible_GeometryMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.027s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.301s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs")
consts
  abscissa :: "point => real"
consts
  ordinate :: "point => real"
instantiation
  point :: ab_group_add
  uminus_point == uminus :: point => point
  zero_point == zero_class.zero :: point
  minus_point == minus :: point => point => point
  plus_point == plus :: point => point => point
instantiation
  point :: metric_space
  dist_point == dist :: point => point => real
  uniformity_point == uniformity :: (point * point) filter
  open_point == open :: point set => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "radical_sqrtp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.990s elapsed time, 3.733s cpu time, 0.836s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.062s elapsed time, 3.900s cpu time, 0.756s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.021s elapsed time, 6.573s cpu time, 1.050s GC time
Loading theory "Draft.Templates" (required by "Draft.Impossible_GeometryMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.204s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Impossible_GeometryMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "constructiblep"
  Proving monotonicity ...
### theory "Draft.Impossible_Geometry"
### 2.282s elapsed time, 6.909s cpu time, 1.118s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.513s elapsed time, 0.873s cpu time, 0.069s GC time
Loading theory "Draft.Impossible_GeometryMoreTemplates"
val templateLemmas =
   [("Impossible_Geometry.finite_radicals", "finite (radicals ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Impossible_Geometry.not_in_own_radicals", "?r ~: radicals ?r",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Impossible_Geometry.point_abscissa_minus",
     "abscissa (- ?A) = - abscissa ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_ordinate_minus",
     "ordinate (- ?A) = - ordinate ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_surj",
     "Point (abscissa ?M) (ordinate ?M) = ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Impossible_Geometry.point_abscissa_diff",
     "abscissa (?A - ?B) = abscissa ?A - abscissa ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_abscissa_add",
     "abscissa (?A + ?B) = abscissa ?A + abscissa ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_ordinate_diff",
     "ordinate (?A - ?B) = ordinate ?A - ordinate ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_ordinate_add",
     "ordinate (?A + ?B) = ordinate ?A + ordinate ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Impossible_Geometry.point_minus",
     "- Point ?xA ?yA = Point (- ?xA) (- ?yA)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Impossible_Geometry.radicals_empty_rational",
     "radicals ?e = {} ==> \<lbrace>?e\<rbrace> : \<rat>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Impossible_Geometry.radical_sqrt_correct_expr",
     "?x : radical_sqrt ==> EX e. \<lbrace>e\<rbrace> = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Impossible_Geometry.radicals_expr_subset",
     "?r : radicals ?e ==> radicals ?r < radicals ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Impossible_Geometry.in_radicals_smaller_order",
     "?s : radicals ?r ==> order ?s < order ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Impossible_Geometry.eq_sqrt_squared",
     "0 <= ?x ==> sqrt ?x * sqrt ?x = ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Impossible_Geometry.in_radicals_smaller_order_contrap",
     "order ?r <= order ?s ==> ?s ~: radicals ?r",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Impossible_Geometry.Point_eq_0",
     "(Point ?xA ?yA = 0) = (?xA = 0 & ?yA = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Impossible_Geometry.constructible_radical_sqrt",
     "?M : constructible ==>
      abscissa ?M : radical_sqrt & ordinate ?M : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0)),
               template_hole 1))
           ))),
    ("Impossible_Geometry.point_eq_iff",
     "(?M = ?N) = (abscissa ?M = abscissa ?N & ordinate ?M = ordinate ?N)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Impossible_Geometry.radical_sqrt_normal_form_sublemma",
     "(?a - ?b) * (?a + ?b) = ?a * ?a - ?b * ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 0)))),
    ("Impossible_Geometry.point_diff",
     "Point ?xA ?yA - Point ?xB ?yB = Point (?xA - ?xB) (?yA - ?yB)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Impossible_Geometry.point_add",
     "Point ?xA ?yA + Point ?xB ?yB = Point (?xA + ?xB) (?yA + ?yB)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Impossible_Geometry.radical_sqrt_rule_subtraction",
     "[| ?x : radical_sqrt; ?y : radical_sqrt |]
      ==> ?x - ?y : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Impossible_Geometry.impossibility_of_doubling_the_cube",
     "?x ^ 3 = 2 ==> Point ?x 0 ~: constructible",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 0),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7))),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 7)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 0)
               )
           ))),
    ("Impossible_Geometry.radical_sqrt_rule_power2",
     "[| ?x : radical_sqrt; 0 <= ?x |] ==> ?x\<^sup>2 : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_hole 6)
           ))),
    ("Impossible_Geometry.radical_sqrt_rule_power3",
     "[| ?x : radical_sqrt; 0 <= ?x |] ==> ?x ^ 3 : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_hole 6)
           ))),
    ("Impossible_Geometry.impossibility_of_doubling_the_cube_lemma",
     "[| ?x : radical_sqrt; ?x ^ 3 = 2 |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 0),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 3)))],
       template_predicate (template_hole 0))),
    ("Impossible_Geometry.point_eqI",
     "[| abscissa ?M = abscissa ?N; ordinate ?M = ordinate ?N |]
      ==> ?M = ?N",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Impossible_Geometry.finite_set_has_max",
     "[| finite ?s; ?s ~= {} |] ==> EX k:?s. ALL p:?s. p <= k",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("Impossible_Geometry.upmost_radical_sqrt2",
     "radicals ?e ~= {} ==>
      EX r:radicals ?e. ALL s:radicals ?e. r ~: radicals s",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("Impossible_Geometry.radical_sqrt_rule_division",
     "[| ?x : radical_sqrt; ?y : radical_sqrt; ?y ~= 0 |]
      ==> ?x / ?y : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 4)
           ))),
    ("Impossible_Geometry.sqrt_roots",
     "?y\<^sup>2 = ?x ==> 0 <= ?x & (sqrt ?x = ?y | sqrt ?x = - ?y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 1),
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 1, template_var 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Impossible_Geometry.impossibility_of_trisecting_pi_over_3_lemma",
     "[| ?x : radical_sqrt; ?x ^ 3 - 3 * ?x - 1 = 0 |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_hole 11)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5)))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 0))),
            template_hole 2),
          template_hole 1)],
       template_predicate (template_hole 0))),
    ("Impossible_Geometry.finite_order_radicals",
     "[| radicals ?e ~= {}; finite (radicals ?e) |]
      ==> order_radicals (radicals ?e) ~= {} &
          finite (order_radicals (radicals ?e))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 7, template_var 0))),
                   template_hole 1))),
             template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0))))
           ))),
    ("Impossible_Geometry.point_dist",
     "dist (Point ?xA ?yA) (Point ?xB ?yB) =
      sqrt ((?xA - ?xB)\<^sup>2 + (?yA - ?yB)\<^sup>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Impossible_Geometry.finite_order_radicals_has_max",
     "[| order_radicals (radicals ?e) ~= {};
         finite (order_radicals (radicals ?e)) |]
      ==> EX r. r : radicals ?e & (ALL s:radicals ?e. order s <= order r)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Impossible_Geometry.radical_sqrt_linear_equation",
     "[| ?a : radical_sqrt; ?b : radical_sqrt; ~ (?a = 0 & ?b = 0);
         ?a * ?x + ?b = 0 |]
      ==> ?x : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 2)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_hole 2))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0)),
            template_var 1),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_hole 6)
           ))),
    ("Impossible_Geometry.real_sqrt_diff_squares_triangle_ineq",
     "sqrt ((?a - ?c)\<^sup>2 + (?b - ?d)\<^sup>2)
      <= sqrt (?a\<^sup>2 + ?b\<^sup>2) + sqrt (?c\<^sup>2 + ?d\<^sup>2)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Impossible_Geometry.radical_sqrt_normal_form_lemma4",
     "[| 0 <= ?z; ?x ~= ?y * sqrt ?z |]
      ==> 1 / (?x + ?y * sqrt ?z) =
          ?x / (?x * ?x - ?y * ?y * ?z) -
          ?y * sqrt ?z / (?x * ?x - ?y * ?y * ?z)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 2),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app (template_hole 4, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, template_var 2)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 0)),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_var 2))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 0)),
                 template_var 2))))))),
    ("Impossible_Geometry.radical_sqrt_quadratic_equation",
     "[| ?a : radical_sqrt; ?b : radical_sqrt; ?c : radical_sqrt;
         ?a * ?x\<^sup>2 + ?b * ?x + ?c = 0; ~ (?a = 0 & ?b = 0 & ?c = 0) |]
      ==> ?x : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_hole 10)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3))))),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 0))),
            template_var 1),
          template_hole 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 0,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_hole 2)),
                  template_app
                   (template_app
                     (template_hole 0,
                      template_app
                       (template_app (template_hole 9, template_var 2),
                        template_hole 2)),
                    template_app
                     (template_app (template_hole 9, template_var 1),
                      template_hole 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 0),
             template_hole 10)
           ))),
    ("Impossible_Geometry.radical_sqrt_normal_form",
     "radicals ?e ~= {} ==>
      EX r:radicals ?e.
         EX a b.
            \<lbrace>?e\<rbrace> =
            \<lbrace>Addition a (Multiplication b (Sqrt r))\<rbrace> &
            0 <= \<lbrace>r\<rbrace> &
            radicals a Un radicals b Un radicals r <= radicals ?e &
            r ~: radicals a Un radicals b Un radicals r",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 14, template_var 0)),
             t_empty)
           ))),
    ("Impossible_Geometry.radical_sqrt_normal_form_lemma",
     "[| radicals ?e ~= {}; ALL s:radicals ?e. ?r ~: radicals s;
         ?r : radicals ?e |]
      ==> EX a b.
             0 <= \<lbrace>?r\<rbrace> &
             \<lbrace>?e\<rbrace> =
             \<lbrace>a\<rbrace> +
             \<lbrace>b\<rbrace> * sqrt \<lbrace>?r\<rbrace> &
             radicals a Un radicals b Un radicals ?r <= radicals ?e &
             ?r ~: radicals a Un radicals b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 14, template_var 1),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 14, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 14, template_var 1))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Impossible_Geometry.c",
     "[| ?a : \<rat>; ?b : \<rat>; ?c : \<rat>; ?x : radical_sqrt;
         ?x ^ 3 + ?a * ?x\<^sup>2 + ?b * ?x + ?c = 0 |]
      ==> EX x:\<rat>. x ^ 3 + ?a * x\<^sup>2 + ?b * x + ?c = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_hole 10)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 5, template_hole 4)))),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 2, template_hole 4)))))),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0))),
            template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 11), t_empty)
           ))),
    ("Impossible_Geometry.cubic_root_radical_sqrt",
     "[| ?a : \<rat>; ?b : \<rat>; ?c : \<rat>; card (radicals ?e) = ?n;
         \<lbrace>?e\<rbrace> ^ 3 + ?a * \<lbrace>?e\<rbrace>\<^sup>2 +
         ?b * \<lbrace>?e\<rbrace> +
         ?c =
         0 |]
      ==> EX x:\<rat>. x ^ 3 + ?a * x\<^sup>2 + ?b * x + ?c = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_hole 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_hole 14)
            ),
        template_equation
         (template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 1)),
          template_var 0),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 5, template_hole 4)))),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_var 1)),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 2, template_hole 4)))))),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 7, template_var 1)))),
            template_var 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 14), t_empty)
           ))),
    ("Impossible_Geometry.radical_sqrt_line_line_intersection",
     "[| abscissa ?A : radical_sqrt; ordinate ?A : radical_sqrt;
         abscissa ?B : radical_sqrt; ordinate ?B : radical_sqrt;
         abscissa ?C : radical_sqrt; ordinate ?C : radical_sqrt;
         abscissa ?D : radical_sqrt; ordinate ?D : radical_sqrt;
         ~ parallel ?A ?B ?C ?D; is_intersection ?X ?A ?B ?C ?D |]
      ==> abscissa ?X : radical_sqrt & ordinate ?X : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 4)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 4)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 3)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 2)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 4, template_var 1)),
              template_hole 5)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 4, template_var 0)),
               template_hole 5))
           ))),
    ("Impossible_Geometry.cubic_root_radical_sqrt_lemma",
     "[| ?a : \<rat>; ?b : \<rat>; ?c : \<rat>; radicals ?e ~= {};
         \<lbrace>?e\<rbrace> ^ 3 + ?a * \<lbrace>?e\<rbrace>\<^sup>2 +
         ?b * \<lbrace>?e\<rbrace> +
         ?c =
         0 |]
      ==> EX e1.
             radicals e1 < radicals ?e &
             \<lbrace>e1\<rbrace> ^ 3 + ?a * \<lbrace>e1\<rbrace>\<^sup>2 +
             ?b * \<lbrace>e1\<rbrace> +
             ?c =
             0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_hole 17)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_hole 17)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_hole 17)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 14, template_var 0),
              template_hole 13)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 0)),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 7, template_hole 6)))),
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app (template_hole 9, template_var 0)),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 4, template_hole 6)))))),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 9, template_var 0)))),
            template_var 1),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Impossible_Geometry.radical_sqrt_simultaneous_linear_quadratic",
     "[| ?a : radical_sqrt; ?b : radical_sqrt; ?c : radical_sqrt;
         ?d : radical_sqrt; ?e : radical_sqrt; ?f : radical_sqrt;
         ~ (?d = 0 & ?e = 0 & ?f = 0);
         (?x - ?a)\<^sup>2 + (?y - ?b)\<^sup>2 = ?c;
         ?d * ?x + ?e * ?y = ?f |]
      ==> ?x : radical_sqrt & ?y : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 7),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_hole 11)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_hole 7)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 3),
                        template_hole 7)),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_hole 7)))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 7)),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1)))),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 6)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))),
          template_var 5),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1)),
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_hole 11)),
             template_app
              (template_app (template_hole 12, template_var 0),
               template_hole 11))
           ))),
    ("Impossible_Geometry.radical_sqrt_simultaneous_quadratic_quadratic",
     "[| ?a : radical_sqrt; ?b : radical_sqrt; ?c : radical_sqrt;
         ?d : radical_sqrt; ?e : radical_sqrt; ?f : radical_sqrt;
         ~ (?a = ?d & ?b = ?e & ?c = ?f);
         (?x - ?a)\<^sup>2 + (?y - ?b)\<^sup>2 = ?c;
         (?x - ?d)\<^sup>2 + (?y - ?e)\<^sup>2 = ?f |]
      ==> ?x : radical_sqrt & ?y : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_hole 9)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 2)))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 7)),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0)))),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 6)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)))),
          template_var 5),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 4)),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_hole 0)))),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 3)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_hole 0)))),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_hole 9)),
             template_app
              (template_app (template_hole 10, template_var 0),
               template_hole 9))
           ))),
    ("Impossible_Geometry.radical_sqrt_simultaneous_linear_equation",
     "[| ?a : radical_sqrt; ?b : radical_sqrt; ?c : radical_sqrt;
         ?d : radical_sqrt; ?e : radical_sqrt; ?f : radical_sqrt;
         ~ (?a * ?e - ?b * ?d = 0 &
            ?a * ?f - ?c * ?d = 0 & ?e * ?c = ?b * ?f);
         ?a * ?x + ?b * ?y = ?c; ?d * ?x + ?e * ?y = ?f |]
      ==> ?x : radical_sqrt & ?y : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_hole 3,
                            template_app
                             (template_app
                               (template_hole 2, template_var 7),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 2, template_var 6),
                            template_var 4))),
                      template_hole 1)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app
                             (template_hole 3,
                              template_app
                               (template_app
                                 (template_hole 2, template_var 7),
                                template_var 2)),
                            template_app
                             (template_app
                               (template_hole 2, template_var 5),
                              template_var 4))),
                        template_hole 1)),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 2, template_var 3),
                          template_var 5)),
                      template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 2))))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 7),
                template_var 1)),
            template_app
             (template_app (template_hole 2, template_var 6),
              template_var 0)),
          template_var 5),
        template_equation
         (template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 1)),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7)),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_hole 7))
           ))),
    ("Impossible_Geometry.radical_sqrt_line_circle_intersection",
     "[| abscissa ?A : radical_sqrt; ordinate ?A : radical_sqrt;
         abscissa ?B : radical_sqrt; ordinate ?B : radical_sqrt;
         abscissa ?C : radical_sqrt; ordinate ?C : radical_sqrt;
         abscissa ?D : radical_sqrt; ordinate ?D : radical_sqrt;
         abscissa ?E : radical_sqrt; ordinate ?E : radical_sqrt; ?A ~= ?B;
         collinear ?A ?X ?B; distance ?C ?X = distance ?D ?E |]
      ==> abscissa ?X : radical_sqrt & ordinate ?X : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 6, template_var 5)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 6, template_var 4)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 6, template_var 3)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 6, template_var 2)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 6, template_var 1)),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 0),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0)),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 6, template_var 0)),
               template_hole 7))
           ))),
    ("Impossible_Geometry.radical_sqrt_circle_circle_intersection",
     "[| abscissa ?A : radical_sqrt; ordinate ?A : radical_sqrt;
         abscissa ?B : radical_sqrt; ordinate ?B : radical_sqrt;
         abscissa ?C : radical_sqrt; ordinate ?C : radical_sqrt;
         abscissa ?D : radical_sqrt; ordinate ?D : radical_sqrt;
         abscissa ?E : radical_sqrt; ordinate ?E : radical_sqrt;
         abscissa ?F : radical_sqrt; ordinate ?F : radical_sqrt;
         distance ?A ?X = distance ?B ?C; distance ?D ?X = distance ?E ?F;
         ~ (?A = ?D & distance ?B ?C = distance ?E ?F) |]
      ==> abscissa ?X : radical_sqrt & ordinate ?X : radical_sqrt",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 6)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 6)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 5)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 4)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 3)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 2)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 5, template_var 1)),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 6), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 6),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 5, template_var 0)),
               template_hole 6))
           ))),
    ("Impossible_Geometry.cubic_root_radical_sqrt_steplemma",
     "[| \<nat> <= ?P; ALL x:?P. - x : ?P; ALL x:?P. x ~= 0 --> 1 / x : ?P;
         ALL x:?P. ALL y:?P. x + y : ?P; ALL x:?P. ALL y:?P. x * y : ?P;
         ?a : ?P; ?b : ?P; ?c : ?P;
         ?z ^ 3 + ?a * ?z\<^sup>2 + ?b * ?z + ?c = 0; ?u : ?P; ?v : ?P;
         ?s * ?s : ?P; ?z = ?u + ?v * ?s |]
      ==> EX w:?P. w ^ 3 + ?a * w\<^sup>2 + ?b * w + ?c = 0",
     template_implication
      ([template_inequation (less_equals, template_hole 17, template_var 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 3, template_hole 2)))),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 1, template_hole 2)))))),
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 3))),
            template_var 4),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 0)),
              template_var 7)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 7), t_empty)
           ))),
    ("Impossible_Geometry.cubic_root_radical_sqrt_steplemma_sqrt",
     "[| \<nat> <= ?P; ALL x:?P. - x : ?P; ALL x:?P. x ~= 0 --> 1 / x : ?P;
         ALL x:?P. ALL y:?P. x + y : ?P; ALL x:?P. ALL y:?P. x * y : ?P;
         ?a : ?P; ?b : ?P; ?c : ?P;
         ?z ^ 3 + ?a * ?z\<^sup>2 + ?b * ?z + ?c = 0; ?u : ?P; ?v : ?P;
         ?s : ?P; 0 <= ?s; ?z = ?u + ?v * sqrt ?s |]
      ==> EX w:?P. w ^ 3 + ?a * w\<^sup>2 + ?b * w + ?c = 0",
     template_implication
      ([template_inequation (less_equals, template_hole 19, template_var 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 5),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 5, template_hole 4)))),
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 3, template_hole 4)))))),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 3))),
            template_var 4),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 0),
              template_var 7)
            ),
        template_inequation (less_equals, template_hole 12, template_var 0),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 1, template_var 0))))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 7), t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Impossible_GeometryMoreTemplates"
### 0.353s elapsed time, 0.470s cpu time, 0.044s GC time
val it = (): unit
