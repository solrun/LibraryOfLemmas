Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SeqTemplates" via "Draft.Seq")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.111s elapsed time, 0.454s cpu time, 0.028s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.848s cpu time, 0.028s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.396s elapsed time, 1.577s cpu time, 0.130s GC time
Loading theory "Draft.Seq" (required by "Draft.SeqTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.438s elapsed time, 1.746s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Seq"
### 0.318s elapsed time, 1.257s cpu time, 0.167s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Library.BigO"
### 0.855s elapsed time, 3.118s cpu time, 0.836s GC time
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.905s elapsed time, 2.799s cpu time, 0.772s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.778s elapsed time, 4.764s cpu time, 1.004s GC time
Loading theory "Draft.Templates" (required by "Draft.SeqTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SeqTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.495s elapsed time, 0.545s cpu time, 0.061s GC time
Loading theory "Draft.SeqTemplates"
val templateLemmas =
   [("Lazy_Sequence.lazy_sequence_of_list_of_lazy_sequence",
     "lazy_sequence_of_list (list_of_lazy_sequence ?xq) = ?xq",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Lazy_Sequence.yield_Seq",
     "Lazy_Sequence.yield (Lazy_Sequence ?f) = ?f ()",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_var 0, template_hole 0))),
    ("Lazy_Sequence.case_lazy_sequence",
     "(case ?xq of lazy_sequence_of_list x => ?f x) =
      ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.rec_lazy_sequence",
     "rec_lazy_sequence ?f ?xq = ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_single",
     "list_of_lazy_sequence (Lazy_Sequence.single ?x) = [?x]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Seq.inf_concat_simple_surj_zero",
     "EX k. inf_concat_simple ?f k = (?i, 0)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Lazy_Sequence.lazy_sequence_eq_iff",
     "(?xq = ?yq) =
      (list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_flat",
     "list_of_lazy_sequence (Lazy_Sequence.flat ?xqq) =
      concat (map list_of_lazy_sequence (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.list_of_lazy_sequence_map",
     "list_of_lazy_sequence (Lazy_Sequence.map ?f ?xq) =
      map ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.single_code",
     "Lazy_Sequence.single ?x =
      Lazy_Sequence (%_. Some (?x, Lazy_Sequence.empty))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Lazy_Sequence.list_of_lazy_sequence_append",
     "list_of_lazy_sequence (Lazy_Sequence.append ?xq ?yq) =
      list_of_lazy_sequence ?xq @ list_of_lazy_sequence ?yq",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Lazy_Sequence.lazy_sequence_eqI",
     "list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq ==> ?xq = ?yq",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Seq.inf_concat_simple_mono",
     "?k <= ?k' ==>
      fst (inf_concat_simple ?f ?k) <= fst (inf_concat_simple ?f ?k')",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Seq.inf_concat_surj_zero",
     "0 < ?n ?i ==> EX k. inf_concat ?n k = (?i, 0)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Seq.inf_concat_simple_surj",
     "?j < ?f ?i ==> EX k. inf_concat_simple ?f k = (?i, ?j)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Seq.inf_concat_surj",
     "?j < ?n ?i ==> EX k. inf_concat ?n k = (?i, ?j)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lazy_Sequence.case_yield_eq",
     "(case Lazy_Sequence.yield ?xq of None => ?g | Some x => ?h x) =
      (case list_of_lazy_sequence ?xq of [] => ?g
       | x # xa => (curry ?h x o lazy_sequence_of_list) xa)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_Lazy_Sequence",
     "list_of_lazy_sequence (Lazy_Sequence ?f) =
      (case ?f () of None => []
       | Some (x, xq) => x # list_of_lazy_sequence xq)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_app (template_var 0, template_hole 0)))),
    ("Lazy_Sequence.map_code",
     "Lazy_Sequence.map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (?f x, Lazy_Sequence.map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Lazy_Sequence.list_of_lazy_sequence_hb_flat",
     "list_of_lazy_sequence (hb_flat ?xqq) =
      concat
       (map ((%x. case x of None => [None] | Some xs => xs) o
             map_option list_of_lazy_sequence)
         (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 1, template_hole 10))),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.flat_code",
     "Lazy_Sequence.flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append xq (Lazy_Sequence.flat xqq')))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Lazy_Sequence.hb_map_code",
     "hb_map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (map_option ?f x, hb_map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Seq.chainp_imp_relpowp",
     "ALL i. ?P (?S i) (?S (Suc i)) ==> (?P ^^ ?j) (?S ?i) (?S (?i + ?j))",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_app (template_var 2, template_var 0)),
             template_app
              (template_var 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Seq.chainp_imp_tranclp",
     "[| ALL i. ?P (?S i) (?S (Suc i)); ?i < ?j |]
      ==> ?P^++ (?S ?i) (?S ?j)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Seq.chainp_imp_rtranclp",
     "[| ALL i. ?P (?S i) (?S (Suc i)); ?i <= ?j |]
      ==> ?P^** (?S ?i) (?S ?j)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app (template_var 2, template_var 1)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Lazy_Sequence.append_code",
     "Lazy_Sequence.append ?xq ?yq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xq of None => Lazy_Sequence.yield ?yq
            | Some (x, xq') => Some (x, Lazy_Sequence.append xq' ?yq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Seq.inf_concat_bounds",
     "[| INFM i. 0 < ?n i; inf_concat ?n ?k = (?i, ?j) |] ==> ?j < ?n ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_than, template_var 0,
         template_app (template_var 3, template_var 1)))),
    ("Lazy_Sequence.hb_flat_code",
     "hb_flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append
                   (case xq of None => hit_bound | Some xq => xq)
                   (hb_flat xqq')))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Seq.chain_imp_relpow",
     "ALL i. (?S i, ?S (Suc i)) : ?r ==> (?S ?i, ?S (?i + ?j)) : ?r ^^ ?j",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_var 3, template_var 1)),
                 template_app
                  (template_var 3,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Seq.chain_imp_trancl",
     "[| ALL i. (?S i, ?S (Suc i)) : ?r; ?i < ?j |]
      ==> (?S ?i, ?S ?j) : ?r^+",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_var 3, template_var 1)),
                 template_app (template_var 3, template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Seq.chain_imp_rtrancl",
     "[| ALL i. (?S i, ?S (Suc i)) : ?r; ?i <= ?j |]
      ==> (?S ?i, ?S ?j) : ?r^*",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_var 3, template_var 1)),
                 template_app (template_var 3, template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Seq.cons_chainp",
     "[| ?P ?x (?S 0); ALL i. ?P (?S i) (?S (Suc i)) |]
      ==> ALL i.
             ?P (case i of 0 => ?x | Suc x => ?S x)
              (case Suc i of 0 => ?x | Suc x => ?S x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1),
              template_app (template_var 0, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Seq.inf_concat_add",
     "[| inf_concat ?n ?k = (?i, ?j); ?j + ?m < ?n ?i |]
      ==> inf_concat ?n (?k + ?m) = (?i, ?j + ?m)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 0),
          template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Seq.inf_concat_simple_add",
     "[| inf_concat_simple ?f ?k = (?i, ?j); ?j + ?l < ?f ?i |]
      ==> inf_concat_simple ?f (?k + ?l) = (?i, ?j + ?l)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 0),
          template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Seq.steps_imp_chainp",
     "ALL i>=?n. EX j>i. ?P (?S i) (?S j) ==>
      EX T. ALL i. ?P (T i) (T (Suc i))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Seq.steps_imp_chainp'",
     "ALL i>=?n. EX j>=i. ?P (?S i) (?S j) ==>
      EX T. ALL i. ?P (T i) (T (Suc i))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Seq.stepfun_imp_chainp",
     "ALL i>=?n. i < ?f i & ?P (?S i) (?S (?f i)) ==>
      ALL i. ?P (?S ((?f ^^ i) ?n)) (?S ((?f ^^ Suc i) ?n))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Seq.stepfun_imp_chainp'",
     "ALL i>=?n. i <= ?f i & ?P (?S i) (?S (?f i)) ==>
      ALL i. ?P (?S ((?f ^^ i) ?n)) (?S ((?f ^^ Suc i) ?n))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Seq.cons_chain",
     "[| (?x, ?S 0) : ?r; ALL i. (?S i, ?S (Suc i)) : ?r |]
      ==> ALL i.
             (case i of 0 => ?x | Suc x => ?S x,
              case Suc i of 0 => ?x | Suc x => ?S x)
             : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_var 1, template_hole 3))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Seq.inf_concat_mono",
     "[| INFM i. 0 < ?n i; inf_concat ?n ?k = (?i, ?j);
         inf_concat ?n ?k' = (?i', ?j'); ?i < ?i' |]
      ==> ?k < ?k'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 6), template_var 5),
          template_app
           (template_app (template_hole 0, template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 6), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_var 4, template_var 1)],
       template_inequation (less_than, template_var 5, template_var 2))),
    ("Limited_Sequence.map_seq_code",
     "Limited_Sequence.map_seq ?f ?xq ?i ?pol =
      (case Lazy_Sequence.yield ?xq of None => Some Lazy_Sequence.empty
       | Some (x, xq') =>
           case Limited_Sequence.eval (?f x) ?i ?pol of None => None
           | Some yq =>
               case Limited_Sequence.map_seq ?f xq' ?i ?pol of None => None
               | Some zq => Some (Lazy_Sequence.append yq zq))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Seq.inf_concat_step",
     "[| inf_concat ?n ?k = (?i, ?j); Suc (?j + ?m) = ?n ?i |]
      ==> inf_concat ?n (?k + Suc ?m) = (LEAST i'. ?i < i' & 0 < ?n i', 0)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1)),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 3, t_empty)),
           template_hole 0)))),
    ("Lazy_Sequence.equal_lazy_sequence_code",
     "equal_class.equal ?xq ?yq =
      (case (Lazy_Sequence.yield ?xq, Lazy_Sequence.yield ?yq) of
       (None, None) => True | (None, Some a) => False
       | (Some (x, xq'), None) => False
       | (Some (x, xq'), Some (y, yq')) =>
           equal_class.equal x y & equal_class.equal ?xq ?yq)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Seq.subchain",
     "ALL i>?n. EX j>i. ?P (?f i) (?f j) ==>
      EX \<phi>.
         (ALL i j. i < j --> \<phi> i < \<phi> j) &
         (ALL i. ?P (?f (\<phi> i)) (?f (\<phi> (Suc i))))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Seq.inf_concat_Suc",
     "[| INFM i. 0 < ?n i; !!i. ?f i (?n i) = ?f (Suc i) 0;
         inf_concat ?n ?k = (?i, ?j); inf_concat ?n (Suc ?k) = (?i', ?j') |]
      ==> ?f ?i' ?j' = ?f ?i (Suc ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty), template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 6), template_var 4),
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 6),
            template_app (template_hole 3, template_var 4)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_var 5, template_var 1), template_var 0),
         template_app
          (template_app (template_var 5, template_var 3),
           template_app (template_hole 3, template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.SeqTemplates"
### 0.280s elapsed time, 0.367s cpu time, 0.000s GC time
val it = (): unit
