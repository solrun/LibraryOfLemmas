Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.600s cpu time, 0.064s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.239s elapsed time, 0.954s cpu time, 0.064s GC time
Loading theory "Draft.Seq" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting")
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 1.016s cpu time, 0.064s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
### theory "HOL-Library.Nat_Bijection"
### 0.415s elapsed time, 1.550s cpu time, 0.469s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Seq"
### 0.604s elapsed time, 2.024s cpu time, 0.558s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.While_Combinator"
### 0.582s elapsed time, 2.050s cpu time, 0.230s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Regular-Sets.Regular_Set"
### 0.221s elapsed time, 0.881s cpu time, 0.075s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.971s elapsed time, 3.581s cpu time, 0.385s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.699s elapsed time, 2.638s cpu time, 0.317s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
### theory "HOL-Library.Tree"
### 2.262s elapsed time, 7.099s cpu time, 1.670s GC time
Loading theory "Draft.Templates" (required by "Draft.SN_OrdersTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.114s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SN_OrdersTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 1.187s cpu time, 0.091s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 1.939s elapsed time, 4.796s cpu time, 1.051s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method")
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.065s elapsed time, 0.158s cpu time, 0.047s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 2.125s elapsed time, 3.570s cpu time, 1.018s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting" via "Regular-Sets.Regexp_Method")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.180s elapsed time, 0.186s cpu time, 0.000s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders" via "Draft.Abstract_Rewriting")
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.454s elapsed time, 0.501s cpu time, 0.064s GC time
Loading theory "Draft.Abstract_Rewriting" (required by "Draft.SN_OrdersTemplates" via "Draft.SN_Orders")
Found termination order: "{}"
Proofs for inductive predicate(s) "SN_partp"
  Proving monotonicity ...
### theory "Draft.Abstract_Rewriting"
### 1.176s elapsed time, 2.104s cpu time, 1.281s GC time
Loading theory "Draft.SN_Orders" (required by "Draft.SN_OrdersTemplates")
class non_strict_order = ord +
  assumes "ge_refl": "!!x. x <= x"
    and "ge_trans": "!!y x z. [| y <= x; z <= y |] ==> z <= x"
    and "max_comm": "!!x y. max x y = max y x"
    and "max_ge_x": "!!x y. x <= max x y"
    and "max_id": "!!y x. y <= x ==> max x y = x"
    and "max_mono": "!!y x z. y <= x ==> max z y <= max z x"
class ordered_ab_semigroup = ab_semigroup_add + monoid_add +
  non_strict_order +
  assumes "plus_left_mono": "!!y x z. y <= x ==> y + z <= x + z"
class SN_Orders.ordered_semiring_0 = semiring_0 + ordered_ab_semigroup +
  assumes
    "times_left_mono":
      "!!z y x. [| (0::'a) <= z; y <= x |] ==> y * z <= x * z"
    and
    "times_right_mono":
      "!!x z y. [| (0::'a) <= x; z <= y |] ==> x * z <= x * y"
    and
    "times_left_anti_mono":
      "!!y x z. [| y <= x; z <= (0::'a) |] ==> x * z <= y * z"
class ordered_semiring_1 = semiring_1 + SN_Orders.ordered_semiring_0 +
  assumes "one_ge_zero": "(0::'a) <= (1::'a)"
locale order_pair
  fixes gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and default :: "'a"
  assumes "order_pair (\<succ>) default"
locale one_mono_ordered_semiring_1
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
  assumes "one_mono_ordered_semiring_1 default (\<succ>)"
locale SN_one_mono_ordered_semiring_1
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
  assumes "SN_one_mono_ordered_semiring_1 default (\<succ>)"
locale SN_strict_mono_ordered_semiring_1
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and mono :: "'a => bool"
  assumes "SN_strict_mono_ordered_semiring_1 default (\<succ>) mono"
locale both_mono_ordered_semiring_1
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and arc_pos :: "'a => bool"
  assumes "both_mono_ordered_semiring_1 default (\<succ>) arc_pos"
locale SN_both_mono_ordered_semiring_1
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and arc_pos :: "'a => bool"
  assumes "SN_both_mono_ordered_semiring_1 default (\<succ>) arc_pos"
locale weak_SN_strict_mono_ordered_semiring_1
  fixes weak_gt :: "'a => 'a => bool"
    and default :: "'a"
    and mono :: "'a => bool"
  assumes "weak_SN_strict_mono_ordered_semiring_1 weak_gt default mono"
locale weak_SN_both_mono_ordered_semiring_1
  fixes weak_gt :: "'a => 'a => bool"
    and default :: "'a"
    and arc_pos :: "'a => bool"
  assumes "weak_SN_both_mono_ordered_semiring_1 weak_gt default arc_pos"
locale poly_order_carrier
  fixes default :: "'a"
    and gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and power_mono :: "bool"
    and discrete :: "bool"
  assumes "poly_order_carrier default (\<succ>) power_mono discrete"
class large_ordered_semiring_1 = poly_carrier +
  assumes "ex_large_of_nat": "!!y. EX x. y <= of_nat x"
class ordered_semiring_1 = semiring_1 + SN_Orders.ordered_semiring_0 +
  assumes "one_ge_zero": "(0::'a) <= (1::'a)"
### theory "Draft.SN_Orders"
### 1.408s elapsed time, 1.508s cpu time, 0.139s GC time
Loading theory "Draft.SN_OrdersTemplates"
val templateLemmas =
   [("SN_Orders.of_nat_ge_zero", "(0::?'a) <= of_nat ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("SN_Orders.SN_imp_non_inf", "SN ?r ==> non_inf ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SN_Orders.pow_mono_one", "(1::?'a) <= ?a ==> (1::?'a) <= ?a ^ ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SN_Orders.of_nat_mono", "?m <= ?n ==> of_nat ?m <= of_nat ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SN_Orders.plus_right_mono", "?z <= ?y ==> ?x + ?z <= ?x + ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SN_Orders.foldr_max", "?a : set ?as ==> ?a <= foldr max ?as ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("SN_Orders.mult_ge_one",
     "[| (1::?'a) <= ?a; (1::?'a) <= ?b |] ==> (1::?'a) <= ?a * ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SN_Orders.mult_ge_zero",
     "[| (0::?'a) <= ?a; (0::?'a) <= ?b |] ==> (0::?'a) <= ?a * ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SN_Orders.sum_list_ge_0",
     "(!!x. x : set ?xs ==> (0::?'a) <= x) ==> (0::?'a) <= sum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("SN_Orders.pow_mono_exp",
     "[| (1::?'a) <= ?a; ?m <= ?n |] ==> ?a ^ ?m <= ?a ^ ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SN_Orders.sum_list_ge_0_nth",
     "(!!i. i < length ?xs ==> (0::?'a) <= ?xs ! i) ==>
      (0::?'a) <= sum_list ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals, template_hole 2,
         template_app (template_hole 0, template_var 0)))),
    ("SN_Orders.non_inf_imp_SN_bound",
     "non_inf ?r ==> SN {(a, b). (b, ?c) : ?r & (a, b) : ?r}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5, template_app (template_hole 4, t_empty))),
             template_hole 0)
           ))),
    ("SN_Orders.non_inf_image",
     "[| non_inf ?r; !!a b. (a, b) : ?s ==> (?f a, ?f b) : ?r |]
      ==> non_inf ?s",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("SN_Orders.non_infI",
     "(!!a f. (!!i. (f i, f (Suc i)) : ?r) ==> EX i. (f i, a) ~: ?r) ==>
      non_inf ?r",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SN_Orders.non_infE",
     "[| non_inf ?r;
         !!i. (?f i, ?f (Suc i)) ~: ?r | (?f i, ?a) ~: ?r ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("SN_Orders.sum_list_ge_mono",
     "[| length ?as = length ?bs;
         !!i. i < length ?bs ==> ?bs ! i <= ?as ! i |]
      ==> sum_list ?bs <= sum_list ?as",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.SN_OrdersTemplates"
### 0.331s elapsed time, 0.444s cpu time, 0.000s GC time
val it = (): unit
