Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.592s cpu time, 0.050s GC time
Loading theory "Draft.UML_Types" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.UML_Boolean" via "Draft.UML_PropertyProfiles" via "Draft.UML_Logic")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.276s elapsed time, 1.101s cpu time, 0.124s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.287s elapsed time, 1.149s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs")
### Missing patterns in function definition:
### \<lceil>\<bottom>\<rceil> = undefined
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### drop \<lfloor>?y\<rfloor> == ?y
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class UML_Types.bot = type +
  fixes bot :: "'a"
  assumes "nonEmpty": "EX x. x ~= UML_Types.bot_class.bot"
Found termination order: "size <*mlex*> {}"
class null = UML_Types.bot +
  fixes null :: "'a"
  assumes "null_is_valid": "null ~= UML_Types.bot_class.bot"
instantiation
  option :: (type) UML_Types.bot
  bot_option == UML_Types.bot_class.bot ::
    \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  option :: (UML_Types.bot) null
  null_option == null :: \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  fun :: (type, UML_Types.bot) UML_Types.bot
  bot_fun == UML_Types.bot_class.bot :: 'a => 'b
instantiation
  fun :: (type, null) null
  null_fun == null :: 'a => 'b
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class object = type +
  fixes oid_of :: "'a => nat"
instantiation
  option :: (object) object
  oid_of_option == oid_of :: \<langle>'a\<rangle>\<^sub>\<bottom> => nat
### Ignoring sort constraints in type variables(s): "'\<alpha>"
### in type abbreviation "val"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.945s elapsed time, 3.568s cpu time, 0.674s GC time
"'\<AA>"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) UML_Types.bot
  bot_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) null
  null_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.010s elapsed time, 3.761s cpu time, 0.674s GC time
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
val disp_msg = fn: string -> string -> string -> string
val lemma = fn:
   string ->
     (string ->
        'a option ->
          ('b -> 'c -> 'c) ->
            binding * 'd list ->
              'e list ->
                'f list ->
                  ('g, 'h) Element.stmt -> bool -> 'i -> Proof.state)
       ->
       ('i -> 'h) -> (('i -> Proof.context) -> 'j -> 'k) -> 'j -> 'k option
val outer_syntax_command = fn:
   Outer_Syntax.command_keyword ->
     (('a -> 'b) -> Toplevel.transition -> Toplevel.transition) ->
       ((local_theory -> Proof.context) -> 'a -> 'b) -> unit
### theory "Draft.UML_Types"
### 1.350s elapsed time, 4.759s cpu time, 0.825s GC time
Loading theory "Draft.UML_Logic" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.UML_Boolean" via "Draft.UML_PropertyProfiles")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 702 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.All_binder" ("_position" \<tau>) ("_position" \<tau>))
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" \<tau>)
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 754 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" null))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" null)))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" true)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" true))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 849 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" false)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" false))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 853 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" invalid)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" invalid))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 860 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>))
###         ("_position" null)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>HOL.eq" ("\<^const>UML_Logic.defined" ("_position" X))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>))
###           ("_position" null))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclImplies" ("_position" A) ("_position" B)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclImplies"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" B))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 1.934s elapsed time, 6.285s cpu time, 0.995s GC time
Loading theory "Draft.Templates" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 989 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" y))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" y) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
?x = ?y ==> (~ ?x) = (~ ?y)
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UML_BooleanMoreTemplates")
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ambiguous input (line 1109 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2)))
###       ("_position" B\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2))
###         ("_position" B\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Logic"
### 0.833s elapsed time, 2.002s cpu time, 0.781s GC time
Loading theory "Draft.UML_PropertyProfiles" (required by "Draft.UML_BooleanMoreTemplates" via "Draft.UML_Boolean")
locale profile_mono_scheme_defined
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_scheme_defined f g"
locale profile_mono_schemeV
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_schemeV f g"
locale profile_mono\<^sub>d
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono\<^sub>d f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_single
  fixes
    d :: "('\<AA> state * '\<AA> state => 'a)
          => '\<AA> state * '\<AA> state
             => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes "profile_single d"
locale profile_bin_scheme
  fixes
    d\<^sub>x ::
      "('\<AA> state * '\<AA> state => 'a)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme d\<^sub>x d\<^sub>y f g"
### Ambiguous input (line 241 of "$AFP/Featherweight_OCL/UML_PropertyProfiles.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale profile_bin_scheme_defined
  fixes
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme_defined d\<^sub>y f g"
locale profile_bin\<^sub>d_\<^sub>d
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>d f g"
locale profile_bin\<^sub>d_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>v f g"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale profile_bin\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<beta>)
             => '\<AA> state * '\<AA> state => '\<gamma>"
    and g :: "'\<alpha> => '\<beta> => '\<gamma>"
  assumes "profile_bin\<^sub>v_\<^sub>v f g"
### theory "Draft.UML_PropertyProfiles"
### 0.387s elapsed time, 0.795s cpu time, 0.045s GC time
Loading theory "Draft.UML_Boolean" (required by "Draft.UML_BooleanMoreTemplates")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.781s elapsed time, 1.847s cpu time, 0.706s GC time
### theory "Draft.UML_Boolean"
### 1.174s elapsed time, 1.270s cpu time, 0.084s GC time
Loading theory "Draft.UML_BooleanMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.UML_BooleanMoreTemplates"
### 0.319s elapsed time, 0.427s cpu time, 0.012s GC time
val it = (): unit
