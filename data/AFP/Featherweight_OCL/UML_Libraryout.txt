Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.098s elapsed time, 0.429s cpu time, 0.000s GC time
Loading theory "Draft.UML_Types" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library" via "Draft.UML_Boolean" via "Draft.UML_PropertyProfiles" via "Draft.UML_Logic")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.850s cpu time, 0.067s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs")
### Missing patterns in function definition:
### \<lceil>\<bottom>\<rceil> = undefined
### theory "HOL-Library.Nat_Bijection"
### 0.431s elapsed time, 1.606s cpu time, 0.401s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### drop \<lfloor>?y\<rfloor> == ?y
class UML_Types.bot = type +
  fixes bot :: "'a"
  assumes "nonEmpty": "EX x. x ~= UML_Types.bot_class.bot"
class null = UML_Types.bot +
  fixes null :: "'a"
  assumes "null_is_valid": "null ~= UML_Types.bot_class.bot"
instantiation
  option :: (type) UML_Types.bot
  bot_option == UML_Types.bot_class.bot ::
    \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  option :: (UML_Types.bot) null
  null_option == null :: \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  fun :: (type, UML_Types.bot) UML_Types.bot
  bot_fun == UML_Types.bot_class.bot :: 'a => 'b
instantiation
  fun :: (type, null) null
  null_fun == null :: 'a => 'b
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class object = type +
  fixes oid_of :: "'a => nat"
instantiation
  option :: (object) object
  oid_of_option == oid_of :: \<langle>'a\<rangle>\<^sub>\<bottom> => nat
### Ignoring sort constraints in type variables(s): "'\<alpha>"
### in type abbreviation "val"
### theory "HOL-Library.BigO"
### 0.817s elapsed time, 3.098s cpu time, 0.577s GC time
"'\<AA>"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) UML_Types.bot
  bot_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) null
  null_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.869s elapsed time, 3.181s cpu time, 0.250s GC time
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
val disp_msg = fn: string -> string -> string -> string
val lemma = fn:
   string ->
     (string ->
        'a option ->
          ('b -> 'c -> 'c) ->
            binding * 'd list ->
              'e list ->
                'f list ->
                  ('g, 'h) Element.stmt -> bool -> 'i -> Proof.state)
       ->
       ('i -> 'h) -> (('i -> Proof.context) -> 'j -> 'k) -> 'j -> 'k option
val outer_syntax_command = fn:
   Outer_Syntax.command_keyword ->
     (('a -> 'b) -> Toplevel.transition -> Toplevel.transition) ->
       ((local_theory -> Proof.context) -> 'a -> 'b) -> unit
### theory "Draft.UML_Types"
### 1.273s elapsed time, 4.549s cpu time, 0.746s GC time
Loading theory "Draft.UML_Logic" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library" via "Draft.UML_Boolean" via "Draft.UML_PropertyProfiles")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 702 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.All_binder" ("_position" \<tau>) ("_position" \<tau>))
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" \<tau>)
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 754 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" null))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" null)))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" true)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" true))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 849 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" false)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" false))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 853 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" invalid)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" invalid))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 860 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>))
###         ("_position" null)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>HOL.eq" ("\<^const>UML_Logic.defined" ("_position" X))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>))
###           ("_position" null))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 1.943s elapsed time, 6.326s cpu time, 1.305s GC time
Loading theory "Draft.Templates" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 923 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclImplies" ("_position" A) ("_position" B)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclImplies"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" B))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 989 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" y))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" y) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UML_LibraryMoreTemplates")
?x = ?y ==> (~ ?x) = (~ ?y)
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ambiguous input (line 1109 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2)))
###       ("_position" B\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2))
###         ("_position" B\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Logic"
### 0.835s elapsed time, 1.938s cpu time, 0.611s GC time
Loading theory "Draft.UML_PropertyProfiles" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library" via "Draft.UML_Boolean")
locale profile_mono_scheme_defined
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_scheme_defined f g"
locale profile_mono_schemeV
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_schemeV f g"
locale profile_mono\<^sub>d
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono\<^sub>d f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_single
  fixes
    d :: "('\<AA> state * '\<AA> state => 'a)
          => '\<AA> state * '\<AA> state
             => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes "profile_single d"
locale profile_bin_scheme
  fixes
    d\<^sub>x ::
      "('\<AA> state * '\<AA> state => 'a)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme d\<^sub>x d\<^sub>y f g"
### Ambiguous input (line 241 of "$AFP/Featherweight_OCL/UML_PropertyProfiles.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale profile_bin_scheme_defined
  fixes
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme_defined d\<^sub>y f g"
locale profile_bin\<^sub>d_\<^sub>d
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>d f g"
locale profile_bin\<^sub>d_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>v f g"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale profile_bin\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<beta>)
             => '\<AA> state * '\<AA> state => '\<gamma>"
    and g :: "'\<alpha> => '\<beta> => '\<gamma>"
  assumes "profile_bin\<^sub>v_\<^sub>v f g"
### theory "Draft.UML_PropertyProfiles"
### 0.339s elapsed time, 0.704s cpu time, 0.056s GC time
Loading theory "Draft.UML_Boolean" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
Loading theory "Draft.UML_Integer" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
Loading theory "Draft.UML_Pair" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.563s elapsed time, 1.237s cpu time, 0.109s GC time
Loading theory "Draft.UML_Real" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>int\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>int\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Pair('\<alpha>,'\<beta>))
    => ('\<AA> state * '\<AA> state => Pair('\<alpha>,'\<beta>))
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>real\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>real\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 147 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" Y))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Pair.OclFirst"
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y))))
###       ("_position" X))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" Y))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Pair.OclFirst"
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y)))
###         ("_position" X)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" Y))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Pair.OclFirst"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y))))
###       ("_position" X))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" X))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Pair.OclSecond"
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y))))
###       ("_position" Y))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" X))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Pair.OclSecond"
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y)))
###         ("_position" Y)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" X))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Pair.OclSecond"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Pair.OclPair" ("_position" X) ("_position" Y))))
###       ("_position" Y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (equal, equal) equal
  equal_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == equal_class.equal ::
    Pair('a,'b) => Pair('a,'b) => bool
### Ambiguous input (line 204 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclFirst" ("_position" invalid)))
###   ("_position" invalid))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclFirst" ("_position" invalid))
###     ("_position" invalid)))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Pair.OclFirst"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_position" invalid)))
###   ("_position" invalid))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclFirst" ("_position" null)))
###   ("_position" invalid))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclFirst" ("_position" null))
###     ("_position" invalid)))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Pair.OclFirst"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" null)))
###   ("_position" invalid))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 7 parse trees:
### ("\<^const>UML_Pair.OclSecond"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclSecond"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" null)))
###     ("_position" invalid)))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Pair.OclSecond"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Pair.OclSecond" ("_position" null))
###       ("_position" invalid))))
### ("\<^const>UML_Pair.OclSecond"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Pair.OclSecond" ("_position" null))
###       ("_position" invalid))))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclSecond" ("_position" null)))
###   ("\<^const>UML_Pair.OclSecond" ("_position" invalid)))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclSecond" ("_position" null))
###     ("\<^const>UML_Pair.OclSecond" ("_position" invalid))))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Pair.OclSecond"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" null)))
###   ("\<^const>UML_Pair.OclSecond" ("_position" invalid)))
### ("\<^const>UML_Pair.OclSecond"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Pair.OclSecond" ("_position" null)))
###     ("_position" invalid)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclPair" ("_position" invalid) ("_position" true)))
###   ("_position" invalid))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclPair" ("_position" invalid) ("_position" true))
###     ("_position" invalid)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Type unification failed: Variable ?'a::{} not of sort equal
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:  ?'a => ?'a => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable ?'a::{} not of sort equal
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### sort mismatch
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Ambiguous input (line 209 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclFirst"
###       ("\<^const>UML_Pair.OclPair" ("_position" null) ("_position" true))))
###   ("_position" null))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclFirst"
###       ("\<^const>UML_Pair.OclPair" ("_position" null) ("_position" true)))
###     ("_position" null)))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Pair.OclFirst"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Pair.OclPair" ("_position" null) ("_position" true))))
###   ("_position" null))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Featherweight_OCL/collection_types/UML_Pair.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Pair.OclFirst"
###       ("\<^const>UML_Pair.OclPair" ("_position" null)
###         ("\<^const>UML_Pair.OclPair" ("_position" true)
###           ("_position" invalid)))))
###   ("_position" invalid))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Pair.OclFirst"
###       ("\<^const>UML_Pair.OclPair" ("_position" null)
###         ("\<^const>UML_Pair.OclPair" ("_position" true)
###           ("_position" invalid))))
###     ("_position" invalid)))
### ("\<^const>UML_Logic.StrongEq"
###   ("\<^const>UML_Pair.OclFirst"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Pair.OclPair" ("_position" null)
###         ("\<^const>UML_Pair.OclPair" ("_position" true)
###           ("_position" invalid)))))
###   ("_position" invalid))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Pair"
### 0.807s elapsed time, 3.174s cpu time, 0.157s GC time
Loading theory "Draft.UML_String" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>char list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>char list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 140 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringa"))
###   ("\<^const>UML_String.OclStringb"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_String.OclStringa")
###     ("\<^const>UML_String.OclStringb")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringb"))
###   ("\<^const>UML_String.OclStringa"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_String.OclStringb")
###     ("\<^const>UML_String.OclStringa")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringb"))
###   ("\<^const>UML_String.OclStringb"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_String.OclStringb")
###     ("\<^const>UML_String.OclStringb")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Boolean"
### 1.673s elapsed time, 6.577s cpu time, 0.258s GC time
Loading theory "Draft.UML_Void" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
instantiation
  Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: UML_Types.bot
  bot_Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: null
  null_Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
    => ('\<AA> state * '\<AA> state => Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Wellsortedness error:
### Type Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e not of sort {equal,null}
### No type arity Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: equal
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Void"
### 0.150s elapsed time, 0.587s cpu time, 0.014s GC time
### Ambiguous input (line 261 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt1"))
###   ("\<^const>UML_Integer.OclInt2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Integer.OclInt1")
###     ("\<^const>UML_Integer.OclInt2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt2"))
###   ("\<^const>UML_Integer.OclInt1"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Integer.OclInt2")
###     ("\<^const>UML_Integer.OclInt1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 263 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt2"))
###   ("\<^const>UML_Integer.OclInt2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_Integer.OclInt2")
###     ("\<^const>UML_Integer.OclInt2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal1"))
###   ("\<^const>UML_Real.OclReal2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Real.OclReal1")
###     ("\<^const>UML_Real.OclReal2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_String"
### 2.710s elapsed time, 9.033s cpu time, 0.235s GC time
### Ambiguous input (line 261 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal2"))
###   ("\<^const>UML_Real.OclReal1"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Real.OclReal2")
###     ("\<^const>UML_Real.OclReal1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal2"))
###   ("\<^const>UML_Real.OclReal2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_Real.OclReal2")
###     ("\<^const>UML_Real.OclReal2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Integer"
### 5.613s elapsed time, 16.410s cpu time, 0.463s GC time
Loading theory "Draft.UML_Sequence" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Sequence('\<alpha>))
    => ('\<AA> state * '\<AA> state => Sequence('\<alpha>))
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 474 of "$AFP/Featherweight_OCL/collection_types/UML_Sequence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_OclIterateSeq"
###       ("\<^const>UML_Sequence.OclIncluding" ("_position" S) ("_position" a))
###       ("_position" b) ("_position" x) ("_position" A)
###       ("_applC" ("_position" P) ("_cargs" ("_position" b) ("_position" x))))
###     ("_OclIterateSeq" ("_position" S) ("_position" b) ("_position" x)
###       ("_applC" ("_position" P) ("_cargs" ("_position" a) ("_position" A)))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" b) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("_OclIterateSeq"
###     ("\<^const>HOL.eq"
###       ("_OclIterateSeq"
###         ("\<^const>UML_Sequence.OclIncluding" ("_position" S)
###           ("_position" a))
###         ("_position" b) ("_position" x) ("_position" A)
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" b) ("_position" x))))
###       ("_position" S))
###     ("_position" b) ("_position" x)
###     ("_applC" ("_position" P) ("_cargs" ("_position" a) ("_position" A)))
###     ("_applC" ("_position" P) ("_cargs" ("_position" b) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (equal) equal
  equal_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == equal_class.equal ::
    Sequence('a) => Sequence('a) => bool
### Ambiguous input (line 560 of "$AFP/Featherweight_OCL/collection_types/UML_Sequence.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Sequence.OclPrepend"
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinsequence"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Sequence.OclPrepend"
###         ("\<^const>UML_Sequence.mtSequence")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Integer.OclInt1")))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("_OclFinsequence"
###       ("_args" ("\<^const>UML_Integer.OclInt1")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Sequence.OclPrepend"
###       ("\<^const>UML_Sequence.OclPrepend"
###         ("\<^const>UML_Sequence.mtSequence")
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Sequence.OclPrepend"
###     ("\<^const>UML_Sequence.OclPrepend"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinsequence"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Sequence.mtSequence"))
###       ("\<^const>UML_Integer.OclInt2"))
###     ("\<^const>UML_Integer.OclInt1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'm::{} not of sort type
### 
KO: 'nbe' failed to normalize
### Ambiguous input (line 560 of "$AFP/Featherweight_OCL/collection_types/UML_Sequence.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Sequence.OclPrepend"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinsequence"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Sequence.OclPrepend"
###           ("\<^const>UML_Sequence.mtSequence")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinsequence"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Sequence.OclPrepend"
###         ("\<^const>UML_Sequence.OclPrepend"
###           ("\<^const>UML_Sequence.mtSequence")
###           ("\<^const>UML_Integer.OclInt2"))
###         ("\<^const>UML_Integer.OclInt1")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Sequence.OclPrepend"
###       ("\<^const>UML_Sequence.OclPrepend"
###         ("\<^const>UML_Logic.StrongEq"
###           ("_OclFinsequence"
###             ("_args" ("\<^const>UML_Integer.OclInt1")
###               ("\<^const>UML_Integer.OclInt2")))
###           ("\<^const>UML_Sequence.mtSequence"))
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
OK: 'simp' finished the normalization
### theory "Draft.UML_Real"
### 6.640s elapsed time, 18.471s cpu time, 0.556s GC time
Loading theory "Draft.UML_Bag" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
Loading theory "Draft.UML_Set" (required by "Draft.UML_LibraryMoreTemplates" via "Draft.UML_Library")
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ak::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>\<langle>\<langle>'b\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom> list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>\<langle>\<langle>'b\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom> list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'aw::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Sequence"
### 1.665s elapsed time, 3.991s cpu time, 0.164s GC time
### Ambiguous input (line 134 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Bag.ApproxEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###         ("_position" \<tau>))
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###           ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("_position" \<tau>))
###     ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Bag.ApproxEq"
###     ("\<^const>UML_Bag.ApproxEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Bag.ApproxEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V))))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Bag.ApproxEq"
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V)))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Bag.ApproxEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Bag.ApproxEq"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Bag.ApproxEq"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Bag.ApproxEq" ("_position" V)
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###         ("_position" \<tau>))
###       ("_position" V))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###         ("_position" \<tau>))
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq" ("_position" V)
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("_position" \<tau>))
###     ("\<^const>UML_Logic.StrongEq" ("_position" V)
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V))))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V)))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq" ("_position" V)
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###         ("_position" \<tau>))
###       ("_position" V))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Bag('\<alpha>))
    => ('\<AA> state * '\<AA> state => Bag('\<alpha>))
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Set('\<alpha>))
    => ('\<AA> state * '\<AA> state => Set('\<alpha>))
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 741 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclSize" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclSize" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 698 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Bag.OclSize" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Bag.OclSize" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclIsEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclNotEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclNotEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 732 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Bag.OclIsEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Bag.OclIsEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 798 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclNotEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclNotEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 750 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Bag.OclNotEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Bag.OclNotEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 818 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclANY" ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclANY" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 755 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.OclNotEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Bag.OclNotEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("_applC" ("_position" Rep_Bag_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 776 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.OclNotEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("_applC" ("_position" Rep_Set_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Bag.OclNotEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("_applC" ("_position" Rep_Set_base)
###             ("_cargs" ("_position" X) ("_position" \<tau>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 789 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Bag.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Bag.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Bag.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Bag.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Bag.OclANY" ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Bag.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Bag.OclANY" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1003 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_OclForallSet"
###           ("_lambda" ("_position" X)
###             ("_applC" ("_position" S) ("_position" X)))
###           x ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_lambda" ("_position" X)
###           ("_OclForallSet" ("_applC" ("_position" S) ("_position" X)) x
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 975 of "$AFP/Featherweight_OCL/collection_types/UML_Bag.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_OclForallBag"
###           ("_lambda" ("_position" X)
###             ("_applC" ("_position" S) ("_position" X)))
###           x ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_lambda" ("_position" X)
###           ("_OclForallBag" ("_applC" ("_position" S) ("_position" X)) x
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (equal) equal
  equal_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == equal_class.equal ::
    Bag('a) => Bag('a) => bool
### Ambiguous input (line 1124 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1125 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x)))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###       ("_position" X))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###       ("_position" x))
###     ("_position" X)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1250 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclExcludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclExcludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclExcludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclExcludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1267 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" x)))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" x))
###       ("_position" X))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Set.OclExcluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###       ("_position" x))
###     ("_position" X)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1406 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclExcluding"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y)))
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclExcluding"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y))
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" y))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 1686 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncludes"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y)))
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclIncludes"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y))
###       ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Bag"
### 1.848s elapsed time, 4.874s cpu time, 1.376s GC time
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 1791 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" S)
###       ("_constrain" ("_position" x)
###         ("_tappl" ("_position_sort" '\<AA>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###           ("_type_name" val))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" S))
###     ("_constrain" ("_position" x)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" val)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1792 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" S))
###       ("_constrain" ("_position" a)
###         ("_tappl" ("_position_sort" '\<AA>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###           ("_type_name" val))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes"
###       ("\<^const>UML_Set.OclIncluding" ("_position" S)
###         ("_constrain" ("_position" a)
###           ("_tappl" ("_position_sort" '\<AA>)
###             ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###             ("_type_name" val))))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncluding" ("_position" S)
###         ("_constrain" ("_position" a)
###           ("_tappl" ("_position_sort" '\<AA>)
###             ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###             ("_type_name" val)))))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2884 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("_position" OclForall)
###         ("_cargs" ("_position" X) ("_position" P))))
###     ("\<^const>UML_Logic.OclValid"
###       ("_Ball" ("_position" x)
###         ("\<^const>UML_Types.drop"
###           ("\<^const>UML_Types.drop"
###             ("_applC" ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###               ("_applC" ("_position" X) ("_position" \<tau>)))))
###         ("_position" \<tau>))
###       ("_applC" ("_position" P)
###         ("_lambda" ("_position" \<tau>) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("_position" OclForall)
###         ("_cargs" ("_position" X) ("_position" P))))
###     ("_Ball" ("_position" x)
###       ("\<^const>UML_Types.drop"
###         ("\<^const>UML_Types.drop"
###           ("_applC" ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###             ("_applC" ("_position" X) ("_position" \<tau>)))))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_applC" ("_position" P)
###           ("_lambda" ("_position" \<tau>) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3105 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_applC" ("_position" P) ("_position" y))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_position" y))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_applC" ("_position" P) ("_position" y))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_applC" ("_position" P) ("_position" y)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_position" y))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_applC" ("_position" P) ("_position" y)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3128 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 6 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x)))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x)))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x))
###                 ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x))
###                 ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Set.OclIncluding"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_position" s))
###                 ("_position" x))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Set.OclIncluding"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_position" s))
###                 ("_position" x))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3140 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" a)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" S)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const) ("_position" X)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const)
###           ("\<^const>UML_Set.OclIncluding"
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" X)
###               ("_position" S))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" a)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" S)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const) ("_position" X)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const)
###           ("\<^const>UML_Logic.StrictRefEq" ("_position" X)
###             ("\<^const>UML_Set.OclIncluding" ("_position" S)
###               ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (equal) equal
  equal_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == equal_class.equal ::
    Set('a) => Set('a) => bool
### Ambiguous input (line 3160 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Set.OclIncluding"
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinset"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Integer.OclInt1")))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("_OclFinset"
###       ("_args" ("\<^const>UML_Integer.OclInt1")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Set.OclIncluding"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Set.mtSet"))
###       ("\<^const>UML_Integer.OclInt2"))
###     ("\<^const>UML_Integer.OclInt1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'm::{} not of sort type
### 
KO: 'nbe' failed to normalize
### Ambiguous input (line 3160 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinset"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###           ("\<^const>UML_Integer.OclInt2"))
###         ("\<^const>UML_Integer.OclInt1")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Logic.StrongEq"
###           ("_OclFinset"
###             ("_args" ("\<^const>UML_Integer.OclInt1")
###               ("\<^const>UML_Integer.OclInt2")))
###           ("\<^const>UML_Set.mtSet"))
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ak::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ak::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Set"
### 3.418s elapsed time, 6.508s cpu time, 1.507s GC time
Loading theory "Draft.UML_Library" (required by "Draft.UML_LibraryMoreTemplates")
### Ambiguous input (line 101 of "$AFP/Featherweight_OCL/UML_Library.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Library.OclAsInteger\<^sub>R\<^sub>e\<^sub>a\<^sub>l"
###       ("\<^const>UML_Library.OclAsReal\<^sub>I\<^sub>n\<^sub>t"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Library.OclAsInteger\<^sub>R\<^sub>e\<^sub>a\<^sub>l"
###         ("\<^const>UML_Library.OclAsReal\<^sub>I\<^sub>n\<^sub>t"
###           ("_position" X))))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Library.OclAsInteger\<^sub>R\<^sub>e\<^sub>a\<^sub>l"
###         ("\<^const>UML_Library.OclAsReal\<^sub>I\<^sub>n\<^sub>t"
###           ("_position" X)))
###       ("_position" X))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Library.OclAsInteger\<^sub>R\<^sub>e\<^sub>a\<^sub>l"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Library.OclAsReal\<^sub>I\<^sub>n\<^sub>t"
###           ("_position" X))))
###     ("_position" X)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q; cp ?R |] ==> cp (%X. if ?P X then ?Q X else ?R X endif)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1; cp ?R1 |]
### ==> cp (%X. if ?P1 X then ?Q1 X else ?R1 X endif) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->size\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->size\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->isEmpty\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->notEmpty\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->any\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->any\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |]
### ==> cp (%X. ?P X->including\<^sub>S\<^sub>e\<^sub>q(?Q X))
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |]
### ==> cp (%X. ?P1 X->including\<^sub>S\<^sub>e\<^sub>q(?Q1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q; cp ?R |] ==> cp (%X. if ?P X then ?Q X else ?R X endif)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1; cp ?R1 |]
### ==> cp (%X. if ?P1 X then ?Q1 X else ?R1 X endif) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->size\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->size\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->isEmpty\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->notEmpty\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. ?P X->any\<^sub>S\<^sub>e\<^sub>t())
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. ?P1 X->any\<^sub>S\<^sub>e\<^sub>t()) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |]
### ==> cp (%X. ?P X->including\<^sub>S\<^sub>e\<^sub>q(?Q X))
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |]
### ==> cp (%X. ?P1 X->including\<^sub>S\<^sub>e\<^sub>q(?Q1 X)) == True
### Ambiguous input (line 207 of "$AFP/Featherweight_OCL/UML_Library.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.OclAnd"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###       ("\<^const>UML_Integer.OclInt0") ("\<^const>UML_Integer.OclInt2")))
###   ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###     ("\<^const>UML_Integer.OclInt0") ("\<^const>UML_Integer.OclInt1")))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.OclAnd"
###     ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###       ("\<^const>UML_Integer.OclInt0") ("\<^const>UML_Integer.OclInt2"))
###     ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###       ("\<^const>UML_Integer.OclInt0") ("\<^const>UML_Integer.OclInt1"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 230 of "$AFP/Featherweight_OCL/UML_Library.thy") produces 2 parse trees:
### ("\<^const>HOL.Not"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("_OclForallSet"
###       ("\<^const>UML_Logic.defined"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt2") ("_position" null))))
###       z ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###           ("\<^const>UML_Integer.OclInt0") ("_position" z)))))
### ("\<^const>HOL.Not"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.defined"
###       ("_OclForallSet"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt2") ("_position" null)))
###         z ("\<^const>UML_Integer.OclLess\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r"
###             ("\<^const>UML_Integer.OclInt0") ("_position" z))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ao::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ao::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ao::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'dq::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'fy::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ju::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>Set('b) set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>Set('b) set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'oz::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ei::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ei::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable ?'a::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>?'a list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>?'a list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable ?'a::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable ?'a::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Library"
### 22.541s elapsed time, 29.237s cpu time, 9.280s GC time
Loading theory "Draft.UML_LibraryMoreTemplates"
val templateLemmas =
   [("UML_Library.cp_intro''", "cp (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. \<delta> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. \<upsilon> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. not (?P X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->any\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->size\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.Integer_subtype_of_Real",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      ?\<tau>
       \<Turnstile> ?X->oclAsType\<^sub>I\<^sub>n\<^sub>t(Real)->oclAsType\<^sub>R\<^sub>e\<^sub>a\<^sub>l(Integer) \<triangleq>
                    ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 0))
           ))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |]
      ==> cp (%X. ?P X->including\<^sub>S\<^sub>e\<^sub>q(?Q X))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UML_Library.semantic_test2",
     "(Set{\<two>} \<doteq> null) = false ==>
      ?\<tau>
       \<Turnstile> Set{Set{\<two>},
                        null}->includes\<^sub>S\<^sub>e\<^sub>t(null)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6)),
            template_hole 5),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_hole 6))),
               template_hole 5))
           ))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q; cp ?R |]
      ==> cp (%X. if ?P X then ?Q X else ?R X endif)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.UML_LibraryMoreTemplates"
### 0.448s elapsed time, 0.603s cpu time, 0.028s GC time
val it = (): unit
