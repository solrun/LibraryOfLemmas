   [("UML_Bag.OclANY_valid_args_valid''",
     "\<upsilon> ?X->any\<^sub>B\<^sub>a\<^sub>g() = \<upsilon> ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("UML_Bag.OclExists_invalid", "OclExists invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.OclExists_null", "OclExists null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.OclForall_invalid", "OclForall invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.OclForall_null", "OclForall null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.OclReject_invalid", "OclReject invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), t_empty),
       template_hole 0)),
    ("UML_Bag.OclReject_null", "OclReject null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.OclSelect_invalid", "OclSelect invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), t_empty),
       template_hole 0)),
    ("UML_Bag.OclSelect_null", "OclSelect null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Bag.mtBag_rep_bag",
     "\<lceil>\<lceil>Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (Bag{} ?\<tau>)\<rceil>\<rceil> =
      (%_. 0)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       t_empty)),
    ("UML_Bag.cp_OclANY",
     "?X->any\<^sub>B\<^sub>a\<^sub>g() ?\<tau> =
      %_. ?X ?\<tau>->any\<^sub>B\<^sub>a\<^sub>g() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Bag.equal_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e_code",
     "equal_class.equal ?k ?l =
      (Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e ?k =
       Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.cp_OclSize",
     "?X->size\<^sub>B\<^sub>a\<^sub>g() ?\<tau> =
      %_. ?X ?\<tau>->size\<^sub>B\<^sub>a\<^sub>g() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Bag.cp_OclIsEmpty",
     "?X->isEmpty\<^sub>B\<^sub>a\<^sub>g() ?\<tau> =
      %_. ?X ?\<tau>->isEmpty\<^sub>B\<^sub>a\<^sub>g() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Bag.cp_OclNotEmpty",
     "?X->notEmpty\<^sub>B\<^sub>a\<^sub>g() ?\<tau> =
      %_. ?X ?\<tau>->notEmpty\<^sub>B\<^sub>a\<^sub>g() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Bag.cp_intro''\<^sub>B\<^sub>a\<^sub>g",
     "cp ?P ==> cp (%X. ?P X->any\<^sub>B\<^sub>a\<^sub>g())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.cp_intro''\<^sub>B\<^sub>a\<^sub>g",
     "cp ?P ==> cp (%X. ?P X->size\<^sub>B\<^sub>a\<^sub>g())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.cp_intro''\<^sub>B\<^sub>a\<^sub>g",
     "cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>B\<^sub>a\<^sub>g())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.cp_intro''\<^sub>B\<^sub>a\<^sub>g",
     "cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>B\<^sub>a\<^sub>g())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.OclIterate_invalid_args",
     "OclIterate ?S invalid ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         t_empty),
       template_hole 0)),
    ("UML_Bag.OclIterate_invalid", "OclIterate invalid ?A ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         t_empty),
       template_hole 0)),
    ("UML_Bag.OclIterate_null", "OclIterate null ?A ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         t_empty),
       template_hole 0)),
    ("UML_Bag.OclExcludes_valid_args_valid''",
     "\<upsilon> ?X->excludes\<^sub>B\<^sub>a\<^sub>g(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.OclIncludes_valid_args_valid''",
     "\<upsilon> ?X->includes\<^sub>B\<^sub>a\<^sub>g(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.OclExcluding_valid_args_valid''",
     "\<upsilon> ?X->excluding\<^sub>B\<^sub>a\<^sub>g(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.OclIncluding_valid_args_valid''",
     "\<upsilon> ?X->including\<^sub>B\<^sub>a\<^sub>g(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.OclANY_valid_args_valid",
     "(?\<tau> \<Turnstile> \<upsilon> ?X->any\<^sub>B\<^sub>a\<^sub>g()) =
      (?\<tau> \<Turnstile> \<upsilon> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Bag.cp_OclIncludes1",
     "?X->includes\<^sub>B\<^sub>a\<^sub>g(?x) ?\<tau> =
      ?X->includes\<^sub>B\<^sub>a\<^sub>g(%_. ?x ?\<tau>) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0))),
    ("UML_Bag.cp_OclExists1", "cp ?S ==> cp (%X. OclExists (?S X) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.cp_OclForall1", "cp ?S ==> cp (%X. OclForall (?S X) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Bag.const_OclIncluding",
     "[| const ?x; const ?S |]
      ==> const ?S->including\<^sub>B\<^sub>a\<^sub>g(?x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("UML_Bag.Bag_inv_lemma",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      \<lceil>\<lceil>Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (?X ?\<tau>)\<rceil>\<rceil>
       \<bottom> =
      0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_var 0, template_var 1)))),
           template_hole 1),
         template_hole 0))),
    ("UML_Bag.cp_OclReject",
     "OclReject ?X ?P ?\<tau> = OclReject (%_. ?X ?\<tau>) ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Bag.cp_OclSelect",
     "OclSelect ?X ?P ?\<tau> = OclSelect (%_. ?X ?\<tau>) ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Bag.OclExcludes_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->excludes\<^sub>B\<^sub>a\<^sub>g(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Bag.OclIncludes_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->includes\<^sub>B\<^sub>a\<^sub>g(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Bag.OclExcluding_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->excluding\<^sub>B\<^sub>a\<^sub>g(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Bag.OclIncluding_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->including\<^sub>B\<^sub>a\<^sub>g(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Bag.OclIterate_infinite",
     "?\<tau>
       \<Turnstile> not (\<delta> ?S->size\<^sub>B\<^sub>a\<^sub>g()) ==>
      OclIterate ?S ?A ?F ?\<tau> = invalid ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app (template_hole 0, template_var 3)))),
    ("UML_Bag.cp_OclExists",
     "OclExists ?S ?P ?\<tau> =
      %_. ?S ?\<tau>->exists\<^sub>B\<^sub>a\<^sub>g(x|?P (%_. x ?\<tau>))
       ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Bag.cp_OclForall",
     "OclForall ?S ?P ?\<tau> =
      %_. ?S ?\<tau>->forAll\<^sub>B\<^sub>a\<^sub>g(x|?P (%_. x ?\<tau>))
       ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Bag.abs_rep_simp'",
     "?\<tau> \<Turnstile> \<delta> ?S ==>
      Abs_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       \<lfloor>\<lfloor>\<lceil>\<lceil>Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
    (?S ?\<tau>)\<rceil>\<rceil>\<rfloor>\<rfloor> =
      ?S ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 1))))))),
         template_app (template_var 0, template_var 1)))),
    ("UML_Bag.OclSize_infinite",
     "?\<tau>
       \<Turnstile> not (\<delta> ?S->size\<^sub>B\<^sub>a\<^sub>g()) ==>
      ?\<tau> \<Turnstile> not (\<delta> ?S) |
      infinite (Rep_Bag_base ?S ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("UML_Bag.OclNotEmpty_has_elt'",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> ?X->notEmpty\<^sub>B\<^sub>a\<^sub>g() |]
      ==> EX e. e : Rep_Set_base ?X ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UML_Bag.OclNotEmpty_has_elt",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> ?X->notEmpty\<^sub>B\<^sub>a\<^sub>g() |]
      ==> EX e. e : Rep_Bag_base ?X ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UML_Bag.OclIsEmpty_infinite",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         infinite (Rep_Bag_base ?X ?\<tau>) |]
      ==> ?\<tau> |\<noteq> \<delta> ?X->isEmpty\<^sub>B\<^sub>a\<^sub>g()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("UML_Bag.OclNotEmpty_infinite",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         infinite (Rep_Bag_base ?X ?\<tau>) |]
      ==> ?\<tau>
           |\<noteq> \<delta> ?X->notEmpty\<^sub>B\<^sub>a\<^sub>g()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("UML_Bag.cp_OclIterate",
     "OclIterate ?X ?A ?P ?\<tau> =
      OclIterate (%_. ?X ?\<tau>) ?A ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, t_empty), template_var 2),
           t_empty),
         template_var 0))),
    ("UML_Bag.Bag_inv_lemma'",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         1 <= \<lceil>\<lceil>Rep_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                               (?X ?\<tau>)\<rceil>\<rceil>
               ?e |]
      ==> ?\<tau> \<Turnstile> \<upsilon> (%_. ?e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation
         (less_equals, template_hole 4,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app (template_var 1, template_var 2)))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app (template_hole 0, t_empty))
           )))]
