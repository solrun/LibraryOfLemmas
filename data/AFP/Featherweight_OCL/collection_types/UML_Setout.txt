Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.485s cpu time, 0.042s GC time
Loading theory "Draft.UML_Types" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set" via "Draft.UML_Void" via "Draft.UML_PropertyProfiles" via "Draft.UML_Logic")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.875s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.287s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs")
### Missing patterns in function definition:
### \<lceil>\<bottom>\<rceil> = undefined
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### drop \<lfloor>?y\<rfloor> == ?y
class UML_Types.bot = type +
  fixes bot :: "'a"
  assumes "nonEmpty": "EX x. x ~= UML_Types.bot_class.bot"
class null = UML_Types.bot +
  fixes null :: "'a"
  assumes "null_is_valid": "null ~= UML_Types.bot_class.bot"
instantiation
  option :: (type) UML_Types.bot
  bot_option == UML_Types.bot_class.bot ::
    \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  option :: (UML_Types.bot) null
  null_option == null :: \<langle>'a\<rangle>\<^sub>\<bottom>
instantiation
  fun :: (type, UML_Types.bot) UML_Types.bot
  bot_fun == UML_Types.bot_class.bot :: 'a => 'b
instantiation
  fun :: (type, null) null
  null_fun == null :: 'a => 'b
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class object = type +
  fixes oid_of :: "'a => nat"
instantiation
  option :: (object) object
  oid_of_option == oid_of :: \<langle>'a\<rangle>\<^sub>\<bottom> => nat
### Ignoring sort constraints in type variables(s): "'\<alpha>"
### in type abbreviation "val"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.862s elapsed time, 3.271s cpu time, 0.672s GC time
"'\<AA>"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) UML_Types.bot
  bot_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
consts
  flat :: "'a list stream => 'a stream"
instantiation
  Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null, null) null
  null_Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    ('a, 'b) Pair\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Bag\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.903s elapsed time, 3.324s cpu time, 0.601s GC time
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) UML_Types.bot
  bot_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (null) null
  null_Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    'a Sequence\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "size <*mlex*> {}"
val disp_msg = fn: string -> string -> string -> string
val lemma = fn:
   string ->
     (string ->
        'a option ->
          ('b -> 'c -> 'c) ->
            binding * 'd list ->
              'e list ->
                'f list ->
                  ('g, 'h) Element.stmt -> bool -> 'i -> Proof.state)
       ->
       ('i -> 'h) -> (('i -> Proof.context) -> 'j -> 'k) -> 'j -> 'k option
val outer_syntax_command = fn:
   Outer_Syntax.command_keyword ->
     (('a -> 'b) -> Toplevel.transition -> Toplevel.transition) ->
       ((local_theory -> Proof.context) -> 'a -> 'b) -> unit
### theory "Draft.UML_Types"
### 1.202s elapsed time, 4.342s cpu time, 0.731s GC time
Loading theory "Draft.UML_Logic" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set" via "Draft.UML_Void" via "Draft.UML_PropertyProfiles")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 702 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.All_binder" ("_position" \<tau>) ("_position" \<tau>))
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" \<tau>)
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 754 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" null))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.valid" ("_position" A)))
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" null)))
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" true)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" true))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 849 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" false)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" false))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot") ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 853 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" A) ("_position" invalid)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###       ("_position" invalid))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("\<^const>UML_Logic.OclNot")
###         ("\<^const>UML_Logic.valid" ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 860 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" X) ("_position" \<tau>))
###         ("_position" null)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>HOL.eq" ("\<^const>UML_Logic.defined" ("_position" X))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>)) ("_position" bot))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" X) ("_position" \<tau>))
###           ("_position" null))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclImplies" ("_position" A) ("_position" B)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>UML_Logic.OclImplies"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" A))
###         ("_position" B))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 989 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" y))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" y) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_applC" ("_position" P) ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
?x = ?y ==> (~ ?x) = (~ ?y)
### theory "HOL-Library.Tree"
### 1.831s elapsed time, 5.902s cpu time, 0.871s GC time
Loading theory "Draft.Templates" (required by "Draft.UML_SetMoreTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%_. ?c)
### Ignoring duplicate rewrite rule:
### cp (%_. ?c1) == True
### Ignoring duplicate safe introduction (intro!)
### cp (%X. X)
### Ignoring duplicate rewrite rule:
### cp (%X. X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<delta> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<delta> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. \<upsilon> ?P X)
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. \<upsilon> ?P1 X) == True
### Ignoring duplicate safe introduction (intro!)
### cp ?P ==> cp (%X. not (?P X))
### Ignoring duplicate rewrite rule:
### cp ?P1 ==> cp (%X. not (?P1 X)) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X and ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X or ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X implies ?Q1 X) == True
### Ignoring duplicate safe introduction (intro!)
### [| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)
### Ignoring duplicate rewrite rule:
### [| cp ?P1; cp ?Q1 |] ==> cp (%X. ?P1 X \<triangleq> ?Q1 X) == True
### Ambiguous input (line 1109 of "$AFP/Featherweight_OCL/UML_Logic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2)))
###       ("_position" B\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq"
###         ("\<^const>UML_Logic.OclIf" ("_position" P) ("_position" B\<^sub>1)
###           ("_position" B\<^sub>2))
###         ("_position" B\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.141s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UML_SetMoreTemplates")
### theory "Draft.UML_Logic"
### 0.632s elapsed time, 1.370s cpu time, 0.158s GC time
Loading theory "Draft.UML_PropertyProfiles" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set" via "Draft.UML_Void")
locale profile_mono_scheme_defined
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_scheme_defined f g"
locale profile_mono_schemeV
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => '\<AA> state * '\<AA> state => '\<beta>"
    and g :: "'\<alpha> => '\<beta>"
  assumes "profile_mono_schemeV f g"
locale profile_mono\<^sub>d
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono\<^sub>d f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_mono0
  fixes f :: "('a state * 'a state => 'b) => 'a state * 'a state => 'c"
    and g :: "'b => 'c"
  assumes "profile_mono0 f g"
locale profile_single
  fixes
    d :: "('\<AA> state * '\<AA> state => 'a)
          => '\<AA> state * '\<AA> state
             => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes "profile_single d"
locale profile_bin_scheme
  fixes
    d\<^sub>x ::
      "('\<AA> state * '\<AA> state => 'a)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme d\<^sub>x d\<^sub>y f g"
### Ambiguous input (line 241 of "$AFP/Featherweight_OCL/UML_PropertyProfiles.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.StrongEq"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y)))))
###           ("\<^const>UML_Logic.OclAnd"
###             ("\<^const>UML_Logic.defined" ("_position" X))
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.Not" ("_position" \<tau>))
###           ("_applC" ("_position" d\<^sub>y) ("_position" Y))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp) ("_applC" ("_position" f) ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f)
###           ("_cargs" ("_position" X) ("_position" invalid)))
###         ("_position" invalid)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq"
###             ("\<^const>UML_Logic.defined"
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" X) ("_position" Y))))
###             ("\<^const>UML_Logic.OclAnd"
###               ("\<^const>UML_Logic.defined" ("_position" X))
###               ("_applC" ("_position" d\<^sub>y) ("_position" Y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale profile_bin_scheme_defined
  fixes
    d\<^sub>y ::
      "('\<AA> state * '\<AA> state => 'b)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
    and
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin_scheme_defined d\<^sub>y f g"
locale profile_bin\<^sub>d_\<^sub>d
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>d f g"
locale profile_bin\<^sub>d_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => 'a)
          => ('\<AA> state * '\<AA> state => 'b)
             => '\<AA> state * '\<AA> state => 'c"
    and g :: "'a => 'b => 'c"
  assumes "profile_bin\<^sub>d_\<^sub>v f g"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale
  profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<alpha>)
             => '\<AA> state * '\<AA> state
                => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>"
  assumes
    "profile_bin\<^sub>S\<^sub>t\<^sub>r\<^sub>o\<^sub>n\<^sub>g\<^sub>E\<^sub>q_\<^sub>v_\<^sub>v
      f"
locale profile_bin\<^sub>v_\<^sub>v
  fixes
    f :: "('\<AA> state * '\<AA> state => '\<alpha>)
          => ('\<AA> state * '\<AA> state => '\<beta>)
             => '\<AA> state * '\<AA> state => '\<gamma>"
    and g :: "'\<alpha> => '\<beta> => '\<gamma>"
  assumes "profile_bin\<^sub>v_\<^sub>v f g"
### theory "Draft.UML_PropertyProfiles"
### 0.571s elapsed time, 1.420s cpu time, 0.715s GC time
Loading theory "Draft.UML_Boolean" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set")
Loading theory "Draft.UML_Integer" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set")
Loading theory "Draft.UML_Real" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>real\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>real\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>int\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>int\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.879s elapsed time, 2.528s cpu time, 0.810s GC time
Loading theory "Draft.UML_String" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set")
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state
     => \<langle>\<langle>char list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
    => ('\<AA> state * '\<AA> state
        => \<langle>\<langle>char list\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 140 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringa"))
###   ("\<^const>UML_String.OclStringb"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_String.OclStringa")
###     ("\<^const>UML_String.OclStringb")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringb"))
###   ("\<^const>UML_String.OclStringa"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_String.OclStringb")
###     ("\<^const>UML_String.OclStringa")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Featherweight_OCL/basic_types/UML_String.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_String.OclStringb"))
###   ("\<^const>UML_String.OclStringb"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_String.OclStringb")
###     ("\<^const>UML_String.OclStringb")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Boolean"
### 1.855s elapsed time, 7.291s cpu time, 0.404s GC time
Loading theory "Draft.UML_Void" (required by "Draft.UML_SetMoreTemplates" via "Draft.UML_Set")
instantiation
  Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: UML_Types.bot
  bot_Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e == UML_Types.bot_class.bot ::
    Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e
instantiation
  Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: null
  null_Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e == null ::
    Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
    => ('\<AA> state * '\<AA> state => Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Wellsortedness error:
### Type Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e not of sort {equal,null}
### No type arity Void\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: equal
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Void"
### 0.177s elapsed time, 0.708s cpu time, 0.029s GC time
### Ambiguous input (line 261 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt1"))
###   ("\<^const>UML_Integer.OclInt2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Integer.OclInt1")
###     ("\<^const>UML_Integer.OclInt2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt2"))
###   ("\<^const>UML_Integer.OclInt1"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Integer.OclInt2")
###     ("\<^const>UML_Integer.OclInt1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_String"
### 3.199s elapsed time, 11.268s cpu time, 0.583s GC time
### Ambiguous input (line 263 of "$AFP/Featherweight_OCL/basic_types/UML_Integer.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Integer.OclInt2"))
###   ("\<^const>UML_Integer.OclInt2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_Integer.OclInt2")
###     ("\<^const>UML_Integer.OclInt2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal1"))
###   ("\<^const>UML_Real.OclReal2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Real.OclReal1")
###     ("\<^const>UML_Real.OclReal2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 261 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("notequal"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal2"))
###   ("\<^const>UML_Real.OclReal1"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("notequal" ("\<^const>UML_Real.OclReal2")
###     ("\<^const>UML_Real.OclReal1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 262 of "$AFP/Featherweight_OCL/basic_types/UML_Real.thy") produces 2 parse trees:
### ("\<^const>UML_Logic.StrictRefEq"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Real.OclReal2"))
###   ("\<^const>UML_Real.OclReal2"))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrictRefEq" ("\<^const>UML_Real.OclReal2")
###     ("\<^const>UML_Real.OclReal2")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.UML_Integer"
### 5.924s elapsed time, 17.203s cpu time, 0.754s GC time
### theory "Draft.UML_Real"
### 6.877s elapsed time, 18.202s cpu time, 0.796s GC time
Loading theory "Draft.UML_Set" (required by "Draft.UML_SetMoreTemplates")
### Ambiguous input (line 126 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###         ("_position" \<tau>))
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq" ("_position" V)
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("_position" \<tau>))
###     ("\<^const>UML_Logic.StrongEq" ("_position" V)
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.disj"
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###           ("_position" \<tau>))
###         ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V))))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("\<^const>UML_Logic.OclValid"
###           ("\<^const>HOL.disj"
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)
###             ("_position" \<tau>))
###           ("_position" V)))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.StrongEq" ("_position" V)
###         ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V))
###       ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>HOL.disj"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.StrongEq" ("_position" V)
###           ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" V)))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid"
###       ("\<^const>HOL.disj"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.StrongEq" ("_position" V)
###             ("_position" Void\<^sub>n\<^sub>u\<^sub>l\<^sub>l)))
###         ("_position" \<tau>))
###       ("_position" V))
###     ("_position" Void\<^sub>e\<^sub>m\<^sub>p\<^sub>t\<^sub>y)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
overloading
  StrictRefEq \<equiv> StrictRefEq ::
    ('\<AA> state * '\<AA> state => Set('\<alpha>))
    => ('\<AA> state * '\<AA> state => Set('\<alpha>))
       => '\<AA> state * '\<AA> state
          => \<langle>\<langle>bool\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
### Ambiguous input (line 741 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclSize" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclSize" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclIsEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclNotEmpty" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" finite)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclNotEmpty" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 798 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclNotEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclNotEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" e)
###         ("\<^const>Set.member" ("_position" e)
###           ("\<^const>UML_Types.drop"
###             ("\<^const>UML_Types.drop"
###               ("_applC"
###                 ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###                 ("_applC" ("_position" X) ("_position" \<tau>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 818 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid"
###         ("\<^const>HOL.Not" ("_position" \<tau>))
###         ("\<^const>UML_Logic.defined"
###           ("\<^const>UML_Set.OclANY" ("_position" X)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Set.OclIsEmpty" ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclANY" ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Logic.defined" ("_position" X))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Set.OclIsEmpty"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("_position" X))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.defined"
###             ("\<^const>UML_Set.OclANY" ("_position" X))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1003 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_OclForallSet"
###           ("_lambda" ("_position" X)
###             ("_applC" ("_position" S) ("_position" X)))
###           x ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" cp)
###       ("_lambda"
###         ("_pttrns" ("_position" X)
###           ("_pttrns" ("_position" St) ("_position" x)))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_lambda" ("_position" \<tau>) ("_position" x))
###             ("_cargs" ("_position" X) ("_position" St)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" S)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" cp)
###         ("_lambda" ("_position" X)
###           ("_OclForallSet" ("_applC" ("_position" S) ("_position" X)) x
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" x) ("_position" X)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1124 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1125 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x)))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###       ("_position" X))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###       ("_position" x))
###     ("_position" X)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1250 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclExcludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclExcludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclExcludes" ("_position" X) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclExcludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1267 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" x)))
###     ("_position" X)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" x))
###       ("_position" X))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Set.OclExcluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" X))
###       ("_position" x))
###     ("_position" X)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1406 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclExcluding"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y)))
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" y))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclExcluding"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y))
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Set.OclExcluding" ("_position" X) ("_position" y))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 1686 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.StrongEq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncludes"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y)))
###     ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("\<^const>UML_Set.OclIncludes"
###         ("\<^const>UML_Set.OclIncluding" ("_position" X) ("_position" x))
###         ("_position" y))
###       ("\<^const>UML_Set.OclIncludes" ("_position" X) ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 1791 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes" ("_position" S)
###       ("_constrain" ("_position" x)
###         ("_tappl" ("_position_sort" '\<AA>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###           ("_type_name" val))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" S))
###     ("_constrain" ("_position" x)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" val)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1792 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>) ("_position" S))
###       ("_constrain" ("_position" a)
###         ("_tappl" ("_position_sort" '\<AA>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###           ("_type_name" val))))
###     ("_position" x)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncludes"
###       ("\<^const>UML_Set.OclIncluding" ("_position" S)
###         ("_constrain" ("_position" a)
###           ("_tappl" ("_position_sort" '\<AA>)
###             ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###             ("_type_name" val))))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Set.OclIncludes"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("\<^const>UML_Set.OclIncluding" ("_position" S)
###         ("_constrain" ("_position" a)
###           ("_tappl" ("_position_sort" '\<AA>)
###             ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###             ("_type_name" val)))))
###     ("_position" x)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2884 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("_position" OclForall)
###         ("_cargs" ("_position" X) ("_position" P))))
###     ("\<^const>UML_Logic.OclValid"
###       ("_Ball" ("_position" x)
###         ("\<^const>UML_Types.drop"
###           ("\<^const>UML_Types.drop"
###             ("_applC" ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###               ("_applC" ("_position" X) ("_position" \<tau>)))))
###         ("_position" \<tau>))
###       ("_applC" ("_position" P)
###         ("_lambda" ("_position" \<tau>) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###       ("_applC" ("_position" OclForall)
###         ("_cargs" ("_position" X) ("_position" P))))
###     ("_Ball" ("_position" x)
###       ("\<^const>UML_Types.drop"
###         ("\<^const>UML_Types.drop"
###           ("_applC" ("_position" Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e)
###             ("_applC" ("_position" X) ("_position" \<tau>)))))
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("_applC" ("_position" P)
###           ("_lambda" ("_position" \<tau>) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3105 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_applC" ("_position" P) ("_position" y))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_position" y))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_applC" ("_position" P) ("_position" y))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set))))
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_applC" ("_position" P) ("_position" y)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" cp) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.valid" ("_position" x))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.valid"
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.valid"
###                 ("_applC" ("_position" P) ("_position" y)))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_position" x)
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_position" y))))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Logic.StrictRefEq"
###                   ("_constrain" ("_applC" ("_position" P) ("_position" x))
###                     ("_tappl" ("_position_sort" '\<AA>)
###                       ("_ofsort" ("_position_sort" '\<alpha>)
###                         ("_class_name" null))
###                       ("_type_name" Set)))
###                   ("_applC" ("_position" P) ("_position" y)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3128 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 6 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x)))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x)))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x))
###                 ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("\<^const>UML_Logic.StrictRefEq"
###                 ("\<^const>UML_Set.OclIncluding" ("_position" s)
###                   ("_position" x))
###                 ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.StrictRefEq"
###             ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###               ("_position" s))
###             ("_position" t)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Set.OclIncluding"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_position" s))
###                 ("_position" x))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts"
###     ("_idtyp" ("_position" s)
###       ("_tappl" ("_position_sort" '\<AA>)
###         ("_ofsort" ("_position_sort" 'a) ("_class_name" null))
###         ("_type_name" Set)))
###     ("_idts" ("_position" t)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" y) ("_position" \<tau>)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###         ("\<^const>UML_Logic.defined" ("_position" t))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###           ("\<^const>UML_Logic.valid" ("_position" y))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" s)
###               ("_position" t))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>UML_Logic.StrictRefEq"
###               ("\<^const>UML_Set.OclIncluding"
###                 ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###                   ("_position" s))
###                 ("_position" x))
###               ("\<^const>UML_Set.OclIncluding" ("_position" t)
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3140 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" a)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" S)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const) ("_position" X)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const)
###           ("\<^const>UML_Set.OclIncluding"
###             ("\<^const>UML_Logic.StrictRefEq" ("_position" X)
###               ("_position" S))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" a)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" const) ("_position" S)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const) ("_position" X)))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" const)
###           ("\<^const>UML_Logic.StrictRefEq" ("_position" X)
###             ("\<^const>UML_Set.OclIncluding" ("_position" S)
###               ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e :: (equal) equal
  equal_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e == equal_class.equal ::
    Set('a) => Set('a) => bool
### Ambiguous input (line 3160 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Set.OclIncluding"
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinset"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Integer.OclInt1")))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Logic.StrongEq"
###     ("_OclFinset"
###       ("_args" ("\<^const>UML_Integer.OclInt1")
###         ("\<^const>UML_Integer.OclInt2")))
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###   ("\<^const>UML_Set.OclIncluding"
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Set.mtSet"))
###       ("\<^const>UML_Integer.OclInt2"))
###     ("\<^const>UML_Integer.OclInt1")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'm::{} not of sort type
### 
KO: 'nbe' failed to normalize
### Ambiguous input (line 3160 of "$AFP/Featherweight_OCL/collection_types/UML_Set.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Logic.StrongEq"
###         ("_OclFinset"
###           ("_args" ("\<^const>UML_Integer.OclInt1")
###             ("\<^const>UML_Integer.OclInt2")))
###         ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Integer.OclInt1"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Logic.StrongEq"
###       ("_OclFinset"
###         ("_args" ("\<^const>UML_Integer.OclInt1")
###           ("\<^const>UML_Integer.OclInt2")))
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Set.OclIncluding" ("\<^const>UML_Set.mtSet")
###           ("\<^const>UML_Integer.OclInt2"))
###         ("\<^const>UML_Integer.OclInt1")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>UML_Logic.OclValid" ("_position" \<tau>)
###     ("\<^const>UML_Set.OclIncluding"
###       ("\<^const>UML_Set.OclIncluding"
###         ("\<^const>UML_Logic.StrongEq"
###           ("_OclFinset"
###             ("_args" ("\<^const>UML_Integer.OclInt1")
###               ("\<^const>UML_Integer.OclInt2")))
###           ("\<^const>UML_Set.mtSet"))
###         ("\<^const>UML_Integer.OclInt2"))
###       ("\<^const>UML_Integer.OclInt1"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ak::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### Type unification failed: Variable 'b::{} not of sort type
### 
### Failed to meet type constraint:
### 
### Term:  equal_class.equal :: ??'a => ??'a => bool
### Type:
###   \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###   => \<langle>\<langle>'b set\<rangle>\<^sub>\<bottom>\<rangle>\<^sub>\<bottom>
###      => bool
### 
### Coercion Inference:
### 
### Local coercion insertion on the operand failed:
### Variable 'b::{} not of sort type
### 
### Now trying to infer coercions globally.
### 
### Coercion inference failed:
### failed to unify invariant arguments
### Variable 'ak::{} not of sort type
### 
KO: 'nbe' failed to normalize
OK: 'simp' finished the normalization
### theory "Draft.UML_Set"
### 3.160s elapsed time, 4.115s cpu time, 1.343s GC time
Loading theory "Draft.UML_SetMoreTemplates"
val templateLemmas =
   [("UML_Set.OclReject_mtSet_exec", "OclReject Set{} ?P = Set{}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("UML_Set.OclSelect_mtSet_exec", "OclSelect Set{} ?P = Set{}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("UML_Set.OclANY_singleton_exec",
     "Set{?a}->any\<^sub>S\<^sub>e\<^sub>t() = ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("UML_Set.OclANY_valid_args_valid''",
     "\<upsilon> ?X->any\<^sub>S\<^sub>e\<^sub>t() = \<upsilon> ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("UML_Set.OclExists_mtSet_exec", "OclExists Set{} ?P = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclExists_invalid", "OclExists invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclExists_null", "OclExists null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclForall_mtSet_exec", "OclForall Set{} ?P = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclForall_invalid", "OclForall invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclForall_null", "OclForall null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclReject_invalid", "OclReject invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), t_empty),
       template_hole 0)),
    ("UML_Set.OclReject_null", "OclReject null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.OclSelect_invalid", "OclSelect invalid ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), t_empty),
       template_hole 0)),
    ("UML_Set.OclSelect_null", "OclSelect null ?P = invalid",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("UML_Set.mtSet_rep_set",
     "\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (Set{} ?\<tau>)\<rceil>\<rceil> =
      {}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("UML_Set.const_StrictRefEq\<^sub>S\<^sub>e\<^sub>t_empty",
     "const ?X ==> const (?X \<doteq> Set{})",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("UML_Set.cp_OclANY",
     "?X->any\<^sub>S\<^sub>e\<^sub>t() ?\<tau> =
      %_. ?X ?\<tau>->any\<^sub>S\<^sub>e\<^sub>t() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Set.OclIncludes_charn0'",
     "Set{}->includes\<^sub>S\<^sub>e\<^sub>t(?x) =
      (if \<upsilon> ?x then false else invalid endif)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("UML_Set.OclExcluding_charn0_exec",
     "Set{}->excluding\<^sub>S\<^sub>e\<^sub>t(?x) =
      (if \<upsilon> ?x then Set{} else invalid endif)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 3),
         template_hole 0))),
    ("UML_Set.OclExcluding_idem",
     "?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)->excluding\<^sub>S\<^sub>e\<^sub>t(?i) =
      ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UML_Set.OclExcluding_charn3",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?x) =
      ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("UML_Set.OclIncluding_idem",
     "?S->including\<^sub>S\<^sub>e\<^sub>t(?i)->including\<^sub>S\<^sub>e\<^sub>t(?i) =
      ?S->including\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UML_Set.equal_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e_code",
     "equal_class.equal ?k ?l =
      (Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e ?k =
       Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.cp_OclSize",
     "?X->size\<^sub>S\<^sub>e\<^sub>t() ?\<tau> =
      %_. ?X ?\<tau>->size\<^sub>S\<^sub>e\<^sub>t() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Set.cp_OclIsEmpty",
     "?X->isEmpty\<^sub>S\<^sub>e\<^sub>t() ?\<tau> =
      %_. ?X ?\<tau>->isEmpty\<^sub>S\<^sub>e\<^sub>t() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Set.cp_OclNotEmpty",
     "?X->notEmpty\<^sub>S\<^sub>e\<^sub>t() ?\<tau> =
      %_. ?X ?\<tau>->notEmpty\<^sub>S\<^sub>e\<^sub>t() ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Set.cp_intro''\<^sub>S\<^sub>e\<^sub>t",
     "cp ?P ==> cp (%X. ?P X->any\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.cp_intro''\<^sub>S\<^sub>e\<^sub>t",
     "cp ?P ==> cp (%X. ?P X->size\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.cp_intro''\<^sub>S\<^sub>e\<^sub>t",
     "cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.cp_intro''\<^sub>S\<^sub>e\<^sub>t",
     "cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.OclIterate_invalid_args",
     "OclIterate ?S invalid ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         t_empty),
       template_hole 0)),
    ("UML_Set.OclIterate_empty", "OclIterate Set{} ?A ?P = ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         t_empty),
       template_var 1)),
    ("UML_Set.OclIterate_invalid", "OclIterate invalid ?A ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         t_empty),
       template_hole 0)),
    ("UML_Set.OclIterate_null", "OclIterate null ?A ?P = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         t_empty),
       template_hole 0)),
    ("UML_Set.OclExcludes_valid_args_valid''",
     "\<upsilon> ?X->excludes\<^sub>S\<^sub>e\<^sub>t(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.OclIncludes_valid_args_valid''",
     "\<upsilon> ?X->includes\<^sub>S\<^sub>e\<^sub>t(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.OclExcluding_valid_args_valid''",
     "\<upsilon> ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.OclIncluding_valid_args_valid''",
     "\<upsilon> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x) =
      (\<delta> ?X and \<upsilon> ?x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.OclANY_valid_args_valid",
     "(?\<tau> \<Turnstile> \<upsilon> ?X->any\<^sub>S\<^sub>e\<^sub>t()) =
      (?\<tau> \<Turnstile> \<upsilon> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Set.OclExcluding_commute",
     "?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)->excluding\<^sub>S\<^sub>e\<^sub>t(?j) =
      ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?j)->excluding\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("UML_Set.OclIncluding_commute",
     "?S->including\<^sub>S\<^sub>e\<^sub>t(?i)->including\<^sub>S\<^sub>e\<^sub>t(?j) =
      ?S->including\<^sub>S\<^sub>e\<^sub>t(?j)->including\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("UML_Set.cp_OclIncludes1",
     "?X->includes\<^sub>S\<^sub>e\<^sub>t(?x) ?\<tau> =
      ?X->includes\<^sub>S\<^sub>e\<^sub>t(%_. ?x ?\<tau>) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0))),
    ("UML_Set.cp_OclExists1", "cp ?S ==> cp (%X. OclExists (?S X) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.cp_OclForall1", "cp ?S ==> cp (%X. OclForall (?S X) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Set.OclIncludes_charn0",
     "?\<tau> \<Turnstile> \<upsilon> ?x ==>
      ?\<tau> \<Turnstile> not Set{}->includes\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("UML_Set.const_OclIncluding",
     "[| const ?x; const ?S |]
      ==> const ?S->including\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("UML_Set.OclExcluding_charn0",
     "?\<tau> \<Turnstile> \<upsilon> ?x ==>
      ?\<tau>
       \<Turnstile> Set{}->excluding\<^sub>S\<^sub>e\<^sub>t(?x) \<triangleq>
                    Set{}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_hole 0))
           ))),
    ("UML_Set.OclExcluding_excludes0",
     "?\<tau> \<Turnstile> ?X->excludes\<^sub>S\<^sub>e\<^sub>t(?x) ==>
      ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x) ?\<tau> = ?X ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("UML_Set.OclExcluding_excludes",
     "?\<tau> \<Turnstile> ?X->excludes\<^sub>S\<^sub>e\<^sub>t(?x) ==>
      ?\<tau>
       \<Turnstile> ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x) \<triangleq>
                    ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1))
           ))),
    ("UML_Set.OclIncluding_includes0",
     "?\<tau> \<Turnstile> ?X->includes\<^sub>S\<^sub>e\<^sub>t(?x) ==>
      ?X->including\<^sub>S\<^sub>e\<^sub>t(?x) ?\<tau> = ?X ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("UML_Set.OclIncluding_includes",
     "?\<tau> \<Turnstile> ?X->includes\<^sub>S\<^sub>e\<^sub>t(?x) ==>
      ?\<tau>
       \<Turnstile> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x) \<triangleq>
                    ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1))
           ))),
    ("UML_Set.cp_OclReject",
     "OclReject ?X ?P ?\<tau> = OclReject (%_. ?X ?\<tau>) ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Set.cp_OclSelect",
     "OclSelect ?X ?P ?\<tau> = OclSelect (%_. ?X ?\<tau>) ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Set.OclExcludes_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->excludes\<^sub>S\<^sub>e\<^sub>t(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Set.OclIncludes_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->includes\<^sub>S\<^sub>e\<^sub>t(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Set.OclExcluding_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Set.OclIncluding_valid_args_valid",
     "(?\<tau>
        \<Turnstile> \<upsilon> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)) =
      (?\<tau> \<Turnstile> \<delta> ?X &
       ?\<tau> \<Turnstile> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Set.OclIterate_infinite",
     "?\<tau>
       \<Turnstile> not (\<delta> ?S->size\<^sub>S\<^sub>e\<^sub>t()) ==>
      OclIterate ?S ?A ?F ?\<tau> = invalid ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app (template_hole 0, template_var 3)))),
    ("UML_Set.cp_OclExists",
     "OclExists ?S ?P ?\<tau> =
      %_. ?S ?\<tau>->exists\<^sub>S\<^sub>e\<^sub>t(x|?P (%_. x ?\<tau>))
       ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Set.cp_OclForall",
     "OclForall ?S ?P ?\<tau> =
      %_. ?S ?\<tau>->forAll\<^sub>S\<^sub>e\<^sub>t(x|?P (%_. x ?\<tau>))
       ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Set.abs_rep_simp'",
     "?\<tau> \<Turnstile> \<delta> ?S ==>
      Abs_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       \<lfloor>\<lfloor>\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
    (?S ?\<tau>)\<rceil>\<rceil>\<rfloor>\<rfloor> =
      ?S ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 1))))))),
         template_app (template_var 0, template_var 1)))),
    ("UML_Set.Set_inv_lemma",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      ALL x:\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                             (?X ?\<tau>)\<rceil>\<rceil>.
         x ~= \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_var 0, template_var 1))))),
             t_empty)
           ))),
    ("UML_Set.OclIncludes_execute\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then true else ?X->includes\<^sub>S\<^sub>e\<^sub>t(?y) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_hole 0))),
    ("UML_Set.OclIncludes_execute\<^sub>B\<^sub>o\<^sub>o\<^sub>l\<^sub>e\<^sub>a\<^sub>n",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then true else ?X->includes\<^sub>S\<^sub>e\<^sub>t(?y) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_hole 0))),
    ("UML_Set.OclIncludes_execute\<^sub>S\<^sub>e\<^sub>t",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then true else ?X->includes\<^sub>S\<^sub>e\<^sub>t(?y) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_hole 0))),
    ("UML_Set.OclSelect_including_exec",
     "cp ?P ==>
      OclSelect ?X->including\<^sub>S\<^sub>e\<^sub>t(?y) ?P =
      OclSelect_body ?P ?y
       (OclSelect ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("UML_Set.const_StrictRefEq\<^sub>S\<^sub>e\<^sub>t_including",
     "[| const ?a; const ?S; const ?X |]
      ==> const (?X \<doteq> ?S->including\<^sub>S\<^sub>e\<^sub>t(?a))",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("UML_Set.OclIncludes_any",
     "?X->includes\<^sub>S\<^sub>e\<^sub>t(?X->any\<^sub>S\<^sub>e\<^sub>t()) =
      (if \<delta> ?X then if \<delta> ?X->size\<^sub>S\<^sub>e\<^sub>t() then not
    ?X->isEmpty\<^sub>S\<^sub>e\<^sub>t() else ?X->includes\<^sub>S\<^sub>e\<^sub>t(null) endif else invalid endif)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_hole 1))),
         template_hole 0))),
    ("UML_Set.OclExcludes_charn1",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x |]
      ==> ?\<tau>
           \<Turnstile> ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x)->excludes\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0))
           ))),
    ("UML_Set.OclIncludes_charn1",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x |]
      ==> ?\<tau>
           \<Turnstile> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0))
           ))),
    ("UML_Set.OclReject_including_exec",
     "cp ?P ==>
      OclReject ?X->including\<^sub>S\<^sub>e\<^sub>t(?y) ?P =
      OclSelect_body (not o ?P) ?y
       (OclReject ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 0),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("UML_Set.Set_inv_lemma'",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?e : \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                               (?X ?\<tau>)\<rceil>\<rceil> |]
      ==> ?\<tau> \<Turnstile> \<upsilon> (%_. ?e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_var 1, template_var 2)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app (template_hole 0, t_empty))
           ))),
    ("UML_Set.cp_OclIterate",
     "OclIterate ?X ?A ?P ?\<tau> =
      OclIterate (%_. ?X ?\<tau>) ?A ?P ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, t_empty), template_var 2),
           t_empty),
         template_var 0))),
    ("UML_Set.OclSize_including_exec",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->size\<^sub>S\<^sub>e\<^sub>t() =
      (if \<delta> ?X and
          \<upsilon> ?x then ?X->size\<^sub>S\<^sub>e\<^sub>t() +\<^sub>i\<^sub>n\<^sub>t
                             if ?X->includes\<^sub>S\<^sub>e\<^sub>t(?x) then \<zero> else \<one> endif else invalid endif)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1)),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 10, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_hole 2),
               template_hole 1))),
         template_hole 0))),
    ("UML_Set.OclSize_infinite",
     "?\<tau>
       \<Turnstile> not (\<delta> ?S->size\<^sub>S\<^sub>e\<^sub>t()) ==>
      ?\<tau> \<Turnstile> not (\<delta> ?S) |
      infinite
       \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                        (?S ?\<tau>)\<rceil>\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_hole 9,
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 0, template_var 1)))))))
           ))),
    ("UML_Set.OclNotEmpty_has_elt",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> ?X->notEmpty\<^sub>S\<^sub>e\<^sub>t() |]
      ==> EX e. e : \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                                     (?X ?\<tau>)\<rceil>\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("UML_Set.OclIsEmpty_infinite",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         infinite
          \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                           (?X ?\<tau>)\<rceil>\<rceil> |]
      ==> ?\<tau> |\<noteq> \<delta> ?X->isEmpty\<^sub>S\<^sub>e\<^sub>t()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app (template_var 0, template_var 1)))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("UML_Set.OclNotEmpty_infinite",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         infinite
          \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                           (?X ?\<tau>)\<rceil>\<rceil> |]
      ==> ?\<tau>
           |\<noteq> \<delta> ?X->notEmpty\<^sub>S\<^sub>e\<^sub>t()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app (template_var 0, template_var 1)))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("UML_Set.OclExcluding_charn_exec\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) else ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y)->including\<^sub>S\<^sub>e\<^sub>t(?x) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0)),
               template_var 1))),
         template_hole 0))),
    ("UML_Set.OclExcluding_charn_exec\<^sub>B\<^sub>o\<^sub>o\<^sub>l\<^sub>e\<^sub>a\<^sub>n",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) else ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y)->including\<^sub>S\<^sub>e\<^sub>t(?x) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0)),
               template_var 1))),
         template_hole 0))),
    ("UML_Set.OclExcluding_charn_exec\<^sub>S\<^sub>e\<^sub>t",
     "?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?y) =
      (if \<delta> ?X then if ?x \<doteq>
                              ?y then ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) else ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y)->including\<^sub>S\<^sub>e\<^sub>t(?x) endif else invalid endif)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0)),
               template_var 1))),
         template_hole 0))),
    ("UML_Set.OclIncluding_notempty_rep_set",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?a |]
      ==> \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                           (?X->including\<^sub>S\<^sub>e\<^sub>t(?a)
                             ?\<tau>)\<rceil>\<rceil> ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 7, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0),
                     template_var 2)))),
             template_hole 0)
           ))),
    ("UML_Set.OclExcluding_idem0",
     "[| ?\<tau> \<Turnstile> \<delta> ?S;
         ?\<tau> \<Turnstile> \<upsilon> ?i |]
      ==> ?\<tau>
           \<Turnstile> ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)->excluding\<^sub>S\<^sub>e\<^sub>t(?i) \<triangleq>
                        ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Set.OclIncluding_idem0",
     "[| ?\<tau> \<Turnstile> \<delta> ?S;
         ?\<tau> \<Turnstile> \<upsilon> ?i |]
      ==> ?\<tau>
           \<Turnstile> ?S->including\<^sub>S\<^sub>e\<^sub>t(?i)->including\<^sub>S\<^sub>e\<^sub>t(?i) \<triangleq>
                        ?S->including\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Set.OclExcluding_charn2",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x |]
      ==> ?\<tau>
           \<Turnstile> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?x) \<triangleq>
                        ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Set.OclForall_rep_set_true",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      (?\<tau> \<Turnstile> OclForall ?X ?P) =
      (ALL x:\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                              (?X ?\<tau>)\<rceil>\<rceil>.
          ?\<tau> \<Turnstile> ?P (%\<tau>. x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2))))),
           t_empty)))),
    ("UML_Set.S_lift'",
     "?\<tau> \<Turnstile> \<delta> ?S ==>
      EX S'.
         (%a _. a) `
         \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                          (?S ?\<tau>)\<rceil>\<rceil> =
         (%a _. \<lfloor>a\<rfloor>) ` S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("UML_Set.OclForall_iterate",
     "finite
       \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                        (?S ?\<tau>)\<rceil>\<rceil> ==>
      OclForall ?S ?P ?\<tau> =
      ?S ->iterate\<^sub>S\<^sub>e\<^sub>t(x;acc=true | acc and ?P x)
       ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_var 2, template_var 1)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2), t_empty),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1),
             t_empty),
           template_var 1)))),
    ("UML_Set.OclIncluding_rep_set",
     "?\<tau> \<Turnstile> \<delta> ?S ==>
      \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (?S->including\<^sub>S\<^sub>e\<^sub>t(%_.
                           \<lfloor>\<lfloor>?x\<rfloor>\<rfloor>)
                         ?\<tau>)\<rceil>\<rceil> =
      insert \<lfloor>\<lfloor>?x\<rfloor>\<rfloor>
       \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                        (?S ?\<tau>)\<rceil>\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1), t_empty),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_var 1, template_var 2)))))))),
    ("UML_Set.OclIncludes_including\<^sub>I\<^sub>n\<^sub>t\<^sub>e\<^sub>g\<^sub>e\<^sub>r",
     "[| ?\<tau> \<Turnstile> \<upsilon> ?a;
         ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> ?S->includes\<^sub>S\<^sub>e\<^sub>t(?x) |]
      ==> ?\<tau>
           \<Turnstile> ?S->including\<^sub>S\<^sub>e\<^sub>t(?a)->includes\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("UML_Set.OclExists_including_exec",
     "cp ?P ==>
      OclExists ?S->including\<^sub>S\<^sub>e\<^sub>t(?x) ?P =
      (if \<delta> ?S and
          \<upsilon> ?x then ?P ?x or OclExists ?S ?P else invalid endif)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_app (template_hole 7, template_var 1), t_empty))),
           template_hole 0)))),
    ("UML_Set.OclForall_including_exec",
     "cp ?P ==>
      OclForall ?S->including\<^sub>S\<^sub>e\<^sub>t(?x) ?P =
      (if \<delta> ?S and
          \<upsilon> ?x then ?P ?x and OclForall ?S ?P else invalid endif)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_app (template_hole 6, template_var 1), t_empty))),
           template_hole 0)))),
    ("UML_Set.OclExcluding_finite_rep_set",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x |]
      ==> finite
           \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                            (?X->excluding\<^sub>S\<^sub>e\<^sub>t(?x)
                              ?\<tau>)\<rceil>\<rceil> =
          finite
           \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                            (?X ?\<tau>)\<rceil>\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2))))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 2)))))))),
    ("UML_Set.OclIncluding_finite_rep_set",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x |]
      ==> finite
           \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                            (?X->including\<^sub>S\<^sub>e\<^sub>t(?x)
                              ?\<tau>)\<rceil>\<rceil> =
          finite
           \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                            (?X ?\<tau>)\<rceil>\<rceil>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2))))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 2)))))))),
    ("UML_Set.OclForall_rep_set_false",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      (OclForall ?X ?P ?\<tau> = false ?\<tau>) =
      (EX x:\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                             (?X ?\<tau>)\<rceil>\<rceil>.
          ?P (%\<tau>. x) ?\<tau> = false ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0),
               template_var 2)),
           template_app (template_hole 4, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2))))),
           t_empty)))),
    ("UML_Set.OclExcluding_rep_set",
     "?\<tau> \<Turnstile> \<delta> ?S ==>
      \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (?S->excluding\<^sub>S\<^sub>e\<^sub>t(%_.
                           \<lfloor>\<lfloor>?x\<rfloor>\<rfloor>)
                         ?\<tau>)\<rceil>\<rceil> =
      \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                       (?S ?\<tau>)\<rceil>\<rceil> -
      {\<lfloor>\<lfloor>?x\<rfloor>\<rfloor>}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 1), t_empty),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_var 1, template_var 2))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))),
             template_hole 0))))),
    ("UML_Set.OclIsEmpty_including",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         finite
          \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                           (?X ?\<tau>)\<rceil>\<rceil>;
         ?\<tau> \<Turnstile> \<upsilon> ?a |]
      ==> ?X->including\<^sub>S\<^sub>e\<^sub>t(?a)->isEmpty\<^sub>S\<^sub>e\<^sub>t()
           ?\<tau> =
          false ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_var 1, template_var 2)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 2)))),
    ("UML_Set.OclNotEmpty_including",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         finite
          \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                           (?X ?\<tau>)\<rceil>\<rceil>;
         ?\<tau> \<Turnstile> \<upsilon> ?a |]
      ==> ?X->including\<^sub>S\<^sub>e\<^sub>t(?a)->notEmpty\<^sub>S\<^sub>e\<^sub>t()
           ?\<tau> =
          true ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_var 1, template_var 2)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 2)))),
    ("UML_Set.OclForall_includes",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> (?\<tau> \<Turnstile> OclForall ?x (OclIncludes ?y)) =
          (\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                            (?x ?\<tau>)\<rceil>\<rceil>
           <= \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                               (?y ?\<tau>)\<rceil>\<rceil>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2))))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 0, template_var 2)))))))),
    ("UML_Set.OclExcluding_commute0",
     "[| ?\<tau> \<Turnstile> \<delta> ?S;
         ?\<tau> \<Turnstile> \<upsilon> ?i;
         ?\<tau> \<Turnstile> \<upsilon> ?j |]
      ==> ?\<tau>
           \<Turnstile> ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?i)->excluding\<^sub>S\<^sub>e\<^sub>t(?j) \<triangleq>
                        ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?j)->excluding\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("UML_Set.OclIncluding_commute0",
     "[| ?\<tau> \<Turnstile> \<delta> ?S;
         ?\<tau> \<Turnstile> \<upsilon> ?i;
         ?\<tau> \<Turnstile> \<upsilon> ?j |]
      ==> ?\<tau>
           \<Turnstile> ?S->including\<^sub>S\<^sub>e\<^sub>t(?i)->including\<^sub>S\<^sub>e\<^sub>t(?j) \<triangleq>
                        ?S->including\<^sub>S\<^sub>e\<^sub>t(?j)->including\<^sub>S\<^sub>e\<^sub>t(?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("UML_Set.OclForall_not_includes",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> (OclForall ?x (OclIncludes ?y) ?\<tau> = false ?\<tau>) =
          (~ \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                              (?x ?\<tau>)\<rceil>\<rceil>
             <= \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
                                 (?y ?\<tau>)\<rceil>\<rceil>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 1),
                 template_app (template_hole 6, template_var 0)),
               template_var 2)),
           template_app (template_hole 5, template_var 2)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 2))))),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_var 0, template_var 2))))))))),
    ("UML_Set.OclIncluding_cong",
     "[| ?\<tau> \<Turnstile> \<delta> ?t;
         ?\<tau> \<Turnstile> \<upsilon> ?y;
         ?\<tau> \<Turnstile> ?s \<doteq> ?t; ?x = ?y |]
      ==> ?\<tau>
           \<Turnstile> ?s->including\<^sub>S\<^sub>e\<^sub>t(?x) \<doteq>
                        ?t->including\<^sub>S\<^sub>e\<^sub>t(?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3))
            ),
        template_equation (template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))
           ))),
    ("UML_Set.OclIncluding_cong'",
     "[| ?\<tau> \<Turnstile> \<delta> ?s; ?\<tau> \<Turnstile> \<delta> ?t;
         ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> ?s \<doteq> ?t |]
      ==> ?\<tau>
           \<Turnstile> ?s->including\<^sub>S\<^sub>e\<^sub>t(?x) \<doteq>
                        ?t->including\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Set.OclForall_cong",
     "[| !!x. [| x : \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
(?X ?\<tau>)\<rceil>\<rceil>;
                 ?\<tau> \<Turnstile> ?P (%\<tau>. x) |]
              ==> ?\<tau> \<Turnstile> ?Q (%\<tau>. x);
         ?\<tau> \<Turnstile> OclForall ?X ?P |]
      ==> ?\<tau> \<Turnstile> OclForall ?X ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("UML_Set.OclIncludes_charn2",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?y;
         ?\<tau> \<Turnstile> not (?x \<triangleq> ?y) |]
      ==> ?\<tau>
           \<Turnstile> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?y) \<triangleq>
                        ?X->includes\<^sub>S\<^sub>e\<^sub>t(?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)))
           ))),
    ("UML_Set.StrictRefEq\<^sub>S\<^sub>e\<^sub>t_exec",
     "(?x \<doteq> ?y) =
      (if \<delta> ?x then if \<delta> ?y then OclForall ?x
          (OclIncludes ?y) and
         OclForall ?y
          (OclIncludes
            ?x) else if \<upsilon> ?y then false else invalid endif endif else if \<upsilon> ?x then if \<upsilon> ?y then not
          (\<delta> ?y) else invalid endif else invalid endif endif)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     t_empty)),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   t_empty))),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2),
               template_hole 1))),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 7, template_var 0))),
               template_hole 1)),
           template_hole 1)))),
    ("UML_Set.OclExcluding_charn1",
     "[| ?\<tau> \<Turnstile> \<delta> ?X;
         ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?y;
         ?\<tau> \<Turnstile> not (?x \<triangleq> ?y) |]
      ==> ?\<tau>
           \<Turnstile> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?y) \<triangleq>
                        ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y)->including\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("UML_Set.StrictRefEq\<^sub>S\<^sub>e\<^sub>t_L_subst1",
     "[| cp ?P; ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?y;
         ?\<tau> \<Turnstile> \<upsilon> ?P ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?P ?y;
         ?\<tau> \<Turnstile> ?x \<doteq> ?y |]
      ==> ?\<tau> \<Turnstile> ?P ?x \<doteq> ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app (template_var 3, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app (template_var 3, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1)),
               template_app (template_var 3, template_var 0)))
           ))),
    ("UML_Set.OclExcluding_inv",
     "[| ?x ~= \<bottom>; ?x ~= null; ?y ~= \<bottom> |]
      ==> \<lfloor>\<lfloor>\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       ?x\<rceil>\<rceil> -
                            {?y}\<rfloor>\<rfloor>
          : {X. X = \<bottom> |
                X = null |
                (ALL x:\<lceil>\<lceil>X\<rceil>\<rceil>. x ~= \<bottom>)}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 18)),
        template_negation
         (template_equation (template_var 1, template_hole 17)),
        template_negation
         (template_equation (template_var 0, template_hole 15))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_var 1)))),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))))),
             template_app (template_hole 5, t_empty))
           ))),
    ("UML_Set.OclForall_cong'",
     "[| !!x. [| x : \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
(?X ?\<tau>)\<rceil>\<rceil>;
                 ?\<tau> \<Turnstile> ?P (%\<tau>. x);
                 ?\<tau> \<Turnstile> ?Q (%\<tau>. x) |]
              ==> ?\<tau> \<Turnstile> ?R (%\<tau>. x);
         ?\<tau> \<Turnstile> OclForall ?X ?P;
         ?\<tau> \<Turnstile> OclForall ?X ?Q |]
      ==> ?\<tau> \<Turnstile> OclForall ?X ?R",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("UML_Set.OclIntersection_inv",
     "[| ?x ~= \<bottom>; ?x ~= null; ?y ~= \<bottom>; ?y ~= null |]
      ==> \<lfloor>\<lfloor>\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       ?y\<rceil>\<rceil> Int
                            \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       ?x\<rceil>\<rceil>\<rfloor>\<rfloor>
          : {X. X = \<bottom> |
                X = null |
                (ALL x:\<lceil>\<lceil>X\<rceil>\<rceil>. x ~= \<bottom>)}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 16)),
        template_negation
         (template_equation (template_var 1, template_hole 15)),
        template_negation
         (template_equation (template_var 0, template_hole 16)),
        template_negation
         (template_equation (template_var 0, template_hole 15))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_var 0)))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8, template_var 1))))))),
             template_app (template_hole 7, t_empty))
           ))),
    ("UML_Set.OclUnion_inv",
     "[| ?x ~= \<bottom>; ?x ~= null; ?y ~= \<bottom>; ?y ~= null |]
      ==> \<lfloor>\<lfloor>\<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       ?y\<rceil>\<rceil> Un
                            \<lceil>\<lceil>Rep_Set\<^sub>b\<^sub>a\<^sub>s\<^sub>e
       ?x\<rceil>\<rceil>\<rfloor>\<rfloor>
          : {X. X = \<bottom> |
                X = null |
                (ALL x:\<lceil>\<lceil>X\<rceil>\<rceil>. x ~= \<bottom>)}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 16)),
        template_negation
         (template_equation (template_var 1, template_hole 15)),
        template_negation
         (template_equation (template_var 0, template_hole 16)),
        template_negation
         (template_equation (template_var 0, template_hole 15))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_var 0)))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8, template_var 1))))))),
             template_app (template_hole 7, t_empty))
           ))),
    ("UML_Set.OclIterate_including",
     "[| ?\<tau> \<Turnstile> \<delta> ?S->size\<^sub>S\<^sub>e\<^sub>t();
         (\<upsilon> ?A) ?\<tau> = (\<upsilon> ?F ?a ?A) ?\<tau>;
         comp_fun_commute ?F;
         !!x y \<tau>. ?F x y \<tau> = ?F (%_. x \<tau>) y \<tau> |]
      ==> OclIterate ?S->including\<^sub>S\<^sub>e\<^sub>t(?a) ?A ?F
           ?\<tau> =
          OclIterate ?S->excluding\<^sub>S\<^sub>e\<^sub>t(?a) (?F ?a ?A) ?F
           ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 4),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_var 1, template_var 0),
                template_var 2)),
            template_var 4)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 2),
             t_empty),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_var 1, template_var 0),
                 template_var 2)),
             t_empty),
           template_var 4)))),
    ("UML_Set.OclIncludes_including_generic",
     "[| !!X x y.
            X->including\<^sub>S\<^sub>e\<^sub>t(x)->includes\<^sub>S\<^sub>e\<^sub>t(y) =
            (if \<delta> X then if x \<doteq>
                                   y then true else X->includes\<^sub>S\<^sub>e\<^sub>t(y) endif else invalid endif);
         !!x y. \<delta> (x \<doteq> y) = (\<upsilon> x and \<upsilon> y);
         ?\<tau> \<Turnstile> \<upsilon> ?a;
         ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> ?S->includes\<^sub>S\<^sub>e\<^sub>t(?x) |]
      ==> ?\<tau>
           \<Turnstile> ?S->including\<^sub>S\<^sub>e\<^sub>t(?a)->includes\<^sub>S\<^sub>e\<^sub>t(?x)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("UML_Set.OclIncludes_execute_generic",
     "[| (invalid \<doteq> ?y) = invalid; (?x \<doteq> invalid) = invalid;
         !!X Y \<tau>.
            (X \<doteq> Y) \<tau> =
            ((%_. X \<tau>) \<doteq> (%_. Y \<tau>)) \<tau>;
         !!x y \<tau>.
            [| \<tau> \<Turnstile> \<upsilon> x;
               \<tau> \<Turnstile> \<upsilon> y |]
            ==> \<tau>
                 \<Turnstile> x \<doteq> y \<triangleq>
                              (x \<triangleq> y) |]
      ==> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->includes\<^sub>S\<^sub>e\<^sub>t(?y) =
          (if \<delta> ?X then if ?x \<doteq>
                                  ?y then true else ?X->includes\<^sub>S\<^sub>e\<^sub>t(?y) endif else invalid endif)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_hole 13),
            template_var 2),
          template_hole 12),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 1),
            template_hole 13),
          template_hole 12),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 14, template_var 1),
                     template_var 2)),
                 template_hole 0),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))),
           template_hole 12)))),
    ("UML_Set.OclExcluding_charn_exec",
     "[| (invalid \<doteq> ?y) = invalid; (?x \<doteq> invalid) = invalid;
         !!x y \<tau>.
            (\<tau> \<Turnstile> \<delta> (x \<doteq> y)) =
            (\<tau> \<Turnstile> \<upsilon> x &
             \<tau> \<Turnstile> \<upsilon> y);
         !!X Y \<tau>.
            (X \<doteq> Y) \<tau> =
            ((%_. X \<tau>) \<doteq> (%_. Y \<tau>)) \<tau>;
         !!x y \<tau>.
            [| \<tau> \<Turnstile> \<upsilon> x;
               \<tau> \<Turnstile> \<upsilon> y |]
            ==> \<tau>
                 \<Turnstile> x \<doteq> y \<triangleq>
                              (x \<triangleq> y) |]
      ==> ?X->including\<^sub>S\<^sub>e\<^sub>t(?x)->excluding\<^sub>S\<^sub>e\<^sub>t(?y) =
          (if \<delta> ?X then if ?x \<doteq>
                                  ?y then ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y) else ?X->excluding\<^sub>S\<^sub>e\<^sub>t(?y)->including\<^sub>S\<^sub>e\<^sub>t(?x) endif else invalid endif)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_hole 17),
            template_var 2),
          template_hole 16),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 1),
            template_hole 17),
          template_hole 16),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 18, template_var 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)),
                 template_var 1))),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.UML_SetMoreTemplates"
### 0.432s elapsed time, 0.611s cpu time, 0.000s GC time
val it = (): unit
