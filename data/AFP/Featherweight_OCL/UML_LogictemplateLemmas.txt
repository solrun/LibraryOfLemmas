   [("UML_Logic.foundation1", "?\<tau> \<Turnstile> true",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("UML_Logic.const_lam", "const (%_. ?e)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("UML_Logic.cp_const", "cp (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("UML_Logic.foundation2", "?\<tau> |\<noteq> false",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("UML_Logic.foundation3", "?\<tau> |\<noteq> invalid",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("UML_Logic.foundation4", "?\<tau> |\<noteq> null",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("UML_Logic.OclAnd_false1", "(false and ?X) = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("UML_Logic.OclAnd_true1", "(true and ?X) = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("UML_Logic.OclAnd_false2", "(?X and false) = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("UML_Logic.OclAnd_true2", "(?X and true) = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("UML_Logic.OclAnd_idem", "(?X and ?X) = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("UML_Logic.OclImplies_false1", "(false implies ?X) = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("UML_Logic.OclImplies_true1", "(true implies ?X) = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("UML_Logic.OclImplies_true2", "(?X implies true) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("UML_Logic.OclNot_not", "not (not ?X) = ?X",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("UML_Logic.OclOr_false1", "(false or ?Y) = ?Y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("UML_Logic.OclOr_true1", "(true or ?Y) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("UML_Logic.OclOr_idem", "(?X or ?X) = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("UML_Logic.OclOr_false2", "(?Y or false) = ?Y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("UML_Logic.OclOr_true2", "(?Y or true) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("UML_Logic.StrongEq_refl", "(?X \<triangleq> ?X) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("UML_Logic.defined5", "\<delta> \<delta> ?X = true",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("UML_Logic.defined6", "\<delta> \<upsilon> ?X = true",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("UML_Logic.valid6", "\<upsilon> \<delta> ?X = true",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("UML_Logic.valid5", "\<upsilon> \<upsilon> ?X = true",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("UML_Logic.StrongEq_L_refl", "?\<tau> \<Turnstile> ?x \<triangleq> ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("UML_Logic.OclIf_false",
     "(if false then ?B\<^sub>1 else ?B\<^sub>2 endif) = ?B\<^sub>2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("UML_Logic.OclIf_true",
     "(if true then ?B\<^sub>1 else ?B\<^sub>2 endif) = ?B\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 1)),
    ("UML_Logic.OclIf_invalid",
     "(if invalid then ?B\<^sub>1 else ?B\<^sub>2 endif) = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("UML_Logic.OclIf_null",
     "(if null then ?B\<^sub>1 else ?B\<^sub>2 endif) = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("UML_Logic.defined7", "\<delta> (?X \<triangleq> ?Y) = true",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("UML_Logic.valid7", "\<upsilon> (?X \<triangleq> ?Y) = true",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("UML_Logic.OclIf_idem1", "(if \<delta> ?X then ?A else ?A endif) = ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0),
       template_var 0)),
    ("UML_Logic.OclIf_idem2",
     "(if \<upsilon> ?X then ?A else ?A endif) = ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0),
       template_var 0)),
    ("UML_Logic.OclAnd_commute", "(?X and ?Y) = (?Y and ?X)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("UML_Logic.OclOr_commute", "(?X or ?Y) = (?Y or ?X)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("UML_Logic.StrongEq_sym",
     "(?X \<triangleq> ?Y) = (?Y \<triangleq> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("UML_Logic.textbook_false",
     "I\<lbrakk>false\<rbrakk> ?\<tau> =
      \<lfloor>\<lfloor>False\<rfloor>\<rfloor>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("UML_Logic.textbook_true",
     "I\<lbrakk>true\<rbrakk> ?\<tau> =
      \<lfloor>\<lfloor>True\<rfloor>\<rfloor>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("UML_Logic.const_ss", "const ?X ==> const (\<delta> ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.const_valid", "const ?X ==> const (\<upsilon> ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.const_OclNot", "const ?X ==> const (not ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.transform1", "?P = true ==> ?\<tau> \<Turnstile> ?P",
     template_implication
      ([template_equation (template_var 1, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("UML_Logic.foundation21",
     "(not ?A \<triangleq> not ?B) = (?A \<triangleq> ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("UML_Logic.foundation23",
     "(?\<tau> \<Turnstile> ?P) = (?\<tau> \<Turnstile> %_. ?P ?\<tau>)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("UML_Logic.foundation13",
     "(?\<tau> \<Turnstile> ?A \<triangleq> true) =
      (?\<tau> \<Turnstile> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("UML_Logic.cp_OclNot", "not ?X ?\<tau> = not (%_. ?X ?\<tau>) ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Logic.cp_valid",
     "(\<upsilon> ?X) ?\<tau> = (\<upsilon> (%_. ?X ?\<tau>)) ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("UML_Logic.const_charn", "const ?X ==> ?X ?\<tau> = ?X ?\<tau>'",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("UML_Logic.cp_intro", "cp ?P ==> cp (%X. \<delta> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro", "cp ?P ==> cp (%X. \<upsilon> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro", "cp ?P ==> cp (%X. not (?P X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.foundation6",
     "?\<tau> \<Turnstile> ?P ==> ?\<tau> \<Turnstile> \<delta> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.deMorgan1", "not (?X and ?Y) = (not ?X or not ?Y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("UML_Logic.deMorgan2", "not (?X or ?Y) = (not ?X and not ?Y)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("UML_Logic.foundation18'",
     "(?\<tau> \<Turnstile> \<upsilon> ?X) = (?X ?\<tau> ~= \<bottom>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 0, template_var 1), template_hole 0)
           ))),
    ("UML_Logic.foundation14",
     "(?\<tau> \<Turnstile> ?A \<triangleq> false) =
      (?\<tau> \<Turnstile> not ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.foundation25",
     "?\<tau> \<Turnstile> ?P ==> ?\<tau> \<Turnstile> ?P or ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.foundation25'",
     "?\<tau> \<Turnstile> ?Q ==> ?\<tau> \<Turnstile> ?P or ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("UML_Logic.foundation9'",
     "?\<tau> \<Turnstile> not ?x ==> ?\<tau> |\<noteq> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)
               )
           ))),
    ("UML_Logic.foundation9''",
     "?\<tau> \<Turnstile> not ?x ==> ?\<tau> \<Turnstile> \<delta> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.foundation20",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      ?\<tau> \<Turnstile> \<upsilon> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UML_Logic.transform1_rev",
     "ALL \<tau>. \<tau> \<Turnstile> ?P ==> ?P = true",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("UML_Logic.OclNot_inject", "not ?x = not ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("UML_Logic.OclAnd_assoc", "(?X and (?Y and ?Z)) = (?X and ?Y and ?Z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UML_Logic.OclOr_assoc", "(?X or (?Y or ?Z)) = (?X or ?Y or ?Z)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("UML_Logic.foundation18",
     "(?\<tau> \<Turnstile> \<upsilon> ?X) =
      (?X ?\<tau> ~= invalid ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 0, template_var 1),
             template_app (template_hole 0, template_var 1))
           ))),
    ("UML_Logic.foundation18''",
     "(?\<tau> \<Turnstile> \<upsilon> ?X) =
      (?\<tau> |\<noteq> ?X \<triangleq> invalid)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("UML_Logic.foundation7",
     "(?\<tau> \<Turnstile> not (\<delta> ?x)) =
      (?\<tau> |\<noteq> \<delta> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("UML_Logic.foundation7'",
     "(?\<tau> \<Turnstile> not (\<upsilon> ?x)) =
      (?\<tau> |\<noteq> \<upsilon> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("UML_Logic.foundation22",
     "(?\<tau> \<Turnstile> ?X \<triangleq> ?Y) =
      (?X ?\<tau> = ?Y ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_var 1, template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("UML_Logic.foundation15",
     "(?\<tau> \<Turnstile> ?A \<triangleq> invalid) =
      (?\<tau> \<Turnstile> not (\<upsilon> ?A))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("UML_Logic.defined_not_I",
     "?\<tau> \<Turnstile> \<delta> ?x ==>
      ?\<tau> \<Turnstile> \<delta> not ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("UML_Logic.valid_not_I",
     "?\<tau> \<Turnstile> \<upsilon> ?x ==>
      ?\<tau> \<Turnstile> \<upsilon> not ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("UML_Logic.OclNot_if",
     "not (if ?P then ?C else ?E endif) =
      (if ?P then not ?C else not ?E endif)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("UML_Logic.transform2",
     "?P = ?Q ==> (?\<tau> \<Turnstile> ?P) = (?\<tau> \<Turnstile> ?Q)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UML_Logic.StrongEq_L_sym",
     "?\<tau> \<Turnstile> ?x \<triangleq> ?y ==>
      ?\<tau> \<Turnstile> ?y \<triangleq> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("UML_Logic.const_StrongEq",
     "[| const ?X; const ?X' |] ==> const (?X \<triangleq> ?X')",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.const_OclAnd",
     "[| const ?X; const ?X' |] ==> const (?X and ?X')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.const_OclImplies",
     "[| const ?X; const ?X' |] ==> const (?X implies ?X')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.const_OclOr",
     "[| const ?X; const ?X' |] ==> const (?X or ?X')",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.defined_bool_split",
     "(?\<tau> \<Turnstile> \<delta> ?A) =
      (?\<tau> \<Turnstile> ?A | ?\<tau> \<Turnstile> not ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("UML_Logic.foundation10'",
     "(?\<tau> \<Turnstile> ?A and ?B) =
      (?\<tau> \<Turnstile> ?A & ?\<tau> \<Turnstile> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("UML_Logic.foundation24",
     "(?\<tau> \<Turnstile> not (?X \<triangleq> ?Y)) =
      (?X ?\<tau> ~= ?Y ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 1, template_var 2),
             template_app (template_var 0, template_var 2))
           ))),
    ("UML_Logic.cp_OclAnd",
     "(?X and ?Y) ?\<tau> =
      ((%_. ?X ?\<tau>) and (%_. ?Y ?\<tau>)) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Logic.cp_OclImplies",
     "(?X implies ?Y) ?\<tau> =
      ((%_. ?X ?\<tau>) implies (%_. ?Y ?\<tau>)) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Logic.cp_OclOr",
     "(?X or ?Y) ?\<tau> = ((%_. ?X ?\<tau>) or (%_. ?Y ?\<tau>)) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Logic.cp_StrongEq",
     "(?X \<triangleq> ?Y) ?\<tau> =
      ((%_. ?X ?\<tau>) \<triangleq> (%_. ?Y ?\<tau>)) ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("UML_Logic.const_OclValid1",
     "const ?x ==>
      (?\<tau> \<Turnstile> \<delta> ?x) =
      (?\<tau>' \<Turnstile> \<delta> ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("UML_Logic.const_OclValid2",
     "const ?x ==>
      (?\<tau> \<Turnstile> \<upsilon> ?x) =
      (?\<tau>' \<Turnstile> \<upsilon> ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("UML_Logic.OclIf_true'",
     "?\<tau> \<Turnstile> ?P ==>
      (if ?P then ?B\<^sub>1 else ?B\<^sub>2 endif) ?\<tau> =
      ?B\<^sub>1 ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("UML_Logic.OclIf_true''",
     "?\<tau> \<Turnstile> ?P ==>
      ?\<tau>
       \<Turnstile> if ?P then ?B\<^sub>1 else ?B\<^sub>2 endif \<triangleq>
                    ?B\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 1))
           ))),
    ("UML_Logic.foundation27",
     "?\<tau> \<Turnstile> ?A ==>
      (?\<tau> \<Turnstile> ?A implies ?B) = (?\<tau> \<Turnstile> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("UML_Logic.OclIf_false'",
     "?\<tau> \<Turnstile> not ?P ==>
      (if ?P then ?B\<^sub>1 else ?B\<^sub>2 endif) ?\<tau> =
      ?B\<^sub>2 ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app (template_var 0, template_var 3)))),
    ("UML_Logic.foundation5",
     "?\<tau> \<Turnstile> ?P and ?Q ==>
      ?\<tau> \<Turnstile> ?P & ?\<tau> \<Turnstile> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("UML_Logic.foundation9",
     "?\<tau> \<Turnstile> \<delta> ?x ==>
      (?\<tau> \<Turnstile> not ?x) = (?\<tau> |\<noteq> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("UML_Logic.OclAnd_bot1",
     "?X ?\<tau> ~= false ?\<tau> ==>
      (\<bottom> and ?X) ?\<tau> = \<bottom> ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclAnd_bot2",
     "?X ?\<tau> ~= false ?\<tau> ==>
      (?X and \<bottom>) ?\<tau> = \<bottom> ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclOr_bot1",
     "?X ?\<tau> ~= true ?\<tau> ==>
      (\<bottom> or ?X) ?\<tau> = \<bottom> ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclOr_bot2",
     "?X ?\<tau> ~= true ?\<tau> ==>
      (?X or \<bottom>) ?\<tau> = \<bottom> ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.const_HOL_eq",
     "[| const ?C; const ?D |] ==> const (%\<tau>. ?C \<tau> = ?D \<tau>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.const_HOL_and",
     "[| const ?C; const ?D |] ==> const (%\<tau>. ?C \<tau> & ?D \<tau>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro", "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.cp_intro", "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.foundation8",
     "?\<tau> \<Turnstile> \<delta> ?x |
      ?\<tau> \<Turnstile> ?x \<triangleq> invalid |
      ?\<tau> \<Turnstile> ?x \<triangleq> null",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))
         )),
    ("UML_Logic.foundation16",
     "(?\<tau> \<Turnstile> \<delta> ?X) =
      (?X ?\<tau> ~= \<bottom> & ?X ?\<tau> ~= null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 0, template_var 1)),
                   template_hole 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_var 0, template_var 1)),
                 template_hole 0)))
           ))),
    ("UML_Logic.foundation16''",
     "(?\<tau> \<Turnstile> \<delta> ?X) ~=
      (?\<tau> \<Turnstile> ?X \<triangleq> invalid |
       ?\<tau> \<Turnstile> ?X \<triangleq> null)",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0))))
         )),
    ("UML_Logic.cp_OclIf",
     "(if ?C then ?B\<^sub>1 else ?B\<^sub>2 endif) ?\<tau> =
      (if (%_. ?C ?\<tau>) then (%_. ?B\<^sub>1
?\<tau>) else (%_. ?B\<^sub>2 ?\<tau>) endif)
       ?\<tau>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_app (template_hole 0, t_empty), t_empty),
           t_empty),
         template_var 0))),
    ("UML_Logic.const_OclIf",
     "[| const ?B; const ?C1.0; const ?C2.0 |]
      ==> const (if ?B then ?C1.0 else ?C2.0 endif)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("UML_Logic.foundation16'",
     "(?\<tau> \<Turnstile> \<delta> ?X) =
      (?X ?\<tau> ~= invalid ?\<tau> & ?X ?\<tau> ~= null ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 0, template_var 1)),
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_var 0, template_var 1)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("UML_Logic.defined_split",
     "(?\<tau> \<Turnstile> \<delta> ?x) =
      (?\<tau> |\<noteq> ?x \<triangleq> invalid &
       ?\<tau> |\<noteq> ?x \<triangleq> null)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)))))),
    ("UML_Logic.StrongEq_L_subst1",
     "[| cp ?P; ?\<tau> \<Turnstile> ?x \<triangleq> ?y |]
      ==> ?\<tau> \<Turnstile> ?P ?x \<triangleq> ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1)),
               template_app (template_var 3, template_var 0)))
           ))),
    ("UML_Logic.defined_and_I",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> ?\<tau> \<Turnstile> \<delta> (?x and ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Logic.defined_or_I",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> ?\<tau> \<Turnstile> \<delta> (?x or ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Logic.valid_and_I",
     "[| ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?y |]
      ==> ?\<tau> \<Turnstile> \<upsilon> (?x and ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Logic.valid_or_I",
     "[| ?\<tau> \<Turnstile> \<upsilon> ?x;
         ?\<tau> \<Turnstile> \<upsilon> ?y |]
      ==> ?\<tau> \<Turnstile> \<upsilon> (?x or ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("UML_Logic.valid_bool_split",
     "(?\<tau> \<Turnstile> \<upsilon> ?A) =
      (?\<tau> \<Turnstile> ?A \<triangleq> null |
       ?\<tau> \<Turnstile> ?A | ?\<tau> \<Turnstile> not ?A)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("UML_Logic.textbook_valid",
     "I\<lbrakk>\<upsilon> ?X\<rbrakk> ?\<tau> =
      (if I\<lbrakk>?X\<rbrakk> ?\<tau> =
          I\<lbrakk>\<bottom>\<rbrakk> ?\<tau>
       then I\<lbrakk>false\<rbrakk> ?\<tau>
       else I\<lbrakk>true\<rbrakk> ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0))),
               template_app
                (template_app (template_hole 7, template_hole 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 7, template_hole 0),
               template_var 0))
           ))),
    ("UML_Logic.foundation12",
     "?\<tau> \<Turnstile> \<delta> ?x ==>
      (?\<tau> \<Turnstile> ?x implies ?y) =
      (?\<tau> \<Turnstile> ?x --> ?\<tau> \<Turnstile> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("UML_Logic.StrongEq_trans_strong",
     "[| (?X \<triangleq> ?Y) = true; (?Y \<triangleq> ?Z) = true |]
      ==> (?X \<triangleq> ?Z) = true",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_hole 0),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("UML_Logic.StrongEq_L_trans",
     "[| ?\<tau> \<Turnstile> ?x \<triangleq> ?y;
         ?\<tau> \<Turnstile> ?y \<triangleq> ?z |]
      ==> ?\<tau> \<Turnstile> ?x \<triangleq> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("UML_Logic.textbook_OclNot",
     "I\<lbrakk>not ?X\<rbrakk> ?\<tau> =
      (case I\<lbrakk>?X\<rbrakk> ?\<tau> of \<bottom> => \<bottom>
       | \<lfloor>\<bottom>\<rfloor> => \<lfloor>\<bottom>\<rfloor>
       | \<lfloor>\<lfloor>x\<rfloor>\<rfloor> =>
           \<lfloor>\<lfloor>~ x\<rfloor>\<rfloor>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_var 0)))),
    ("UML_Logic.StrongEq_L_subst3",
     "[| cp ?P; ?\<tau> \<Turnstile> ?x \<triangleq> ?y |]
      ==> (?\<tau> \<Turnstile> ?P ?x) = (?\<tau> \<Turnstile> ?P ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_var 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_var 3, template_var 0))))),
    ("UML_Logic.StrongEq_L_subst3_rev",
     "[| ?\<tau> \<Turnstile> ?x \<triangleq> ?y; cp ?P |]
      ==> (?\<tau> \<Turnstile> ?P ?x) = (?\<tau> \<Turnstile> ?P ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_var 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_var 0, template_var 1))))),
    ("UML_Logic.const_HOL_if",
     "[| const ?C; const ?D; const ?F |]
      ==> const (%\<tau>. if ?C \<tau> then ?D \<tau> else ?F \<tau>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.StrongEq_L_subst2",
     "[| cp ?P; ?\<tau> \<Turnstile> ?x \<triangleq> ?y;
         ?\<tau> \<Turnstile> ?P ?x |]
      ==> ?\<tau> \<Turnstile> ?P ?y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_var 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_var 3, template_var 0))
           ))),
    ("UML_Logic.cp_intro'",
     "[| cp ?P; cp ?Q; cp ?R |]
      ==> cp (%X. if ?P X then ?Q X else ?R X endif)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Logic.StrongEq_L_subst2_rev",
     "[| ?\<tau> \<Turnstile> ?y \<triangleq> ?x; cp ?P;
         ?\<tau> \<Turnstile> ?P ?x |]
      ==> ?\<tau> \<Turnstile> ?P ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_var 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_var 0, template_var 2))
           ))),
    ("UML_Logic.StrongEq_L_subst4_rev",
     "[| ?\<tau> \<Turnstile> ?x \<triangleq> ?y; cp ?P |]
      ==> (?\<tau> |\<noteq> ?P ?x) = (?\<tau> |\<noteq> ?P ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_var 0, template_var 2))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_var 0, template_var 1)))))),
    ("UML_Logic.bool_split_0",
     "?X ?\<tau> = invalid ?\<tau> |
      ?X ?\<tau> = null ?\<tau> |
      ?X ?\<tau> = true ?\<tau> | ?X ?\<tau> = false ?\<tau>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_var 1, template_var 0)),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_var 1, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_var 1, template_var 0)),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_var 1, template_var 0)),
                 template_app (template_hole 0, template_var 0)))))
         )),
    ("UML_Logic.bool_split",
     "?\<tau> \<Turnstile> ?x \<triangleq> invalid |
      ?\<tau> \<Turnstile> ?x \<triangleq> null |
      ?\<tau> \<Turnstile> ?x \<triangleq> true |
      ?\<tau> \<Turnstile> ?x \<triangleq> false",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 1))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 0)))))
         )),
    ("UML_Logic.OclAnd_null1",
     "[| ?X ?\<tau> ~= false ?\<tau>; ?X ?\<tau> ~= \<bottom> ?\<tau> |]
      ==> (null and ?X) ?\<tau> = null ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclAnd_null2",
     "[| ?X ?\<tau> ~= false ?\<tau>; ?X ?\<tau> ~= \<bottom> ?\<tau> |]
      ==> (?X and null) ?\<tau> = null ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclOr_null1",
     "[| ?X ?\<tau> ~= true ?\<tau>; ?X ?\<tau> ~= \<bottom> ?\<tau> |]
      ==> (null or ?X) ?\<tau> = null ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.OclOr_null2",
     "[| ?X ?\<tau> ~= true ?\<tau>; ?X ?\<tau> ~= \<bottom> ?\<tau> |]
      ==> (?X or null) ?\<tau> = null ?\<tau>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.transform2_rev",
     "ALL \<tau>.
         \<tau> \<Turnstile> \<delta> ?P &
         \<tau> \<Turnstile> \<delta> ?Q &
         (\<tau> \<Turnstile> ?P) = (\<tau> \<Turnstile> ?Q) ==>
      ?P = ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("UML_Logic.cpI1",
     "[| ALL X \<tau>. ?f X \<tau> = ?f (%_. X \<tau>) \<tau>; cp ?P |]
      ==> cp (%X. ?f (?P X))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("UML_Logic.const_imply2",
     "[| !!\<tau> \<tau>'.
            ?P \<tau> = ?P \<tau>' ==> ?Q \<tau> = ?Q \<tau>';
         const ?P |]
      ==> const ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.foundation10",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> (?\<tau> \<Turnstile> ?x and ?y) =
          (?\<tau> \<Turnstile> ?x & ?\<tau> \<Turnstile> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("UML_Logic.foundation11",
     "[| ?\<tau> \<Turnstile> \<delta> ?x;
         ?\<tau> \<Turnstile> \<delta> ?y |]
      ==> (?\<tau> \<Turnstile> ?x or ?y) =
          (?\<tau> \<Turnstile> ?x | ?\<tau> \<Turnstile> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("UML_Logic.OclNot_contrapos_nn",
     "[| ?\<tau> \<Turnstile> \<delta> ?A; ?\<tau> \<Turnstile> not ?B;
         ?\<tau> \<Turnstile> ?A ==> ?\<tau> \<Turnstile> ?B |]
      ==> ?\<tau> \<Turnstile> not ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 0, template_var 0))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)
               )],
          template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("UML_Logic.StrongEq_subst",
     "[| !!X. ?P X ?\<tau> = ?P (%_. X ?\<tau>) ?\<tau>;
         (?X \<triangleq> ?Y) ?\<tau> = true ?\<tau> |]
      ==> (?P ?X \<triangleq> ?P ?Y) ?\<tau> = true ?\<tau>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0),
            template_var 2),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 3, template_var 1)),
             template_app (template_var 3, template_var 0)),
           template_var 2),
         template_app (template_hole 1, template_var 2)))),
    ("UML_Logic.const_imply3",
     "[| !!\<tau> \<tau>'.
            [| ?P \<tau> = ?P \<tau>'; ?Q \<tau> = ?Q \<tau>' |]
            ==> ?R \<tau> = ?R \<tau>';
         const ?P; const ?Q |]
      ==> const ?R",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.const_subst",
     "[| const ?X; const ?Y; ?X ?\<tau> = ?Y ?\<tau>; cp ?P;
         ?P ?Y ?\<tau> = ?P ?Y ?\<tau>' |]
      ==> ?P ?X ?\<tau> = ?P ?X ?\<tau>'",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app (template_var 4, template_var 2),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_var 1, template_var 3), template_var 2),
          template_app
           (template_app (template_var 1, template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 4), template_var 2),
         template_app
          (template_app (template_var 1, template_var 4),
           template_var 0)))),
    ("UML_Logic.cpI2",
     "[| ALL X Y \<tau>.
            ?f X Y \<tau> = ?f (%_. X \<tau>) (%_. Y \<tau>) \<tau>;
         cp ?P; cp ?Q |]
      ==> cp (%X. ?f (?P X) (?Q X))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("UML_Logic.foundation26",
     "[| ?\<tau> \<Turnstile> \<delta> ?P; ?\<tau> \<Turnstile> \<delta> ?Q;
         ?\<tau> \<Turnstile> ?P or ?Q; ?\<tau> \<Turnstile> ?P ==> ?R;
         ?\<tau> \<Turnstile> ?Q ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("UML_Logic.const_imply4",
     "[| !!\<tau> \<tau>'.
            [| ?P \<tau> = ?P \<tau>'; ?Q \<tau> = ?Q \<tau>';
               ?R \<tau> = ?R \<tau>' |]
            ==> ?S \<tau> = ?S \<tau>';
         const ?P; const ?Q; const ?R |]
      ==> const ?S",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("UML_Logic.cpI3",
     "[| ALL X Y Z \<tau>.
            ?f X Y Z \<tau> =
            ?f (%_. X \<tau>) (%_. Y \<tau>) (%_. Z \<tau>) \<tau>;
         cp ?P; cp ?Q; cp ?R |]
      ==> cp (%X. ?f (?P X) (?Q X) (?R X))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("UML_Logic.cpI4",
     "[| ALL W X Y Z \<tau>.
            ?f W X Y Z \<tau> =
            ?f (%_. W \<tau>) (%_. X \<tau>) (%_. Y \<tau>) (%_. Z \<tau>)
             \<tau>;
         cp ?P; cp ?Q; cp ?R; cp ?S |]
      ==> cp (%X. ?f (?P X) (?Q X) (?R X) (?S X))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("UML_Logic.textbook_OclAnd",
     "I\<lbrakk>?X and ?Y\<rbrakk> ?\<tau> =
      (case I\<lbrakk>?X\<rbrakk> ?\<tau> of
       \<bottom> =>
         case I\<lbrakk>?Y\<rbrakk> ?\<tau> of \<bottom> => \<bottom>
         | \<lfloor>\<bottom>\<rfloor> => \<bottom>
         | \<lfloor>\<lfloor>True\<rfloor>\<rfloor> => \<bottom>
         | \<lfloor>\<lfloor>False\<rfloor>\<rfloor> =>
             \<lfloor>\<lfloor>False\<rfloor>\<rfloor>
       | \<lfloor>\<bottom>\<rfloor> =>
           case I\<lbrakk>?Y\<rbrakk> ?\<tau> of \<bottom> => \<bottom>
           | \<lfloor>\<bottom>\<rfloor> => \<lfloor>\<bottom>\<rfloor>
           | \<lfloor>\<lfloor>True\<rfloor>\<rfloor> =>
               \<lfloor>\<bottom>\<rfloor>
           | \<lfloor>\<lfloor>False\<rfloor>\<rfloor> =>
               \<lfloor>\<lfloor>False\<rfloor>\<rfloor>
       | \<lfloor>\<lfloor>True\<rfloor>\<rfloor> =>
           case I\<lbrakk>?Y\<rbrakk> ?\<tau> of \<bottom> => \<bottom>
           | \<lfloor>\<bottom>\<rfloor> => \<lfloor>\<bottom>\<rfloor>
           | \<lfloor>\<lfloor>y\<rfloor>\<rfloor> =>
               \<lfloor>\<lfloor>y\<rfloor>\<rfloor>
       | \<lfloor>\<lfloor>False\<rfloor>\<rfloor> =>
           \<lfloor>\<lfloor>False\<rfloor>\<rfloor>)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 7, template_hole 6), t_empty),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 0))),
           t_empty),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_var 0)))),
    ("UML_Logic.cpI5",
     "[| ALL V W X Y Z \<tau>.
            ?f V W X Y Z \<tau> =
            ?f (%_. V \<tau>) (%_. W \<tau>) (%_. X \<tau>) (%_. Y \<tau>)
             (%_. Z \<tau>) \<tau>;
         cp ?N; cp ?P; cp ?Q; cp ?R; cp ?S |]
      ==> cp (%X. ?f (?N X) (?P X) (?Q X) (?R X) (?S X))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty))))]
