   [("UML_Library.cp_intro''", "cp (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. \<delta> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. \<upsilon> ?P X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''", "cp ?P ==> cp (%X. not (?P X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->any\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->size\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->isEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "cp ?P ==> cp (%X. ?P X->notEmpty\<^sub>S\<^sub>e\<^sub>t())",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.Integer_subtype_of_Real",
     "?\<tau> \<Turnstile> \<delta> ?X ==>
      ?\<tau>
       \<Turnstile> ?X->oclAsType\<^sub>I\<^sub>n\<^sub>t(Real)->oclAsType\<^sub>R\<^sub>e\<^sub>a\<^sub>l(Integer) \<triangleq>
                    ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 0))
           ))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X \<triangleq> ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X and ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X implies ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |] ==> cp (%X. ?P X or ?Q X)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q |]
      ==> cp (%X. ?P X->including\<^sub>S\<^sub>e\<^sub>q(?Q X))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UML_Library.semantic_test2",
     "(Set{\<two>} \<doteq> null) = false ==>
      ?\<tau>
       \<Turnstile> Set{Set{\<two>},
                        null}->includes\<^sub>S\<^sub>e\<^sub>t(null)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6)),
            template_hole 5),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_hole 6))),
               template_hole 5))
           ))),
    ("UML_Library.cp_intro''",
     "[| cp ?P; cp ?Q; cp ?R |]
      ==> cp (%X. if ?P X then ?Q X else ?R X endif)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty))))]
