Loading theory "Draft.Isabelle_Cartouche_Examples" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Meta_SML" via "Draft.Init" via "Draft.Isabelle_Main0")
Loading theory "Draft.Isabelle_code_target" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Printer_init" via "Draft.Isabelle_Main1")
Loading theory "Draft.Isabelle_code_runtime" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Printer_init" via "Draft.Isabelle_Main1")
Loading theory "Draft.Templates" (required by "Draft.Printer_SMLTemplates" via "Draft.ExtrEqs")
val string_tr = fn:
   ('a * 'b -> term) ->
     (int -> 'a -> 'a) * (int -> 'b -> 'b) * 'b ->
       'a ->
         (string * Position.T -> (string * 'c) list) -> term list -> term
### theory "Draft.Isabelle_Cartouche_Examples"
### 0.038s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.Isabelle_Main0" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Meta_SML" via "Draft.Init")
structure Isabelle_Code_Target:
  sig
    val `$$ : iterm * iterm list -> iterm
    val `-> : itype * itype -> itype
    val `|==> : (vname option * itype) list * iterm -> iterm
    datatype ('a, 'b, 'c, 'd, 'e, 'f) attr
    =
         Class_Instance of 'e
       | Class_Relation of 'd
       | Constant of 'a
       | Module of 'f
       | Type_Class of 'c
       | Type_Constructor of 'b
    type const =
       {annotation: itype option,
        dicts: dict list list,
        dom: itype list, sym: Code_Symbol.T, typargs: itype list}
    datatype dict = Dict of (class * class) list * plain_dict
    val export_code_cmd:
       bool ->
         string list ->
           (((string * string) * string option) * Token.T list) list ->
             theory -> theory
    datatype iterm
    =
         ICase of
             {clauses: (iterm * iterm) list,
              primitive: iterm, term: iterm, typ: itype}
       | IConst of const
       | IVar of vname option
       | `$ of iterm * iterm
       | `|=> of (vname option * itype) * iterm
    datatype itype = ITyVar of vname | `%% of string * itype list
    val parse_classrel_ident:
       Token.T list -> (string * string) * Token.T list
    val parse_inst_ident: Token.T list -> (string * string) * Token.T list
    val parse_single_symbol_pragma:
       ('a -> 'b * Token.T list) ->
         (Token.T list -> 'c * Token.T list) ->
           (Token.T list -> 'd * Token.T list) ->
             'a -> ('c * (string * 'd option) list) * Token.T list
    val parse_symbol_pragma:
       (Token.T list -> 'a * Token.T list) ->
         (Token.T list -> 'b * Token.T list) ->
           (Token.T list -> 'c * Token.T list) ->
             (Token.T list -> 'd * Token.T list) ->
               (Token.T list -> 'e * Token.T list) ->
                 (Token.T list -> 'f * Token.T list) ->
                   Token.T list ->
                     (string * (string * 'a option) list,
                     string * (string * 'b option) list,
                     string * (string * 'c option) list,
                     (string * string) * (string * 'd option) list,
                     (string * string) * (string * 'e option) list,
                     string * (string * 'f option) list)
                     attr
                     *
                     Token.T list
    val parse_symbol_pragmas:
       (Token.T list -> 'a * Token.T list) ->
         (Token.T list -> 'b * Token.T list) ->
           (Token.T list -> 'c * Token.T list) ->
             (Token.T list -> 'd * Token.T list) ->
               (Token.T list -> 'e * Token.T list) ->
                 (Token.T list -> 'f * Token.T list) ->
                   (string * (string * 'a option) list,
                   string * (string * 'b option) list,
                   string * (string * 'c option) list,
                   (string * string) * (string * 'd option) list,
                   (string * string) * (string * 'e option) list,
                   string * (string * 'f option) list)
                   attr
                   list
                   parser
    datatype plain_dict
    =
         Dict_Const of (string * class) * dict list list
       | Dict_Var of
           {class: class, index: int, length: int, unique: bool, var: vname}
    val prep_destination: string -> {physical: bool} * (Path.T * Position.T)
    type typscheme = (vname * sort) list * itype
    eqtype vname
  end
### theory "Draft.Isabelle_Main0"
### 0.046s elapsed time, 0.144s cpu time, 0.023s GC time
Loading theory "Draft.Init" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Meta_SML")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.346s cpu time, 0.023s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Printer_SMLTemplates")
### ML warning (line 130 of "$AFP/Isabelle_Meta_Model/isabelle_home/src/Tools/Code/Isabelle_code_runtime.thy"):
### Value identifier (pr') has not been referenced.
structure Code_Runtime:
  sig
    val `$$ : iterm * iterm list -> iterm
    val `-> : itype * itype -> itype
    val `|==> : (vname option * itype) list * iterm -> iterm
    val add_eval_const: string * Pretty.T -> theory -> theory
    val add_eval_constr: string * Pretty.T -> theory -> theory
    val add_eval_tyco: string * Pretty.T -> theory -> theory
    datatype ('a, 'b, 'c, 'd, 'e, 'f) attr
    =
         Class_Instance of 'e
       | Class_Relation of 'd
       | Constant of 'a
       | Module of 'f
       | Type_Class of 'c
       | Type_Constructor of 'b
    val check_datatype:
       theory -> string -> string list option -> string * string list
    val code_reflect_cmd:
       bool ->
         (string * string list option) list ->
           string list -> string -> string option -> theory -> theory
    type const =
       {annotation: itype option,
        dicts: dict list list,
        dom: itype list, sym: Code_Symbol.T, typargs: itype list}
    datatype dict = Dict of (class * class) list * plain_dict
    val evaluation_code:
       Proof.context ->
         string ->
           Code_Thingol.program ->
             string list ->
               string list ->
                 bool ->
                   string *
                   ((string * string) list * (string * string) list)
    val exec:
       Proof.context -> bool -> string -> Context.generic -> Context.generic
    val gen_code_reflect:
       (Proof.context -> 'a -> string) ->
         (theory -> 'b -> string) ->
           bool ->
             ('a * 'b list option) list ->
               'b list -> string -> string option -> theory -> theory
    datatype iterm
    =
         ICase of
             {clauses: (iterm * iterm) list,
              primitive: iterm, term: iterm, typ: itype}
       | IConst of const
       | IVar of vname option
       | `$ of iterm * iterm
       | `|=> of (vname option * itype) * iterm
    datatype itype = ITyVar of vname | `%% of string * itype list
    datatype plain_dict
    =
         Dict_Const of (string * class) * dict list list
       | Dict_Var of
           {class: class, index: int, length: int, unique: bool, var: vname}
    val process_reflection:
       string *
       ((string * string) list *
        ((string * string) list * (string * string) list))
         -> string -> string option -> theory -> theory
    val trace: bool Config.T
    type typscheme = (vname * sort) list * itype
    eqtype vname
  end
### theory "Draft.Isabelle_code_runtime"
### 0.106s elapsed time, 0.407s cpu time, 0.023s GC time
### ML warning (line 196 of "$AFP/Isabelle_Meta_Model/isabelle_home/src/Tools/Code/Isabelle_code_target.thy"):
### Matches are not exhaustive.
structure Code_printing:
  sig
    structure Data_code: THEORY_DATA
    val apply_code_printing: theory -> theory
    val apply_code_printing_reflect: theory -> theory
    val code_empty: string
    datatype code_printing
    =
         Code_printing of
             (string * (bstring * Code_Printer.raw_const_syntax option) list
              ,
             string * (bstring * Code_Printer.tyco_syntax option) list,
             string * (bstring * string option) list,
             (string * string) * (bstring * unit option) list,
             (xstring * string) * (bstring * unit option) list,
             bstring * (bstring * (string * Code_Symbol.T list) option) list
             )
             Code_Symbol.attr
             list
    val reflect_ml: Input.source -> theory -> theory
  end
### theory "Draft.Isabelle_code_target"
### 0.213s elapsed time, 0.734s cpu time, 0.023s GC time
Loading theory "Draft.Isabelle_Main1" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML" via "Draft.Printer_init")
### theory "Draft.Isabelle_Main1"
### 0.055s elapsed time, 0.164s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.317s cpu time, 0.102s GC time
structure Cartouche_Grammar:
  sig
    val cons1: int -> term -> term
    val default:
       (string * (term * (int -> term -> term) * ('a * term -> term))) list
    val list_comb_mk: string -> int -> int -> term
    val nil1: term
  end
val parse_translation_cartouche = fn:
   binding ->
     (string * ('a * (int -> 'a -> 'a) * ('b * 'a -> term))) list ->
       (int -> 'b -> 'b) -> 'b -> Proof.context -> term list -> term
locale L
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale S
locale String
locale String\<^sub>b\<^sub>a\<^sub>s\<^sub>e
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale String
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale String
### theory "Draft.Init"
### 1.679s elapsed time, 2.557s cpu time, 0.244s GC time
Loading theory "Draft.Meta_SML" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML")
Loading theory "Draft.Printer_init" (required by "Draft.Printer_SMLTemplates" via "Draft.Printer_SML")
locale Print
  fixes To_string :: "string => String.literal"
    and To_nat :: "nat => ml_int"
### theory "Draft.Printer_init"
### 0.783s elapsed time, 1.769s cpu time, 0.541s GC time
locale SML
### theory "Draft.Meta_SML"
### 2.461s elapsed time, 4.056s cpu time, 1.413s GC time
Loading theory "Draft.Printer_SML" (required by "Draft.Printer_SMLTemplates")
locale Print
  fixes To_string :: "string => String.literal"
    and To_nat :: "nat => ml_int"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Printer_SML"
### 0.389s elapsed time, 0.427s cpu time, 0.049s GC time
Loading theory "Draft.Printer_SMLTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Printer_SMLTemplates"
### 0.374s elapsed time, 0.541s cpu time, 0.066s GC time
val it = (): unit
