Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Ugraph_Misc" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.Ugraph_Properties" via "Draft.Ugraph_Lemmas" via "Draft.Prob_Lemmas")
Loading theory "Draft.Templates" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.269s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.356s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.ExtrEqs")
theorem Lim_transform_eventually:
  fixes f :: "'a => 'b"
    and l :: "'b"
    and F :: "'a filter"
    and g :: "'a => 'b"
  assumes "(f \<longlongrightarrow> l) F"
    and "\<forall>\<^sub>F x in F. f x = g x"
  shows "(g \<longlongrightarrow> l) F"
### theory "Draft.Ugraph_Misc"
### 0.561s elapsed time, 1.270s cpu time, 0.083s GC time
Loading theory "Draft.Prob_Lemmas" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.Ugraph_Properties" via "Draft.Ugraph_Lemmas")
### theory "HOL-Library.BigO"
### 0.591s elapsed time, 1.207s cpu time, 0.083s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ugraph_PropertiesTemplates")
locale prob_space
  fixes M :: "'a measure"
  assumes "prob_space M"
locale prob_space_with_indicators
  fixes M :: "'a measure"
    and I :: "'i set"
    and A :: "'i => 'a set"
  assumes "prob_space_with_indicators M I A"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.514s elapsed time, 1.075s cpu time, 0.131s GC time
### theory "Draft.Prob_Lemmas"
### 0.687s elapsed time, 1.414s cpu time, 0.131s GC time
Loading theory "Draft.Ugraph_Lemmas" (required by "Draft.Ugraph_PropertiesTemplates" via "Draft.Ugraph_Properties")
Found termination order: "{}"
### Ambiguous input (line 369 of "$AFP/Random_Graph_Subgraph_Threshold/Ugraph_Lemmas.thy") produces 8 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>HOL.Ex_binder" ("_position" G'')
###       ("_applC"
###         ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G')
###           ("\<^const>HOL.conj" ("_position" G'')
###             ("_applC" ("_position" subgraph) ("_position" G''))))
###         ("_position" G)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("_applC"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.Ex_binder" ("_position" G'') ("_position" G'))
###         ("\<^const>HOL.conj" ("_position" G'')
###           ("_applC" ("_position" subgraph) ("_position" G''))))
###       ("_position" G))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>HOL.Ex_binder" ("_position" G'')
###       ("_applC"
###         ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G')
###           ("\<^const>HOL.conj" ("_position" G'') ("_position" subgraph)))
###         ("_cargs" ("_position" G'') ("_position" G))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("_applC"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.Ex_binder" ("_position" G'') ("_position" G'))
###         ("\<^const>HOL.conj" ("_position" G'') ("_position" subgraph)))
###       ("_cargs" ("_position" G'') ("_position" G)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>HOL.conj"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.Ex_binder" ("_position" G'') ("_position" G'))
###         ("_position" G''))
###       ("_applC" ("_position" subgraph)
###         ("_cargs" ("_position" G'') ("_position" G))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>HOL.Ex_binder" ("_position" G'')
###       ("\<^const>HOL.conj"
###         ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G')
###           ("_position" G''))
###         ("_applC" ("_position" subgraph)
###           ("_cargs" ("_position" G'') ("_position" G)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>Ugraph_Lemmas.isomorphic"
###       ("\<^const>HOL.Ex_binder" ("_position" G'') ("_position" G'))
###       ("\<^const>HOL.conj" ("_position" G'')
###         ("_applC" ("_position" subgraph)
###           ("_cargs" ("_position" G'') ("_position" G)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subgraph_isomorphic" ("_position" G') ("_position" G))
###   ("\<^const>HOL.conj" ("_applC" ("_position" uwellformed) ("_position" G))
###     ("\<^const>HOL.Ex_binder" ("_position" G'')
###       ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G')
###         ("\<^const>HOL.conj" ("_position" G'')
###           ("_applC" ("_position" subgraph)
###             ("_cargs" ("_position" G'') ("_position" G))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 608 of "$AFP/Random_Graph_Subgraph_Threshold/Ugraph_Lemmas.thy") produces 40 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" card)
###               ("_applC" ("_position" uverts) ("_position" H)))
###             ("_applC" ("_position" card)
###               ("\<^const>Ugraph_Lemmas.isomorphic"
###                 ("\<^const>HOL.implies" ("_position" V) ("_position" H))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" f) ("_position" V))
###                   ("_applC" ("_position" uverts)
###                     ("_applC" ("_position" f) ("_position" V)))))))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" card)
###             ("\<^const>Ugraph_Lemmas.isomorphic"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" uverts) ("_position" H))
###                   ("_applC" ("_position" card) ("_position" V)))
###                 ("_position" H))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" f) ("_position" V))
###                 ("_applC" ("_position" uverts)
###                   ("_applC" ("_position" f) ("_position" V))))))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" finite)
###           ("\<^const>Ugraph_Lemmas.isomorphic"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" V)
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" card)
###                     ("_applC" ("_position" uverts) ("_position" H)))
###                   ("_applC" ("_position" card) ("_position" V))))
###               ("_position" H))
###             ("\<^const>HOL.conj" ("_applC" ("_position" f) ("_position" V))
###               ("_applC" ("_position" uverts)
###                 ("_applC" ("_position" f) ("_position" V))))))
###         ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.eq"
###           ("\<^const>Ugraph_Lemmas.isomorphic"
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" card)
###                   ("_applC" ("_position" uverts) ("_position" H)))
###                 ("_applC" ("_position" card) ("_position" V)))
###               ("_position" H))
###             ("\<^const>HOL.conj" ("_applC" ("_position" f) ("_position" V))
###               ("_applC" ("_position" uverts)
###                 ("_applC" ("_position" f) ("_position" V)))))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.eq"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.All_binder" ("_position" V)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" finite) ("_position" V))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" card)
###                   ("_applC" ("_position" uverts) ("_position" H)))
###                 ("_applC" ("_position" card) ("_position" V))))
###             ("_position" H)))
###         ("\<^const>HOL.conj" ("_applC" ("_position" f) ("_position" V))
###           ("_applC" ("_position" uverts)
###             ("_applC" ("_position" f) ("_position" V)))))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.eq"
###         ("\<^const>Ugraph_Lemmas.isomorphic"
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" finite) ("_position" V))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" card)
###                   ("_applC" ("_position" uverts) ("_position" H)))
###                 ("_applC" ("_position" card) ("_position" V))))
###             ("_position" H))
###           ("\<^const>HOL.conj" ("_applC" ("_position" f) ("_position" V))
###             ("_applC" ("_position" uverts)
###               ("_applC" ("_position" f) ("_position" V)))))
###         ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" card)
###               ("_applC" ("_position" uverts) ("_position" H)))
###             ("_applC" ("_position" card) ("_position" V))))
###         ("\<^const>HOL.eq"
###           ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" H)
###             ("\<^const>HOL.conj" ("_applC" ("_position" f) ("_position" V))
###               ("_applC" ("_position" uverts)
###                 ("_applC" ("_position" f) ("_position" V)))))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" card)
###               ("_applC" ("_position" uverts) ("_position" H)))
###             ("\<^const>Ugraph_Lemmas.isomorphic"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" card) ("_position" V))
###                 ("_position" H))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" f) ("_position" V))
###                 ("_applC" ("_position" uverts)
###                   ("_applC" ("_position" f) ("_position" V))))))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" card)
###               ("_applC" ("_position" uverts) ("_position" H)))
###             ("_applC"
###               ("\<^const>Ugraph_Lemmas.isomorphic"
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" card) ("_position" V))
###                   ("_position" H))
###                 ("_position" f))
###               ("_position" V)))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" uverts)
###               ("_applC" ("_position" f) ("_position" V)))
###             ("_position" V)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_fixed_selector)
###       ("_cargs" ("_position" H) ("_position" f)))
###     ("\<^const>HOL.All_binder" ("_position" V)
###       ("\<^const>HOL.conj" ("_applC" ("_position" finite) ("_position" V))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" card)
###               ("_applC" ("_position" uverts) ("_position" H)))
###             ("_applC" ("_position" card)
###               ("\<^const>Ugraph_Lemmas.isomorphic"
###                 ("\<^const>HOL.implies" ("_position" V) ("_position" H))
###                 ("_applC" ("_position" f) ("_position" V)))))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" uverts)
###               ("_applC" ("_position" f) ("_position" V)))
###             ("_position" V)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ugraph_Lemmas"
### 0.360s elapsed time, 0.403s cpu time, 0.044s GC time
Loading theory "Draft.Ugraph_Properties" (required by "Draft.Ugraph_PropertiesTemplates")
### Ambiguous input (line 14 of "$AFP/Random_Graph_Subgraph_Threshold/Ugraph_Properties.thy") produces 9 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>Set.member"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.All_binder" ("_position" G') ("_position" G))
###         ("\<^const>HOL.implies" ("_position" G') ("_position" G')))
###       ("_position" C))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("\<^const>Set.member"
###     ("\<^const>Ugraph_Lemmas.isomorphic"
###       ("_Ball" ("_position" G) ("_position" C)
###         ("\<^const>HOL.All_binder" ("_position" G') ("_position" G)))
###       ("\<^const>HOL.implies" ("_position" G') ("_position" G')))
###     ("_position" C)))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>HOL.All_binder" ("_position" G')
###       ("\<^const>Set.member"
###         ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G)
###           ("\<^const>HOL.implies" ("_position" G') ("_position" G')))
###         ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>Ugraph_Lemmas.isomorphic"
###       ("\<^const>HOL.All_binder" ("_position" G') ("_position" G))
###       ("\<^const>HOL.implies" ("_position" G')
###         ("\<^const>Set.member" ("_position" G') ("_position" C))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("\<^const>Ugraph_Lemmas.isomorphic"
###     ("_Ball" ("_position" G) ("_position" C)
###       ("\<^const>HOL.All_binder" ("_position" G') ("_position" G)))
###     ("\<^const>HOL.implies" ("_position" G')
###       ("\<^const>Set.member" ("_position" G') ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>HOL.All_binder" ("_position" G')
###       ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G)
###         ("\<^const>HOL.implies" ("_position" G')
###           ("\<^const>Set.member" ("_position" G') ("_position" C)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>HOL.implies"
###       ("\<^const>Ugraph_Lemmas.isomorphic"
###         ("\<^const>HOL.All_binder" ("_position" G') ("_position" G))
###         ("_position" G'))
###       ("\<^const>Set.member" ("_position" G') ("_position" C)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("\<^const>HOL.implies"
###     ("\<^const>Ugraph_Lemmas.isomorphic"
###       ("_Ball" ("_position" G) ("_position" C)
###         ("\<^const>HOL.All_binder" ("_position" G') ("_position" G)))
###       ("_position" G'))
###     ("\<^const>Set.member" ("_position" G') ("_position" C))))
### ("\<^const>Pure.eq" ("_applC" ("_position" ugraph_property) ("_position" C))
###   ("_Ball" ("_position" G) ("_position" C)
###     ("\<^const>HOL.All_binder" ("_position" G')
###       ("\<^const>HOL.implies"
###         ("\<^const>Ugraph_Lemmas.isomorphic" ("_position" G)
###           ("_position" G'))
###         ("\<^const>Set.member" ("_position" G') ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ugraph_Properties"
### 0.075s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.Ugraph_PropertiesTemplates"
val templateLemmas =
   [("Ugraph_Properties.is_thresholdI",
     "[| ugraph_property ?c;
         !!p. [| nonzero_prob_fun p; p \<lless> ?t |]
              ==> prob_in_class p ?c \<longlonglongrightarrow> 0;
         !!p. [| nonzero_prob_fun p; ?t \<lless> p |]
              ==> prob_in_class p ?c \<longlonglongrightarrow> 1 |]
      ==> is_threshold ?c ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 1)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Ugraph_PropertiesTemplates"
### 1.516s elapsed time, 2.216s cpu time, 0.603s GC time
val it = (): unit
