Loading theory "Draft.TypeIds" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype" via "Draft.DirectSubtypes" via "Draft.JavaType")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.593s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.788s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.278s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.TypeIds"
### 1.186s elapsed time, 4.568s cpu time, 0.867s GC time
Loading theory "Draft.JavaType" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype" via "Draft.DirectSubtypes")
### theory "HOL-Library.BigO"
### 0.981s elapsed time, 3.734s cpu time, 0.831s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.058s elapsed time, 3.876s cpu time, 0.795s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.970s elapsed time, 6.130s cpu time, 1.073s GC time
Loading theory "Draft.Templates" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.164s cpu time, 0.061s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StorePropertiesMoreTemplates")
consts
  isprimitive :: "Javatype => bool"
consts
  isclass :: "Javatype => bool"
### theory "Draft.JavaType"
### 1.206s elapsed time, 2.745s cpu time, 0.303s GC time
Loading theory "Draft.DirectSubtypes" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype")
### theory "Draft.DirectSubtypes"
### 0.251s elapsed time, 0.766s cpu time, 0.629s GC time
Loading theory "Draft.Subtype" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes")
instantiation
  Javatype :: order
  less_eq_Javatype == less_eq :: Javatype => Javatype => bool
  less_Javatype == less :: Javatype => Javatype => bool
val widen_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Subtype"
### 0.096s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.Attributes" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep")
Loading theory "Draft.Value" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.754s elapsed time, 1.977s cpu time, 0.679s GC time
### theory "Draft.Value"
### 0.705s elapsed time, 1.675s cpu time, 0.179s GC time
### theory "Draft.Attributes"
### 0.847s elapsed time, 1.857s cpu time, 0.230s GC time
Loading theory "Draft.AttributesIndep" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store" via "Draft.Location")
### theory "Draft.AttributesIndep"
### 0.025s elapsed time, 0.028s cpu time, 0.000s GC time
Loading theory "Draft.Location" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties" via "Draft.Store")
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "arrV"
### No equation for constructor "nullV"
consts
  loc :: "Value => AttId => Location"
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "objV"
### No equation for constructor "nullV"
consts
  arr_len :: "Value => Location"
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "objV"
### No equation for constructor "nullV"
consts
  arr_loc :: "Value => nat => Location"
### theory "Draft.Location"
### 0.520s elapsed time, 0.561s cpu time, 0.055s GC time
Loading theory "Draft.Store" (required by "Draft.StorePropertiesMoreTemplates" via "Draft.StoreProperties")
overloading
  alive \<equiv> alive :: Value => Store => bool
overloading
  access \<equiv> access :: Store => Location => Value
  update \<equiv> update :: Store => Location => Value => Store
  alloc \<equiv> alloc :: Store => New => Store
  new \<equiv> new :: Store => New => Value
### theory "Draft.Store"
### 0.569s elapsed time, 0.626s cpu time, 0.077s GC time
Loading theory "Draft.StoreProperties" (required by "Draft.StorePropertiesMoreTemplates")
Proofs for inductive predicate(s) "reach"
  Proving monotonicity ...
### Ambiguous input (line 692 of "$AFP/JiveDataStoreModel/Isabelle_Store/StoreProperties.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###     ("_sModify" ("_position" s)
###       ("_smodifybind" ("_position" l) ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("_sModify"
###     ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###       ("_position" s))
###     ("_smodifybind" ("_position" l) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 708 of "$AFP/JiveDataStoreModel/Isabelle_Store/StoreProperties.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###     ("_sModify" ("_position" s) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("_sModify"
###     ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###       ("_position" s))
###     ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Store :: order
  less_eq_Store == less_eq :: Store => Store => bool
  less_Store == less :: Store => Store => bool
### Ambiguous input (line 932 of "$AFP/JiveDataStoreModel/Isabelle_Store/StoreProperties.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###     ("_sModify" ("_position" s) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("_sModify"
###     ("\<^const>StoreProperties.xeq_syntax" ("_position" s) ("_position" x)
###       ("_position" s))
###     ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "treach"
  Proving monotonicity ...
### theory "Draft.StoreProperties"
### 0.438s elapsed time, 1.082s cpu time, 0.897s GC time
Loading theory "Draft.StorePropertiesMoreTemplates"
val templateLemmas =
   [("StoreProperties.lessalive_refl", "?s \<lless> ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("StoreProperties.xeq1_refl", "?s \<equiv>[?x] ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("StoreProperties.unreachable_Null_simp",
     "~ ?s\<turnstile> ?l reachable_from nullV",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0)
             )
         )),
    ("StoreProperties.lessalive_alloc",
     "?s \<lless> ?s\<langle>?t\<rangle>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("StoreProperties.unreachable_from_init",
     "~ ?s\<turnstile> ?l reachable_from init ?T",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("StoreProperties.unreachStatic",
     "~ ?s\<turnstile> staticLoc ?f reachable_from ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0)
             )
         )),
    ("StoreProperties.unreachable_NullE",
     "?s\<turnstile> ?l reachable_from nullV ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("StoreProperties.reachArrLen",
     "?s\<turnstile> arrLenLoc ?T ?a reachable_from arrV ?T ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("StoreProperties.reachable_isRef",
     "?s\<turnstile> ?l reachable_from ?x ==> isRefV ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("StoreProperties.unreachStaticE",
     "?s\<turnstile> staticLoc ?f reachable_from ?x ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("StoreProperties.xeq1_sym", "?s \<equiv>[?x] ?t = ?t \<equiv>[?x] ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("StoreProperties.reachArrLoc",
     "?s\<turnstile> arrLoc ?T ?a ?i reachable_from arrV ?T ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))
         )),
    ("StoreProperties.val_ArrLen_IntgT",
     "isArrLenLoc ?l ==> \<tau> ?s@@?l = IntgT",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("StoreProperties.reach6",
     "isprimitive \<tau> ?x ==> ~ ?s\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("StoreProperties.unreachable_Null",
     "?s\<turnstile> ?l reachable_from ?x ==> ?x ~= nullV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("StoreProperties.xeq1_sym'",
     "?s \<equiv>[?x] ?t ==> ?t \<equiv>[?x] ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("StoreProperties.reach_alloc",
     "?s\<langle>?t\<rangle>\<turnstile> ?l reachable_from ?x =
      ?s\<turnstile> ?l reachable_from ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_var 0))),
    ("StoreProperties.Xequ4'",
     "alive ?x ?s ==> ?s \<equiv>[?x] ?s\<langle>?t\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("StoreProperties.reach_impl_treach",
     "?s\<turnstile> ?l reachable_from ?x ==> treach \<tau> ?x (ltype ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("StoreProperties.disj3",
     "alive ?x ?s ==>
      StoreProperties.disj ?x (new ?s ?t) (?s\<langle>?t\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("StoreProperties.treach_ref_l",
     "ref ?l ~= nullV ==> treach \<tau> ref ?l (ltype ?l)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("StoreProperties.lessalive2",
     "[| ?s \<lless> ?t; alive ?x ?s |] ==> alive ?x ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("StoreProperties.lessalive_antisym",
     "[| ?s \<lless> ?t; ?t \<lless> ?s |] ==> ?s = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("StoreProperties.lessalive_trans",
     "[| ?s \<lless> ?t; ?t \<lless> ?w |] ==> ?s \<lless> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("StoreProperties.access_alloc'",
     "~ isArrLenLoc ?l ==> ?s\<langle>?t\<rangle>@@?l = ?s@@?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("StoreProperties.reachObjLoc",
     "?C = cls ?cf ==>
      ?s\<turnstile> objLoc ?cf ?a reachable_from objV ?C ?a",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("StoreProperties.xeq3",
     "~ ?s\<turnstile> ?l reachable_from ?x ==>
      ?s \<equiv>[?x] ?s\<langle>?l := ?y\<rangle>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("StoreProperties.xeq4",
     "?x ~= new ?s ?t ==> ?s \<equiv>[?x] ?s\<langle>?t\<rangle>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("StoreProperties.not_treach_ref_impl_not_reach",
     "~ treach \<tau> ?x \<tau> ref ?l ==>
      ~ ?s\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("StoreProperties.xeq5",
     "?s \<equiv>[?x] ?t ==>
      ?s\<turnstile> ?l reachable_from ?x =
      ?t\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("StoreProperties.treach_ref_l'",
     "ref ?l ~= nullV ==> treach \<tau> ref ?l \<tau> ?s@@?l",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("StoreProperties.reach2",
     "~ ?s\<turnstile> ?l reachable_from ?x ==>
      ~ ?s\<langle>?l := ?y\<rangle>\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("StoreProperties.alive_reach_alive",
     "[| alive ?x ?s; ?s\<turnstile> ?l reachable_from ?x |]
      ==> alive (ref ?l) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("StoreProperties.ref_reach_unalive",
     "[| ~ alive ?x ?s; ?s\<turnstile> ?l reachable_from ?x |]
      ==> ?x = ref ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("StoreProperties.xeq1_trans",
     "[| ?s \<equiv>[?x] ?t; ?t \<equiv>[?x] ?r |] ==> ?s \<equiv>[?x] ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("StoreProperties.reach4",
     "~ ?s\<turnstile> ?l reachable_from ref ?k ==>
      ?k ~= ?l | ref ?k = nullV",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0)),
               template_hole 0))
           ))),
    ("StoreProperties.reachable_from_ArrLoc_impl_Arr",
     "?s\<turnstile> ?l reachable_from (?s@@arrLoc ?T ?a ?i) ==>
      ?s\<turnstile> ?l reachable_from arrV ?T ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("StoreProperties.disj4'",
     "StoreProperties.disj (arrV ?T ?a) ?y ?s ==>
      StoreProperties.disj (?s@@arrV ?T ?a.[?i]) ?y ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 2, template_var 4),
                         template_var 3)),
                     template_var 0))),
               template_var 2),
             template_var 1)
           ))),
    ("StoreProperties.lessalive_update",
     "[| ?s \<lless> ?t; ~ alive (ref ?l) ?t |]
      ==> ?s \<lless> ?t\<langle>?l := ?x\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("StoreProperties.reach_update",
     "~ ?s\<turnstile> ?l reachable_from ?x ==>
      ?s\<langle>?l := ?y\<rangle>\<turnstile> ?k reachable_from ?x =
      ?s\<turnstile> ?k reachable_from ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0),
           template_var 2)))),
    ("StoreProperties.disjI1",
     "(!!l. ?s\<turnstile> l reachable_from ?x ==>
            ~ ?s\<turnstile> l reachable_from ?y) ==>
      StoreProperties.disj ?x ?y ?s",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("StoreProperties.disjI2",
     "(!!l. ?s\<turnstile> l reachable_from ?y ==>
            ~ ?s\<turnstile> l reachable_from ?x) ==>
      StoreProperties.disj ?x ?y ?s",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("StoreProperties.lessalive3",
     "[| ?s \<lless> ?t; alive ?x ?s | ~ alive ?x ?t |]
      ==> ?s \<equiv>[?x] ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("StoreProperties.treach1",
     "[| \<tau> ?x <= ?T; ~ treach ?T \<tau> ref ?l |]
      ==> ~ ?s\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 1, template_var 1)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 3)
               )
           ))),
    ("StoreProperties.loc_new_reach",
     "[| ref ?l = new ?s ?t; ?s\<turnstile> ?l reachable_from ?x |]
      ==> ?x = new ?s ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("StoreProperties.reach3",
     "[| ~ ?s\<turnstile> ?k reachable_from ?y;
         ~ ?s\<turnstile> ?k reachable_from ?x |]
      ==> ~ ?s\<langle>?l := ?y\<rangle>\<turnstile> ?k reachable_from ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0),
                       template_var 2)),
                   template_var 3),
                 template_var 1)
               )
           ))),
    ("StoreProperties.reachable_from_ObjLoc_impl_Obj",
     "[| ?s\<turnstile> ?l reachable_from (?s@@objLoc ?cf ?a);
         ?C = cls ?cf |]
      ==> ?s\<turnstile> ?l reachable_from objV ?C ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("StoreProperties.xeq2",
     "[| ALL x. ?s \<equiv>[x] ?t;
         ALL f. ?s@@staticLoc f = ?t@@staticLoc f |]
      ==> ?s = ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("StoreProperties.reach9",
     "ALL l.
         ?s1.0\<turnstile> l reachable_from ?x --> ?s1.0@@l = ?s2.0@@l ==>
      ?s1.0\<turnstile> ?l reachable_from ?x =
      ?s2.0\<turnstile> ?l reachable_from ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_var 2)))),
    ("StoreProperties.disj4",
     "[| StoreProperties.disj (objV ?C ?a) ?y ?s; CClassT ?C <= dtype ?f |]
      ==> StoreProperties.disj (?s@@objV ?C ?a..?f) ?y ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 4),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 5, template_var 4),
                         template_var 3)),
                     template_var 0))),
               template_var 2),
             template_var 1)
           ))),
    ("StoreProperties.disj2",
     "[| StoreProperties.disj ?x ?y ?s; StoreProperties.disj ?x ?z ?s;
         ~ ?s\<turnstile> ?l reachable_from ?x |]
      ==> StoreProperties.disj ?x ?y (?s\<langle>?l := ?z\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 0),
                  template_var 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("StoreProperties.disj1",
     "[| StoreProperties.disj ?x ?y ?s;
         ~ ?s\<turnstile> ?l reachable_from ?x;
         ~ ?s\<turnstile> ?l reachable_from ?y |]
      ==> StoreProperties.disj ?x ?y (?s\<langle>?l := ?z\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("StoreProperties.lessaliveI",
     "[| !!x. alive x ?s ==> ?s \<equiv>[x] ?t;
         !!f. ?s@@staticLoc f = ?t@@staticLoc f |]
      ==> ?s \<lless> ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("StoreProperties.xeqI",
     "[| alive ?x ?s = alive ?x ?t;
         !!l. ?s\<turnstile> l reachable_from ?x ==> ?s@@l = ?t@@l |]
      ==> ?s \<equiv>[?x] ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("StoreProperties.disj_cases",
     "[| StoreProperties.disj ?x ?y ?s;
         !!l. ~ ?s\<turnstile> l reachable_from ?x ==> ?P;
         !!l. ~ ?s\<turnstile> l reachable_from ?y ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.StorePropertiesMoreTemplates"
### 0.452s elapsed time, 0.596s cpu time, 0.046s GC time
val it = (): unit
