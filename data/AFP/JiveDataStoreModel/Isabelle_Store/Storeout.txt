Loading theory "Draft.TypeIds" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype" via "Draft.DirectSubtypes" via "Draft.JavaType")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.601s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.785s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.265s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.014s elapsed time, 3.870s cpu time, 0.784s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeIds"
### 1.253s elapsed time, 4.819s cpu time, 0.871s GC time
Loading theory "Draft.JavaType" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype" via "Draft.DirectSubtypes")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.026s elapsed time, 3.820s cpu time, 0.755s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 6.092s cpu time, 1.023s GC time
Loading theory "Draft.Templates" (required by "Draft.StoreMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StoreMoreTemplates")
consts
  isprimitive :: "Javatype => bool"
consts
  isclass :: "Javatype => bool"
### theory "Draft.JavaType"
### 1.170s elapsed time, 2.574s cpu time, 0.270s GC time
Loading theory "Draft.DirectSubtypes" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes" via "Draft.Subtype")
### theory "Draft.DirectSubtypes"
### 0.268s elapsed time, 0.829s cpu time, 0.687s GC time
Loading theory "Draft.Subtype" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep" via "Draft.Attributes")
instantiation
  Javatype :: order
  less_eq_Javatype == less_eq :: Javatype => Javatype => bool
  less_Javatype == less :: Javatype => Javatype => bool
val widen_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Subtype"
### 0.095s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.Attributes" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location" via "Draft.AttributesIndep")
Loading theory "Draft.Value" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.791s elapsed time, 2.084s cpu time, 0.820s GC time
### theory "Draft.Value"
### 0.703s elapsed time, 1.620s cpu time, 0.165s GC time
### theory "Draft.Attributes"
### 0.829s elapsed time, 1.791s cpu time, 0.218s GC time
Loading theory "Draft.AttributesIndep" (required by "Draft.StoreMoreTemplates" via "Draft.Store" via "Draft.Location")
### theory "Draft.AttributesIndep"
### 0.025s elapsed time, 0.028s cpu time, 0.000s GC time
Loading theory "Draft.Location" (required by "Draft.StoreMoreTemplates" via "Draft.Store")
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "arrV"
### No equation for constructor "nullV"
consts
  loc :: "Value => AttId => Location"
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "objV"
### No equation for constructor "nullV"
consts
  arr_len :: "Value => Location"
### No equation for constructor "boolV"
### No equation for constructor "intgV"
### No equation for constructor "shortV"
### No equation for constructor "byteV"
### No equation for constructor "objV"
### No equation for constructor "nullV"
consts
  arr_loc :: "Value => nat => Location"
### theory "Draft.Location"
### 0.516s elapsed time, 0.560s cpu time, 0.058s GC time
Loading theory "Draft.Store" (required by "Draft.StoreMoreTemplates")
overloading
  alive \<equiv> alive :: Value => Store => bool
overloading
  access \<equiv> access :: Store => Location => Value
  update \<equiv> update :: Store => Location => Value => Store
  alloc \<equiv> alloc :: Store => New => Store
  new \<equiv> new :: Store => New => Value
### theory "Draft.Store"
### 0.573s elapsed time, 0.632s cpu time, 0.080s GC time
Loading theory "Draft.StoreMoreTemplates"
val templateLemmas =
   [("Store.always_welltyped_store", "wts ?OS",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Store.alive_trivial_simps", "alive nullV ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Store.alive_trivial_simps", "alive (boolV ?b) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Store.alive_trivial_simps", "alive (byteV ?by) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Store.alive_trivial_simps", "alive (intgV ?i) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Store.alive_trivial_simps", "alive (shortV ?sh) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Store.alive_init", "alive (init ?T) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Store.isNewArr_simps", "isNewArr (new_instance ?C) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Store.alive_access", "alive (?s@@?l) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)
         )),
    ("Store.new_unalive_old_Store", "~ alive (new ?s ?t) ?s",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1)
             )
         )),
    ("Store.isNewArr_simps", "isNewArr (new_array ?T ?l) = True",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Store.typeofNew_simps", "typeofNew (new_instance ?C) = CClassT ?C",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Store.typeofNew_simps", "typeofNew (new_array ?T ?l) = ArrT ?T",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Store.typeof_new", "\<tau> new ?s ?t = typeofNew ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Store.access_type_safe", "\<tau> ?s@@?l <= ltype ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Store.new_alive_alloc", "alive (new ?s ?t) (?s\<langle>?t\<rangle>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Store.alive_primitive", "isprimitive \<tau> ?x ==> alive ?x ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Store.alive_update_invariant",
     "alive ?x (?s\<langle>?l := ?y\<rangle>) = alive ?x ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 3), template_var 2))),
    ("Store.aliveImpl_vals_independent",
     "aliveImpl ?x (?s(| vals := ?z |)) = aliveImpl ?x ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Store.new_update",
     "new (?s\<langle>?l := ?x\<rangle>) ?t = new ?s ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 3), template_var 0))),
    ("Store.alive_alloc_propagation",
     "alive ?x ?s ==> alive ?x (?s\<langle>?t\<rangle>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Store.update_unalive_val",
     "~ alive ?x ?s ==> ?s\<langle>?l := ?x\<rangle> = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 1))),
    ("Store.all_le_eq", "(ALL a. (a < ?d) = (a < ?c)) = (?d = ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Store.ref_arr_len_new",
     "ref (arr_len (new ?s (new_array ?T ?n))) = new ?s (new_array ?T ?n)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Store.all_le_eq_imp_eq", "(ALL a. (a < ?d) = (a < ?c)) --> ?d = ?c",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Store.alive_arr_len",
     "isArrV ?x ==> alive (ref (arr_len ?x)) ?s = alive ?x ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Store.update_unalive_loc",
     "~ alive (ref ?l) ?s ==> ?s\<langle>?l := ?x\<rangle> = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Store.ref_arr_loc_new",
     "ref (new ?s (new_array ?T ?n).[?i]) = new ?s (new_array ?T ?n)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Store.alive_arr_loc",
     "isArrV ?x ==> alive (ref (?x.[?i])) ?s = alive ?x ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Store.access_unalive",
     "~ alive (ref ?l) ?s ==> ?s@@?l = init (ltype ?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Store.update_type_mismatch",
     "~ \<tau> ?x <= ltype ?l ==> ?s\<langle>?l := ?x\<rangle> = ?s",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 2),
         template_var 0))),
    ("Store.alive_alloc_exhaust",
     "alive ?x (?s\<langle>?t\<rangle>) = (alive ?x ?s | ?x = new ?s ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Store.access_arr_len_new_alloc",
     "?s\<langle>new_array ?T
                  ?l\<rangle>@@arr_len (new ?s (new_array ?T ?l)) =
      intgV (int ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Store.access_update_other",
     "?l ~= ?m ==> ?s\<langle>?l := ?x\<rangle>@@?m = ?s@@?m",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Store.value_array_inhabitants",
     "(ALL x. \<tau> x = ArrT ?typeId --> ?P x) =
      (ALL a. ?P (arrV ?typeId a))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Store.value_class_inhabitants",
     "(ALL x. \<tau> x = CClassT ?typeId --> ?P x) =
      (ALL a. ?P (objV ?typeId a))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Store.ref_loc_new",
     "CClassT ?C <= dtype ?f ==>
      ref (new ?s (new_instance ?C)..?f) = new ?s (new_instance ?C)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("Store.alloc_new_instance_in_Store",
     "Rep_Store ?s
      (| newOID :=
           %D. if ?C = D then Suc (newOID (Rep_Store ?s) ?C)
               else newOID (Rep_Store ?s) D |)
      : Store",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Store.le_Suc_eq",
     "(ALL a. (a < Suc ?n) = (a < Suc ?m)) = (ALL a. (a < ?n) = (a < ?m))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Store.access_alloc",
     "isNewArr ?t --> ?l ~= arr_len (new ?s ?t) ==>
      ?s\<langle>?t\<rangle>@@?l = ?s@@?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_var 2)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Store.alive_loc",
     "[| isObjV ?x; \<tau> ?x <= dtype ?f |]
      ==> alive (ref (?x..?f)) ?s = alive ?x ?s",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Store.new_eq",
     "(new ?s1.0 ?t = new ?s2.0 ?t) =
      (ALL x. \<tau> x = typeofNew ?t --> alive x ?s1.0 = alive x ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1)),
       template_app (template_hole 5, t_empty))),
    ("Store.Store_eqI",
     "[| ALL x. alive x ?s1.0 = alive x ?s2.0; ALL l. ?s1.0@@l = ?s2.0@@l |]
      ==> ?s1.0 = ?s2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Store.update_access_same",
     "[| alive (ref ?l) ?s; alive ?x ?s; \<tau> ?x <= ltype ?l |]
      ==> ?s\<langle>?l := ?x\<rangle>@@?l = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 2),
         template_var 0))),
    ("Store.alive_alloc_cases",
     "[| alive ?x (?s\<langle>?t\<rangle>); alive ?x ?s ==> ?P;
         ?x = new ?s ?t ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Store.access_new",
     "[| ref ?l = new ?s ?t; isNewArr ?t --> ?l ~= arr_len (new ?s ?t) |]
      ==> ?s\<langle>?t\<rangle>@@?l = init (ltype ?l)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 9, template_var 1),
                      template_var 0)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("Store.comm",
     "[| ref ?l ~= new ?s ?t; ?x ~= new ?s ?t |]
      ==> ?s\<langle>?t, ?l := ?x\<rangle> = ?s
          \<langle>?l := ?x, ?t\<rangle>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 0)),
           template_var 1)))),
    ("Store.vals_update_in_Store",
     "[| alive (ref ?l) ?s; alive ?y ?s; \<tau> ?y <= ltype ?l |]
      ==> Rep_Store ?s(| vals := (vals (Rep_Store ?s))(?l := ?y) |)
          : Store",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("Store.alloc_new_array_in_Store",
     "Rep_Store ?s
      (| newAID :=
           %S. if ?T = S then Suc (newAID (Rep_Store ?s) ?T)
               else newAID (Rep_Store ?s) S,
         vals := (vals (Rep_Store ?s))
           (arrLenLoc ?T (newAID (Rep_Store ?s) ?T) := intgV (int ?n)) |)
      : Store",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, t_empty),
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app (template_hole 9, template_var 2)))),
           template_hole 0)
         )),
    ("Store.update_induct",
     "[| ?P ?s;
         [| alive (ref ?l) ?s; alive ?v ?s; \<tau> ?v <= ltype ?l |]
         ==> ?P (Abs_Store
                  (Rep_Store ?s
                   (| vals := (vals (Rep_Store ?s))(?l := ?v) |))) |]
      ==> ?P (?s\<langle>?l := ?v\<rangle>)",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 1)),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_var 2)
                 )],
            template_implication
             ([template_inequation
                (less_equals,
                 template_app (template_hole 7, template_var 0),
                 template_app (template_hole 6, template_var 1))],
              template_predicate
               (
                  template_app
                   (template_var 3,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, t_empty),
                        template_app (template_hole 1, template_var 2))))
                  ))))],
       template_predicate
        (
           template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.StoreMoreTemplates"
### 0.667s elapsed time, 1.484s cpu time, 0.930s GC time
val it = (): unit
