Loading theory "HOL-Library.FuncSet" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.556s cpu time, 0.050s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.298s elapsed time, 1.199s cpu time, 0.127s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.384s elapsed time, 1.538s cpu time, 0.127s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.Nat_Bijection"
### 0.297s elapsed time, 1.162s cpu time, 0.158s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.471s elapsed time, 1.871s cpu time, 0.208s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.782s cpu time, 0.082s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Algebra.Congruence"
### 0.934s elapsed time, 3.491s cpu time, 0.843s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.237s cpu time, 0.848s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
Found termination order: "size <*mlex*> {}"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.953s elapsed time, 3.756s cpu time, 0.392s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
### theory "HOL-Library.BigO"
### 1.204s elapsed time, 4.581s cpu time, 1.444s GC time
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.584s elapsed time, 9.548s cpu time, 2.376s GC time
Loading theory "Draft.Templates" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.ExtrEqs")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.251s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pratt_CertificateMoreTemplates")
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.119s elapsed time, 3.658s cpu time, 1.347s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.634s elapsed time, 1.925s cpu time, 0.156s GC time
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
### theory "HOL-Algebra.Complete_Lattice"
### 0.613s elapsed time, 1.651s cpu time, 0.163s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.309s elapsed time, 14.308s cpu time, 3.899s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 2.063s elapsed time, 5.539s cpu time, 3.039s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.498s elapsed time, 1.568s cpu time, 0.276s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "HOL-Algebra.Coset"
### 1.172s elapsed time, 3.651s cpu time, 0.560s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.671s elapsed time, 2.115s cpu time, 0.390s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.498s elapsed time, 1.544s cpu time, 0.191s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.522s elapsed time, 7.200s cpu time, 1.022s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.351s elapsed time, 4.181s cpu time, 0.521s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.411s elapsed time, 17.998s cpu time, 3.817s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.319s elapsed time, 6.297s cpu time, 0.709s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.563s elapsed time, 3.337s cpu time, 0.412s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.651s elapsed time, 1.372s cpu time, 0.136s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.254s elapsed time, 15.610s cpu time, 2.013s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
### theory "HOL-Computational_Algebra.Primes"
### 0.250s elapsed time, 0.619s cpu time, 0.210s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Number_Theory.Cong"
### 0.664s elapsed time, 1.392s cpu time, 0.120s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues")
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
consts
  totient_naive :: "nat => nat => nat => nat"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Totient"
### 0.435s elapsed time, 0.961s cpu time, 0.134s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Algebra.UnivPoly"
### 6.977s elapsed time, 14.368s cpu time, 2.206s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer" via "HOL-Number_Theory.Residues")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 1.917s elapsed time, 2.504s cpu time, 0.456s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate" via "Lehmer.Lehmer")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.209s elapsed time, 1.395s cpu time, 0.209s GC time
Loading theory "Lehmer.Lehmer" (required by "Draft.Pratt_CertificateMoreTemplates" via "Draft.Pratt_Certificate")
### theory "Lehmer.Lehmer"
### 0.059s elapsed time, 0.059s cpu time, 0.000s GC time
Loading theory "Draft.Pratt_Certificate" (required by "Draft.Pratt_CertificateMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
locale efficient_power
  fixes f :: "'a => 'a => 'a"
  assumes "efficient_power f"
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature PRATT =
  sig
    exception INVALID_CERT of cert
    datatype cert = Pratt_Node of int * int * cert list
    val certT: typ
    val cert_cartouche: cert parser
    val check_cert: cert -> bool
    val get_cert_number: cert -> int
    val mk_cert: int -> cert option
    val pretty_cert: cert -> Pretty.T
    type prime_thm_cache = (int * thm) list
    val prove_prime:
       prime_thm_cache ->
         int -> Proof.context -> thm option * prime_thm_cache
    val read_cert: Input.source -> cert
    val replay_cert:
       prime_thm_cache -> cert -> Proof.context -> thm * prime_thm_cache
    val replay_cert_code: cert -> Proof.context -> thm
    val setup_valid_cert_code_conv:
       (Proof.context -> conv) -> Context.generic -> Context.generic
    val tac: tac_config -> cert option -> Proof.context -> int -> tactic
    type tac_config = {cache: prime_thm_cache, code: bool, verbose: bool}
    val tac_config_parser: tac_config parser
    val termify_cert: cert -> term
    val untermify_cert: term -> cert
  end
structure Pratt: PRATT
### theory "Draft.Pratt_Certificate"
### 1.457s elapsed time, 1.672s cpu time, 0.264s GC time
Loading theory "Draft.Pratt_CertificateMoreTemplates"
val templateLemmas =
   [("Pratt_Certificate.check_prime_factors_subset_0",
     "~ check_prime_factors_subset 0 ?ps",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat 0 1 ?m' = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_hole 1)),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat ?b' ?e' 1 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat 0 (Suc 0) ?m' = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_hole 1)),
         template_var 0),
       template_hole 1)),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat 0 (numeral ?e) ?m' = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_hole 1)),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat ?b' ?e' (Suc 0) = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("Pratt_Certificate.eval_mod_exp_nat_aux",
     "mod_exp_nat_aux ?m ?y ?x 0 = ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 1)),
    ("Pratt_Certificate.valid_pratt_tree_imp_prime",
     "valid_pratt_tree ?t ==> prime (pratt_tree_number ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat 1 ?e' ?m' = 1 mod ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Pratt_Certificate.eval_mod_exp",
     "mod_exp_nat ?b' 1 ?m' = ?b' mod ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat ?b' 0 ?m' = 1 mod ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Pratt_Certificate.eval_mod_exp", "mod_exp_nat ?b' ?e' 0 = ?b' ^ ?e'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Pratt_Certificate.eval_mod_exp",
     "mod_exp_nat ?b' (Suc 0) ?m' = ?b' mod ?m'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Pratt_Certificate.eval_mod_exp",
     "mod_exp_nat (Suc 0) ?e' ?m' = 1 mod ?m'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Pratt_Certificate.check_prime_factors_subset_Cons",
     "check_prime_factors_subset 1 (?p # ?ps) =
      check_prime_factors_subset 1 ?ps",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Pratt_Certificate.length_fpc",
     "length (build_fpc ?p ?a ?r ?qs) = length ?qs + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Pratt_Certificate.check_prime_factors_subset_Cons",
     "check_prime_factors_subset (Suc 0) (?p # ?ps) =
      check_prime_factors_subset (Suc 0) ?ps",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0))),
    ("Pratt_Certificate.prime_factors_of_prime",
     "prime ?p ==> prime_factors ?p = {?p}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Pratt_Certificate.valid_cert_concatI",
     "ALL x:set ?xs. valid_cert x ==> valid_cert (concat ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pratt_Certificate.mod_exp_nat_code",
     "mod_exp_nat ?b ?e ?m = mod_exp_nat_aux ?m 1 ?b ?e mod ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Pratt_Certificate.eval_mod_exp_nat_aux",
     "mod_exp_nat_aux ?m ?y ?x (Suc 0) = ?x * ?y mod ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 2))),
    ("Pratt_Certificate.valid_cert_appendI",
     "[| valid_cert ?r; valid_cert ?s |] ==> valid_cert (?r @ ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pratt_Certificate.pratt",
     "prime ?p = (EX c. Prime ?p : set c & valid_cert c)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Pratt_Certificate.Suc_0_eq_Suc_0_mod_iff",
     "(Suc 0 = Suc 0 mod ?n) = (?n ~= Suc 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_hole 2)),
           template_var 0)),
       template_negation
        (
           template_equation
            (template_var 0,
             template_app (template_hole 3, template_hole 2))
           ))),
    ("Pratt_Certificate.Suc_0_mod_eq_Suc_0_iff",
     "(Suc 0 mod ?n = Suc 0) = (?n ~= Suc 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_negation
        (
           template_equation
            (template_var 0,
             template_app (template_hole 2, template_hole 1))
           ))),
    ("Pratt_Certificate.prod_list_ge",
     "ALL x:set ?xs. 1 <= x ==> 1 <= prod_list ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Pratt_Certificate.pratt_primeI",
     "[| valid_cert ?xs; Prime ?p : set ?xs |] ==> prime ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pratt_Certificate.list_all_ConsI",
     "[| ?P ?x; list_all ?P ?xs |] ==> list_all ?P (?x # ?xs)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pratt_Certificate.pratt_triple_1",
     "[| 1 < ?p; ?x = 1 |] ==> pratt_triple ?p ?a ?x",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_equation (template_var 1, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Pratt_Certificate.mod_exp_nat_aux_correct",
     "mod_exp_nat_aux ?m ?y ?x ?n mod ?m = ?x ^ ?n * ?y mod ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 3),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_var 3))),
    ("Pratt_Certificate.div_gt_0",
     "[| ?m <= ?n; 0 < ?m |] ==> 0 < ?n div ?m",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Pratt_Certificate.prime_gt_3_impl_p_minus_one_not_prime",
     "[| prime ?p; 3 < ?p |] ==> ~ prime (?p - 1)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))
               )
           ))),
    ("Pratt_Certificate.check_prime_factors_subset_correct",
     "[| check_prime_factors_subset ?n ?ps; list_all prime ?ps |]
      ==> prime_factors ?n <= set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Pratt_Certificate.eval_mod_exp",
     "mod_exp_nat (numeral ?b) (numeral ?e) (numeral ?m) =
      mod_exp_nat_aux (numeral ?m) 1 (numeral ?b) (numeral ?e) mod
      numeral ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 0),
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("Pratt_Certificate.eval_mod_exp_nat_aux",
     "mod_exp_nat_aux ?m ?y ?x (numeral (num.Bit0 ?n)) =
      mod_exp_nat_aux ?m ?y (?x\<^sup>2 mod ?m) (numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 0)))),
             template_var 3)),
         template_app (template_hole 4, template_var 0)))),
    ("Pratt_Certificate.size_pratt_le",
     "ALL x:set ?c. Pratt_Certificate.size_pratt x <= ?d ==>
      size_cert ?c <= real (length ?c) * (1 + ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Pratt_Certificate.prime_factors_list_prime",
     "prime ?n ==>
      EX qs. prime_factors ?n = set qs & prod_list qs = ?n & length qs = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Pratt_Certificate.check_prime_factors_subset_Cons",
     "?p <= 1 | ~ ?p dvd numeral ?n ==>
      check_prime_factors_subset (numeral ?n) (?p # ?ps) =
      check_prime_factors_subset (numeral ?n) ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Pratt_Certificate.concat_set",
     "ALL q:?qs. EX c:set ?cs. Prime q : set c ==>
      ALL q:?qs. Prime q : set (concat ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), t_empty)
           ))),
    ("Pratt_Certificate.eval_mod_exp_nat_aux",
     "mod_exp_nat_aux ?m ?y ?x (numeral (num.Bit1 ?n)) =
      mod_exp_nat_aux ?m (?x * ?y mod ?m) (?x\<^sup>2 mod ?m) (numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)),
               template_var 3)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 1, template_hole 0)))),
             template_var 3)),
         template_app (template_hole 6, template_var 0)))),
    ("Pratt_Certificate.concat_length_le",
     "ALL x:set ?xs. real (length (?f x)) <= ?g x ==>
      real (length (concat (map ?f ?xs))) <= sum_list (map ?g ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Pratt_Certificate.check_prime_factors_subset_Cons",
     "[| 1 < ?p; ?p dvd numeral ?n |]
      ==> check_prime_factors_subset (numeral ?n) (?p # ?ps) =
          check_prime_factors_subset (numeral ?n div ?p) (?p # ?ps)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Pratt_Certificate.pratt_triple_imp_prime",
     "[| pratt_triple ?p ?a ?x; 1 < ?p; ?x = ?p - 1;
         [?a ^ (?p - 1) = 1] (mod ?p) |]
      ==> prime ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 5, template_var 2),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 5))),
                template_hole 5),
              template_var 2)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Pratt_Certificate.prime_factors_list",
     "[| 3 < ?n; ~ prime ?n |]
      ==> EX qs.
             prime_factors ?n = set qs &
             prod_list qs = ?n & 2 <= length qs",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13)),
          template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Pratt_Certificate.R2",
     "valid_cert (Prime ?p # ?xs) =
      (1 < ?p &
       valid_cert ?xs &
       (EX a. [a ^ (?p - 1) = 1] (mod ?p) &
              Triple ?p a (?p - 1) : set ?xs))",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 1)),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 12, template_var 0)),
           template_app (template_hole 6, t_empty))))),
    ("Pratt_Certificate.sum_list_log",
     "[| 0 < ?b; ?b ~= 1; ALL x:set ?xs. ?b <= real x |]
      ==> sum_list (map (log ?b) (map real ?xs)) =
          log ?b (real (prod_list ?xs))",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0)))))),
    ("Pratt_Certificate.p_in_prime_factorsE",
     "[| ?p :# prime_factorization ?n; 0 < ?n;
         [| 2 <= ?p; ?p <= ?n; ?p dvd ?n; prime ?p |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_var 2, template_var 1)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)
                   )],
              template_implication
               ([template_predicate
                  (template_app (template_hole 0, template_var 2))],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("Pratt_Certificate.valid_cert_Cons1",
     "valid_cert (Prime ?p # ?xs) =
      (1 < ?p &
       (EX t:set ?xs.
           case t of Prime x => False
           | Triple p' a x =>
               p' = ?p & x = ?p - 1 & mod_exp_nat a (?p - 1) ?p = 1) &
       valid_cert ?xs)",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 1)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               t_empty)),
           template_app (template_hole 12, template_var 0))))),
    ("Pratt_Certificate.pratt_triple_extend",
     "[| prime ?q; pratt_triple ?p ?a ?y; 1 < ?p; 0 < ?x; ?x = ?q * ?y;
         [?a ^ ((?p - 1) div ?q) \<noteq> 1] (mod ?p) |]
      ==> pratt_triple ?p ?a ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 8, template_var 3),
        template_inequation (less_than, template_hole 7, template_var 0),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_app
                         (template_app
                           (template_hole 1,
                            template_app
                             (template_app
                               (template_hole 0, template_var 3),
                              template_hole 8)),
                          template_var 4))),
                    template_hole 8),
                  template_var 3)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Pratt_Certificate.pratt_sound",
     "[| valid_cert ?c; ?t : set ?c |]
      ==> (?t = Prime ?p --> prime ?p) &
          (?t = Triple ?p ?a ?x -->
           (\<forall>q:#prime_factorization ?x.
               [?a ^ ((?p - 1) div q) \<noteq> 1] (mod ?p)) &
           0 < ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app (template_hole 17, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app (template_hole 14, template_var 3),
                     template_app (template_hole 13, template_var 2))),
                 template_app (template_hole 12, template_var 2))),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 11, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_var 0))),
                     t_empty)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Pratt_Certificate.pratt_size",
     "prime ?p ==>
      EX c. Prime ?p : set c &
            valid_cert c &
            size_cert c
            <= (6 * log 2 (real ?p) - 4) * (1 + 3 * log 2 (real ?p))",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("Pratt_Certificate.size_pratt_fpc",
     "[| ?a <= ?p; ?r <= ?p; 0 < ?a; 0 < ?r; 0 < ?p; prod_list ?qs = ?r |]
      ==> ALL x:set (build_fpc ?p ?a ?r ?qs).
             Pratt_Certificate.size_pratt x <= 3 * log 2 (real ?p)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_than, template_hole 14, template_var 3),
        template_inequation (less_than, template_hole 14, template_var 1),
        template_inequation (less_than, template_hole 14, template_var 2),
        template_equation
         (template_app (template_hole 12, template_var 0), template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 2),
                       template_var 3),
                     template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Pratt_Certificate.pratt_complete'",
     "prime ?p ==>
      EX c. Prime ?p : set c &
            valid_cert c &
            real (length c) <= 6 * log 2 (real ?p) - 4 &
            (ALL x:set c.
                Pratt_Certificate.size_pratt x <= 3 * log 2 (real ?p))",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("Pratt_Certificate.valid_pratt_tree_code",
     "valid_pratt_tree (Pratt_Node (?n, ?a, ?ts)) =
      (2 <= ?n &
       check_prime_factors_subset (?n - 1) (map pratt_tree_number ?ts) &
       mod_exp_nat ?a (?n - 1) ?n = 1 &
       (ALL t:set ?ts.
           mod_exp_nat ?a ((?n - 1) div pratt_tree_number t) ?n ~= 1) &
       (ALL t:set ?ts. valid_pratt_tree t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app
                   (template_app (template_hole 16, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_hole 11))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_hole 8)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 4, template_var 1),
                           template_app
                            (template_app (template_hole 9, template_var 2),
                             template_hole 8)),
                         template_var 2)),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       t_empty)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     t_empty)))))
           ))),
    ("Pratt_Certificate.mod_exp_nat_aux_code",
     "mod_exp_nat_aux ?m ?y ?x ?n =
      (if ?n = 0 then ?y
       else if ?n = 1 then ?x * ?y mod ?m
            else if even ?n
                 then mod_exp_nat_aux ?m ?y (?x * ?x mod ?m) (?n div 2)
                 else mod_exp_nat_aux ?m (?x * ?y mod ?m) (?x * ?x mod ?m)
                       (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 11, template_var 0),
                   template_hole 8)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_hole 7)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 2)),
                   template_var 3)),
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_var 3),
                         template_var 2),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 1),
                             template_var 1)),
                         template_var 3)),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_var 3),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 1),
                             template_var 2)),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 1),
                           template_var 1)),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))))
           ))),
    ("Pratt_Certificate.correct_fpc",
     "[| valid_cert ?xs; 1 < ?p; prod_list ?qs = ?r; ?r ~= 0;
         ALL q:set ?qs. Prime q : set ?xs;
         ALL q:set ?qs. [?a ^ ((?p - 1) div q) \<noteq> 1] (mod ?p) |]
      ==> valid_cert (build_fpc ?p ?a ?r ?qs @ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_inequation (less_than, template_hole 15, template_var 3),
        template_equation
         (template_app (template_hole 13, template_var 2), template_var 1),
        template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 17,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0),
                     template_var 1),
                   template_var 2)),
               template_var 4))
           ))),
    ("Pratt_Certificate.R1",
     "valid_cert (Triple ?p ?a ?x # ?xs) =
      (1 < ?p &
       0 < ?x &
       valid_cert ?xs &
       (?x = 1 |
        (EX q y.
            ?x = q * y &
            Prime q : set ?xs &
            Triple ?p ?a y : set ?xs &
            [?a ^ ((?p - 1) div q) \<noteq> 1] (mod ?p))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 12),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 15,
                   template_app (template_hole 18, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_hole 13)),
                   template_app (template_hole 9, t_empty)))))
           ))),
    ("Pratt_Certificate.valid_cert_Cons2",
     "valid_cert (Triple ?p ?a ?x # ?xs) =
      (0 < ?x &
       1 < ?p &
       (?x = 1 |
        (EX t:set ?xs.
            case t of Prime x => False
            | Triple p' a' y =>
                p' = ?p &
                a' = ?a &
                y dvd ?x &
                (let q = ?x div y
                 in Prime q : set ?xs &
                    mod_exp_nat ?a ((?p - 1) div q) ?p ~= 1))) &
       valid_cert ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app
                     (template_app (template_hole 18, template_var 3),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, template_hole 14),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_var 1),
                         template_hole 14)),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 0)),
                       t_empty))),
                 template_app (template_hole 20, template_var 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.Pratt_CertificateMoreTemplates"
### 0.599s elapsed time, 0.918s cpu time, 0.109s GC time
val it = (): unit
