Loading theory "Draft.List_Misc" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings" via "Draft.Matching" via "Draft.Semantics")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "Draft.Ternary" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings" via "Draft.Matching_Ternary")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.039s elapsed time, 0.183s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.158s elapsed time, 0.634s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Repeat_Stabilize"
### 0.168s elapsed time, 0.673s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.250s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.943s cpu time, 0.070s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 0.901s elapsed time, 3.402s cpu time, 0.741s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings" via "Draft.Matching_Ternary")
### theory "HOL-Library.Stream"
### 0.951s elapsed time, 3.603s cpu time, 0.741s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.760s elapsed time, 6.405s cpu time, 0.958s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.964s elapsed time, 6.526s cpu time, 1.015s GC time
Loading theory "Draft.Templates" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matching_EmbeddingsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.768s elapsed time, 1.878s cpu time, 0.819s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.311s elapsed time, 12.062s cpu time, 2.688s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings")
Loading theory "Draft.Semantics" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings" via "Draft.Matching")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "iptables_bigstep"
  Proving monotonicity ...
Found termination order: "{}"
locale iptables_bigstep_fixedbackground
  fixes \<Gamma> :: "char list => 'a rule list option"
    and \<gamma> :: "'a => 'p => bool"
Proofs for inductive predicate(s) "iptables_bigstep'"
  Proving monotonicity ...
[| wf (calls_chain \<Gamma>);
   !!x. (!!y. (y, x) : calls_chain \<Gamma> ==>
              EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                         (Call y)], Undecided\<rangle> \<Rightarrow> t) ==>
        EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                   (Call x)], Undecided\<rangle> \<Rightarrow> t |]
==> EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
               (Call ?a)], Undecided\<rangle> \<Rightarrow> t
### theory "Draft.Semantics"
### 0.744s elapsed time, 1.591s cpu time, 0.209s GC time
Loading theory "Draft.Matching" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings")
### theory "Draft.Matching"
### 0.099s elapsed time, 0.207s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.166s elapsed time, 2.223s cpu time, 0.285s GC time
Loading theory "Draft.Unknown_Match_Tacs" (required by "Draft.Matching_EmbeddingsTemplates" via "Draft.Matching_Embeddings")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Unknown_Match_Tacs"
### 0.201s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.Matching_Embeddings" (required by "Draft.Matching_EmbeddingsTemplates")
"Matching_Ternary.matches"
  :: "('a => 'b => ternaryvalue) * (action => 'b => bool)
      => 'a match_expr => action => 'b => bool"
"Semantics.matches"
  :: "('a => 'b => bool) => 'a match_expr => 'b => bool"
### theory "Draft.Matching_Embeddings"
### 0.185s elapsed time, 0.228s cpu time, 0.053s GC time
Loading theory "Draft.Matching_EmbeddingsTemplates"
val templateLemmas =
   [("Matching_Embeddings.\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c_not_Unknown",
     "ternary_ternary_eval
       (map_match_tac
         (\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c ?\<gamma>) ?p
         ?m) ~=
      TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Matching_Embeddings.eval_ternary_Not_TrueD",
     "eval_ternary_Not ?m = TernaryTrue ==> ?m = TernaryFalse",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Matching_Embeddings.\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c_matching",
     "Matching_Ternary.matches
       (\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c ?\<gamma>,
        ?\<alpha>)
       ?m ?a ?p =
      Semantics.matches ?\<gamma> ?m ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Matching_Embeddings.matcher_agree_on_exact_matches_gammaE",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?\<beta> ?X ?p = TernaryTrue |]
      ==> ?\<gamma> ?X ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 1), template_var 0),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Matching_Embeddings.matcher_agree_on_exact_matches_alt",
     "matcher_agree_on_exact_matches ?exact ?approx =
      (ALL p m.
          ?approx m p ~= TernaryUnknown -->
          bool_to_ternary (?exact m p) = ?approx m p)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Matching_Embeddings.in_doubt_allow_allows_Accept",
     "[| ?a = Accept; matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         Semantics.matches ?\<gamma> ?m ?p |]
      ==> Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p",
     template_implication
      ([template_equation (template_var 4, template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Matching_Embeddings.matches_comply_exact",
     "[| ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~=
         TernaryUnknown;
         matcher_agree_on_exact_matches ?\<gamma> ?\<beta> |]
      ==> Semantics.matches ?\<gamma> ?m ?p =
          Matching_Ternary.matches (?\<beta>, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_var 3),
             template_var 0),
           template_var 4)))),
    ("Matching_Embeddings.in_doubt_deny_denies_DropReject",
     "[| ?a = Drop | ?a = Reject;
         matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         Semantics.matches ?\<gamma> ?m ?p |]
      ==> Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_hole 6)),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Matching_Embeddings.not_exact_match_in_doubt_allow_approx_match",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?a = Accept | ?a = Reject | ?a = Drop;
         ~ Semantics.matches ?\<gamma> ?m ?p |]
      ==> ?a = Accept &
          Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p |
          ~ Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 6)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_hole 0)),
                       template_var 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("Matching_Embeddings.not_exact_match_in_doubt_deny_approx_match",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?a = Accept | ?a = Reject | ?a = Drop;
         ~ Semantics.matches ?\<gamma> ?m ?p |]
      ==> (?a = Drop | ?a = Reject) &
          Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p |
          ~ Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 6)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 2),
                         template_hole 6)),
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_hole 7))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_hole 0)),
                       template_var 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 1),
                   template_var 2),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Matching_EmbeddingsTemplates"
### 0.384s elapsed time, 0.479s cpu time, 0.000s GC time
val it = (): unit
