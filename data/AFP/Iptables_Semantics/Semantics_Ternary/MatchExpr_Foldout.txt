Loading theory "Draft.Datatype_Selectors" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "Draft.List_Misc" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Loading theory "Draft.Negation_Type" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
### theory "Draft.List_Misc"
### 0.044s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.Ternary" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "{}"
### theory "Draft.Datatype_Selectors"
### 0.087s elapsed time, 0.376s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.122s elapsed time, 0.490s cpu time, 0.044s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.096s elapsed time, 0.382s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.805s cpu time, 0.100s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.275s cpu time, 0.168s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.851s elapsed time, 3.339s cpu time, 0.408s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.078s elapsed time, 4.082s cpu time, 0.823s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.858s cpu time, 0.786s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.949s elapsed time, 7.377s cpu time, 1.257s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.343s elapsed time, 7.800s cpu time, 1.887s GC time
Loading theory "Draft.Templates" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MatchExpr_FoldTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.558s elapsed time, 1.168s cpu time, 0.123s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.938s elapsed time, 13.749s cpu time, 3.546s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.213s elapsed time, 1.435s cpu time, 0.208s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action")
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.549s elapsed time, 0.633s cpu time, 0.107s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.250s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "size <*mlex*> {}"
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.417s elapsed time, 0.503s cpu time, 0.097s GC time
Loading theory "Draft.Negation_Type_Matching" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold" via "Draft.Primitive_Normalization")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Negation_Type_Matching"
### 0.695s elapsed time, 0.780s cpu time, 0.095s GC time
Loading theory "Draft.Primitive_Normalization" (required by "Draft.MatchExpr_FoldTemplates" via "Draft.MatchExpr_Fold")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
match_list \<gamma> (map (Match o C) (f ml)) a p =
match_list \<gamma> [alist_and (NegPos_map C ml)] a p ==>
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) (map (Match o C) (f ml))) ?s =
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) [alist_and (NegPos_map C ml)]) ?s
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Primitive_Normalization"
### 1.372s elapsed time, 1.542s cpu time, 0.182s GC time
Loading theory "Draft.MatchExpr_Fold" (required by "Draft.MatchExpr_FoldTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.MatchExpr_Fold"
### 0.091s elapsed time, 0.100s cpu time, 0.000s GC time
Loading theory "Draft.MatchExpr_FoldTemplates"
val templateLemmas =
   [("MatchExpr_Fold.andfold_MatchExp_alist_and",
     "alist_and' (map Pos ?ls) = andfold_MatchExp (map Match ?ls)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("MatchExpr_Fold.andfold_MatchExp_not_disc_negated_mapMatch",
     "~ has_disc_negated ?disc False
         (andfold_MatchExp (map (Match o ?C) ?ls))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_hole 4),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_var 0)))
             )
         )),
    ("MatchExpr_Fold.andfold_MatchExp_normalized_nnf",
     "ALL m:set ?ms. normalized_nnf_match m ==>
      normalized_nnf_match (andfold_MatchExp ?ms)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("MatchExpr_Fold.andfold_MatchExp_not_discI",
     "ALL m:set ?ms. ~ has_disc ?disc m ==>
      ~ has_disc ?disc (andfold_MatchExp ?ms)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("MatchExpr_Fold.andfold_MatchExp_matches",
     "matches ?\<gamma> (andfold_MatchExp ?ms) ?a ?p =
      (ALL m:set ?ms. matches ?\<gamma> m ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         t_empty))),
    ("MatchExpr_Fold.andfold_MatchExp_not_disc_mapMatch",
     "ALL a. ~ ?disc (?C a) ==>
      ~ has_disc ?disc (andfold_MatchExp (map (Match o ?C) ?ls))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 1)),
                     template_var 0)))
               )
           ))),
    ("MatchExpr_Fold.andfold_MatchExp_not_disc_negatedI",
     "ALL m:set ?ms. ~ has_disc_negated ?disc ?neg m ==>
      ~ has_disc_negated ?disc ?neg (andfold_MatchExp ?ms)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("MatchExpr_Fold.andfold_MatchExp_normalized_n_primitive",
     "ALL m:set ?ms. normalized_n_primitive (?disc, ?sel) ?f m ==>
      normalized_n_primitive (?disc, ?sel) ?f (andfold_MatchExp ?ms)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0),
             template_app (template_hole 0, template_var 3))
           ))),
    ("MatchExpr_Fold.andfold_MatchExp_normalized_normalized_n_primitive_single",
     "[| ALL a. ~ ?disc (?C a);
         ?s : set (normalize_match
                    (andfold_MatchExp (map (Match o ?C) ?xs))) |]
      ==> normalized_n_primitive (?disc, ?sel) ?f ?s",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 4)),
                      template_var 2)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_var 0),
             template_var 3)
           ))),
    ("MatchExpr_Fold.normalize_andfold_MatchExp_normalized_n_primitive",
     "[| ALL m:set ?ms.
            ALL s':set (normalize_match m).
               normalized_n_primitive (?disc, ?sel) ?f s';
         ?s : set (normalize_match (andfold_MatchExp ?ms)) |]
      ==> normalized_n_primitive (?disc, ?sel) ?f ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 0, template_var 4))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.MatchExpr_FoldTemplates"
### 0.456s elapsed time, 0.608s cpu time, 0.072s GC time
val it = (): unit
