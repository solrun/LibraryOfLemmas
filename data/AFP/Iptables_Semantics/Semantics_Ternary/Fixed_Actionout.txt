Loading theory "Draft.List_Misc" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "Draft.Ternary" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.039s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.130s elapsed time, 0.538s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.608s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.818s cpu time, 0.089s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.209s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.040s elapsed time, 3.938s cpu time, 0.877s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.130s elapsed time, 4.280s cpu time, 0.967s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.984s elapsed time, 7.225s cpu time, 1.253s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.151s elapsed time, 7.312s cpu time, 1.326s GC time
Loading theory "Draft.Templates" (required by "Draft.Fixed_ActionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fixed_ActionTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.804s elapsed time, 1.972s cpu time, 0.894s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.475s elapsed time, 12.682s cpu time, 3.029s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.457s elapsed time, 2.355s cpu time, 1.151s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.Fixed_ActionTemplates" via "Draft.Fixed_Action")
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.506s elapsed time, 0.575s cpu time, 0.087s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.Fixed_ActionTemplates")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.261s elapsed time, 0.335s cpu time, 0.098s GC time
Loading theory "Draft.Fixed_ActionTemplates"
val templateLemmas =
   [("Fixed_Action.match_list_to_match_expr_disjunction",
     "match_list ?\<gamma> ?ms ?a ?p =
      matches ?\<gamma> (match_list_to_match_expr ?ms) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Fixed_Action.fixed_action_simps",
     "approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m Empty) ?ms)
       Undecided =
      Undecided",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Fixed_Action.fixed_action_simps",
     "approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m Log) ?ms)
       Undecided =
      Undecided",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Fixed_Action.match_list_singleton",
     "match_list ?\<gamma> [?m] ?a ?p = matches ?\<gamma> ?m ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Fixed_Action.match_list_matches",
     "match_list ?\<gamma> ?ms ?a ?p =
      (EX m:set ?ms. matches ?\<gamma> m ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Fixed_Action.match_list_concat",
     "match_list ?\<gamma> (concat ?lss) ?a ?p =
      (EX ls:set ?lss. match_list ?\<gamma> ls ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         t_empty))),
    ("Fixed_Action.match_list_helper",
     "~ match_list ?\<gamma> ?m2' ?a ?p ==>
      ~ match_list ?\<gamma> (map (MatchAnd ?aa) ?m2') ?a ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 0)),
                       template_var 3)),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("Fixed_Action.match_list_helper",
     "~ matches ?\<gamma> ?m ?a ?p ==>
      ~ match_list ?\<gamma> (map (MatchAnd ?m) ?m2') ?a ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_var 0)),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("Fixed_Action.match_list_append",
     "match_list ?\<gamma> (?m1.0 @ ?m2.0) ?a ?p =
      (~ match_list ?\<gamma> ?m1.0 ?a ?p -->
       match_list ?\<gamma> ?m2.0 ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Fixed_Action.match_list_False",
     "~ match_list ?\<gamma> ?ms ?a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?ms)
       Undecided =
      Undecided",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_hole 0),
         template_hole 0))),
    ("Fixed_Action.match_list_helper",
     "~ match_list ?\<gamma> ?m1' ?a ?p ==>
      ~ match_list ?\<gamma> (concat (map (%x. map (MatchAnd x) ?m2') ?m1'))
         ?a ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, t_empty),
                         template_var 3))),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("Fixed_Action.match_list_helper",
     "~ match_list ?\<gamma> ?m2' ?a ?p ==>
      ~ match_list ?\<gamma> (concat (map (%x. map (MatchAnd x) ?m2') ?m1'))
         ?a ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, t_empty),
                         template_var 0))),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("Fixed_Action.match_list_helper",
     "[| ~ matches ?\<gamma> ?m2.0 ?a ?p;
         match_list ?\<gamma> (map (%x. MatchAnd x ?m2.0) ?m1') ?a ?p |]
      ==> False",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_var 0)),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("Fixed_Action.approximating_bigstep_fun_prepend_replicate",
     "0 < ?n ==>
      approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
      approximating_bigstep_fun ?\<gamma> ?p (replicate ?n ?r @ ?rs)
       Undecided",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 0)),
           template_hole 2)))),
    ("Fixed_Action.match_list_helper",
     "[| matches ?\<gamma> ?m ?a ?p; match_list ?\<gamma> ?m2' ?a ?p |]
      ==> match_list ?\<gamma> (map (MatchAnd ?m) ?m2') ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Fixed_Action.fixedaction_swap",
     "approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (?m1.0 @ ?m2.0)) ?s =
      approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (?m2.0 @ ?m1.0)) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         template_var 0))),
    ("Fixed_Action.approximating_bigstep_fun_fixaction_matchseteq",
     "set ?m1.0 = set ?m2.0 ==>
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?m1.0)
       ?s =
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?m2.0)
       ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 5),
          template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 4)),
           template_var 0)))),
    ("Fixed_Action.fixed_action_simps",
     "matches ?\<gamma> ?m' Empty ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p
       (map ((%m. Rule m Empty) o MatchAnd ?m') ?m2' @ ?rs2.0) Undecided =
      approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_hole 8),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, t_empty),
                       template_app (template_hole 1, template_var 3))),
                   template_var 1)),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2),
             template_var 0),
           template_hole 0)))),
    ("Fixed_Action.fixed_action_simps",
     "matches ?\<gamma> ?m' Log ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p
       (map ((%m. Rule m Log) o MatchAnd ?m') ?m2' @ ?rs2.0) Undecided =
      approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_hole 8),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, t_empty),
                       template_app (template_hole 1, template_var 3))),
                   template_var 1)),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 2),
             template_var 0),
           template_hole 0)))),
    ("Fixed_Action.fixedaction_reorder",
     "approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (?m1.0 @ ?m2.0 @ ?m3.0)) ?s =
      approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (?m2.0 @ ?m1.0 @ ?m3.0)) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_var 5),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_var 5),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))),
         template_var 0))),
    ("Fixed_Action.match_list_map_And1",
     "matches ?\<gamma> ?m1.0 ?a ?p = match_list ?\<gamma> ?m1' ?a ?p ==>
      matches ?\<gamma> (MatchAnd ?m1.0 ?m2.0) ?a ?p =
      match_list ?\<gamma> (map (%x. MatchAnd x ?m2.0) ?m1') ?a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 1),
              template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0)),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)),
             template_var 3),
           template_var 2)))),
    ("Fixed_Action.match_list_True",
     "match_list ?\<gamma> ?ms ?a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?ms)
       Undecided =
      (case ?a of Accept => Decision FinalAllow | Drop => Decision FinalDeny
       | Log => Undecided | Reject => Decision FinalDeny
       | Empty => Undecided)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 7, t_empty), template_var 2)),
           template_hole 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2)),
                           template_app (template_hole 3, template_hole 1)),
                         template_hole 5),
                       template_app (template_hole 3, template_hole 1)),
                     t_empty),
                   template_hole 0),
                 t_empty),
               template_hole 5),
             template_hole 0),
           template_var 1)))),
    ("Fixed_Action.match_list_semantics",
     "match_list ?\<gamma> ?ms1.0 ?a ?p =
      match_list ?\<gamma> ?ms2.0 ?a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?ms1.0)
       ?s =
      approximating_bigstep_fun ?\<gamma> ?p (map (%m. Rule m ?a) ?ms2.0)
       ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 1),
              template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 4)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0)))),
    ("Fixed_Action.fixed_action_simps",
     "matches ?\<gamma> ?m' ?a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p
       (map ((%m. Rule m ?a) o MatchAnd ?m') ?m2' @ ?rs2.0) Undecided =
      approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) ?m2' @ ?rs2.0) Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 5),
               template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, t_empty),
                       template_app (template_hole 1, template_var 4))),
                   template_var 1)),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 5),
               template_var 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("Fixed_Action.wf_ruleset_singleton",
     "wf_ruleset ?\<gamma> ?p [Rule ?m ?a] =
      (~ matches ?\<gamma> ?m ?a ?p |
       (\<nexists>chain. ?a = Call chain) &
       ?a ~= Return & (\<nexists>chain. ?a = Goto chain) & ?a ~= Unknown)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 0)),
                template_hole 10))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 1),
                     template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 5, t_empty))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 5, t_empty))),
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 0))))))
           ))),
    ("Fixed_Action.fixedaction_wf_ruleset",
     "wf_ruleset ?\<gamma> ?p (map (%m. Rule m ?a) ?ms) =
      (~ match_list ?\<gamma> ?ms ?a ?p |
       (\<nexists>chain. ?a = Call chain) &
       ?a ~= Return & (\<nexists>chain. ?a = Goto chain) & ?a ~= Unknown)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 11, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 0),
                     template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 5, t_empty))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 2))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 5, t_empty))),
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 0))))))
           ))),
    ("Fixed_Action.matches_list_And_concat",
     "[| matches ?\<gamma> ?m1.0 ?a ?p = match_list ?\<gamma> ?m1' ?a ?p;
         matches ?\<gamma> ?m2.0 ?a ?p = match_list ?\<gamma> ?m2' ?a ?p |]
      ==> matches ?\<gamma> (MatchAnd ?m1.0 ?m2.0) ?a ?p =
          match_list ?\<gamma>
           (concat (map (%x. map (MatchAnd x) ?m2') ?m1')) ?a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 2),
              template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 1),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 0),
              template_var 4),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 1)),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))),
             template_var 4),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.Fixed_ActionTemplates"
### 0.379s elapsed time, 0.467s cpu time, 0.000s GC time
val it = (): unit
