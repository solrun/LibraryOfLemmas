Loading theory "Draft.Datatype_Selectors" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "Draft.List_Misc" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Loading theory "Draft.Negation_Type" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching")
### theory "Draft.List_Misc"
### 0.042s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.Ternary" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "{}"
### theory "Draft.Datatype_Selectors"
### 0.109s elapsed time, 0.451s cpu time, 0.039s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.139s elapsed time, 0.566s cpu time, 0.039s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.110s elapsed time, 0.451s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.818s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.368s elapsed time, 1.438s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.820s elapsed time, 3.230s cpu time, 0.316s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.988s elapsed time, 3.752s cpu time, 0.720s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.901s elapsed time, 3.413s cpu time, 0.641s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.877s elapsed time, 7.053s cpu time, 1.017s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.985s elapsed time, 6.594s cpu time, 1.038s GC time
Loading theory "Draft.Templates" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Negation_Type_MatchingTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.795s elapsed time, 1.915s cpu time, 0.782s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.399s elapsed time, 12.360s cpu time, 2.563s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.076s elapsed time, 1.264s cpu time, 0.180s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action")
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.501s elapsed time, 0.547s cpu time, 0.056s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.257s elapsed time, 0.299s cpu time, 0.055s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.Negation_Type_MatchingTemplates" via "Draft.Negation_Type_Matching")
Found termination order: "size <*mlex*> {}"
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.379s elapsed time, 0.435s cpu time, 0.059s GC time
Loading theory "Draft.Negation_Type_Matching" (required by "Draft.Negation_Type_MatchingTemplates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Negation_Type_Matching"
### 0.663s elapsed time, 0.767s cpu time, 0.122s GC time
Loading theory "Draft.Negation_Type_MatchingTemplates"
val templateLemmas =
   [("Negation_Type_Matching.normalized_nnf_match_alist_and",
     "normalized_nnf_match (alist_and ?as)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Negation_Type_Matching.normalized_nnf_match_alist_and'",
     "normalized_nnf_match (alist_and' ?as)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Negation_Type_Matching.negation_type_to_match_expr_simps",
     "negation_type_to_match_expr (Pos ?e) = Match ?e",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Negation_Type_Matching.negation_type_to_match_expr_simps",
     "negation_type_to_match_expr (Neg ?e) = MatchNot (Match ?e)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Negation_Type_Matching.alist_and_negation_type_to_match_expr",
     "alist_and (?n # ?es) =
      MatchAnd (negation_type_to_match_expr ?n) (alist_and ?es)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Negation_Type_Matching.nt_match_list_matches",
     "nt_match_list ?\<gamma> ?a ?p ?l =
      matches ?\<gamma> (alist_and ?l) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_var 1))),
    ("Negation_Type_Matching.alist_and'",
     "matches (?\<gamma>, ?\<alpha>) (alist_and' ?as) =
      matches (?\<gamma>, ?\<alpha>) (alist_and ?as)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Negation_Type_Matching.matches_alist_and_alist_and'",
     "matches ?\<gamma> (alist_and' ?ls) ?a ?p =
      matches ?\<gamma> (alist_and ?ls) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Negation_Type_Matching.alist_and_append",
     "matches ?\<gamma> (alist_and (?l1.0 @ ?l2.0)) ?a ?p =
      matches ?\<gamma> (MatchAnd (alist_and ?l1.0) (alist_and ?l2.0)) ?a
       ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 2))),
           template_var 1),
         template_var 0))),
    ("Negation_Type_Matching.alist_and'_append",
     "matches ?\<gamma> (alist_and' (?l1.0 @ ?l2.0)) ?a ?p =
      matches ?\<gamma> (MatchAnd (alist_and' ?l1.0) (alist_and' ?l2.0)) ?a
       ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 2))),
           template_var 1),
         template_var 0))),
    ("Negation_Type_Matching.alist_and_negation_type_to_match_expr_f_matches",
     "matches ?\<gamma> (alist_and (NegPos_map ?C ?spts)) ?a ?p =
      (ALL m:set ?spts.
          matches ?\<gamma> (negation_type_to_match_expr_f ?C m) ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Negation_Type_Matching.nt_match_list_simp",
     "nt_match_list ?\<gamma> ?a ?p ?ms =
      ((ALL m:set (getPos ?ms). matches ?\<gamma> (Match m) ?a ?p) &
       (ALL m:set (getNeg ?ms).
           matches ?\<gamma> (MatchNot (Match m)) ?a ?p))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0))),
             t_empty)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 1, template_var 0))),
           t_empty)))),
    ("Negation_Type_Matching.matches_alist_and",
     "matches ?\<gamma> (alist_and ?l) ?a ?p =
      ((ALL m:set (getPos ?l). matches ?\<gamma> (Match m) ?a ?p) &
       (ALL m:set (getNeg ?l).
           matches ?\<gamma> (MatchNot (Match m)) ?a ?p))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_app (template_hole 7, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2))),
             t_empty)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 1, template_var 2))),
           t_empty)))),
    ("Negation_Type_Matching.alist_and_NegPos_map_getNeg_getPos_matches",
     "((ALL m:set (getNeg ?spts).
           matches ?\<gamma> (MatchNot (Match (?C m))) ?a ?p) &
       (ALL m:set (getPos ?spts). matches ?\<gamma> (Match (?C m)) ?a ?p)) =
      matches ?\<gamma> (alist_and (NegPos_map ?C ?spts)) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 4))),
             t_empty)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_var 4))),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4))),
           template_var 1),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Negation_Type_MatchingTemplates"
### 0.410s elapsed time, 0.529s cpu time, 0.049s GC time
val it = (): unit
