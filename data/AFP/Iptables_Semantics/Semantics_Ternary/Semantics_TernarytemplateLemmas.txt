   [("Semantics_Ternary.simple_imp_good_ruleset",
     "simple_ruleset ?rs ==> good_ruleset ?rs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Semantics_Ternary.rmLogEmpty_rwReject_good_to_simple",
     "good_ruleset ?rs ==> simple_ruleset (rw_Reject (rm_LogEmpty ?rs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Semantics_Ternary.good_imp_wf_ruleset",
     "good_ruleset ?rs ==> wf_ruleset ?\<gamma> ?p ?rs",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Semantics_Ternary.good_ruleset_tail",
     "good_ruleset (?r # ?rs) ==> good_ruleset ?rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Semantics_Ternary.Decision_approximating_bigstep_fun",
     "approximating_bigstep_fun ?\<gamma> ?p ?rs (Decision ?X) =
      Decision ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Semantics_Ternary.good_ruleset_append",
     "good_ruleset (?rs\<^sub>1 @ ?rs\<^sub>2) =
      (good_ruleset ?rs\<^sub>1 & good_ruleset ?rs\<^sub>2)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Semantics_Ternary.good_ruleset_fst",
     "good_ruleset (?r # ?rs) ==> good_ruleset [?r]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Semantics_Ternary.skipD",
     "?\<gamma>,?p\<turnstile> \<langle>[], ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      ?s = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Semantics_Ternary.approximating_bigstep_to_undecided",
     "?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> Undecided ==>
      ?s = Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Semantics_Ternary.rm_LogEmpty_fun_semantics",
     "approximating_bigstep_fun ?\<gamma> ?p (rm_LogEmpty ?rs) ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantics_Ternary.approximating_bigstep_wf",
     "?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> Undecided ==>
      wf_ruleset ?\<gamma> ?p ?rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0),
                template_hole 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantics_Ternary.wf_ruleset_stripfst",
     "wf_ruleset ?\<gamma> ?p (?r # ?rs) ==> wf_ruleset ?\<gamma> ?p ?rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Semantics_Ternary.optimize_matches_opt_MatchAny_match_expr",
     "approximating_bigstep_fun ?\<gamma> ?p
       (optimize_matches opt_MatchAny_match_expr ?rs) ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantics_Ternary.decisionD",
     "?\<gamma>,?p\<turnstile> \<langle>?rs, Decision
        ?X\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      ?t = Decision ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("Semantics_Ternary.approximating_bigstep_to_decision1",
     "?\<gamma>,?p\<turnstile> \<langle>?rs, Decision
        ?Y\<rangle> \<Rightarrow>\<^sub>\<alpha> Decision ?X ==>
      ?Y = ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Semantics_Ternary.wf_rulesetD",
     "wf_ruleset ?\<gamma> ?p (?r # ?rs) ==> wf_ruleset ?\<gamma> ?p [?r]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Semantics_Ternary.approximating_semantics_imp_fun",
     "?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semantics_Ternary.emptyD",
     "?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
    Empty], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      ?t = Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_hole 3)),
                    template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Semantics_Ternary.logD",
     "?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
    Log], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      ?t = Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_hole 3)),
                    template_hole 2)),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Semantics_Ternary.wf_ruleset_append",
     "wf_ruleset ?\<gamma> ?p (?rs1.0 @ ?rs2.0) =
      (wf_ruleset ?\<gamma> ?p ?rs1.0 & wf_ruleset ?\<gamma> ?p ?rs2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Semantics_Ternary.approximating_semantics_iff_fun_good_ruleset",
     "good_ruleset ?rs ==>
      ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
      (approximating_bigstep_fun ?\<gamma> ?p ?rs ?s = ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2),
                    template_var 4),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("Semantics_Ternary.wf_ruleset_rest",
     "wf_ruleset ?\<gamma> ?p (Rule ?m ?a # ?rs) ==>
      wf_ruleset ?\<gamma> ?p [Rule ?m ?a]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Semantics_Ternary.approximating_bigstep_deterministic",
     "[| ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t' |]
      ==> ?t = ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Semantics_Ternary.rw_Reject_fun_semantics",
     "wf_unknown_match_tac ?\<alpha> ==>
      approximating_bigstep_fun (?\<beta>, ?\<alpha>) ?p (rw_Reject ?rs)
       ?s =
      approximating_bigstep_fun (?\<beta>, ?\<alpha>) ?p ?rs ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_Ternary.approximating_semantics_iff_fun",
     "wf_ruleset ?\<gamma> ?p ?rs ==>
      ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
      (approximating_bigstep_fun ?\<gamma> ?p ?rs ?s = ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_Ternary.approximating_bigstep_fun_seq_semantics",
     "?\<gamma>,?p\<turnstile> \<langle>?rs\<^sub>1, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t ==>
      approximating_bigstep_fun ?\<gamma> ?p (?rs\<^sub>1 @ ?rs\<^sub>2)
       ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs\<^sub>2 ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 0),
           template_var 1)))),
    ("Semantics_Ternary.approximating_fun_imp_semantics",
     "[| wf_ruleset ?\<gamma> ?p ?rs;
         approximating_bigstep_fun ?\<gamma> ?p ?rs ?s = ?t |]
      ==> ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantics_Ternary.wf_ruleset_fst",
     "wf_ruleset ?\<gamma> ?p (Rule ?m ?a # ?rs) =
      (wf_ruleset ?\<gamma> ?p [Rule ?m ?a] & wf_ruleset ?\<gamma> ?p ?rs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_hole 0))),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_var 0)))),
    ("Semantics_Ternary.rm_LogEmpty_simple_but_Reject",
     "good_ruleset ?rs ==>
      ALL r:set (rm_LogEmpty ?rs).
         get_action r = Accept |
         get_action r = Reject | get_action r = Drop",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0))),
             t_empty)
           ))),
    ("Semantics_Ternary.approximating_bigstep_fun_seq_wf",
     "wf_ruleset ?\<gamma> ?p ?rs\<^sub>1 ==>
      approximating_bigstep_fun ?\<gamma> ?p (?rs\<^sub>1 @ ?rs\<^sub>2)
       ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs\<^sub>2
       (approximating_bigstep_fun ?\<gamma> ?p ?rs\<^sub>1 ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0))))),
    ("Semantics_Ternary.not_matches_removeAll",
     "~ matches ?\<gamma> ?m ?a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p (removeAll (Rule ?m ?a) ?rs)
       Undecided =
      approximating_bigstep_fun ?\<gamma> ?p ?rs Undecided",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Semantics_Ternary.acceptD",
     "[| ?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
       Accept], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         matches ?\<gamma> ?m Accept ?p |]
      ==> ?t = Decision FinalAllow",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_hole 6)),
                    template_hole 5)),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1),
                template_hole 6),
              template_var 2)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Semantics_Ternary.dropD",
     "[| ?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
       Drop], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         matches ?\<gamma> ?m Drop ?p |]
      ==> ?t = Decision FinalDeny",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_hole 6)),
                    template_hole 5)),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1),
                template_hole 6),
              template_var 2)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Semantics_Ternary.rejectD",
     "[| ?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
       Reject], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         matches ?\<gamma> ?m Reject ?p |]
      ==> ?t = Decision FinalDeny",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_hole 6)),
                    template_hole 5)),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1),
                template_hole 6),
              template_var 2)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Semantics_Ternary.nomatchD",
     "[| ?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
       ?a], Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         ~ matches ?\<gamma> ?m ?a ?p |]
      ==> ?t = Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_hole 4)),
                template_hole 3),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 2),
                    template_var 1),
                  template_var 3)
                )
            )],
       template_equation (template_var 0, template_hole 3))),
    ("Semantics_Ternary.optimize_matches_matches_fst",
     "matches ?\<gamma> (?f ?m) ?a ?p ==>
      optimize_matches ?f (Rule ?m ?a # ?rs) =
      Rule (?f ?m) ?a # optimize_matches ?f ?rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app (template_var 4, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 3)),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0))))),
    ("Semantics_Ternary.nomatch_fst",
     "[| ~ matches ?\<gamma> ?m ?a ?p;
         ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t |]
      ==> ?\<gamma>,?p\<turnstile> \<langle>Rule ?m ?a #
      ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4)),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Semantics_Ternary.seq_fst",
     "[| ?\<gamma>,?p\<turnstile> \<langle>[?r], ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         ?\<gamma>,?p\<turnstile> \<langle>?rs, ?t\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t' |]
      ==> ?\<gamma>,?p\<turnstile> \<langle>?r #
      ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_hole 0)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("Semantics_Ternary.approximating_bigstep_fun_singleton_prepend",
     "approximating_bigstep_fun ?\<gamma> ?p ?rsB ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rsC ?s ==>
      approximating_bigstep_fun ?\<gamma> ?p (?r # ?rsB) ?s =
      approximating_bigstep_fun ?\<gamma> ?p (?r # ?rsC) ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Semantics_Ternary.just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided",
     "(?s = Undecided ==>
       approximating_bigstep_fun ?\<gamma> ?p ?rs1.0 ?s =
       approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 ?s) ==>
      approximating_bigstep_fun ?\<gamma> ?p ?rs1.0 ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 ?s",
     template_implication
      ([template_implication
         ([template_equation (template_var 4, template_hole 1)],
          template_equation
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 4),
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 0),
              template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("Semantics_Ternary.seq'",
     "[| ?rs = ?rs\<^sub>1 @ ?rs\<^sub>2;
         ?\<gamma>,?p\<turnstile> \<langle>?rs\<^sub>1, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         ?\<gamma>,?p\<turnstile> \<langle>?rs\<^sub>2, ?t\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t' |]
      ==> ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t'",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 1, template_var 6),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3),
                  template_var 6),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 7),
               template_var 2),
             template_var 0)
           ))),
    ("Semantics_Ternary.optimize_matches_a",
     "ALL a m. matches ?\<gamma> m a = matches ?\<gamma> (?f a m) a ==>
      approximating_bigstep_fun ?\<gamma> ?p (optimize_matches_a ?f ?rs)
       ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_Ternary.good_ruleset_alt",
     "good_ruleset ?rs =
      (ALL r:set ?rs.
          get_action r = Accept |
          get_action r = Drop |
          get_action r = Reject |
          get_action r = Log | get_action r = Empty)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         t_empty))),
    ("Semantics_Ternary.optimize_matches",
     "ALL m a. matches ?\<gamma> (?f m) a ?p = matches ?\<gamma> m a ?p ==>
      approximating_bigstep_fun ?\<gamma> ?p (optimize_matches ?f ?rs) ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_Ternary.approximating_bigstep_fun_seq_Undecided_wf",
     "wf_ruleset ?\<gamma> ?p (?rs1.0 @ ?rs2.0) ==>
      (approximating_bigstep_fun ?\<gamma> ?p (?rs1.0 @ ?rs2.0) Undecided =
       Undecided) =
      (approximating_bigstep_fun ?\<gamma> ?p ?rs1.0 Undecided = Undecided &
       approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 Undecided =
       Undecided)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 1),
           template_hole 1),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 2),
                         template_var 1),
                       template_hole 1)),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2),
                       template_var 0),
                     template_hole 1)),
                 template_hole 1))
             )))),
    ("Semantics_Ternary.seqE_fst",
     "[| ?\<gamma>,?p\<turnstile> \<langle>?r #
     ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         !!t'. [| ?\<gamma>,?p\<turnstile> \<langle>[?r], ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
                  ?\<gamma>,?p\<turnstile> \<langle>?rs, t'\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics_Ternary.seq_split",
     "[| ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         ?rs = ?rs\<^sub>1 @ ?rs\<^sub>2;
         !!t'. [| ?\<gamma>,?p\<turnstile> \<langle>?rs\<^sub>1, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
                  ?\<gamma>,?p\<turnstile> \<langle>?rs\<^sub>2, t'\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics_Ternary.approximating_bigstep_fun_wf_postpend",
     "[| wf_ruleset ?\<gamma> ?p ?rsA; wf_ruleset ?\<gamma> ?p ?rsB;
         approximating_bigstep_fun ?\<gamma> ?p ?rsA ?s =
         approximating_bigstep_fun ?\<gamma> ?p ?rsB ?s |]
      ==> approximating_bigstep_fun ?\<gamma> ?p (?rsA @ ?rsC) ?s =
          approximating_bigstep_fun ?\<gamma> ?p (?rsB @ ?rsC) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Semantics_Ternary.optimize_matches_a_simplers",
     "[| simple_ruleset ?rs;
         ALL a m.
            a = Accept | a = Drop -->
            matches ?\<gamma> (?f a m) a = matches ?\<gamma> m a |]
      ==> approximating_bigstep_fun ?\<gamma> ?p (optimize_matches_a ?f ?rs)
           ?s =
          approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 4),
           template_var 0)))),
    ("Semantics_Ternary.approximating_bigstep_fun_seq_Undecided_t_wf",
     "wf_ruleset ?\<gamma> ?p (?rs1.0 @ ?rs2.0) ==>
      (approximating_bigstep_fun ?\<gamma> ?p (?rs1.0 @ ?rs2.0) Undecided =
       ?t) =
      (approximating_bigstep_fun ?\<gamma> ?p ?rs1.0 Undecided = Undecided &
       approximating_bigstep_fun ?\<gamma> ?p ?rs2.0 Undecided = ?t |
       approximating_bigstep_fun ?\<gamma> ?p ?rs1.0 Undecided = ?t &
       ?t ~= Undecided)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_hole 3),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_var 4),
                               template_var 3),
                             template_var 2),
                           template_hole 3)),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 4),
                             template_var 3),
                           template_var 1),
                         template_hole 3)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 4),
                             template_var 3),
                           template_var 2),
                         template_hole 3)),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 3))))
             )))),
    ("Semantics_Ternary.optimize_matches_generic",
     "[| ALL r:set ?rs. ?P (get_match r) (get_action r);
         !!m a.
            ?P m a ==>
            matches ?\<gamma> (?f m) a ?p = matches ?\<gamma> m a ?p |]
      ==> approximating_bigstep_fun ?\<gamma> ?p (optimize_matches ?f ?rs)
           ?s =
          approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 5),
           template_var 0)))),
    ("Semantics_Ternary.optimize_matches_option_generic",
     "[| ALL r:set ?rs. ?P (get_match r) (get_action r);
         !!m m' a.
            [| ?P m a; ?f m = Some m' |]
            ==> matches ?\<gamma> m' a ?p = matches ?\<gamma> m a ?p;
         !!m a. [| ?P m a; ?f m = None |] ==> ~ matches ?\<gamma> m a ?p |]
      ==> approximating_bigstep_fun ?\<gamma> ?p
           (optimize_matches_option ?f ?rs) ?s =
          approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 5)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 5),
           template_var 0)))),
    ("Semantics_Ternary.approximating_bigstep_fun_induct",
     "[| !!\<gamma> p s. ?P \<gamma> p [] s;
         !!\<gamma> p r rs X. ?P \<gamma> p (r # rs) (Decision X);
         !!\<gamma> p m a rs.
            [| ~ matches \<gamma> m a p; ?P \<gamma> p rs Undecided |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p;
               a = Log ==> ?P \<gamma> p rs Undecided;
               a = Empty ==> ?P \<gamma> p rs Undecided |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided |]
      ==> ?P ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Semantics_Ternary.approximating_bigstep_induct",
     "[| ?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t;
         !!t. ?P [] t t;
         !!m a.
            [| matches ?\<gamma> m a ?p; a = Accept |]
            ==> ?P [Rule m a] Undecided (Decision FinalAllow);
         !!m a.
            [| matches ?\<gamma> m a ?p; a = Drop | a = Reject |]
            ==> ?P [Rule m a] Undecided (Decision FinalDeny);
         !!m a.
            [| matches ?\<gamma> m a ?p; a = Log | a = Empty |]
            ==> ?P [Rule m a] Undecided Undecided;
         !!m a.
            ~ matches ?\<gamma> m a ?p ==>
            ?P [Rule m a] Undecided Undecided;
         !!rs X. ?P rs (Decision X) (Decision X);
         !!rs rs\<^sub>1 rs\<^sub>2 t t'.
            [| rs = rs\<^sub>1 @ rs\<^sub>2;
               ?\<gamma>,?p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
               ?P rs\<^sub>1 Undecided t;
               ?\<gamma>,?p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
               ?P rs\<^sub>2 t t' |]
            ==> ?P rs Undecided t' |]
      ==> ?P ?rs ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 23, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Semantics_Ternary.approximating_bigstep_fun_induct_wf",
     "[| wf_ruleset ?\<gamma> ?p ?rs; !!\<gamma> p s. ?P \<gamma> p [] s;
         !!\<gamma> p r rs X. ?P \<gamma> p (r # rs) (Decision X);
         !!\<gamma> p m a rs.
            [| ~ matches \<gamma> m a p; ?P \<gamma> p rs Undecided |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p; a = Accept |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p; a = Drop |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p; a = Reject |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p; a = Log;
               ?P \<gamma> p rs Undecided |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided;
         !!\<gamma> p m a rs.
            [| matches \<gamma> m a p; a = Empty;
               ?P \<gamma> p rs Undecided |]
            ==> ?P \<gamma> p (Rule m a # rs) Undecided |]
      ==> ?P ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           )))]
