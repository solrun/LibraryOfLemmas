Loading theory "Draft.Ternary" (required by "Draft.Matching_TernaryTemplates" via "Draft.Matching_Ternary")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Matching_TernaryTemplates" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.554s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Repeat_Stabilize"
### 0.153s elapsed time, 0.611s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.357s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.863s cpu time, 0.093s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.972s elapsed time, 3.686s cpu time, 0.816s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Matching_TernaryTemplates" via "Draft.Matching_Ternary")
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.069s elapsed time, 4.047s cpu time, 0.886s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.895s elapsed time, 6.893s cpu time, 1.148s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.070s elapsed time, 6.987s cpu time, 1.186s GC time
Loading theory "Draft.Templates" (required by "Draft.Matching_TernaryTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.139s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matching_TernaryTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.564s elapsed time, 1.179s cpu time, 0.118s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.544s elapsed time, 12.507s cpu time, 2.664s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Matching_TernaryTemplates")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.074s elapsed time, 1.262s cpu time, 0.170s GC time
Loading theory "Draft.Matching_TernaryTemplates"
val templateLemmas =
   [("Matching_Ternary.bunch_of_lemmata_about_matches",
     "matches ?\<gamma> MatchAny ?a ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Matching_Ternary.map_match_tac__does_not_use_TernaryOr",
     "~ ??.Matching_Ternary.ternary_has_or (map_match_tac ?\<beta> ?p ?m)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic ?uu ?uv MatchAny = MatchAny",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Matching_Ternary.opt_MatchAny_match_expr_correct",
     "matches ?\<gamma> (opt_MatchAny_match_expr ?m) =
      matches ?\<gamma> ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Matching_Ternary.bunch_of_lemmata_about_matches",
     "matches ?\<gamma> (MatchNot MatchAny) ?a ?p = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_hole 1)),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic ?uw ?ux (MatchNot MatchAny) =
      MatchNot MatchAny",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Matching_Ternary.matcheq_matchNone_not_matches",
     "matcheq_matchNone ?m ==> ~ matches ?\<gamma> ?m ?a ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Matching_Ternary.remove_unknowns_generic",
     "matches ?\<gamma> (remove_unknowns_generic ?\<gamma> ?a ?m) ?a =
      matches ?\<gamma> ?m ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_var 1))),
    ("Matching_Ternary.matches_not_idem",
     "matches ?\<gamma> (MatchNot (MatchNot ?m)) ?a ?p =
      matches ?\<gamma> ?m ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_hole 0,
               template_app (template_hole 0, template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Matching_Ternary.no_primitives_no_unknown",
     "~ has_primitive ?m ==>
      ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~=
      TernaryUnknown",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_hole 0)
           ))),
    ("Matching_Ternary.matcheq_matchAny",
     "~ has_primitive ?m ==>
      matcheq_matchAny ?m = matches ?\<gamma> ?m ?a ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("Matching_Ternary.matcheq_matchNone",
     "~ has_primitive ?m ==>
      matcheq_matchNone ?m = (~ matches ?\<gamma> ?m ?a ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Matching_Ternary.matches_and_comm",
     "matches ?\<gamma> (MatchAnd ?m ?m') ?a ?p =
      matches ?\<gamma> (MatchAnd ?m' ?m) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_var 1),
         template_var 0))),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
       (MatchNot (MatchNot ?m)) =
      remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Matching_Ternary.matches_tuple",
     "matches (?\<beta>, ?\<alpha>) ?m ?a ?p =
      ternary_to_bool_unknown_match_tac ?\<alpha> ?a ?p
       (ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 2))))),
    ("Matching_Ternary.match_raw_ternary",
     "matches (?\<beta>, ?\<alpha>) (Match ?expr) ?a ?p =
      (case ?\<beta> ?expr ?p of TernaryTrue => True | TernaryFalse => False
       | TernaryUnknown => ?\<alpha> ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 4, template_var 2),
           template_var 0)))),
    ("Matching_Ternary.no_primitives_matchNot",
     "~ has_primitive ?m ==>
      matches ?\<gamma> (MatchNot ?m) ?a ?p =
      (~ matches ?\<gamma> ?m ?a ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Matching_Ternary.matches_dest",
     "[| matches ?\<gamma> (MatchAnd ?m ?m') ?a ?p;
         ~ matches ?\<gamma> ?m ?a ?p |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_hole 0))),
    ("Matching_Ternary.matches_dest",
     "[| matches ?\<gamma> (MatchAnd ?m ?m') ?a ?p;
         ~ matches ?\<gamma> ?m' ?a ?p |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate (template_hole 0))),
    ("Matching_Ternary.matches_case",
     "matches ?\<gamma> ?m ?a ?p =
      (case ternary_eval (map_match_tac (fst ?\<gamma>) ?p ?m) of
       None => snd ?\<gamma> ?a ?p | Some b => b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 0),
             template_var 2))))),
    ("Matching_Ternary.MatchOr",
     "matches ?\<gamma> (MatchOr ?m1.0 ?m2.0) ?a ?p =
      (matches ?\<gamma> ?m1.0 ?a ?p | matches ?\<gamma> ?m2.0 ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matching_Ternary.bunch_of_lemmata_about_matches",
     "matches ?\<gamma> (MatchAnd ?m1.0 ?m2.0) ?a ?p =
      (matches ?\<gamma> ?m1.0 ?a ?p & matches ?\<gamma> ?m2.0 ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matching_Ternary.matches_case_tuple",
     "matches (?\<beta>, ?\<alpha>) ?m ?a ?p =
      (case ternary_eval (map_match_tac ?\<beta> ?p ?m) of
       None => ?\<alpha> ?a ?p | Some b => b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 2))))),
    ("Matching_Ternary.matches_case_ternaryvalue_tuple",
     "matches (?\<beta>, ?\<alpha>) ?m ?a ?p =
      (case ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) of
       TernaryTrue => True | TernaryFalse => False
       | TernaryUnknown => ?\<alpha> ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 2))))),
    ("Matching_Ternary.match_raw_bool",
     "matches (?\<beta>, ?\<alpha>) (Match ?expr) ?a ?p =
      (case ternary_to_bool (?\<beta> ?expr ?p) of None => ?\<alpha> ?a ?p
       | Some r => r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 2),
             template_var 0))))),
    ("Matching_Ternary.matches_simp3",
     "[| matches ?\<gamma> (MatchNot ?m) ?a ?p;
         matches ?\<gamma> ?m ?a ?p |]
      ==> snd ?\<gamma> ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Matching_Ternary.matches_simps",
     "matches ?\<gamma> ?m ?a ?p ==>
      matches ?\<gamma> (MatchAnd ?m ?m') ?a ?p =
      matches ?\<gamma> ?m' ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 0),
             template_var 2),
           template_var 1)))),
    ("Matching_Ternary.matches_simps",
     "matches ?\<gamma> ?m ?a ?p ==>
      matches ?\<gamma> (MatchAnd ?m' ?m) ?a ?p =
      matches ?\<gamma> ?m' ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 0),
             template_var 2),
           template_var 1)))),
    ("Matching_Ternary.packet_independent_unknown_match",
     "[| ?a = Accept | ?a = Drop; packet_independent_\<alpha> ?\<alpha> |]
      ==> (~ unknown_not_match_any ?\<alpha> ?a) =
          unknown_match_all ?\<alpha> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_hole 5))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Matching_Ternary.MatchOr_MatchNot",
     "matches ?\<gamma> (MatchNot (MatchOr ?m1.0 ?m2.0)) ?a ?p =
      (matches ?\<gamma> (MatchNot ?m1.0) ?a ?p &
       matches ?\<gamma> (MatchNot ?m2.0) ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 3)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Matching_Ternary.matches_DeMorgan",
     "matches ?\<gamma> (MatchNot (MatchAnd ?m1.0 ?m2.0)) ?a ?p =
      (matches ?\<gamma> (MatchNot ?m1.0) ?a ?p |
       matches ?\<gamma> (MatchNot ?m2.0) ?a ?p)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_app (template_hole 2, template_var 3)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
       (MatchAnd ?m1.0 ?m2.0) =
      MatchAnd (remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a ?m1.0)
       (remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a ?m2.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 0)))),
    ("Matching_Ternary.matches_MatchNot_no_unknowns",
     "~ has_unknowns ?\<beta> ?m ==>
      matches (?\<beta>, ?\<alpha>) (MatchNot ?m) ?a ?p =
      (~ matches (?\<beta>, ?\<alpha>) ?m ?a ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_app (template_hole 0, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2)),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Matching_Ternary.wf_unknown_match_tacD_False2",
     "[| wf_unknown_match_tac ?\<alpha>;
         matches (?\<beta>, ?\<alpha>) ?m Reject ?p;
         ~ matches (?\<beta>, ?\<alpha>) ?m Drop ?p |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 3)),
                  template_var 1),
                template_hole 3),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 3)),
                      template_var 1),
                    template_hole 1),
                  template_var 0)
                )
            )],
       template_predicate (template_hole 0))),
    ("Matching_Ternary.wf_unknown_match_tacD_False1",
     "[| wf_unknown_match_tac ?\<alpha>;
         ~ matches (?\<beta>, ?\<alpha>) ?m Reject ?p;
         matches (?\<beta>, ?\<alpha>) ?m Drop ?p |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 2),
                          template_var 3)),
                      template_var 1),
                    template_hole 2),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 3)),
                  template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Matching_Ternary.remove_unknowns_generic_specification",
     "[| ?a = Accept | ?a = Drop; packet_independent_\<alpha> ?\<alpha>;
         packet_independent_\<beta>_unknown ?\<beta> |]
      ==> ~ has_unknowns ?\<beta>
             (remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7)),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_hole 6))
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 2)),
                     template_var 3),
                   template_var 0))
               )
           ))),
    ("Matching_Ternary.MatchNot_ternary_ternary_eval",
     "ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m') =
      ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ==>
      matches (?\<beta>, ?\<alpha>) (MatchNot ?m') ?a ?p =
      matches (?\<beta>, ?\<alpha>) (MatchNot ?m) ?a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)),
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_app (template_hole 0, template_var 2)),
             template_var 0),
           template_var 4)))),
    ("Matching_Ternary.matches_iff_apply_f",
     "ternary_ternary_eval (map_match_tac ?\<beta> ?p (?f ?m)) =
      ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ==>
      matches (?\<beta>, ?\<alpha>) (?f ?m) ?a ?p =
      matches (?\<beta>, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app (template_var 3, template_var 2))),
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_app (template_var 3, template_var 2)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("Matching_Ternary.matches_iff_apply_f_generic",
     "ternary_ternary_eval
       (map_match_tac ?\<beta> ?p (?f (?\<beta>, ?\<alpha>) ?a ?m)) =
      ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ==>
      matches (?\<beta>, ?\<alpha>) (?f (?\<beta>, ?\<alpha>) ?a ?m) ?a ?p =
      matches (?\<beta>, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_var 3,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 2)),
                  template_var 1),
                template_var 0))),
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_var 3,
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_var 0),
             template_var 1),
           template_var 4)))),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a (Match ?A) =
      (if ALL p.
             ternary_ternary_eval (map_match_tac ?\<beta> p (Match ?A)) =
             TernaryUnknown
       then if ALL p. ?\<alpha> ?a p then MatchAny
            else if ALL p. ~ ?\<alpha> ?a p then MatchNot MatchAny
                 else Match ?A
       else Match ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_hole 2),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty)),
                 template_app (template_hole 0, template_hole 2)),
               template_app (template_hole 9, template_var 0)))),
         template_app (template_hole 9, template_var 0)))),
    ("Matching_Ternary.matches_casesE",
     "[| matches (?\<beta>, ?\<alpha>) ?m ?a ?p;
         [| ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) =
            TernaryUnknown;
            ?\<alpha> ?a ?p |]
         ==> ?P;
         ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) =
         TernaryTrue ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1),
                 template_var 3)),
             template_hole 1)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 4, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1),
                 template_var 3)),
             template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
       (MatchNot (Match ?A)) =
      (if ALL p.
             ternary_ternary_eval (map_match_tac ?\<beta> p (Match ?A)) =
             TernaryUnknown
       then if ALL p. ?\<alpha> ?a p then MatchAny
            else if ALL p. ~ ?\<alpha> ?a p then MatchNot MatchAny
                 else MatchNot (Match ?A)
       else MatchNot (Match ?A))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 9,
           template_app (template_hole 8, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty)),
                 template_app (template_hole 9, template_hole 1)),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0))))),
         template_app
          (template_hole 9,
           template_app (template_hole 8, template_var 0))))),
    ("Matching_Ternary.matches_induction_case_MatchNot",
     "[| ?\<alpha> Drop ~= ?\<alpha> Accept;
         packet_independent_\<alpha> ?\<alpha>;
         ALL a.
            matches (?\<beta>, ?\<alpha>) ?m' a ?p =
            matches (?\<beta>, ?\<alpha>) ?m a ?p |]
      ==> matches (?\<beta>, ?\<alpha>) (MatchNot ?m') ?a ?p =
          matches (?\<beta>, ?\<alpha>) (MatchNot ?m) ?a ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 5, template_hole 7),
              template_app (template_var 5, template_hole 6))
            ),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5)),
               template_app (template_hole 0, template_var 3)),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5)),
               template_app (template_hole 0, template_var 1)),
             template_var 0),
           template_var 2)))),
    ("Matching_Ternary.remove_unknowns_generic_simps2",
     "remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
       (MatchNot (MatchAnd ?m1.0 ?m2.0)) =
      (if remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
           (MatchNot ?m1.0) =
          MatchAny |
          remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
           (MatchNot ?m2.0) =
          MatchAny
       then MatchAny
       else if remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                (MatchNot ?m1.0) =
               MatchNot MatchAny
            then remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                  (MatchNot ?m2.0)
            else if remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                     (MatchNot ?m2.0) =
                    MatchNot MatchAny
                 then remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                       (MatchNot ?m1.0)
                 else MatchNot
                       (MatchAnd
                         (MatchNot
                           (remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                             (MatchNot ?m1.0)))
                         (MatchNot
                           (remove_unknowns_generic (?\<beta>, ?\<alpha>) ?a
                             (MatchNot ?m2.0)))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 5, template_var 4),
                                 template_var 3)),
                             template_var 2),
                           template_app (template_hole 4, template_var 1))),
                       template_hole 0)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 4),
                               template_var 3)),
                           template_var 2),
                         template_app (template_hole 4, template_var 0))),
                     template_hole 0))),
               template_hole 0),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 4),
                               template_var 3)),
                           template_var 2),
                         template_app (template_hole 4, template_var 1))),
                     template_app (template_hole 4, template_hole 0))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 4),
                         template_var 3)),
                     template_var 2),
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 5, template_var 4),
                                 template_var 3)),
                             template_var 2),
                           template_app (template_hole 4, template_var 0))),
                       template_app (template_hole 4, template_hole 0))),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 4),
                           template_var 3)),
                       template_var 2),
                     template_app (template_hole 4, template_var 1))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 5, template_var 4),
                                 template_var 3)),
                             template_var 2),
                           template_app
                            (template_hole 4, template_var 1)))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 4),
                               template_var 3)),
                           template_var 2),
                         template_app
                          (template_hole 4, template_var 0))))))))
           )))]:
   (string * thm * template) list
### theory "Draft.Matching_TernaryTemplates"
### 0.374s elapsed time, 0.518s cpu time, 0.061s GC time
val it = (): unit
