Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Loading theory "Draft.List_Misc" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Loading theory "Draft.Ternary" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.035s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.129s elapsed time, 0.517s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.517s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.846s cpu time, 0.083s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.300s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.894s elapsed time, 3.401s cpu time, 0.708s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.981s elapsed time, 3.723s cpu time, 0.781s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.756s elapsed time, 6.430s cpu time, 1.047s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.118s elapsed time, 7.185s cpu time, 1.655s GC time
Loading theory "Draft.Templates" (required by "Draft.Normalized_MatchesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.181s cpu time, 0.037s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Normalized_MatchesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.578s elapsed time, 1.189s cpu time, 0.075s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.916s elapsed time, 13.609s cpu time, 3.609s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.070s elapsed time, 1.271s cpu time, 0.182s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches" via "Draft.Fixed_Action")
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.910s elapsed time, 1.837s cpu time, 1.271s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.Normalized_MatchesTemplates" via "Draft.Normalized_Matches")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.257s elapsed time, 0.291s cpu time, 0.046s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.Normalized_MatchesTemplates")
Found termination order: "size <*mlex*> {}"
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.439s elapsed time, 0.457s cpu time, 0.000s GC time
Loading theory "Draft.Normalized_MatchesTemplates"
val templateLemmas =
   [("Normalized_Matches.normalize_match_empty_iff_matcheq_matchNone",
     "(normalize_match ?m = []) = matcheq_matchNone ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Normalized_Matches.normalized_nnf_match_normalize_match",
     "ALL m':set (normalize_match ?m). normalized_nnf_match m'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("Normalized_Matches.simple_ruleset_normalize_rules_dnf",
     "simple_ruleset ?rs ==> simple_ruleset (normalize_rules_dnf ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Normalized_Matches.good_ruleset_normalize_rules_dnf",
     "good_ruleset ?rs ==> good_ruleset (normalize_rules_dnf ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Normalized_Matches.normalized_nnf_match_MatchNot_D",
     "normalized_nnf_match (MatchNot ?m) ==> normalized_nnf_match ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Normalized_Matches.normalize_rules_dnf_normalized_nnf_match",
     "ALL x:set (normalize_rules_dnf ?rs).
         normalized_nnf_match (get_match x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           t_empty)
         )),
    ("Normalized_Matches.normalize_match_not_matcheq_matchNone",
     "ALL m':set (normalize_match ?m). ~ matcheq_matchNone m'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           t_empty)
         )),
    ("Normalized_Matches.simple_ruleset_normalize_rules",
     "simple_ruleset ?rs ==> simple_ruleset (normalize_rules ?f ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Normalized_Matches.good_ruleset_normalize_rules",
     "good_ruleset ?rs ==> good_ruleset (normalize_rules ?f ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Normalized_Matches.normalize_rules_dnf_append",
     "normalize_rules_dnf (?rs1.0 @ ?rs2.0) =
      normalize_rules_dnf ?rs1.0 @ normalize_rules_dnf ?rs2.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Normalized_Matches.normalize_match_already_normalized",
     "normalized_nnf_match ?m ==> normalize_match ?m = [?m]",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Normalized_Matches.wf_ruleset_normalize_rules_dnf",
     "wf_ruleset ?\<gamma> ?p ?rs ==>
      wf_ruleset ?\<gamma> ?p (normalize_rules_dnf ?rs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Normalized_Matches.matches_to_match_list_normalize",
     "matches ?\<gamma> ?m ?a ?p =
      match_list ?\<gamma> (normalize_match ?m) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Normalized_Matches.normalize_match_empty",
     "normalize_match ?m = [] ==> ~ matches ?\<gamma> ?m ?a ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), template_hole 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Normalized_Matches.match_list_normalize_match",
     "match_list ?\<gamma> [?m] ?a ?p =
      match_list ?\<gamma> (normalize_match ?m) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Normalized_Matches.normalize_rules_fst",
     "normalize_rules ?f (?r # ?rs) =
      normalize_rules ?f [?r] @ normalize_rules ?f ?rs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Normalized_Matches.normalize_rules_singleton",
     "normalize_rules ?f [Rule ?m ?a] = map (%m. Rule m ?a) (?f ?m)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, t_empty),
         template_app (template_var 2, template_var 1)))),
    ("Normalized_Matches.good_ruleset_normalize_match",
     "good_ruleset [Rule ?m ?a] ==>
      good_ruleset (map (%m. Rule m ?a) (normalize_match ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Normalized_Matches.normalize_rules_concat_map",
     "normalize_rules ?f ?rs =
      concat
       (map (%r. map (%m. Rule m (get_action r)) (?f (get_match r))) ?rs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)))),
    ("Normalized_Matches.normalize_rules_dnf_correct",
     "wf_ruleset ?\<gamma> ?p ?rs ==>
      approximating_bigstep_fun ?\<gamma> ?p (normalize_rules_dnf ?rs) ?s =
      approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Normalized_Matches.in_normalized_matches",
     "?ls : set (normalize_match ?m) & matches ?\<gamma> ?ls ?a ?p ==>
      matches ?\<gamma> ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)))),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 4),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Normalized_Matches.wf_ruleset_normalize_match",
     "wf_ruleset ?\<gamma> ?p [Rule ?m ?a] ==>
      wf_ruleset ?\<gamma> ?p (map (%m. Rule m ?a) (normalize_match ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Normalized_Matches.normalize_match_wf_ruleset",
     "wf_ruleset ?\<gamma> ?p (map (%m. Rule m ?a) (normalize_match ?m)) ==>
      wf_ruleset ?\<gamma> ?p [Rule ?m ?a]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, t_empty),
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Normalized_Matches.normalize_match_correct",
     "approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (normalize_match ?m)) ?s =
      approximating_bigstep_fun ?\<gamma> ?p [Rule ?m ?a] ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_hole 0)),
         template_var 0))),
    ("Normalized_Matches.optimize_matches_normalized_nnf_match",
     "[| ALL r:set ?rs. normalized_nnf_match (get_match r);
         ALL m. normalized_nnf_match m --> normalized_nnf_match (?f m) |]
      ==> ALL r:set (optimize_matches ?f ?rs).
             normalized_nnf_match (get_match r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Normalized_Matches.normalize_rules_preserves",
     "[| ALL r:set ?rs. ?P (get_match r);
         ALL m. ?P m --> (ALL m':set (?f m). ?P m') |]
      ==> ALL r:set (normalize_rules ?f ?rs). ?P (get_match r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             t_empty)
           ))),
    ("Normalized_Matches.normalize_rules_property",
     "[| ALL r:set ?rs. ?P (get_match r);
         ALL m. ?P m --> (ALL m':set (?f m). ?Q m') |]
      ==> ALL r:set (normalize_rules ?f ?rs). ?Q (get_match r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3))),
             t_empty)
           ))),
    ("Normalized_Matches.normalize_rules_match_list_semantics",
     "[| ALL m a.
            match_list ?\<gamma> (?f m) a ?p = matches ?\<gamma> m a ?p;
         simple_ruleset ?rs |]
      ==> approximating_bigstep_fun ?\<gamma> ?p (normalize_rules ?f ?rs)
           ?s =
          approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Normalized_Matches.optimize_matches_option_normalized_nnf_match",
     "[| !!r. r : set ?rs ==> normalized_nnf_match (get_match r);
         !!m m'.
            [| normalized_nnf_match m; ?f m = Some m' |]
            ==> normalized_nnf_match m' |]
      ==> ALL r:set (optimize_matches_option ?f ?rs).
             normalized_nnf_match (get_match r)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Normalized_Matches.normalize_rules_match_list_semantics_3",
     "[| ALL m a.
            ?P m -->
            match_list ?\<gamma> (?f m) a ?p = matches ?\<gamma> m a ?p;
         simple_ruleset ?rs; ALL r:set ?rs. ?P (get_match r) |]
      ==> approximating_bigstep_fun ?\<gamma> ?p (normalize_rules ?f ?rs)
           ?s =
          approximating_bigstep_fun ?\<gamma> ?p ?rs ?s",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Normalized_MatchesTemplates"
### 0.445s elapsed time, 0.624s cpu time, 0.099s GC time
val it = (): unit
