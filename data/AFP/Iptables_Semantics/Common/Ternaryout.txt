Loading theory "Draft.Ternary" (required by "Draft.TernaryTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.587s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.832s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.363s elapsed time, 1.425s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.001s elapsed time, 3.743s cpu time, 0.868s GC time
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.867s cpu time, 0.837s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.840s elapsed time, 6.153s cpu time, 1.048s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.996s elapsed time, 5.917s cpu time, 1.053s GC time
Loading theory "Draft.Templates" (required by "Draft.TernaryTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TernaryTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.452s elapsed time, 0.493s cpu time, 0.053s GC time
Loading theory "Draft.TernaryTemplates"
val templateLemmas =
   [("Ternary.NNF_ternary_NegationNormalForm",
     "NegationNormalForm (NNF_ternary ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ternary.bool_to_ternary_simps",
     "bool_to_ternary ?X ~= TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Ternary.eval_ternary_simps",
     "eval_ternary_And TernaryFalse ?x = TernaryFalse",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Ternary.eval_ternary_simps", "eval_ternary_And TernaryTrue ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ternary.eval_ternary_simps",
     "eval_ternary_And ?x TernaryFalse = TernaryFalse",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Ternary.eval_ternary_simps", "eval_ternary_And ?x TernaryTrue = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ternary.eval_ternary_idempotence_Not",
     "eval_ternary_Not (eval_ternary_Not ?a) = ?a",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ternary.bool_to_ternary_simps",
     "eval_ternary_Not (bool_to_ternary ?X) ~= TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Ternary.bool_to_ternary_simps",
     "(bool_to_ternary ?X = TernaryTrue) = ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Ternary.bool_to_ternary_Unknown",
     "(bool_to_ternary ?t = TernaryUnknown) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Ternary.ternary_to_bool_bool_to_ternary",
     "ternary_to_bool (bool_to_ternary ?X) = Some ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.NNF_ternary_correct",
     "ternary_ternary_eval (NNF_ternary ?t) = ternary_ternary_eval ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ternary.bool_to_ternary_simps",
     "(bool_to_ternary ?Y = TernaryFalse) = (~ ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.bool_to_ternary_simps",
     "(eval_ternary_Not (bool_to_ternary ?X) = TernaryFalse) = ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0),
       template_var 0)),
    ("Ternary.eval_ternary_And_comm",
     "eval_ternary_And ?t1.0 ?t2.0 = eval_ternary_And ?t2.0 ?t1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Not (bool_to_ternary ?X) = bool_to_ternary (~ ?X)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ternary.ternary_ternary_eval_idempotence_Not",
     "ternary_ternary_eval (TernaryNot (TernaryNot ?a)) =
      ternary_ternary_eval ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Ternary.ternary_to_bool_None",
     "(ternary_to_bool ?t = None) = (?t = TernaryUnknown)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryFalse) = (?tv = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryTrue) = (?tv = TernaryFalse)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryUnknown) = (?tv = TernaryUnknown)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.bool_to_ternary_simps",
     "(eval_ternary_Not (bool_to_ternary ?X) = TernaryTrue) = (~ ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.ternary_ternary_eval_TernaryAnd_comm",
     "ternary_ternary_eval (TernaryAnd ?t1.0 ?t2.0) =
      ternary_ternary_eval (TernaryAnd ?t2.0 ?t1.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ternary.eval_ternary_Not_UnknownD",
     "eval_ternary_Not ?t = TernaryUnknown ==> ?t = TernaryUnknown",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.eval_ternaryD",
     "eval_ternary_Not ?tv = TernaryTrue ==> ?tv = TernaryFalse",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.eval_ternary_DeMorgan",
     "eval_ternary_Not (eval_ternary_And ?a ?b) =
      eval_ternary_Or (eval_ternary_Not ?a) (eval_ternary_Not ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ternary.eval_ternary_DeMorgan",
     "eval_ternary_Not (eval_ternary_Or ?a ?b) =
      eval_ternary_And (eval_ternary_Not ?a) (eval_ternary_Not ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_And (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 & ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Imp (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 --> ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Or (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 | ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And ?T (bool_to_ternary ?P) = TernaryTrue) =
      (?P & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And (bool_to_ternary ?P) ?T = TernaryTrue) =
      (?P & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_ternary_eval_DeMorgan",
     "ternary_ternary_eval (TernaryNot (TernaryAnd ?a ?b)) =
      ternary_ternary_eval (TernaryOr (TernaryNot ?a) (TernaryNot ?b))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv ~= TernaryFalse) =
      (?tv = TernaryFalse | ?tv = TernaryUnknown)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 3, template_var 0),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv ~= TernaryTrue) =
      (?tv = TernaryTrue | ?tv = TernaryUnknown)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 3, template_var 0),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_And ?t1.0 ?t2.0 = TernaryFalse) =
      (?t1.0 = TernaryFalse | ?t2.0 = TernaryFalse)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_And ?t1.0 ?t2.0 = TernaryTrue) =
      (?t1.0 = TernaryTrue & ?t2.0 = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.eval_ternaryD",
     "eval_ternary_And ?t1.0 ?t2.0 = TernaryFalse ==>
      ?t1.0 = TernaryFalse | ?t2.0 = TernaryFalse",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And ?T (ternary_ternary_eval ?x) = TernaryTrue) =
      (ternary_ternary_eval ?x = TernaryTrue & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And (ternary_ternary_eval ?x) ?T = TernaryTrue) =
      (ternary_ternary_eval ?x = TernaryTrue & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_to_bool_Some",
     "(ternary_to_bool ?t = Some ?X) =
      (?t = TernaryTrue & ?X = True | ?t = TernaryFalse & ?X = False)",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_hole 0)))
           ))),
    ("Ternary.ternary_to_bool_SomeE",
     "[| ternary_to_bool ?t = Some ?X;
         [| ?t = TernaryTrue; ?X = True |] ==> ?P;
         [| ?t = TernaryFalse; ?X = False |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 1, template_hole 2)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TernaryTemplates"
### 0.308s elapsed time, 0.454s cpu time, 0.058s GC time
val it = (): unit
