   [("Word_Upto.word_upto_cons_front", "word_upto ?a ?b = word_upto' ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Word_Upto.distinct_word_upto",
     "?a <= ?b ==> distinct (word_upto ?a ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Word_Upto.sorted_word_upto", "?a <= ?b ==> sorted (word_upto ?a ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Word_Upto.word_upto_alt",
     "?a <= ?b ==>
      word_upto ?a ?b = map word_of_nat [unat ?a..<Suc (unat ?b)]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0))))))),
    ("Word_Upto.word_upto_upt",
     "word_upto ?a ?b =
      (if ?a <= ?b then map word_of_nat [unat ?a..<Suc (unat ?b)]
       else word_upto ?a ?b)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_var 0)))),
    ("Word_Upto.word_upto_set_eq",
     "?a <= ?b ==> (?x : set (word_upto ?a ?b)) = (?a <= ?x & ?x <= ?b)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1))))),
    ("Word_Upto.word_upto_distinct_hlp",
     "[| ?a <= ?b; ?a ~= ?b |] ==> ?b ~: set (word_upto ?a (?b - 1))",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))))
               )
           ))),
    ("Word_Upto.word_upto_eq_upto",
     "[| ?s <= ?e; ?e <= unat ?max_word |]
      ==> word_upto (word_of_nat ?s) (word_of_nat ?e) =
          map word_of_nat [?s..<Suc ?e]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))))))]
