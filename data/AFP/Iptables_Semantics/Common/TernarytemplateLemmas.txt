   [("Ternary.NNF_ternary_NegationNormalForm",
     "NegationNormalForm (NNF_ternary ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ternary.bool_to_ternary_simps",
     "bool_to_ternary ?X ~= TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Ternary.eval_ternary_simps",
     "eval_ternary_And TernaryFalse ?x = TernaryFalse",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Ternary.eval_ternary_simps", "eval_ternary_And TernaryTrue ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ternary.eval_ternary_simps",
     "eval_ternary_And ?x TernaryFalse = TernaryFalse",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Ternary.eval_ternary_simps", "eval_ternary_And ?x TernaryTrue = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ternary.eval_ternary_idempotence_Not",
     "eval_ternary_Not (eval_ternary_Not ?a) = ?a",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ternary.bool_to_ternary_simps",
     "eval_ternary_Not (bool_to_ternary ?X) ~= TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Ternary.bool_to_ternary_simps",
     "(bool_to_ternary ?X = TernaryTrue) = ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Ternary.bool_to_ternary_Unknown",
     "(bool_to_ternary ?t = TernaryUnknown) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Ternary.ternary_to_bool_bool_to_ternary",
     "ternary_to_bool (bool_to_ternary ?X) = Some ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.NNF_ternary_correct",
     "ternary_ternary_eval (NNF_ternary ?t) = ternary_ternary_eval ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ternary.bool_to_ternary_simps",
     "(bool_to_ternary ?Y = TernaryFalse) = (~ ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.bool_to_ternary_simps",
     "(eval_ternary_Not (bool_to_ternary ?X) = TernaryFalse) = ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0),
       template_var 0)),
    ("Ternary.eval_ternary_And_comm",
     "eval_ternary_And ?t1.0 ?t2.0 = eval_ternary_And ?t2.0 ?t1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Not (bool_to_ternary ?X) = bool_to_ternary (~ ?X)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ternary.ternary_ternary_eval_idempotence_Not",
     "ternary_ternary_eval (TernaryNot (TernaryNot ?a)) =
      ternary_ternary_eval ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Ternary.ternary_to_bool_None",
     "(ternary_to_bool ?t = None) = (?t = TernaryUnknown)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryFalse) = (?tv = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryTrue) = (?tv = TernaryFalse)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv = TernaryUnknown) = (?tv = TernaryUnknown)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.bool_to_ternary_simps",
     "(eval_ternary_Not (bool_to_ternary ?X) = TernaryTrue) = (~ ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Ternary.ternary_ternary_eval_TernaryAnd_comm",
     "ternary_ternary_eval (TernaryAnd ?t1.0 ?t2.0) =
      ternary_ternary_eval (TernaryAnd ?t2.0 ?t1.0)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ternary.eval_ternary_Not_UnknownD",
     "eval_ternary_Not ?t = TernaryUnknown ==> ?t = TernaryUnknown",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 0), template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.eval_ternaryD",
     "eval_ternary_Not ?tv = TernaryTrue ==> ?tv = TernaryFalse",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Ternary.eval_ternary_DeMorgan",
     "eval_ternary_Not (eval_ternary_And ?a ?b) =
      eval_ternary_Or (eval_ternary_Not ?a) (eval_ternary_Not ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ternary.eval_ternary_DeMorgan",
     "eval_ternary_Not (eval_ternary_Or ?a ?b) =
      eval_ternary_And (eval_ternary_Not ?a) (eval_ternary_Not ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_And (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 & ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Imp (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 --> ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.bool_to_ternary_pullup",
     "eval_ternary_Or (bool_to_ternary ?X1.0) (bool_to_ternary ?X2.0) =
      bool_to_ternary (?X1.0 | ?X2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And ?T (bool_to_ternary ?P) = TernaryTrue) =
      (?P & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And (bool_to_ternary ?P) ?T = TernaryTrue) =
      (?P & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_ternary_eval_DeMorgan",
     "ternary_ternary_eval (TernaryNot (TernaryAnd ?a ?b)) =
      ternary_ternary_eval (TernaryOr (TernaryNot ?a) (TernaryNot ?b))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv ~= TernaryFalse) =
      (?tv = TernaryFalse | ?tv = TernaryUnknown)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 3, template_var 0),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_Not ?tv ~= TernaryTrue) =
      (?tv = TernaryTrue | ?tv = TernaryUnknown)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 3, template_var 0),
             template_hole 2)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_And ?t1.0 ?t2.0 = TernaryFalse) =
      (?t1.0 = TernaryFalse | ?t2.0 = TernaryFalse)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_lift",
     "(eval_ternary_And ?t1.0 ?t2.0 = TernaryTrue) =
      (?t1.0 = TernaryTrue & ?t2.0 = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.eval_ternaryD",
     "eval_ternary_And ?t1.0 ?t2.0 = TernaryFalse ==>
      ?t1.0 = TernaryFalse | ?t2.0 = TernaryFalse",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And ?T (ternary_ternary_eval ?x) = TernaryTrue) =
      (ternary_ternary_eval ?x = TernaryTrue & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))
           ))),
    ("Ternary.eval_ternary_simps",
     "(eval_ternary_And (ternary_ternary_eval ?x) ?T = TernaryTrue) =
      (ternary_ternary_eval ?x = TernaryTrue & ?T = TernaryTrue)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 1))
           ))),
    ("Ternary.ternary_to_bool_Some",
     "(ternary_to_bool ?t = Some ?X) =
      (?t = TernaryTrue & ?X = True | ?t = TernaryFalse & ?X = False)",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_hole 0)))
           ))),
    ("Ternary.ternary_to_bool_SomeE",
     "[| ternary_to_bool ?t = Some ?X;
         [| ?t = TernaryTrue; ?X = True |] ==> ?P;
         [| ?t = TernaryFalse; ?X = False |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 1, template_hole 2)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]
