Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.496s cpu time, 0.048s GC time
Loading theory "Draft.iptables_Ln_tuned_parsed" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.Analyze_Synology_Diskstation")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.919s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.279s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs")
### theory "Draft.iptables_Ln_tuned_parsed"
### 0.343s elapsed time, 1.323s cpu time, 0.149s GC time
Loading theory "Draft.Analyze_Synology_Diskstation" (required by "Draft.Analyze_Synology_DiskstationTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.901s elapsed time, 3.393s cpu time, 0.751s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.013s elapsed time, 3.672s cpu time, 0.713s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/Synology_Diskstation_DS414/iptables-save
Loaded 26 lines of the filter table
Parsed 5 chain declarations
Parsed 21 rules
unfolding (this may take a while) ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.962s elapsed time, 7.038s cpu time, 0.992s GC time
Loading theory "Draft.Templates" (required by "Draft.Analyze_Synology_DiskstationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.232s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Analyze_Synology_DiskstationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.588s elapsed time, 2.303s cpu time, 0.159s GC time
Simplified term (1.705 seconds)
checked sanity with sanity_wf_ruleset (0.249 seconds)
Defining constant `ds2015_fw_def'
Defining constant `ds2015_fw_INPUT_default_policy_def'
Defining constant `ds2015_fw_FORWARD_default_policy_def'
Defining constant `ds2015_fw_OUTPUT_default_policy_def'
ds2015_fw ==
[(''DEFAULT_INPUT'',
  [Rule (Match (IIface (Iface ''lo''))) action.Accept,
   Rule (Match (CT_State {CT_Related, CT_Established})) action.Accept,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match (Dst_Ports (L4Ports 6 [(22, 22)])))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (Dst_Ports
        (L4Ports 6
          [(21, 21), (873, 873), (5005, 5005), (5006, 5006), (80, 80),
           (548, 548), (111, 111), (892, 892), (2049, 2049)])))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 17)) MATCHAND
     Match
      (Dst_Ports
        (L4Ports 17
          [(123, 123), (111, 111), (892, 892), (2049, 2049),
           (5353, 5353)])))
    action.Drop,
   Rule
    (Match (Src (IpAddrNetmask 3232235520 16)) MATCHAND
     Match (IIface (Iface ''eth0'')))
    action.Accept,
   Rule (Match (IIface (Iface ''eth0''))) action.Drop]),
 (''DOS_PROTECT'',
  [Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 1)) MATCHAND
     Match (Extra ''-m icmp --icmp-type 8 -m limit --limit 1/sec''))
    Return,
   Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 1)) MATCHAND
     Match (Extra ''-m icmp --icmp-type 8''))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags
        (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})) MATCHAND
     Match (Extra ''-m limit --limit 1/sec''))
    Return,
   Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags
        (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})) MATCHAND
     Match (Extra ''-m limit --limit 10000/sec --limit-burst 100''))
    Return,
   Rule
    (Match (IIface (Iface ''eth1'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 1)) MATCHAND
     Match (Extra ''-m icmp --icmp-type 8 -m limit --limit 1/sec''))
    Return,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 1)) MATCHAND
     Match (Extra ''-m icmp --icmp-type 8''))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags
        (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})) MATCHAND
     Match (Extra ''-m limit --limit 1/sec''))
    Return,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
    action.Drop,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags
        (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})) MATCHAND
     Match (Extra ''-m limit --limit 10000/sec --limit-burst 100''))
    Return,
   Rule
    (Match (IIface (Iface ''eth0'')) MATCHAND
     Match (Prot (Proto 6)) MATCHAND
     Match
      (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
    action.Drop]),
 (''FORWARD'', []),
 (''INPUT'',
  [Rule MatchAny (Call ''DOS_PROTECT''),
   Rule MatchAny (Call ''DEFAULT_INPUT'')]),
 (''OUTPUT'', [])]
ds2015_fw_INPUT_default_policy == action.Accept
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/Synology_Diskstation_DS414/iptables-save_jun_2015_cleanup
Loaded 28 lines of the filter table
Parsed 5 chain declarations
Parsed 23 rules
unfolding (this may take a while) ...
"[''ACCEPT     all  --  192.168.0.0/16            0.0.0.0/0    '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
"[''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
Simplified term (2.644 seconds)
"[Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 1)) MATCHAND Match (Extra ''-m icmp --icmp-type 8''))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 1)) MATCHAND Match (Extra ''-m icmp --icmp-type 8''))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
   action.Drop,
  Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule (Match (CT_State {CT_Related, CT_Established})) action.Accept,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (Dst_Ports
       (L4Ports 6
         [(21, 21), (873, 873), (5005, 5005), (5006, 5006), (80, 80),
          (548, 548), (111, 111), (892, 892), (2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match
     (Dst_Ports
       (L4Ports 17
         [(123, 123), (111, 111), (892, 892), (2049, 2049), (5353, 5353)])))
   action.Drop,
  Rule
   (Match (Src (IpAddrNetmask 3232235520 16)) MATCHAND
    Match (IIface (Iface ''eth0'')))
   action.Accept,
  Rule (Match (IIface (Iface ''eth0''))) action.Drop,
  Rule MatchAny action.Accept]"
  :: "32 common_primitive rule list"
checked sanity with sanity_wf_ruleset (0.847 seconds)
Defining constant `ds2015_2_fw_def'
Defining constant `ds2015_2_fw_INPUT_default_policy_def'
Defining constant `ds2015_2_fw_FORWARD_default_policy_def'
Defining constant `ds2015_2_fw_OUTPUT_default_policy_def'
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/Synology_Diskstation_DS414/ip6tables-save_jul_2016
Loaded 53 lines of the filter table
Parsed 6 chain declarations
Parsed 47 rules
unfolding (this may take a while) ...
"[''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) -i eth1 -p icmp ~~-m icmp --icmp-type 8~~ -j DROP'',
  ''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) -i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] -j DROP'',
  ''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] ~~-m limit --limit 10000/sec --limit-burst 100~~) -i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] -j DROP'',
  ''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] ~~-m limit --limit 10000/sec --limit-burst 100~~) NOT (-i eth0 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) -i eth0 -p icmp ~~-m icmp --icmp-type 8~~ -j DROP'',
  ''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] ~~-m limit --limit 10000/sec --limit-burst 100~~) NOT (-i eth0 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth0 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) -i eth0 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] -j DROP'',
  ''NOT (-i eth1 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) NOT (-i eth1 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] ~~-m limit --limit 10000/sec --limit-burst 100~~) NOT (-i eth0 -p icmp ~~-m icmp --icmp-type 8 -m limit --limit 1/sec~~) NOT (-i eth0 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_RST] ~~-m limit --limit 1/sec~~) NOT (-i eth0 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] ~~-m limit --limit 10000/sec --limit-burst 100~~) -i eth0 -p tcp --tcp-flags [TCP_SYN, TCP_ACK, TCP_FIN, TCP_RST] [TCP_SYN] -j DROP'',
  ''-i lo -j ACCEPT'', ''-m state --state ESTABLISHED,RELATED -j ACCEPT'',
  ''-i eth0 -p tcp -m tcp --dpts [22] -j DROP'',
  ''-i eth0 -p tcp -m tcp --dpts [21, 873, 5005, 5006, 80, 548, 111, 892, 2049] -j DROP'',
  ''-i eth0 -p udp -m udp --dpts [123, 111, 892, 2049, 5353] -j DROP'',
  ''-s 192.168.0.0/16 -i eth0 -j ACCEPT'', ''-i eth0 -j DROP'',
  '' -j ACCEPT'']"
  :: "char list list"
Simplified term (3.290 seconds)
"[Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(21, 21)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(873, 873)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(5005, 5006)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(80, 80)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(548, 548)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(123, 123)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(5353, 5353)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Src (IpAddrNetmask 3232235520 16)))
   action.Accept,
  Rule (Match (IIface (Iface ''eth0''))) action.Drop,
  Rule MatchAny action.Accept]"
  :: "32 common_primitive rule list"
"[Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(21, 21)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(873, 873)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(5005, 5006)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(80, 80)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(548, 548)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(123, 123)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(5353, 5353)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Src (IpAddrNetmask 3232235520 16)))
   action.Accept,
  Rule (Match (IIface (Iface ''eth0''))) action.Drop,
  Rule MatchAny action.Accept]"
  :: "32 common_primitive rule list"
checked sanity with sanity_wf_ruleset (0.626 seconds)
Defining constant `ds_2016_ipv6_def'
Defining constant `ds_2016_ipv6_INPUT_default_policy_def'
Defining constant `ds_2016_ipv6_FORWARD_default_policy_def'
Defining constant `ds_2016_ipv6_OUTPUT_default_policy_def'
"[Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(21, 21)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(873, 873)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(5005, 5006)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(80, 80)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(548, 548)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(123, 123)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(111, 111)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(892, 892)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(2049, 2049)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 17)) MATCHAND
    Match (Dst_Ports (L4Ports 17 [(5353, 5353)])))
   action.Drop,
  Rule
   (Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Src (IpAddrNetmask 3232235520 16)))
   action.Accept,
  Rule (Match (IIface (Iface ''eth0''))) action.Drop,
  Rule MatchAny action.Accept]"
  :: "32 common_primitive rule list"
### theory "Draft.Analyze_Synology_Diskstation"
### 13.399s elapsed time, 49.634s cpu time, 7.357s GC time
Loading theory "Draft.Analyze_Synology_DiskstationTemplates"
"[Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 1)) MATCHAND Match (Extra ''-m icmp --icmp-type 8''))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth1'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 1)) MATCHAND Match (Extra ''-m icmp --icmp-type 8''))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_RST})))
   action.Drop,
  Rule
   (\<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth1'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 1)) MATCHAND
                    Match
                     (Extra
                       ''-m icmp --icmp-type 8 -m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_RST})) MATCHAND
                    Match
                     (Extra ''-m limit --limit 1/sec'')\<rangle> MATCHAND
    \<not> \<langle>Match (IIface (Iface ''eth0'')) MATCHAND
                    Match (Prot (Proto 6)) MATCHAND
                    Match
                     (L4_Flags
                       (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                         {TCP_SYN})) MATCHAND
                    Match
                     (Extra
                       ''-m limit --limit 10000/sec --limit-burst 100'')\<rangle> MATCHAND
    Match (IIface (Iface ''eth0'')) MATCHAND
    Match (Prot (Proto 6)) MATCHAND
    Match
     (L4_Flags (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))
   action.Drop,
  Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule (Match (CT_State {CT_Related, CT_Established})) action.Accept,
  Rule
   (Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22)])))
   action.Accept,
  Rule
   (Match (Prot (Proto 6)) MATCHAND
    Match
     (Dst_Ports
       (L4Ports 6
         [(873, 873), (3260, 3260), (3261, 3261), (3262, 3262),
          (3240, 3259), (21, 21), (548, 548), (111, 111), (892, 892),
          (2049, 2049), (443, 443), (80, 80), (3493, 3493), (3306, 3306)])))
   action.Drop,
  Rule
   (Match (Prot (Proto 6)) MATCHAND
    Match (Dst_Ports (L4Ports 6 [(22, 22), (23, 23)])))
   action.Drop,
  Rule
   (Match (Prot (Proto 17)) MATCHAND
    Match
     (Dst_Ports
       (L4Ports 17
         [(68, 68), (67, 67), (123, 123), (514, 514), (19999, 19999),
          (5353, 5353), (161, 161), (111, 111), (892, 892), (2049, 2049)])))
   action.Drop,
  Rule (Match (Src (IpAddrNetmask 3232235520 16))) action.Accept,
  Rule MatchAny action.Drop,
  Rule (Match (IIface (Iface ''eth0''))) action.Drop,
  Rule MatchAny action.Accept]"
  :: "32 common_primitive rule list"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Analyze_Synology_DiskstationTemplates"
### 1.606s elapsed time, 4.031s cpu time, 0.283s GC time
"[''ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0 in: lo   '',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 22'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 21'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 873'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 5005:5006'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 80'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 548'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 111'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 892'',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 2049'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 123'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 111'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 892'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 2049'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: eth0   dports: 5353'',
  ''ACCEPT     all  --  192.168.0.0/16            0.0.0.0/0 in: eth0   '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0 in: eth0   '',
  ''ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
val it = (): unit
