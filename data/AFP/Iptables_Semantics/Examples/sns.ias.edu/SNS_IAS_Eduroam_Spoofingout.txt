Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.594s cpu time, 0.046s GC time
Loading theory "Draft.SNS_IAS_Eduroam_Spoofing" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.897s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/sns.ias.edu/eduroam_iptables-save
Loaded 60 lines of the filter table
Parsed 4 chain declarations
Parsed 56 rules
unfolding (this may take a while) ...
### theory "HOL-Library.Nat_Bijection"
### 0.357s elapsed time, 1.420s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.732s elapsed time, 2.854s cpu time, 0.261s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.942s elapsed time, 3.397s cpu time, 0.663s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.902s elapsed time, 6.125s cpu time, 0.960s GC time
Loading theory "Draft.Templates" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SNS_IAS_Eduroam_SpoofingTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.094s cpu time, 0.077s GC time
Simplified term (2.257 seconds)
checked sanity with sanity_wf_ruleset (0.352 seconds)
Defining constant `eduroam_fw_def'
Defining constant `eduroam_fw_INPUT_default_policy_def'
Defining constant `eduroam_fw_FORWARD_default_policy_def'
Defining constant `eduroam_fw_OUTPUT_default_policy_def'
eduroam_fw_INPUT_default_policy == action.Drop
### theory "Draft.SNS_IAS_Eduroam_Spoofing"
### 2.853s elapsed time, 7.370s cpu time, 1.036s GC time
Loading theory "Draft.SNS_IAS_Eduroam_SpoofingTemplates"
eduroam_fw ==
[(''FORWARD'', []),
 (''INPUT'',
  [Rule (Match (IIface (Iface ''lo''))) action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (Match
          (L4_Flags
            (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))))
    (Call ''syn-flood''),
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd
          (MatchNot
            (Match
              (L4_Flags
                (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK}
                  {TCP_SYN}))))
          (Match (CT_State {CT_New})))))
    action.Drop,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (Match
        (Extra
          [CHR ''-'', CHR ''f'', CHR '' '', CHR ''-'', CHR ''-'', CHR ''l'',
           CHR ''o'', CHR ''g'', CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'',
           CHR ''f'', CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
           CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'', CHR ''E'',
           CHR ''S'', CHR '' '', CHR ''F'', CHR ''R'', CHR ''A'', CHR ''G'',
           CHR ''M'', CHR ''E'', CHR ''N'', CHR ''T'', CHR ''S'', CHR '':'',
           CHR '' '', CHR 0x22])))
    Log,
   Rule (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Extra ''-f'')))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 2208288718 32)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772160 8)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 2886729728 12)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 3232235520 16)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 3758096384 4)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 4026531840 5)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Dst (IpAddrNetmask 2208288767 32)))
      (Match (IIface (Iface ''wlan0''))))
    action.Drop,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 2208300545 32)))
      (MatchAnd (Match (IIface (Iface ''wlan0'')))
        (MatchAnd (Match (Prot (Proto 17)))
          (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 2208300546 32)))
      (MatchAnd (Match (IIface (Iface ''wlan0'')))
        (MatchAnd (Match (Prot (Proto 17)))
          (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(22, 22)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(80, 80)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(443, 443)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(23, 23)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(21, 21)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(20, 20)])))
          (Match (CT_State {CT_Related, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(1024, 65535)])))
          (MatchAnd (Match (Dst_Ports (L4Ports 6 [(1024, 65535)])))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(25, 25)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (Match (Dst_Ports (L4Ports 6 [(113, 113)])))))
    Reject,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match (CT_State {CT_Related, CT_Established}))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 17)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''U'', CHR ''D'',
             CHR ''P'', CHR ''-'', CHR ''I'', CHR ''N'', CHR '':'',
             CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 17))))
    action.Drop,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''I'', CHR ''C'',
             CHR ''M'', CHR ''P'', CHR ''-'', CHR ''I'', CHR ''N'',
             CHR '':'', CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 1))))
    action.Drop,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''T'', CHR ''C'',
             CHR ''P'', CHR ''-'', CHR ''I'', CHR ''N'', CHR '':'',
             CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 6))))
    action.Drop,
   Rule
    (MatchAnd (Match (IIface (Iface ''wlan0'')))
      (Match
        (Extra
          [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
           CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'', CHR ''i'', CHR ''x'',
           CHR '' '', CHR 0x22, CHR ''I'', CHR ''P'', CHR ''T'', CHR ''A'',
           CHR ''B'', CHR ''L'', CHR ''E'', CHR ''S'', CHR '' '', CHR ''P'',
           CHR ''R'', CHR ''O'', CHR ''T'', CHR ''O'', CHR ''C'', CHR ''O'',
           CHR ''L'', CHR ''-'', CHR ''X'', CHR ''-'', CHR ''I'', CHR ''N'',
           CHR '':'', CHR '' '', CHR 0x22])))
    Log,
   Rule (Match (IIface (Iface ''wlan0''))) action.Drop]),
 (''OUTPUT'',
  [Rule (Match (OIface (Iface ''lo''))) action.Accept,
   Rule
    (MatchAnd (Match (Dst (IpAddrNetmask 2208300545 32)))
      (MatchAnd (Match (OIface (Iface ''wlan0'')))
        (MatchAnd (Match (Prot (Proto 17)))
          (MatchAnd (Match (Dst_Ports (L4Ports 17 [(53, 53)])))
            (Match (CT_State {CT_New, CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Dst (IpAddrNetmask 2208300546 32)))
      (MatchAnd (Match (OIface (Iface ''wlan0'')))
        (MatchAnd (Match (Prot (Proto 17)))
          (MatchAnd (Match (Dst_Ports (L4Ports 17 [(53, 53)])))
            (Match (CT_State {CT_New, CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(22, 22)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(80, 80)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(443, 443)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(23, 23)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(21, 21)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(20, 20)])))
          (Match (CT_State {CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Src_Ports (L4Ports 6 [(1024, 65535)])))
          (MatchAnd (Match (Dst_Ports (L4Ports 6 [(1024, 65535)])))
            (Match (CT_State {CT_Related, CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (MatchAnd (Match (Dst_Ports (L4Ports 6 [(25, 25)])))
          (Match (CT_State {CT_New, CT_Established})))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 17)))
        (MatchAnd (Match (Src_Ports (L4Ports 17 [(32769, 65535)])))
          (MatchAnd (Match (Dst_Ports (L4Ports 17 [(33434, 33523)])))
            (Match (CT_State {CT_New}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match (CT_State {CT_New, CT_Related, CT_Established}))))
    action.Accept,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 17)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''U'', CHR ''D'',
             CHR ''P'', CHR ''-'', CHR ''O'', CHR ''U'', CHR ''T'',
             CHR '':'', CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0''))) (Match (Prot (Proto 17))))
    action.Drop,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''I'', CHR ''C'',
             CHR ''M'', CHR ''P'', CHR ''-'', CHR ''O'', CHR ''U'',
             CHR ''T'', CHR '':'', CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0''))) (Match (Prot (Proto 1))))
    action.Drop,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (Match
          (Extra
            [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'',
             CHR ''-'', CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'',
             CHR ''i'', CHR ''x'', CHR '' '', CHR 0x22, CHR ''I'',
             CHR ''P'', CHR ''T'', CHR ''A'', CHR ''B'', CHR ''L'',
             CHR ''E'', CHR ''S'', CHR '' '', CHR ''T'', CHR ''C'',
             CHR ''P'', CHR ''-'', CHR ''O'', CHR ''U'', CHR ''T'',
             CHR '':'', CHR '' '', CHR 0x22]))))
    Log,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0''))) (Match (Prot (Proto 6))))
    action.Drop,
   Rule
    (MatchAnd (Match (OIface (Iface ''wlan0'')))
      (Match
        (Extra
          [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
           CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'', CHR ''i'', CHR ''x'',
           CHR '' '', CHR 0x22, CHR ''I'', CHR ''P'', CHR ''T'', CHR ''A'',
           CHR ''B'', CHR ''L'', CHR ''E'', CHR ''S'', CHR '' '', CHR ''P'',
           CHR ''R'', CHR ''O'', CHR ''T'', CHR ''O'', CHR ''C'', CHR ''O'',
           CHR ''L'', CHR ''-'', CHR ''X'', CHR ''-'', CHR ''O'', CHR ''U'',
           CHR ''T'', CHR '':'', CHR '' '', CHR 0x22])))
    Log,
   Rule (Match (OIface (Iface ''wlan0''))) action.Drop]),
 (''syn-flood'',
  [Rule (Match (Extra ''-m limit --limit 1/sec --limit-burst 4'')) Return,
   Rule MatchAny action.Drop])]
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SNS_IAS_Eduroam_SpoofingTemplates"
### 2.551s elapsed time, 9.793s cpu time, 1.992s GC time
"[Iface ''lo'', Iface ''wlan0'']"
  :: "iface list"
"[Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule
   (MatchAnd
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 6)))
         (Match
           (L4_Flags
             (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))))
     (MatchNot (Match (Extra ''-m limit --limit 1/sec --limit-burst 4''))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd
         (MatchNot
           (Match
             (L4_Flags
               (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN}))))
         (Match (CT_State {CT_New})))))
   action.Drop,
  Rule (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Extra ''-f'')))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208288718 32)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 167772160 8)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2886729728 12)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 3232235520 16)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 3758096384 4)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 4026531840 5)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Dst (IpAddrNetmask 2208288767 32)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208300545 32)))
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 17)))
         (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208300546 32)))
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 17)))
         (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(22, 22)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(80, 80)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(443, 443)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(23, 23)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(21, 21)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(20, 20)])))
         (Match (CT_State {CT_Related, CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(1024, 65535)])))
         (MatchAnd (Match (Dst_Ports (L4Ports 6 [(1024, 65535)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(25, 25)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (Match (Dst_Ports (L4Ports 6 [(113, 113)])))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 1)))
       (Match (CT_State {CT_Related, CT_Established}))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 17))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 1))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 6))))
   action.Drop,
  Rule (Match (IIface (Iface ''wlan0''))) action.Drop,
  Rule MatchAny action.Drop]"
  :: "32 common_primitive rule list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: 131.159.207.206'']"
  :: "char list list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: 131.159.207.206'']"
  :: "char list list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: {0.0.0.0 .. 131.159.207.205} u {131.159.207.207 .. 255.255.255.255}'']"
  :: "char list list"
"[''ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0 in: lo   '',
  ''DROP     all  --  131.159.207.206/32            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  10.0.0.0/8            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  172.16.0.0/12            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  192.168.0.0/16            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  224.0.0.0/4            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  240.0.0.0/5            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            127.0.0.0/8 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            131.159.207.255/32 in: wlan0   '',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   dports: 113'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     icmp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
val it = (): unit
