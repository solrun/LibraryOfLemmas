### theory "Draft.SNS_IAS_Eduroam_SpoofingTemplates"
### 2.551s elapsed time, 9.793s cpu time, 1.992s GC time
"[Iface ''lo'', Iface ''wlan0'']"
  :: "iface list"
"[Rule (Match (IIface (Iface ''lo''))) action.Accept,
  Rule
   (MatchAnd
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 6)))
         (Match
           (L4_Flags
             (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN})))))
     (MatchNot (Match (Extra ''-m limit --limit 1/sec --limit-burst 4''))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd
         (MatchNot
           (Match
             (L4_Flags
               (TCP_Flags {TCP_FIN, TCP_SYN, TCP_RST, TCP_ACK} {TCP_SYN}))))
         (Match (CT_State {CT_New})))))
   action.Drop,
  Rule (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Extra ''-f'')))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208288718 32)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 167772160 8)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2886729728 12)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 3232235520 16)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 3758096384 4)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 4026531840 5)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Dst (IpAddrNetmask 2208288767 32)))
     (Match (IIface (Iface ''wlan0''))))
   action.Drop,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208300545 32)))
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 17)))
         (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (Src (IpAddrNetmask 2208300546 32)))
     (MatchAnd (Match (IIface (Iface ''wlan0'')))
       (MatchAnd (Match (Prot (Proto 17)))
         (MatchAnd (Match (Src_Ports (L4Ports 17 [(53, 53)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(22, 22)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(80, 80)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(443, 443)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(23, 23)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(21, 21)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(20, 20)])))
         (Match (CT_State {CT_Related, CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(1024, 65535)])))
         (MatchAnd (Match (Dst_Ports (L4Ports 6 [(1024, 65535)])))
           (Match (CT_State {CT_Established}))))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (MatchAnd (Match (Src_Ports (L4Ports 6 [(25, 25)])))
         (Match (CT_State {CT_Established})))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 6)))
       (Match (Dst_Ports (L4Ports 6 [(113, 113)])))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0'')))
     (MatchAnd (Match (Prot (Proto 1)))
       (Match (CT_State {CT_Related, CT_Established}))))
   action.Accept,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 17))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 1))))
   action.Drop,
  Rule
   (MatchAnd (Match (IIface (Iface ''wlan0''))) (Match (Prot (Proto 6))))
   action.Drop,
  Rule (Match (IIface (Iface ''wlan0''))) action.Drop,
  Rule MatchAny action.Drop]"
  :: "32 common_primitive rule list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: 131.159.207.206'']"
  :: "char list list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: 131.159.207.206'']"
  :: "char list list"
"[''distinct: passed'', ''ipassmt_sanity_nowildcards: passed'',
  ''ipassmt_sanity_defined (interfaces defined in the ruleset are also in ipassmt): passed'',
  ''ipassmt_sanity_disjoint (no zone-spanning interfaces): fail: [(wlan0,lo), (lo,wlan0)]'',
  ''ipassmt_sanity_disjoint excluding UNIV interfaces: passed'',
  ''ipassmt_sanity_complete: passed'',
  ''ipassmt_sanity_complete excluding UNIV interfaces: the following is not covered: {0.0.0.0 .. 131.159.207.205} u {131.159.207.207 .. 255.255.255.255}'']"
  :: "char list list"
"[''ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0 in: lo   '',
  ''DROP     all  --  131.159.207.206/32            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  10.0.0.0/8            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  172.16.0.0/12            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  192.168.0.0/16            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  224.0.0.0/4            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  240.0.0.0/5            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            127.0.0.0/8 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            131.159.207.255/32 in: wlan0   '',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   dports: 113'',
  ''DROP     udp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     icmp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     tcp  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0 in: wlan0   '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
val it = (): uni
