Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.576s cpu time, 0.055s GC time
Loading theory "Draft.Contrived_Example" (required by "Draft.Contrived_ExampleTemplates")
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/Contrived/iptables-save
Loaded 18 lines of the filter table
Parsed 5 chain declarations
Parsed 13 rules
unfolding (this may take a while) ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 1.004s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.403s cpu time, 0.169s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.741s elapsed time, 2.886s cpu time, 0.365s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.980s elapsed time, 3.573s cpu time, 0.853s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.999s elapsed time, 6.404s cpu time, 1.195s GC time
Loading theory "Draft.Templates" (required by "Draft.Contrived_ExampleTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Contrived_ExampleTemplates")
Simplified term (2.041 seconds)
checked sanity with sanity_wf_ruleset (0.198 seconds)
Defining constant `example_fw_def'
Defining constant `example_fw_INPUT_default_policy_def'
Defining constant `example_fw_FORWARD_default_policy_def'
Defining constant `example_fw_OUTPUT_default_policy_def'
example_fw_FORWARD_default_policy == action.Drop
example_fw ==
[(''DOS_PROTECT'',
  [Rule
    (MatchAnd (Match (IIface (Iface ''eth1'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match (Extra ''-m icmp --icmp-type 8 -m limit --limit 1/sec''))))
    Return,
   Rule
    (MatchAnd (Match (IIface (Iface ''eth1'')))
      (MatchAnd (Match (Prot (Proto 1)))
        (Match (Extra ''-m icmp --icmp-type 8''))))
    action.Drop]),
 (''FORWARD'',
  [Rule MatchAny (Call ''DOS_PROTECT''),
   Rule MatchAny (Call ''GOOD~STUFF''),
   Rule
    (MatchAnd (Match (Prot (Proto 6)))
      (MatchAnd
        (MatchNot
          (Match
            (Dst_Ports
              (L4Ports 6
                [(80, 80), (443, 443), (6667, 6667), (6697, 6697)]))))
        (Match
          (Extra
            ''-m hashlimit --hashlimit-above 10/sec --hashlimit-burst 20 --hashlimit-mode srcip --hashlimit-name aflood --hashlimit-srcmask 8''))))
    Log,
   Rule
    (MatchAnd (MatchNot (Match (IIface (Iface ''lo''))))
      (Match (Src (IpAddrNetmask 2130706432 8))))
    action.Drop,
   Rule
    (MatchAnd (Match (IIface (Iface ''inteneral'')))
      (Match (Src (IpAddrNetmask 2208240896 24))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 2208239600 28)))
      (Match (Dst (IpAddrNetmask 2208240896 24))))
    action.Drop,
   Rule
    (MatchAnd (Match (Prot (Proto 6)))
      (Match (Dst (IpAddrNetmask 2208239600 28))))
    action.Accept,
   Rule
    (MatchAnd (Match (IIface (Iface ''dmz'')))
      (MatchAnd (Match (Prot (Proto 6)))
        (Match (Src (IpAddrNetmask 2208239600 28)))))
    action.Accept]),
 (''GOOD~STUFF'',
  [Rule (Match (IIface (Iface ''lo''))) action.Accept,
   Rule (Match (CT_State {CT_Established})) action.Accept,
   Rule (MatchAnd (Match (Prot (Proto 1))) (Match (CT_State {CT_Related})))
    action.Accept]),
 (''INPUT'', []), (''OUTPUT'', [])]
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.766s elapsed time, 1.849s cpu time, 0.719s GC time
### theory "Draft.Contrived_Example"
### 2.778s elapsed time, 7.947s cpu time, 1.858s GC time
Loading theory "Draft.Contrived_ExampleTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Contrived_ExampleTemplates"
### 1.440s elapsed time, 1.775s cpu time, 0.185s GC time
val it = (): unit
