Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.516s cpu time, 0.055s GC time
Loading theory "Draft.Parser6_Test" (required by "Draft.Parser6_TestTemplates")
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/Parser_Test/data/ip6tables-save
Loaded 12 lines of the filter table
Parsed 4 chain declarations
Parsed 8 rules
unfolding (this may take a while) ...
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.855s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.381s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.780s elapsed time, 3.045s cpu time, 0.312s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.038s elapsed time, 3.747s cpu time, 0.813s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.033s elapsed time, 6.519s cpu time, 1.110s GC time
Loading theory "Draft.Templates" (required by "Draft.Parser6_TestTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Parser6_TestTemplates")
Simplified term (2.273 seconds)
checked sanity with sanity_wf_ruleset (0.166 seconds)
Defining constant `parser6_test_firewall_def'
Defining constant `parser6_test_firewall_INPUT_default_policy_def'
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
Defining constant `parser6_test_firewall_FORWARD_default_policy_def'
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.094s cpu time, 0.063s GC time
Defining constant `parser6_test_firewall_OUTPUT_default_policy_def'
parser6_test_firewall_FORWARD_default_policy == action.Drop
"parser6_test_firewall"
  :: "(char list * 128 common_primitive rule list) list"
parser6_test_firewall ==
[(''FORWARD'',
  [Rule
    (MatchAnd
      (Match
        (Src (IpAddrNetmask 42540766411282592857539836924043198465 128)))
      (MatchAnd
        (Match
          (Dst (IpAddrNetmask 42540766411282592857539836924043198464 128)))
        (MatchAnd (Match (IIface (Iface ''eth0'')))
          (Match (OIface (Iface ''foobar''))))))
    (Call ''gh32_-2qns''),
   Rule
    (MatchAnd (Match (Extra ''-d ::ffff:127.0.0.1/128''))
      (MatchAnd (Match (IIface (Iface ''eth0'')))
        (Match (OIface (Iface ''foobar'')))))
    (Call ''gh32_-2qns''),
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 1 128)))
      (MatchAnd (Match (IIface (Iface ''lo'')))
        (Match (OIface (Iface ''lo'')))))
    action.Accept,
   Rule
    (Match
      (Extra
        [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
         CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'', CHR ''i'', CHR ''x'',
         CHR '' '', CHR 0x22, CHR ''~'', CHR ''%'', CHR ''&'', CHR ''/'',
         CHR ''('', CHR '')'', CHR ''='', CHR ''?'', CHR 0x22, CHR '' '',
         CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
         CHR ''l'', CHR ''e'', CHR ''v'', CHR ''e'', CHR ''l'', CHR '' '',
         CHR ''6'']))
    Log,
   Rule (Match (Src (IpAddrNetmask 0 128))) action.Drop]),
 (''INPUT'', []), (''OUTPUT'', []),
 (''gh32_-2qns'',
  [Rule
    (Match (Src (IpAddrNetmask 42540766452641195744311209248773141316 128)))
    Reject,
   Rule MatchAny Empty, Rule MatchAny action.Accept])]
### theory "Draft.Parser6_Test"
### 2.619s elapsed time, 7.490s cpu time, 1.118s GC time
Loading theory "Draft.Parser6_TestTemplates"
"[(''FORWARD'',
   [Rule
     (MatchAnd
       (Match
         (Src (IpAddrNetmask 42540766411282592857539836924043198465 128)))
       (MatchAnd
         (Match
           (Dst (IpAddrNetmask 42540766411282592857539836924043198464 128)))
         (MatchAnd (Match (IIface (Iface ''eth0'')))
           (Match (OIface (Iface ''foobar''))))))
     (Call ''gh32_-2qns''),
    Rule
     (MatchAnd (Match (Extra ''-d ::ffff:127.0.0.1/128''))
       (MatchAnd (Match (IIface (Iface ''eth0'')))
         (Match (OIface (Iface ''foobar'')))))
     (Call ''gh32_-2qns''),
    Rule
     (MatchAnd (Match (Src (IpAddrNetmask 1 128)))
       (MatchAnd (Match (IIface (Iface ''lo'')))
         (Match (OIface (Iface ''lo'')))))
     action.Accept,
    Rule
     (Match
       (Extra
         [CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
          CHR ''p'', CHR ''r'', CHR ''e'', CHR ''f'', CHR ''i'', CHR ''x'',
          CHR '' '', CHR 0x22, CHR ''~'', CHR ''%'', CHR ''&'', CHR ''/'',
          CHR ''('', CHR '')'', CHR ''='', CHR ''?'', CHR 0x22, CHR '' '',
          CHR ''-'', CHR ''-'', CHR ''l'', CHR ''o'', CHR ''g'', CHR ''-'',
          CHR ''l'', CHR ''e'', CHR ''v'', CHR ''e'', CHR ''l'', CHR '' '',
          CHR ''6'']))
     Log,
    Rule (Match (Src (IpAddrNetmask 0 128))) action.Drop]),
  (''INPUT'', []), (''OUTPUT'', []),
  (''gh32_-2qns'',
   [Rule
     (Match
       (Src (IpAddrNetmask 42540766452641195744311209248773141316 128)))
     Reject,
    Rule MatchAny Empty, Rule MatchAny action.Accept])]"
  :: "(char list * 128 common_primitive rule list) list"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Parser6_TestTemplates"
### 1.437s elapsed time, 2.874s cpu time, 0.221s GC time
val it = (): unit
