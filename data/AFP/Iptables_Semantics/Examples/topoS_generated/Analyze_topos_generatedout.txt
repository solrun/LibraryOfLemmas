Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.554s cpu time, 0.057s GC time
Loading theory "Draft.Analyze_topos_generated" (required by "Draft.Analyze_topos_generatedTemplates")
loading file /home/solrun/ResearchIdeas/templateAnalysis/afp-2022-06-07/thys/Iptables_Semantics/Examples/topoS_generated/imaginray_factory_network.iptables-save.by-linux-kernel
Loaded 23 lines of the filter table
Parsed 3 chain declarations
Parsed 20 rules
unfolding (this may take a while) ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.881s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.385s cpu time, 0.154s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.748s elapsed time, 2.921s cpu time, 0.299s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.961s elapsed time, 3.488s cpu time, 0.765s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.922s elapsed time, 6.177s cpu time, 1.064s GC time
Loading theory "Draft.Templates" (required by "Draft.Analyze_topos_generatedTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Analyze_topos_generatedTemplates")
Simplified term (2.036 seconds)
checked sanity with sanity_wf_ruleset (0.503 seconds)
Defining constant `factory_fw_def'
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.751s elapsed time, 1.800s cpu time, 0.733s GC time
Defining constant `factory_fw_INPUT_default_policy_def'
Defining constant `factory_fw_FORWARD_default_policy_def'
Defining constant `factory_fw_OUTPUT_default_policy_def'
factory_fw_FORWARD_default_policy == action.Drop
factory_fw ==
[(''FORWARD'',
  [Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296962 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168298497 32)))
        (MatchAnd (Match (IIface (Iface ''Bot2'')))
          (MatchAnd (Match (OIface (Iface ''Watchdog'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296961 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168298497 32)))
        (MatchAnd (Match (IIface (Iface ''Bot1'')))
          (MatchAnd (Match (OIface (Iface ''Watchdog'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296705 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296449 32)))
        (MatchAnd (Match (IIface (Iface ''MissionControl1'')))
          (MatchAnd (Match (OIface (Iface ''AdminPc'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296706 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296449 32)))
        (MatchAnd (Match (IIface (Iface ''MissionControl2'')))
          (MatchAnd (Match (OIface (Iface ''AdminPc'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296962 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296706 32)))
        (MatchAnd (Match (IIface (Iface ''Bot2'')))
          (MatchAnd (Match (OIface (Iface ''MissionControl2'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296961 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296705 32)))
        (MatchAnd (Match (IIface (Iface ''Bot1'')))
          (MatchAnd (Match (OIface (Iface ''MissionControl1'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772161 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
        (MatchAnd (Match (IIface (Iface ''Statistics'')))
          (MatchAnd (Match (OIface (Iface ''SensorSink'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772162 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772418 32)))
        (MatchAnd (Match (IIface (Iface ''SensorSink'')))
          (MatchAnd (Match (OIface (Iface ''Webcam'')))
            (Match (CT_State {CT_Established}))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772417 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
        (MatchAnd (Match (IIface (Iface ''PresenceSensor'')))
          (Match (OIface (Iface ''SensorSink''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772418 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
        (MatchAnd (Match (IIface (Iface ''Webcam'')))
          (Match (OIface (Iface ''SensorSink''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772419 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
        (MatchAnd (Match (IIface (Iface ''TempSensor'')))
          (Match (OIface (Iface ''SensorSink''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772420 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
        (MatchAnd (Match (IIface (Iface ''FireSensor'')))
          (Match (OIface (Iface ''SensorSink''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 167772162 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 167772161 32)))
        (MatchAnd (Match (IIface (Iface ''SensorSink'')))
          (Match (OIface (Iface ''Statistics''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296705 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296961 32)))
        (MatchAnd (Match (IIface (Iface ''MissionControl1'')))
          (Match (OIface (Iface ''Bot1''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296705 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
        (MatchAnd (Match (IIface (Iface ''MissionControl1'')))
          (Match (OIface (Iface ''Bot2''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296706 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
        (MatchAnd (Match (IIface (Iface ''MissionControl2'')))
          (Match (OIface (Iface ''Bot2''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296449 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296706 32)))
        (MatchAnd (Match (IIface (Iface ''AdminPc'')))
          (Match (OIface (Iface ''MissionControl2''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168296449 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296705 32)))
        (MatchAnd (Match (IIface (Iface ''AdminPc'')))
          (Match (OIface (Iface ''MissionControl1''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168298497 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296961 32)))
        (MatchAnd (Match (IIface (Iface ''Watchdog'')))
          (Match (OIface (Iface ''Bot1''))))))
    action.Accept,
   Rule
    (MatchAnd (Match (Src (IpAddrNetmask 168298497 32)))
      (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
        (MatchAnd (Match (IIface (Iface ''Watchdog'')))
          (Match (OIface (Iface ''Bot2''))))))
    action.Accept]),
 (''INPUT'', []), (''OUTPUT'', [])]
### theory "Draft.Analyze_topos_generated"
### 3.205s elapsed time, 8.967s cpu time, 1.781s GC time
Loading theory "Draft.Analyze_topos_generatedTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Analyze_topos_generatedTemplates"
### 2.062s elapsed time, 8.130s cpu time, 0.418s GC time
"[''-s 10.8.2.2/32 -d 10.8.8.1/32 -i Bot2 -o Watchdog -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.8.2.1/32 -d 10.8.8.1/32 -i Bot1 -o Watchdog -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.8.1.1/32 -d 10.8.0.1/32 -i MissionControl1 -o AdminPc -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.8.1.2/32 -d 10.8.0.1/32 -i MissionControl2 -o AdminPc -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.8.2.2/32 -d 10.8.1.2/32 -i Bot2 -o MissionControl2 -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.8.2.1/32 -d 10.8.1.1/32 -i Bot1 -o MissionControl1 -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.0.0.1/32 -d 10.0.0.2/32 -i Statistics -o SensorSink -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.0.0.2/32 -d 10.0.1.2/32 -i SensorSink -o Webcam -m state --state ESTABLISHED -j ACCEPT'',
  ''-s 10.0.1.1/32 -d 10.0.0.2/32 -i PresenceSensor -o SensorSink -j ACCEPT'',
  ''-s 10.0.1.2/32 -d 10.0.0.2/32 -i Webcam -o SensorSink -j ACCEPT'',
  ''-s 10.0.1.3/32 -d 10.0.0.2/32 -i TempSensor -o SensorSink -j ACCEPT'',
  ''-s 10.0.1.4/32 -d 10.0.0.2/32 -i FireSensor -o SensorSink -j ACCEPT'',
  ''-s 10.0.0.2/32 -d 10.0.0.1/32 -i SensorSink -o Statistics -j ACCEPT'',
  ''-s 10.8.1.1/32 -d 10.8.2.1/32 -i MissionControl1 -o Bot1 -j ACCEPT'',
  ''-s 10.8.1.1/32 -d 10.8.2.2/32 -i MissionControl1 -o Bot2 -j ACCEPT'',
  ''-s 10.8.1.2/32 -d 10.8.2.2/32 -i MissionControl2 -o Bot2 -j ACCEPT'',
  ''-s 10.8.0.1/32 -d 10.8.1.2/32 -i AdminPc -o MissionControl2 -j ACCEPT'',
  ''-s 10.8.0.1/32 -d 10.8.1.1/32 -i AdminPc -o MissionControl1 -j ACCEPT'',
  ''-s 10.8.8.1/32 -d 10.8.2.1/32 -i Watchdog -o Bot1 -j ACCEPT'',
  ''-s 10.8.8.1/32 -d 10.8.2.2/32 -i Watchdog -o Bot2 -j ACCEPT'',
  '' -j DROP'']"
  :: "char list list"
"[''-o Watchdog -i Bot2 -d 10.8.8.1/32 -s 10.8.2.2/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o Watchdog -i Bot1 -d 10.8.8.1/32 -s 10.8.2.1/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o AdminPc -i MissionControl1 -d 10.8.0.1/32 -s 10.8.1.1/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o AdminPc -i MissionControl2 -d 10.8.0.1/32 -s 10.8.1.2/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o MissionControl2 -i Bot2 -d 10.8.1.2/32 -s 10.8.2.2/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o MissionControl1 -i Bot1 -d 10.8.1.1/32 -s 10.8.2.1/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o SensorSink -i Statistics -d 10.0.0.2/32 -s 10.0.0.1/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o Webcam -i SensorSink -d 10.0.1.2/32 -s 10.0.0.2/32 -m state --state ESTABLISHED -j ACCEPT'',
  ''-o SensorSink -i PresenceSensor -d 10.0.0.2/32 -s 10.0.1.1/32 -j ACCEPT'',
  ''-o SensorSink -i Webcam -d 10.0.0.2/32 -s 10.0.1.2/32 -j ACCEPT'',
  ''-o SensorSink -i TempSensor -d 10.0.0.2/32 -s 10.0.1.3/32 -j ACCEPT'',
  ''-o SensorSink -i FireSensor -d 10.0.0.2/32 -s 10.0.1.4/32 -j ACCEPT'',
  ''-o Statistics -i SensorSink -d 10.0.0.1/32 -s 10.0.0.2/32 -j ACCEPT'',
  ''-o Bot1 -i MissionControl1 -d 10.8.2.1/32 -s 10.8.1.1/32 -j ACCEPT'',
  ''-o Bot2 -i MissionControl1 -d 10.8.2.2/32 -s 10.8.1.1/32 -j ACCEPT'',
  ''-o Bot2 -i MissionControl2 -d 10.8.2.2/32 -s 10.8.1.2/32 -j ACCEPT'',
  ''-o MissionControl2 -i AdminPc -d 10.8.1.2/32 -s 10.8.0.1/32 -j ACCEPT'',
  ''-o MissionControl1 -i AdminPc -d 10.8.1.1/32 -s 10.8.0.1/32 -j ACCEPT'',
  ''-o Bot1 -i Watchdog -d 10.8.2.1/32 -s 10.8.8.1/32 -j ACCEPT'',
  ''-o Bot2 -i Watchdog -d 10.8.2.2/32 -s 10.8.8.1/32 -j ACCEPT'',
  '' -j DROP'']"
  :: "char list list"
"[Rule
   (MatchAnd (Match (OIface (Iface ''SensorSink'')))
     (MatchAnd (Match (IIface (Iface ''PresenceSensor'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
         (Match (Src (IpAddrNetmask 167772417 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''SensorSink'')))
     (MatchAnd (Match (IIface (Iface ''Webcam'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
         (Match (Src (IpAddrNetmask 167772418 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''SensorSink'')))
     (MatchAnd (Match (IIface (Iface ''TempSensor'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
         (Match (Src (IpAddrNetmask 167772419 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''SensorSink'')))
     (MatchAnd (Match (IIface (Iface ''FireSensor'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 167772162 32)))
         (Match (Src (IpAddrNetmask 167772420 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Statistics'')))
     (MatchAnd (Match (IIface (Iface ''SensorSink'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 167772161 32)))
         (Match (Src (IpAddrNetmask 167772162 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Bot1'')))
     (MatchAnd (Match (IIface (Iface ''MissionControl1'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296961 32)))
         (Match (Src (IpAddrNetmask 168296705 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Bot2'')))
     (MatchAnd (Match (IIface (Iface ''MissionControl1'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
         (Match (Src (IpAddrNetmask 168296705 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Bot2'')))
     (MatchAnd (Match (IIface (Iface ''MissionControl2'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
         (Match (Src (IpAddrNetmask 168296706 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''MissionControl2'')))
     (MatchAnd (Match (IIface (Iface ''AdminPc'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296706 32)))
         (Match (Src (IpAddrNetmask 168296449 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''MissionControl1'')))
     (MatchAnd (Match (IIface (Iface ''AdminPc'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296705 32)))
         (Match (Src (IpAddrNetmask 168296449 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Bot1'')))
     (MatchAnd (Match (IIface (Iface ''Watchdog'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296961 32)))
         (Match (Src (IpAddrNetmask 168298497 32))))))
   action.Accept,
  Rule
   (MatchAnd (Match (OIface (Iface ''Bot2'')))
     (MatchAnd (Match (IIface (Iface ''Watchdog'')))
       (MatchAnd (Match (Dst (IpAddrNetmask 168296962 32)))
         (Match (Src (IpAddrNetmask 168298497 32))))))
   action.Accept,
  Rule MatchAny action.Drop]"
  :: "32 common_primitive rule list"
"_"
  :: "iface => (32 word * nat) list option"
"[''ACCEPT     all  --  10.0.1.1/32            10.0.0.2/32 in: PresenceSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.2/32            10.0.0.2/32 in: Webcam out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.3/32            10.0.0.2/32 in: TempSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.4/32            10.0.0.2/32 in: FireSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.0.2/32            10.0.0.1/32 in: SensorSink out: Statistics  '',
  ''ACCEPT     all  --  10.8.1.1/32            10.8.2.1/32 in: MissionControl1 out: Bot1  '',
  ''ACCEPT     all  --  10.8.1.1/32            10.8.2.2/32 in: MissionControl1 out: Bot2  '',
  ''ACCEPT     all  --  10.8.1.2/32            10.8.2.2/32 in: MissionControl2 out: Bot2  '',
  ''ACCEPT     all  --  10.8.0.1/32            10.8.1.2/32 in: AdminPc out: MissionControl2  '',
  ''ACCEPT     all  --  10.8.0.1/32            10.8.1.1/32 in: AdminPc out: MissionControl1  '',
  ''ACCEPT     all  --  10.8.8.1/32            10.8.2.1/32 in: Watchdog out: Bot1  '',
  ''ACCEPT     all  --  10.8.8.1/32            10.8.2.2/32 in: Watchdog out: Bot2  '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
"[''ACCEPT     all  --  10.0.1.1/32            10.0.0.2/32 in: PresenceSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.2/32            10.0.0.2/32 in: Webcam out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.3/32            10.0.0.2/32 in: TempSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.1.4/32            10.0.0.2/32 in: FireSensor out: SensorSink  '',
  ''ACCEPT     all  --  10.0.0.2/32            10.0.0.1/32 in: SensorSink out: Statistics  '',
  ''ACCEPT     all  --  10.8.1.1/32            10.8.2.1/32 in: MissionControl1 out: Bot1  '',
  ''ACCEPT     all  --  10.8.1.1/32            10.8.2.2/32 in: MissionControl1 out: Bot2  '',
  ''ACCEPT     all  --  10.8.1.2/32            10.8.2.2/32 in: MissionControl2 out: Bot2  '',
  ''ACCEPT     all  --  10.8.0.1/32            10.8.1.2/32 in: AdminPc out: MissionControl2  '',
  ''ACCEPT     all  --  10.8.0.1/32            10.8.1.1/32 in: AdminPc out: MissionControl1  '',
  ''ACCEPT     all  --  10.8.8.1/32            10.8.2.1/32 in: Watchdog out: Bot1  '',
  ''ACCEPT     all  --  10.8.8.1/32            10.8.2.2/32 in: Watchdog out: Bot2  '',
  ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']"
  :: "char list list"
"([(''10.8.8.1'', ''10.8.8.1''), (''10.8.2.2'', ''10.8.2.2''),
   (''10.8.2.1'', ''10.8.2.1''), (''10.8.1.2'', ''10.8.1.2''),
   (''10.8.1.1'', ''10.8.1.1''), (''10.8.0.1'', ''10.8.0.1''),
   (''10.0.1.1'', ''{10.0.1.1 .. 10.0.1.4}''), (''10.0.0.2'', ''10.0.0.2''),
   (''10.0.0.1'', ''10.0.0.1''),
   (''0.0.0.0'',
    ''{0.0.0.0 .. 10.0.0.0} u {10.0.0.3 .. 10.0.1.0} u {10.0.1.5 .. 10.8.0.0} u {10.8.0.2 .. 10.8.1.0} u {10.8.1.3 .. 10.8.2.0} u {10.8.2.3 .. 10.8.8.0} u {10.8.8.2 .. 255.255.255.255}'')],
  [(''10.8.8.1'', ''10.8.2.2''), (''10.8.8.1'', ''10.8.2.1''),
   (''10.8.1.2'', ''10.8.2.2''), (''10.8.1.1'', ''10.8.2.2''),
   (''10.8.1.1'', ''10.8.2.1''), (''10.8.0.1'', ''10.8.1.2''),
   (''10.8.0.1'', ''10.8.1.1''), (''10.0.1.1'', ''10.0.0.2''),
   (''10.0.0.2'', ''10.0.0.1'')])"
  :: "(char list * char list) list * (char list * char list) list"
val it = (): unit
