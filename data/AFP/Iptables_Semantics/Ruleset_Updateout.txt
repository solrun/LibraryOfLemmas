Loading theory "Draft.List_Misc" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.Ruleset_Update" via "Draft.Matching" via "Draft.Semantics")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.Ruleset_Update" via "Draft.Matching" via "Draft.Semantics" via "Draft.Firewall_Common")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.042s elapsed time, 0.204s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.509s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.164s elapsed time, 0.670s cpu time, 0.044s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.Ruleset_Update" via "Draft.Matching" via "Draft.Semantics")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.275s elapsed time, 1.056s cpu time, 0.138s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.350s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.893s elapsed time, 3.388s cpu time, 0.700s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.973s elapsed time, 3.617s cpu time, 0.700s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.896s elapsed time, 5.964s cpu time, 0.971s GC time
Loading theory "Draft.Templates" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ruleset_UpdateTemplates")
Found termination order: "size_list size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.763s elapsed time, 1.835s cpu time, 0.688s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.724s elapsed time, 14.940s cpu time, 3.186s GC time
Loading theory "Draft.Semantics" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.Ruleset_Update" via "Draft.Matching")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "iptables_bigstep"
  Proving monotonicity ...
locale iptables_bigstep_fixedbackground
  fixes \<Gamma> :: "char list => 'a rule list option"
    and \<gamma> :: "'a => 'p => bool"
Proofs for inductive predicate(s) "iptables_bigstep'"
  Proving monotonicity ...
[| wf (calls_chain \<Gamma>);
   !!x. (!!y. (y, x) : calls_chain \<Gamma> ==>
              EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                         (Call y)], Undecided\<rangle> \<Rightarrow> t) ==>
        EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                   (Call x)], Undecided\<rangle> \<Rightarrow> t |]
==> EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
               (Call ?a)], Undecided\<rangle> \<Rightarrow> t
### theory "Draft.Semantics"
### 0.969s elapsed time, 1.687s cpu time, 0.984s GC time
Loading theory "Draft.Matching" (required by "Draft.Ruleset_UpdateTemplates" via "Draft.Ruleset_Update")
### theory "Draft.Matching"
### 0.121s elapsed time, 0.160s cpu time, 0.057s GC time
Loading theory "Draft.Ruleset_Update" (required by "Draft.Ruleset_UpdateTemplates")
### theory "Draft.Ruleset_Update"
### 0.075s elapsed time, 0.075s cpu time, 0.000s GC time
Loading theory "Draft.Ruleset_UpdateTemplates"
val templateLemmas =
   [("Ruleset_Update.get_action_case_simp",
     "get_action (case ?r of Rule m' x => Rule (MatchAnd ?m m') x) =
      get_action ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Ruleset_Update.map_update_chain_if",
     "(%b. if b = ?chain then Some ?rs else ?\<Gamma> b) = ?\<Gamma>(?chain 
      |-> ?rs)",
     template_equation
      (t_empty,
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("Ruleset_Update.free_return_not_match",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
              Return], Undecided\<rangle> \<Rightarrow> ?t ==>
      ~ matches ?\<gamma> ?m ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 1),
                        template_hole 4)),
                    template_hole 3)),
                template_hole 2),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("Ruleset_Update.updategamma_insert_new",
     "[| ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t;
         ?chain ~: dom ?\<Gamma> |]
      ==> ?\<Gamma>(?chain |->
          ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 7))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 7),
                           template_var 1),
                         template_app (template_hole 0, template_var 0))),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Ruleset_Update.no_recursive_calls",
     "[| ?\<Gamma>(?chain |->
         [Rule ?m
           (Call
             ?chain)]),?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
                     (Call ?chain)], Undecided\<rangle> \<Rightarrow> ?t;
         matches ?\<gamma> ?m ?p |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_app (template_hole 8, template_var 5),
                            template_var 4),
                          template_app
                           (template_hole 7,
                            template_app
                             (template_app
                               (template_hole 6,
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 3),
                                  template_app
                                   (template_hole 4, template_var 4))),
                              template_hole 3)))),
                      template_var 2),
                    template_var 1),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app (template_hole 4, template_var 4))),
                    template_hole 3)),
                template_hole 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("Ruleset_Update.no_recursive_calls2",
     "[| ?\<Gamma>(?chain |->
         Rule ?m (Call ?chain) #
         ?rs''),?\<gamma>,?p\<turnstile> \<langle>Rule ?m (Call ?chain) #
            ?rs', Undecided\<rangle> \<Rightarrow> Undecided;
         matches ?\<gamma> ?m ?p |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_app (template_hole 7, template_var 6),
                            template_var 5),
                          template_app
                           (template_hole 6,
                            template_app
                             (template_app
                               (template_hole 5,
                                template_app
                                 (template_app
                                   (template_hole 4, template_var 4),
                                  template_app
                                   (template_hole 3, template_var 5))),
                              template_var 3)))),
                      template_var 2),
                    template_var 1),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_app (template_hole 3, template_var 5))),
                    template_var 0)),
                template_hole 2),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("Ruleset_Update.update_Gamma_nocall",
     "\<nexists>chain. ?a = Call chain ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
              ?a], ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>',?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
               ?a], ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 7)),
                 template_hole 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 7)),
                 template_hole 0)),
             template_var 2),
           template_var 1)))),
    ("Ruleset_Update.no_recursive_calls_helper",
     "[| ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
                 (Call ?chain)], Undecided\<rangle> \<Rightarrow> ?t;
         matches ?\<gamma> ?m ?p;
         ?\<Gamma> ?chain = Some [Rule ?m (Call ?chain)] |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_app (template_hole 6, template_var 1))),
                    template_hole 5)),
                template_hole 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 5, template_var 1),
          template_app
           (template_hole 1,
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))),
              template_hole 5)))],
       template_predicate (template_hole 0))),
    ("Ruleset_Update.update_Gamma_nomatch",
     "~ matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>(?chain |->
      Rule ?m ?a #
      ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>(?chain |->
      ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 9),
                    template_var 8),
                  template_var 7)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 6),
                         template_var 5),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 8),
                               template_var 4)),
                           template_var 3)))),
                   template_var 9),
                 template_var 7),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 6),
                         template_var 5),
                       template_app (template_hole 2, template_var 3))),
                   template_var 9),
                 template_var 7),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Ruleset_Update.update_Gamma_remove_call_undecided",
     "[| ?\<Gamma>(?chain |->
         Rule ?m (Call ?foo) #
         ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided;
         matches ?\<gamma> ?m ?p |]
      ==> ?\<Gamma>(?chain |->
          ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app
                           (template_app (template_hole 6, template_var 7),
                            template_var 6),
                          template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4,
                                template_app
                                 (template_app
                                   (template_hole 3, template_var 5),
                                  template_app
                                   (template_hole 2, template_var 4))),
                              template_var 3)))),
                      template_var 2),
                    template_var 1),
                  template_var 0),
                template_hole 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 5),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_var 7),
                           template_var 6),
                         template_app (template_hole 5, template_var 3))),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_hole 1),
             template_hole 1)
           ))),
    ("Ruleset_Update.all_return_subchain",
     "[| ?\<Gamma> ?chain = Some ?rs; matches ?\<gamma> ?m ?p;
         ALL r:set ?rs. get_action r = Return |]
      ==> ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
                  (Call
                    ?chain)], Undecided\<rangle> \<Rightarrow> Undecided",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 2),
                   template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 4))),
                   template_hole 1)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Ruleset_Update.update_Gamma_log_empty",
     "?a = Log | ?a = Empty ==>
      ?\<Gamma>(?chain |->
      Rule ?m ?a #
      ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>(?chain |->
      ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 9),
                  template_hole 7)),
              template_app
               (template_app (template_hole 8, template_var 9),
                template_hole 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 8),
                         template_var 7),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 6),
                               template_var 9)),
                           template_var 5)))),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 8),
                         template_var 7),
                       template_app (template_hole 2, template_var 5))),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Ruleset_Update.update_gamme_remove_Undecidedpart",
     "[| ?\<Gamma>(?chain |->
         ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs', Undecided\<rangle> \<Rightarrow> Undecided;
         ?\<Gamma>(?chain |->
         ?rs1.0 @
         ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided |]
      ==> ?\<Gamma>(?chain |->
          ?rs'),?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 6),
                            template_var 5),
                          template_app (template_hole 2, template_var 4))),
                      template_var 3),
                    template_var 2),
                  template_var 4),
                template_hole 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 6),
                            template_var 5),
                          template_app
                           (template_hole 2,
                            template_app
                             (template_app
                               (template_hole 0, template_var 1),
                              template_var 4)))),
                      template_var 3),
                    template_var 2),
                  template_var 0),
                template_hole 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 6),
                           template_var 5),
                         template_app (template_hole 2, template_var 4))),
                     template_var 3),
                   template_var 2),
                 template_var 0),
               template_hole 1),
             template_hole 1)
           ))),
    ("Ruleset_Update.update_Gamma_nochange1",
     "[| ?\<Gamma>(?chain |->
         ?rs),?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
            ?a], Undecided\<rangle> \<Rightarrow> Undecided;
         ?\<Gamma>(?chain |->
         Rule ?m ?a #
         ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t |]
      ==> ?\<Gamma>(?chain |->
          ?rs),?\<gamma>,?p\<turnstile> \<langle>?rs', ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 9),
                            template_var 8),
                          template_app (template_hole 4, template_var 7))),
                      template_var 6),
                    template_var 5),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_hole 1)),
                template_hole 0),
              template_hole 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app (template_hole 5, template_var 9),
                            template_var 8),
                          template_app
                           (template_hole 4,
                            template_app
                             (template_app
                               (template_hole 3,
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 4),
                                  template_var 3)),
                              template_var 7)))),
                      template_var 6),
                    template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 9),
                           template_var 8),
                         template_app (template_hole 4, template_var 7))),
                     template_var 6),
                   template_var 5),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Ruleset_Update.update_Gamma_call",
     "[| ?\<Gamma> ?chain = Some ?rs; ?\<Gamma>' ?chain = Some ?rs';
         ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided;
         ?\<Gamma>',?\<gamma>,?p\<turnstile> \<langle>?rs', Undecided\<rangle> \<Rightarrow> Undecided |]
      ==> ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
                  (Call ?chain)], ?s\<rangle> \<Rightarrow> ?t =
          ?\<Gamma>',?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
                   (Call ?chain)], ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app (template_var 9, template_var 8),
          template_app (template_hole 7, template_var 7)),
        template_equation
         (template_app (template_var 6, template_var 8),
          template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 9),
                      template_var 4),
                    template_var 3),
                  template_var 7),
                template_hole 5),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 5),
                template_hole 5),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 9),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_var 8))),
                 template_hole 0)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 6),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_var 8))),
                 template_hole 0)),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Ruleset_UpdateTemplates"
### 0.358s elapsed time, 0.466s cpu time, 0.000s GC time
val it = (): unit
