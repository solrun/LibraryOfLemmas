Loading theory "Draft.List_Misc" (required by "Draft.Semantics_StatefulTemplates" via "Draft.Semantics_Stateful" via "Draft.Semantics")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Semantics_StatefulTemplates" via "Draft.Semantics_Stateful" via "Draft.Semantics" via "Draft.Firewall_Common")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.038s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.630s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Repeat_Stabilize"
### 0.164s elapsed time, 0.665s cpu time, 0.044s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Semantics_StatefulTemplates" via "Draft.Semantics_Stateful" via "Draft.Semantics")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.746s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.344s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.944s elapsed time, 3.554s cpu time, 0.841s GC time
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.971s elapsed time, 3.568s cpu time, 0.738s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.937s elapsed time, 5.960s cpu time, 1.117s GC time
Loading theory "Draft.Templates" (required by "Draft.Semantics_StatefulTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Semantics_StatefulTemplates")
Found termination order: "size_list size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.706s elapsed time, 1.700s cpu time, 0.619s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 7.745s elapsed time, 14.860s cpu time, 3.145s GC time
Loading theory "Draft.Semantics" (required by "Draft.Semantics_StatefulTemplates" via "Draft.Semantics_Stateful")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "iptables_bigstep"
  Proving monotonicity ...
locale iptables_bigstep_fixedbackground
  fixes \<Gamma> :: "char list => 'a rule list option"
    and \<gamma> :: "'a => 'p => bool"
Proofs for inductive predicate(s) "iptables_bigstep'"
  Proving monotonicity ...
[| wf (calls_chain \<Gamma>);
   !!x. (!!y. (y, x) : calls_chain \<Gamma> ==>
              EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                         (Call y)], Undecided\<rangle> \<Rightarrow> t) ==>
        EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                   (Call x)], Undecided\<rangle> \<Rightarrow> t |]
==> EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
               (Call ?a)], Undecided\<rangle> \<Rightarrow> t
### theory "Draft.Semantics"
### 0.638s elapsed time, 0.698s cpu time, 0.067s GC time
Loading theory "Draft.Semantics_Stateful" (required by "Draft.Semantics_StatefulTemplates")
Proofs for inductive predicate(s) "semantics_stateful"
  Proving monotonicity ...
Proofs for inductive predicate(s) "semantics_stateful_packet_tagging"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Semantics_Stateful"
### 1.731s elapsed time, 1.859s cpu time, 0.175s GC time
Loading theory "Draft.Semantics_StatefulTemplates"
val templateLemmas =
   [("Semantics_Stateful.semantics_stateful_intro_start",
     "[| ?\<sigma>\<^sub>0 = ?\<sigma>'; ?ps_processed = [] |]
      ==> semantics_stateful ?\<Gamma> ?\<gamma>\<^sub>\<sigma> ?state_upate
           ?\<sigma>\<^sub>0 (?built_in_chain, ?default_policy) ?ps
           ?ps_processed ?\<sigma>'",
     template_implication
      ([template_equation (template_var 8, template_var 7),
        template_equation (template_var 6, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 8),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0),
               template_var 6),
             template_var 7)
           ))),
    ("Semantics_Stateful.semantics_stateful_packet_tagging_intro_start",
     "[| ?\<sigma>\<^sub>0 = ?\<sigma>'; ?ps_processed = [] |]
      ==> semantics_stateful_packet_tagging ?\<Gamma> ?\<gamma>
           ?packet_tagger ?state_upate ?\<sigma>\<^sub>0
           (?built_in_chain, ?default_policy) ?ps ?ps_processed ?\<sigma>'",
     template_implication
      ([template_equation (template_var 9, template_var 8),
        template_equation (template_var 7, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 9),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0),
               template_var 7),
             template_var 8)
           ))),
    ("Semantics_Stateful.semantics_bigstep_state_vs_tagged",
     "ALL m.
         ?stateful_matcher' ?\<sigma> m ?p =
         ?stateful_matcher_tagged' m (?packet_tagger' ?\<sigma> ?p) ==>
      ?\<Gamma>,?stateful_matcher'
                 ?\<sigma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?stateful_matcher_tagged',?packet_tagger' ?\<sigma>
     ?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_var 7, template_var 6)),
                 template_var 5),
               template_var 1),
             template_hole 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_app
                  (template_app (template_var 3, template_var 6),
                   template_var 5)),
               template_var 1),
             template_hole 1),
           template_var 0)))),
    ("Semantics_Stateful.semantics_stateful_vs_tagged",
     "ALL m \<sigma> p.
         ?stateful_matcher' \<sigma> m p =
         ?stateful_matcher_tagged' m (?packet_tagger' \<sigma> p) ==>
      semantics_stateful ?rs ?stateful_matcher' ?state_update'
       ?\<sigma>\<^sub>0 ?start ?ps ?ps_processed ?\<sigma>' =
      semantics_stateful_packet_tagging ?rs ?stateful_matcher_tagged'
       ?packet_tagger' ?state_update' ?\<sigma>\<^sub>0 ?start ?ps
       ?ps_processed ?\<sigma>'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 9),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 8),
                       template_var 7),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_Stateful.semantics_stateful_intro_process_one",
     "[| semantics_stateful ?\<Gamma> ?\<gamma>\<^sub>\<sigma> ?state_upate
          ?\<sigma>\<^sub>0 (?built_in_chain, ?default_policy) (?p # ?ps)
          ?ps_processed_old ?\<sigma>_old;
         ?\<Gamma>,?\<gamma>\<^sub>\<sigma>
                    ?\<sigma>_old,?p\<turnstile> \<langle>[Rule MatchAny
                      (Call ?built_in_chain),
                     Rule MatchAny
                      ?default_policy], Undecided\<rangle> \<Rightarrow> Decision
                                    ?X;
         ?\<sigma>' = ?state_upate ?\<sigma>_old ?X ?p;
         ?ps_processed = ?ps_processed_old @ [(?p, ?X)] |]
      ==> semantics_stateful ?\<Gamma> ?\<gamma>\<^sub>\<sigma> ?state_upate
           ?\<sigma>\<^sub>0 (?built_in_chain, ?default_policy) ?ps
           ?ps_processed ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 12),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_app
                     (template_app (template_hole 15, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 12),
                      template_app (template_var 11, template_var 3)),
                    template_var 6),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_app (template_hole 9, template_var 8))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 11, template_hole 10),
                          template_var 7)),
                      template_hole 8))),
                template_hole 7),
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_var 10, template_var 3),
              template_var 2),
            template_var 6)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 2)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 16, template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 15, template_var 8),
                     template_var 7)),
                 template_var 5),
               template_var 0),
             template_var 1)
           ))),
    ("Semantics_Stateful.semantics_stateful_packet_tagging_intro_process_one",
     "[| semantics_stateful_packet_tagging ?\<Gamma> ?\<gamma>
          ?packet_tagger ?state_upate ?\<sigma>\<^sub>0
          (?built_in_chain, ?default_policy) (?p # ?ps) ?ps_processed_old
          ?\<sigma>_old;
         ?\<Gamma>,?\<gamma>,?packet_tagger ?\<sigma>_old
                              ?p\<turnstile> \<langle>[Rule MatchAny
                  (Call ?built_in_chain),
                 Rule MatchAny
                  ?default_policy], Undecided\<rangle> \<Rightarrow> Decision
                                ?X;
         ?\<sigma>' = ?state_upate ?\<sigma>_old ?X ?p;
         ?ps_processed = ?ps_processed_old @ [(?p, ?X)] |]
      ==> semantics_stateful_packet_tagging ?\<Gamma> ?\<gamma>
           ?packet_tagger ?state_upate ?\<sigma>\<^sub>0
           (?built_in_chain, ?default_policy) ?ps ?ps_processed ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 16, template_var 13),
                            template_var 12),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_app
                     (template_app (template_hole 15, template_var 8),
                      template_var 7)),
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 13),
                      template_var 12),
                    template_app
                     (template_app (template_var 11, template_var 3),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_app (template_hole 9, template_var 8))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 11, template_hole 10),
                          template_var 7)),
                      template_hole 8))),
                template_hole 7),
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_var 10, template_var 3),
              template_var 2),
            template_var 6)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 2)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 16, template_var 13),
                           template_var 12),
                         template_var 11),
                       template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 15, template_var 8),
                     template_var 7)),
                 template_var 5),
               template_var 0),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Semantics_StatefulTemplates"
### 0.412s elapsed time, 0.551s cpu time, 0.050s GC time
val it = (): unit
