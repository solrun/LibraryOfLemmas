   [("Primitive_Normalization.has_disc_negated_MatchNot",
     "has_disc_negated ?disc True ?m =
      has_disc_negated ?disc False (MatchNot ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Primitive_Normalization.has_disc_negated_MatchNot",
     "has_disc_negated ?disc True (MatchNot ?m) =
      has_disc_negated ?disc False ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 0),
         template_var 0))),
    ("Primitive_Normalization.has_disc_alist_and",
     "has_disc ?disc (alist_and ?as) =
      (EX a:set ?as. has_disc ?disc (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.has_disc_alist_and'",
     "has_disc ?disc (alist_and' ?as) =
      (EX a:set ?as. has_disc ?disc (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.has_disc_negated_positiv_has_disc",
     "(has_disc_negated ?disc ?neg ?m |
       has_disc_negated ?disc (~ ?neg) ?m) =
      has_disc ?disc ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Primitive_Normalization.has_disc_negated_alist_and",
     "has_disc_negated ?disc ?neg (alist_and ?as) =
      (EX a:set ?as.
          has_disc_negated ?disc ?neg (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.has_disc_negated_alist_and'",
     "has_disc_negated ?disc ?neg (alist_and' ?as) =
      (EX a:set ?as.
          has_disc_negated ?disc ?neg (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.normalized_n_primitive_alist_and",
     "normalized_n_primitive ?disc_sel ?P (alist_and ?as) =
      (ALL a:set ?as.
          normalized_n_primitive ?disc_sel ?P
           (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.normalized_n_primitive_alist_and'",
     "normalized_n_primitive ?disc_sel ?P (alist_and' ?as) =
      (ALL a:set ?as.
          normalized_n_primitive ?disc_sel ?P
           (negation_type_to_match_expr a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Primitive_Normalization.has_disc_alist_and'_append",
     "has_disc ?disc' (alist_and' (?ls1.0 @ ?ls2.0)) =
      (has_disc ?disc' (alist_and' ?ls1.0) |
       has_disc ?disc' (alist_and' ?ls2.0))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0))))),
    ("Primitive_Normalization.has_disc_negated_alist_and'_append",
     "has_disc_negated ?disc' ?neg (alist_and' (?ls1.0 @ ?ls2.0)) =
      (has_disc_negated ?disc' ?neg (alist_and' ?ls1.0) |
       has_disc_negated ?disc' ?neg (alist_and' ?ls2.0))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 0))))),
    ("Primitive_Normalization.has_disc_negated_disj_split",
     "has_disc_negated (%a. ?P a | ?Q a) ?neg ?m =
      (has_disc_negated ?P ?neg ?m | has_disc_negated ?Q ?neg ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Primitive_Normalization.normalized_n_primitive_alist_and'_append",
     "normalized_n_primitive (?disc, ?sel) ?f
       (alist_and' (?ls1.0 @ ?ls2.0)) =
      (normalized_n_primitive (?disc, ?sel) ?f (alist_and' ?ls1.0) &
       normalized_n_primitive (?disc, ?sel) ?f (alist_and' ?ls2.0))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3)),
               template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_app (template_hole 2, template_var 0))))),
    ("Primitive_Normalization.primitive_extractor_fst_simp2",
     "fst (case primitive_extractor (?disc, ?sel) ?m1.0 of
           (a1', ms1') =>
             case primitive_extractor (?disc, ?sel) ?m2.0 of
             (a2', ms2') => (a1' @ a2', ?m' ms1' ms2')) =
      fst (primitive_extractor (?disc, ?sel) ?m1.0) @
      fst (primitive_extractor (?disc, ?sel) ?m2.0)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)))))]
