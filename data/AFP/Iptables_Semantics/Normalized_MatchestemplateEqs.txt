   [("Normalized_Matches.normalize_match_empty_iff_matcheq_matchNone",
     "(normalize_match ?m = []) = matcheq_matchNone ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Normalized_Matches.normalize_rules_dnf_append",
     "normalize_rules_dnf (?rs1.0 @ ?rs2.0) =
      normalize_rules_dnf ?rs1.0 @ normalize_rules_dnf ?rs2.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Normalized_Matches.matches_to_match_list_normalize",
     "matches ?\<gamma> ?m ?a ?p =
      match_list ?\<gamma> (normalize_match ?m) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Normalized_Matches.match_list_normalize_match",
     "match_list ?\<gamma> [?m] ?a ?p =
      match_list ?\<gamma> (normalize_match ?m) ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Normalized_Matches.normalize_rules_fst",
     "normalize_rules ?f (?r # ?rs) =
      normalize_rules ?f [?r] @ normalize_rules ?f ?rs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Normalized_Matches.normalize_rules_singleton",
     "normalize_rules ?f [Rule ?m ?a] = map (%m. Rule m ?a) (?f ?m)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, t_empty),
         template_app (template_var 2, template_var 1)))),
    ("Normalized_Matches.normalize_rules_concat_map",
     "normalize_rules ?f ?rs =
      concat
       (map (%r. map (%m. Rule m (get_action r)) (?f (get_match r))) ?rs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)))),
    ("Normalized_Matches.normalize_match_correct",
     "approximating_bigstep_fun ?\<gamma> ?p
       (map (%m. Rule m ?a) (normalize_match ?m)) ?s =
      approximating_bigstep_fun ?\<gamma> ?p [Rule ?m ?a] ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)),
             template_hole 0)),
         template_var 0)))]
