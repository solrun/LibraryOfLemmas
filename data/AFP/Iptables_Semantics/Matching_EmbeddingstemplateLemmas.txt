   [("Matching_Embeddings.\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c_not_Unknown",
     "ternary_ternary_eval
       (map_match_tac
         (\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c ?\<gamma>) ?p
         ?m) ~=
      TernaryUnknown",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Matching_Embeddings.eval_ternary_Not_TrueD",
     "eval_ternary_Not ?m = TernaryTrue ==> ?m = TernaryFalse",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Matching_Embeddings.\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c_matching",
     "Matching_Ternary.matches
       (\<beta>\<^sub>m\<^sub>a\<^sub>g\<^sub>i\<^sub>c ?\<gamma>,
        ?\<alpha>)
       ?m ?a ?p =
      Semantics.matches ?\<gamma> ?m ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Matching_Embeddings.matcher_agree_on_exact_matches_gammaE",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?\<beta> ?X ?p = TernaryTrue |]
      ==> ?\<gamma> ?X ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_var 2, template_var 1), template_var 0),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 1), template_var 0)
           ))),
    ("Matching_Embeddings.matcher_agree_on_exact_matches_alt",
     "matcher_agree_on_exact_matches ?exact ?approx =
      (ALL p m.
          ?approx m p ~= TernaryUnknown -->
          bool_to_ternary (?exact m p) = ?approx m p)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Matching_Embeddings.in_doubt_allow_allows_Accept",
     "[| ?a = Accept; matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         Semantics.matches ?\<gamma> ?m ?p |]
      ==> Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p",
     template_implication
      ([template_equation (template_var 4, template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Matching_Embeddings.matches_comply_exact",
     "[| ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~=
         TernaryUnknown;
         matcher_agree_on_exact_matches ?\<gamma> ?\<beta> |]
      ==> Semantics.matches ?\<gamma> ?m ?p =
          Matching_Ternary.matches (?\<beta>, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_var 3),
             template_var 0),
           template_var 4)))),
    ("Matching_Embeddings.in_doubt_deny_denies_DropReject",
     "[| ?a = Drop | ?a = Reject;
         matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         Semantics.matches ?\<gamma> ?m ?p |]
      ==> Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_hole 6)),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Matching_Embeddings.not_exact_match_in_doubt_allow_approx_match",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?a = Accept | ?a = Reject | ?a = Drop;
         ~ Semantics.matches ?\<gamma> ?m ?p |]
      ==> ?a = Accept &
          Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p |
          ~ Matching_Ternary.matches (?\<beta>, in_doubt_allow) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 6)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_hole 0)),
                       template_var 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("Matching_Embeddings.not_exact_match_in_doubt_deny_approx_match",
     "[| matcher_agree_on_exact_matches ?\<gamma> ?\<beta>;
         ?a = Accept | ?a = Reject | ?a = Drop;
         ~ Semantics.matches ?\<gamma> ?m ?p |]
      ==> (?a = Drop | ?a = Reject) &
          Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p |
          ~ Matching_Ternary.matches (?\<beta>, in_doubt_deny) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 6)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 2),
                         template_hole 6)),
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_hole 7))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_hole 0)),
                       template_var 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0)),
                     template_var 1),
                   template_var 2),
                 template_var 0)))
           )))]
