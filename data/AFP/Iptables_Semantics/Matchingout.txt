Loading theory "Draft.List_Misc" (required by "Draft.MatchingTemplates" via "Draft.Matching" via "Draft.Semantics")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.MatchingTemplates" via "Draft.Matching" via "Draft.Semantics" via "Draft.Firewall_Common")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.List_Misc"
### 0.043s elapsed time, 0.201s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.512s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.164s elapsed time, 0.665s cpu time, 0.051s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.MatchingTemplates" via "Draft.Matching" via "Draft.Semantics")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.274s elapsed time, 1.050s cpu time, 0.146s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.337s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.108s elapsed time, 4.152s cpu time, 0.891s GC time
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.176s elapsed time, 4.350s cpu time, 0.989s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.093s elapsed time, 6.691s cpu time, 1.292s GC time
Loading theory "Draft.Templates" (required by "Draft.MatchingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MatchingTemplates")
Found termination order: "size_list size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.169s cpu time, 0.113s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 8.004s elapsed time, 15.920s cpu time, 3.706s GC time
Loading theory "Draft.Semantics" (required by "Draft.MatchingTemplates" via "Draft.Matching")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "iptables_bigstep"
  Proving monotonicity ...
locale iptables_bigstep_fixedbackground
  fixes \<Gamma> :: "char list => 'a rule list option"
    and \<gamma> :: "'a => 'p => bool"
Proofs for inductive predicate(s) "iptables_bigstep'"
  Proving monotonicity ...
[| wf (calls_chain \<Gamma>);
   !!x. (!!y. (y, x) : calls_chain \<Gamma> ==>
              EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                         (Call y)], Undecided\<rangle> \<Rightarrow> t) ==>
        EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                   (Call x)], Undecided\<rangle> \<Rightarrow> t |]
==> EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
               (Call ?a)], Undecided\<rangle> \<Rightarrow> t
### theory "Draft.Semantics"
### 0.644s elapsed time, 0.706s cpu time, 0.066s GC time
Loading theory "Draft.Matching" (required by "Draft.MatchingTemplates")
### theory "Draft.Matching"
### 0.089s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.MatchingTemplates"
val templateLemmas =
   [("Matching.opt_MatchAny_match_expr_correct",
     "matches ?\<gamma> (opt_MatchAny_match_expr ?m) =
      matches ?\<gamma> ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Matching.matcheq_matchNone_not_matches",
     "matcheq_matchNone ?m ==> ~ matches ?\<gamma> ?m ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)
               )
           ))),
    ("Matching.matcheq_matchAny",
     "~ has_primitive ?m ==> matcheq_matchAny ?m = matches ?\<gamma> ?m ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Matching.add_match_split",
     "add_match ?m (?rs1.0 @ ?rs2.0) =
      add_match ?m ?rs1.0 @ add_match ?m ?rs2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Matching.matcheq_matchNone",
     "~ has_primitive ?m ==>
      matcheq_matchNone ?m = (~ matches ?\<gamma> ?m ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))))),
    ("Matching.add_match_split_fst'",
     "add_match ?m (?a # ?rs) = add_match ?m [?a] @ add_match ?m ?rs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Matching.MatchOr",
     "matches ?\<gamma> (MatchOr ?m1.0 ?m2.0) ?p =
      (matches ?\<gamma> ?m1.0 ?p | matches ?\<gamma> ?m2.0 ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Matching.add_match_split_fst",
     "add_match ?m (Rule ?m' ?a' # ?rs) =
      Rule (MatchAnd ?m ?m') ?a' # add_match ?m ?rs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("Matching.iptables_bigstep_add_match_notnot_simp",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match
             (MatchNot (MatchNot ?m)) ?rs, ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m
             ?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 0, template_var 3))),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Matching.add_match_distrib",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m1.0
             (add_match ?m2.0 ?rs), ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m2.0
             (add_match ?m1.0 ?rs), ?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2))),
           template_var 1),
         template_var 0))),
    ("Matching.iptables_bigstep_add_match_and",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m1.0
             (add_match ?m2.0 ?rs), ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match
             (MatchAnd ?m1.0 ?m2.0) ?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Matching.matches_add_match_simp",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m
             ?rs, ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 6),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matching.matches_add_match_MatchNot_simp",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match (MatchNot ?m)
             ?rs, ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[], ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 5)),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 6),
                 template_var 4),
               template_hole 0),
             template_var 1),
           template_var 0)))),
    ("Matching.not_matches_add_match_simp",
     "~ matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match ?m
             ?rs, Undecided\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[], Undecided\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 5),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1)),
             template_hole 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 5),
                 template_var 3),
               template_hole 0),
             template_hole 1),
           template_var 0)))),
    ("Matching.add_match_match_not_cases",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match (MatchNot ?m)
             ?rs, Undecided\<rangle> \<Rightarrow> Undecided ==>
      matches ?\<gamma> ?m ?p |
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow> Undecided",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_var 0)),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 0),
                 template_hole 2),
               template_hole 2))
           ))),
    ("Matching.not_matches_add_matchNot_simp",
     "~ matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>add_match (MatchNot ?m)
             ?rs, ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 5)),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 6),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matching.matches_MatchNot_simp",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule (MatchNot ?m)
              ?a], Undecided\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[], Undecided\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 5),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 4)),
                     template_var 1)),
                 template_hole 1)),
             template_hole 0),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 5),
                 template_var 3),
               template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Matching.iptables_bigstep_MatchAnd_comm",
     "?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule
              (MatchAnd ?m1.0 ?m2.0) ?a], ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule
              (MatchAnd ?m2.0 ?m1.0) ?a], ?s\<rangle> \<Rightarrow> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3)),
                   template_var 2)),
               template_hole 0)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 4)),
                   template_var 2)),
               template_hole 0)),
           template_var 1),
         template_var 0))),
    ("Matching.matches_MatchNotAnd_simp",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule
              (MatchAnd (MatchNot ?m) ?m')
              ?a], Undecided\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[], Undecided\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 5)),
                         template_var 2)),
                     template_var 1)),
                 template_hole 1)),
             template_hole 0),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 6),
                 template_var 4),
               template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Matching.matches_rule_and_simp_help",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule (MatchAnd ?m ?m')
              ?a'], Undecided\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m'
              ?a'], Undecided\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 5),
                         template_var 2)),
                     template_var 1)),
                 template_hole 1)),
             template_hole 0),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 6),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 1)),
             template_hole 0),
           template_var 0)))),
    ("Matching.matches_rule_and_simp",
     "matches ?\<gamma> ?m ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule (MatchAnd ?m ?m')
              ?a'], ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m'
              ?a'], ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 7),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 6),
                         template_var 3)),
                     template_var 2)),
                 template_hole 0)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 7),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_hole 0)),
             template_var 1),
           template_var 0)))),
    ("Matching.matches_rule_iptables_bigstep",
     "matches ?\<gamma> ?m ?p = matches ?\<gamma> ?m' ?p ==>
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m
              ?a], ?s\<rangle> \<Rightarrow> ?t =
      ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>[Rule ?m'
              ?a], ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 7),
              template_var 6),
            template_var 5),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 7),
              template_var 4),
            template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 7),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 2)),
                 template_hole 0)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 7),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2)),
                 template_hole 0)),
             template_var 1),
           template_var 0)))),
    ("Matching.optimize_matches_generic",
     "[| ALL r:set ?rs. ?P (get_match r);
         !!m. ?P m ==>
              matches ?\<gamma> (?f m) ?p = matches ?\<gamma> m ?p |]
      ==> ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>optimize_matches ?f
                 ?rs, ?s\<rangle> \<Rightarrow> ?t =
          ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 7)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 5),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 7)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 5),
                 template_var 3),
               template_var 7),
             template_var 1),
           template_var 0)))),
    ("Matching.optimize_matches_option_generic",
     "[| ALL r:set ?rs. ?P (get_match r);
         !!m m'.
            [| ?P m; ?f m = Some m' |]
            ==> matches ?\<gamma> m' ?p = matches ?\<gamma> m ?p;
         !!m. [| ?P m; ?f m = None |] ==> ~ matches ?\<gamma> m ?p |]
      ==> ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>optimize_matches_option
                 ?f ?rs, ?s\<rangle> \<Rightarrow> ?t =
          ?\<Gamma>,?\<gamma>,?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 7)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 7)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 4),
                 template_var 3),
               template_var 7),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.MatchingTemplates"
### 0.385s elapsed time, 0.567s cpu time, 0.077s GC time
val it = (): unit
