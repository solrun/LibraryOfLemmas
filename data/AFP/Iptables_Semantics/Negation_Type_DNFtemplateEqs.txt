   [("Negation_Type_DNF.dnf_not",
     "dnf_to_bool ?\<gamma> (dnf_not ?d) = (~ dnf_to_bool ?\<gamma> ?d)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Negation_Type_DNF.dnf_to_bool_set",
     "dnf_to_bool ?\<gamma> ?dnf =
      (EX d:set ?dnf. cnf_to_bool ?\<gamma> d)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Negation_Type_DNF.dnf_and_symmetric",
     "dnf_to_bool ?\<gamma> (dnf_and ?d1.0 ?d2.0) =
      dnf_to_bool ?\<gamma> (dnf_and ?d2.0 ?d1.0)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Negation_Type_DNF.cnf_to_bool_append",
     "cnf_to_bool ?\<gamma> (?a1.0 @ ?a2.0) =
      (cnf_to_bool ?\<gamma> ?a1.0 & cnf_to_bool ?\<gamma> ?a2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Negation_Type_DNF.dnf_to_bool_append",
     "dnf_to_bool ?\<gamma> (?a1.0 @ ?a2.0) =
      (dnf_to_bool ?\<gamma> ?a1.0 | dnf_to_bool ?\<gamma> ?a2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Negation_Type_DNF.dnf_and_correct",
     "dnf_to_bool ?\<gamma> (dnf_and ?d1.0 ?d2.0) =
      (dnf_to_bool ?\<gamma> ?d1.0 & dnf_to_bool ?\<gamma> ?d2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Negation_Type_DNF.cnf_invert_singelton",
     "cnf_to_bool ?\<gamma> [invert ?a] = (~ cnf_to_bool ?\<gamma> [?a])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 1))))),
    ("Negation_Type_DNF.cnf_singleton_false",
     "(EX a':set ?as. ~ cnf_to_bool ?\<gamma> [a']) =
      (~ cnf_to_bool ?\<gamma> ?as)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         t_empty),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Negation_Type_DNF.cnf_to_bool_set",
     "cnf_to_bool ?f ?cnf =
      (ALL c:set ?cnf. case c of Pos a => ?f a | Neg a => ~ ?f a)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Negation_Type_DNF.listprepend_correct'",
     "dnf_to_bool ?\<gamma> (listprepend ?as ?ds) =
      (dnf_to_bool ?\<gamma> (map (%a. [a]) ?as) &
       dnf_to_bool ?\<gamma> ?ds)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Negation_Type_DNF.map_a_and",
     "dnf_to_bool ?\<gamma> (map ((#) ?a) ?ds) =
      (dnf_to_bool ?\<gamma> [[?a]] & dnf_to_bool ?\<gamma> ?ds)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 1)),
               template_hole 0))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("Negation_Type_DNF.listprepend_correct",
     "dnf_to_bool ?\<gamma> (listprepend ?as ?ds) =
      (EX a:set ?as.
          dnf_to_bool ?\<gamma> [[a]] & dnf_to_bool ?\<gamma> ?ds)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         t_empty)))]
