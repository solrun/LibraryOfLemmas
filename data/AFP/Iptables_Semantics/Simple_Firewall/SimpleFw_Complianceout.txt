Loading theory "Draft.Datatype_Selectors" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.List_Misc" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Loading theory "Draft.Negation_Type" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses" via "Draft.WordInterval_Lists")
Loading theory "Draft.Remdups_Rev" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
### theory "Draft.List_Misc"
### 0.043s elapsed time, 0.211s cpu time, 0.000s GC time
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Found termination order: "{}"
### theory "Draft.Datatype_Selectors"
### 0.101s elapsed time, 0.419s cpu time, 0.038s GC time
Loading theory "Draft.Ternary" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Remdups_Rev"
### 0.133s elapsed time, 0.546s cpu time, 0.038s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Repeat_Stabilize"
### 0.118s elapsed time, 0.448s cpu time, 0.038s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.110s elapsed time, 0.441s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.845s cpu time, 0.144s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.246s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.809s elapsed time, 3.175s cpu time, 0.344s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.008s elapsed time, 3.847s cpu time, 0.813s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.937s elapsed time, 3.578s cpu time, 0.731s GC time
Loading theory "Draft.Conntrack_State" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.Tagged_Packet")
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.845s elapsed time, 7.115s cpu time, 1.105s GC time
Loading theory "Draft.L4_Protocol_Flags" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  ctstate :: enum
  enum_ctstate == enum_class.enum :: ctstate list
  enum_all_ctstate == enum_class.enum_all :: (ctstate => bool) => bool
  enum_ex_ctstate == enum_class.enum_ex :: (ctstate => bool) => bool
Found termination order: "{}"
### theory "Draft.L4_Protocol_Flags"
### 0.687s elapsed time, 2.653s cpu time, 0.324s GC time
Loading theory "Draft.Word_Upto" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Protocols_Normalize")
### theory "HOL-Library.Tree"
### 2.174s elapsed time, 8.366s cpu time, 1.285s GC time
Loading theory "Draft.Templates" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.093s elapsed time, 0.350s cpu time, 0.083s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SimpleFw_ComplianceTemplates")
Found termination order: "{}"
### theory "Draft.Conntrack_State"
### 1.040s elapsed time, 4.010s cpu time, 0.475s GC time
Loading theory "Draft.Tagged_Packet" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
### theory "Draft.Word_Upto"
### 0.800s elapsed time, 2.982s cpu time, 1.167s GC time
Loading theory "Draft.WordInterval_Lists" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses")
### theory "Draft.Tagged_Packet"
### 0.861s elapsed time, 3.225s cpu time, 1.155s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.973s elapsed time, 3.673s cpu time, 1.155s GC time
Found termination order: "size_list size <*mlex*> {}"
"False"
  :: "bool"
"Some {CT_New}"
  :: "ctstate set option"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.WordInterval_Lists"
### 0.443s elapsed time, 1.748s cpu time, 0.137s GC time
Loading theory "Draft.Ports" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.IpAddresses" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'', p_tag_ctstate = CT_New |)"
  :: "32 tagged_packet"
### theory "Draft.Ports"
### 1.316s elapsed time, 4.643s cpu time, 1.458s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses"
### 1.675s elapsed time, 5.384s cpu time, 1.526s GC time
Loading theory "Draft.Common_Primitive_Syntax" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
### theory "Draft.Common_Primitive_Syntax"
### 3.384s elapsed time, 8.792s cpu time, 2.270s GC time
"(| p_iiface = ''eth0'', p_oiface = ''eth1'', p_src = 3232236077,
    p_dst = 2915201135, p_proto = 6, p_sport = 2065, p_dport = 80,
    p_tcp_flags = {TCP_ACK}, p_payload = ''GET / HTTP/1.0'',
    p_tag_ctstate = CT_Established |)"
  :: "32 tagged_packet"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 9.729s elapsed time, 26.632s cpu time, 5.896s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.139s elapsed time, 1.280s cpu time, 0.085s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Loading theory "Draft.Unknown_Match_Tacs" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Found termination order: "{}"
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order: "{}"
### theory "Draft.Unknown_Match_Tacs"
### 0.258s elapsed time, 0.578s cpu time, 0.093s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.588s elapsed time, 0.961s cpu time, 0.172s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches")
Loading theory "Draft.Optimizing" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Loading theory "Draft.Common_Primitive_Matcher_Generic" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Common_Primitive_Matcher")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.333s elapsed time, 1.044s cpu time, 0.126s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Optimizing"
### 0.459s elapsed time, 1.423s cpu time, 0.126s GC time
Found termination order: "size <*mlex*> {}"
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.465s elapsed time, 1.095s cpu time, 0.076s GC time
Loading theory "Draft.Negation_Type_Matching" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization")
locale primitive_matcher_generic
  fixes
    \<beta> ::
      "'i common_primitive => ('i, 'a) tagged_packet_scheme => ternaryvalue"
  assumes "primitive_matcher_generic \<beta>"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Negation_Type_Matching"
### 0.838s elapsed time, 1.866s cpu time, 0.239s GC time
Loading theory "Draft.Primitive_Normalization" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
compress_extra (Match ?x) = Match ?x
compress_extra (MatchNot (Match (Extra ?e))) =
Match (Extra (''NOT ('' @ ?e @ '')''))
compress_extra (MatchNot (Match (Src ?va))) =
MatchNot (compress_extra (Match (Src ?va)))
compress_extra (MatchNot (Match (Dst ?va))) =
MatchNot (compress_extra (Match (Dst ?va)))
compress_extra (MatchNot (Match (IIface ?va))) =
MatchNot (compress_extra (Match (IIface ?va)))
compress_extra (MatchNot (Match (OIface ?va))) =
MatchNot (compress_extra (Match (OIface ?va)))
compress_extra (MatchNot (Match (Prot ?va))) =
MatchNot (compress_extra (Match (Prot ?va)))
compress_extra (MatchNot (Match (Src_Ports ?va))) =
MatchNot (compress_extra (Match (Src_Ports ?va)))
compress_extra (MatchNot (Match (Dst_Ports ?va))) =
MatchNot (compress_extra (Match (Dst_Ports ?va)))
compress_extra (MatchNot (Match (MultiportPorts ?va))) =
MatchNot (compress_extra (Match (MultiportPorts ?va)))
compress_extra (MatchNot (Match (L4_Flags ?va))) =
MatchNot (compress_extra (Match (L4_Flags ?va)))
compress_extra (MatchNot (Match (CT_State ?va))) =
MatchNot (compress_extra (Match (CT_State ?va)))
compress_extra (MatchNot (MatchNot ?v)) =
MatchNot (compress_extra (MatchNot ?v))
compress_extra (MatchNot (MatchAnd ?v ?va)) =
MatchNot (compress_extra (MatchAnd ?v ?va))
compress_extra (MatchNot MatchAny) = MatchNot (compress_extra MatchAny)
compress_extra (MatchAnd (Match (Extra ?e1.0)) ?m2.0) =
(case compress_extra ?m2.0 of
 Match (Src ipt_iprange) =>
   MatchAnd (Match (Extra ?e1.0)) (Match (Src ipt_iprange))
 | Match (Dst ipt_iprange) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst ipt_iprange))
 | Match (IIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (IIface iface))
 | Match (OIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (OIface iface))
 | Match (Prot protocol) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Prot protocol))
 | Match (Src_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Src_Ports ipt_l4_ports))
 | Match (Dst_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst_Ports ipt_l4_ports))
 | Match (MultiportPorts ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (MultiportPorts ipt_l4_ports))
 | Match (L4_Flags ipt_tcp_flags) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (L4_Flags ipt_tcp_flags))
 | Match (CT_State set) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (CT_State set))
 | Match (Extra e2) => Match (Extra (?e1.0 @ '' '' @ e2))
 | MatchNot match_expr =>
     MatchAnd (Match (Extra ?e1.0)) (MatchNot match_expr)
 | MatchAnd match_expr1 match_expr2 =>
     MatchAnd (Match (Extra ?e1.0)) (MatchAnd match_expr1 match_expr2)
 | MatchAny => Match (Extra ?e1.0))
compress_extra (MatchAnd (Match (Src ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (IIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (IIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (OIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (OIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Prot ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Prot ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Src_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (MultiportPorts ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (MultiportPorts ?va)))
 (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (L4_Flags ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (L4_Flags ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (CT_State ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (CT_State ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchNot ?v) ?m2.0) =
MatchAnd (compress_extra (MatchNot ?v)) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchAnd ?v ?va) ?m2.0) =
MatchAnd (compress_extra (MatchAnd ?v ?va)) (compress_extra ?m2.0)
compress_extra (MatchAnd MatchAny ?m2.0) =
MatchAnd (compress_extra MatchAny) (compress_extra ?m2.0)
compress_extra MatchAny = MatchAny
### theory "Draft.Common_Primitive_Matcher_Generic"
### 2.069s elapsed time, 5.052s cpu time, 0.474s GC time
Loading theory "Draft.Common_Primitive_Matcher" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
"Match (Extra ''foo bar'')"
  :: "'a common_primitive match_expr"
"Match (Extra ''foo NOT (bar)'')"
  :: "'a common_primitive match_expr"
Found termination order: "{}"
"Match (Extra ''-m addrtype --dst-type BROADCAST'')"
  :: "'a common_primitive match_expr"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
match_list \<gamma> (map (Match o C) (f ml)) a p =
match_list \<gamma> [alist_and (NegPos_map C ml)] a p ==>
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) (map (Match o C) (f ml))) ?s =
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) [alist_and (NegPos_map C ml)]) ?s
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Primitive_Normalization"
### 1.623s elapsed time, 4.202s cpu time, 0.418s GC time
Loading theory "Draft.MatchExpr_Fold" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas")
Loading theory "Draft.Ipassmt" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Interface_Replace" via "Draft.No_Spoof")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.MatchExpr_Fold"
### 0.097s elapsed time, 0.298s cpu time, 0.000s GC time
Found termination order: "size_list size <*mlex*> {}"
"True"
  :: "bool"
### theory "Draft.Ipassmt"
### 1.434s elapsed time, 3.646s cpu time, 0.208s GC time
Loading theory "Draft.Routing_IpAssmt" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Interface_Replace" via "Draft.Output_Interface_Replace")
### theory "Draft.Routing_IpAssmt"
### 0.310s elapsed time, 0.623s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Common_Primitive_Matcher"
### 20.165s elapsed time, 33.134s cpu time, 8.425s GC time
Loading theory "Draft.Common_Primitive_Lemmas" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Loading theory "Draft.Conntrack_State_Transform" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Primitive_Abstract")
Loading theory "Draft.Common_Primitive_toString" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Interface_Replace")
### theory "Draft.Common_Primitive_Lemmas"
### 0.276s elapsed time, 0.881s cpu time, 0.070s GC time
Loading theory "Draft.Interfaces_Normalize" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Loading theory "Draft.IpAddresses_Normalize" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Interfaces_Normalize"
### 0.116s elapsed time, 0.447s cpu time, 0.026s GC time
Loading theory "Draft.Ports_Normalize" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Conntrack_State_Transform"
### 0.683s elapsed time, 2.448s cpu time, 0.204s GC time
Loading theory "Draft.Protocols_Normalize" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Protocols_Normalize"
### 0.632s elapsed time, 2.389s cpu time, 0.212s GC time
Loading theory "Draft.No_Spoof" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Interface_Replace")
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses_Normalize"
### 1.483s elapsed time, 5.614s cpu time, 0.528s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Common_Primitive_toString"
### 2.722s elapsed time, 9.988s cpu time, 1.086s GC time
Loading theory "Draft.Output_Interface_Replace" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform" via "Draft.Interface_Replace")
Found termination order: "{}"
### theory "Draft.Ports_Normalize"
### 2.541s elapsed time, 9.409s cpu time, 1.120s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
"Some (MatchAnd MatchAny MatchAny)"
  :: "32 common_primitive match_expr option"
"Some
  (MatchAnd (Match (IIface (Iface ''eth1'')))
    (MatchAnd (MatchAnd (MatchAnd MatchAny MatchAny) MatchAny)
      (Match (Prot (Proto 6)))))"
  :: "32 common_primitive match_expr option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Output_Interface_Replace"
### 2.384s elapsed time, 8.336s cpu time, 4.481s GC time
### theory "Draft.No_Spoof"
### 3.867s elapsed time, 13.808s cpu time, 5.152s GC time
Loading theory "Draft.Interface_Replace" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance" via "Draft.Transform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"Some (MatchAnd MatchAny MatchAny)"
  :: "32 common_primitive match_expr option"
"Some
  (MatchAnd MatchAny
    (MatchAnd (MatchAnd (MatchAnd MatchAny MatchAny) MatchAny) MatchAny))"
  :: "32 common_primitive match_expr option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Interface_Replace"
### 1.433s elapsed time, 5.598s cpu time, 0.375s GC time
Loading theory "Draft.Transform" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance")
"[MatchAnd (Match (Src (IpAddrNetmask 0 0)))
   (MatchAnd (MatchNot (Match (Src_Ports (L4Ports 6 [(1, 2)]))))
     (Match (Src_Ports (L4Ports 6 [(1, 2)]))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 1073741824 2)))
   (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))),
  MatchAnd (Match (Src (IpAddrNetmask 2147483648 1)))
   (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)]))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 0 8)))
   (MatchAnd MatchAny
     (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 0 8)))
   (MatchAnd MatchAny
     (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))))]"
  :: "32 common_primitive match_expr list"
"MatchExpr (L4Ports 6 [(22, 23)])"
  :: "ipt_l4_ports match_compress"
[| normalized_nnf_match ?m; wf_disc_sel (?disc, ?sel) ?C;
   ALL a. ~ ?disc (Prot a); ?P (?disc2.0, ?sel2.0) ?m;
   !!a. [| normalized_nnf_match a;
           a : set (normalize_match
                     (rewrite_negated_primitives (?disc, ?sel) ?C
                       l4_ports_negate_one ?m)) |]
        ==> ?P (?disc2.0, ?sel2.0) a;
   !!a dpts rst.
      [| normalized_nnf_match a;
         primitive_extractor (?disc, ?sel) a = (dpts, rst);
         getNeg dpts = []; ?P (?disc2.0, ?sel2.0) a |]
      ==> ?P (?disc2.0, ?sel2.0) rst;
   !!a spt rst.
      ?P (?disc2.0, ?sel2.0) rst ==>
      ?P (?disc2.0, ?sel2.0) (MatchAnd (Match (?C spt)) rst);
   ?m'
   : set (normalize_ports_generic
           (normalize_positive_ports_step (?disc, ?sel) ?C)
           (rewrite_negated_primitives (?disc, ?sel) ?C l4_ports_negate_one)
           ?m) |]
==> ?P (?disc2.0, ?sel2.0) ?m'
[| ~ has_disc ?disc ?m; ?m' : set (normalize_match ?m) |]
==> ~ has_disc ?disc ?m'
[| normalized_nnf_match ?m; wf_disc_sel (disc2, ?sel) ?C;
   ~ has_disc ?disc2.0 ?m;
   has_disc_negated disc2 False ?m ==>
   ALL pts. ~ has_disc ?disc2.0 (?negate_f ?C pts);
   ALL a. ~ ?disc2.0 (?C a) |]
==> ~ has_disc ?disc2.0
       (rewrite_negated_primitives (disc2, ?sel) ?C ?negate_f ?m)
"MatchAnd
  (MatchNot
    (MatchAnd (MatchNot (MatchNot (Match (Prot (Proto 17)))))
      (MatchNot (Match (Src_Ports (L4Ports 17 [(0, 79), (81, 65535)]))))))
  (MatchAnd MatchAny
    (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
      (MatchAnd (Match (Prot (Proto 6))) MatchAny)))"
  :: "32 common_primitive match_expr"
ipassmt_sanity_disjoint ?ipassmt ==
ALL i1:dom ?ipassmt.
   ALL i2:dom ?ipassmt.
      i1 ~= i2 -->
      ipcidr_union_set (set (the (?ipassmt i1))) Int
      ipcidr_union_set (set (the (?ipassmt i2))) =
      {}
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> (common_matcher,
     ?\<alpha>),?p\<turnstile> \<langle>transform_remove_unknowns_generic
   (common_matcher, ?\<alpha>)
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     ?\<alpha>),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> simple_ruleset
     (transform_remove_unknowns_generic (common_matcher, ?\<alpha>) ?rs)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. ~ has_disc ?disc (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_disc ?disc (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_unknowns common_matcher (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. normalized_n_primitive ?disc_sel ?f (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       normalized_n_primitive ?disc_sel ?f (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. ~ has_disc_negated ?disc ?neg (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_disc_negated ?disc ?neg (get_match r)
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
[| ALL r:set ?rs.
      normalized_nnf_match (get_match r) &
      normalized_n_primitive (disc2, sel2) P (get_match r);
   ALL m.
      normalized_nnf_match m & normalized_n_primitive (disc2, sel2) P m -->
      (ALL m':set (normalize_primitive_extract (disc1, sel1) C f m).
          normalized_nnf_match m' &
          normalized_n_primitive (disc2, sel2) P m') |]
==> ALL r:set (normalize_rules
                (normalize_primitive_extract (disc1, sel1) C f) ?rs).
       normalized_nnf_match (get_match r) &
       normalized_n_primitive (disc2, sel2) P (get_match r)
(!!r m. [| r : set ?rs; ?f (get_match r) = Some m |] ==> ?P m) ==>
ALL r:set (optimize_matches_option ?f ?rs). ?P (get_match r)
(!!r m.
    [| r : set ?rs; ?f (get_match r) = Some m |]
    ==> normalized_nnf_match m & ~ has_disc_negated disc3 False m & P m) ==>
ALL r:set (optimize_matches_option ?f ?rs).
   normalized_nnf_match (get_match r) &
   ~ has_disc_negated disc3 False (get_match r) & P (get_match r)
[| ALL r:set ?rs.
      normalized_nnf_match (get_match r) &
      ~ has_disc_negated disc3 False (get_match r);
   ALL m.
      normalized_nnf_match m & ~ has_disc_negated disc3 False m -->
      (ALL m':set (?f m). ?Q m') |]
==> ALL r:set (normalize_rules ?f ?rs). ?Q (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>transform_optimize_dnf_strict
    ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> (common_matcher,
     in_doubt_allow),?p\<turnstile> \<langle>transform_normalize_primitives
        ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> simple_ruleset (transform_normalize_primitives ?rs)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc1.0 (Src_Ports a)) &
   (ALL a. ~ ?disc1.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc1.0 (Src a)) & (ALL a. ~ ?disc1.0 (Dst a));
   ((ALL a. ~ ?disc1.0 (IIface a)) | ?disc1.0 = is_Iiface) &
   ((ALL a. ~ ?disc1.0 (OIface a)) | ?disc1.0 = is_Oiface);
   ALL a. ~ ?disc1.0 (Prot a);
   ALL r:set ?rs. ~ has_disc ?disc1.0 (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc ?disc1.0 (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_nnf_match (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_src_ports (get_match r) &
       normalized_dst_ports (get_match r) &
       normalized_src_ips (get_match r) &
       normalized_dst_ips (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc2.0 (Src_Ports a)) &
   (ALL a. ~ ?disc2.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc2.0 (Src a)) & (ALL a. ~ ?disc2.0 (Dst a));
   ALL a. ~ ?disc2.0 (IIface a); ALL a. ~ ?disc2.0 (OIface a);
   ALL a. ~ ?disc2.0 (Prot a);
   ALL r:set ?rs.
      normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc3.0 (Src_Ports a)) &
   (ALL a. ~ ?disc3.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc3.0 (Src a)) & (ALL a. ~ ?disc3.0 (Dst a));
   ((ALL a. ~ ?disc3.0 (IIface a)) | ?disc3.0 = is_Iiface) &
   ((ALL a. ~ ?disc3.0 (OIface a)) | ?disc3.0 = is_Oiface);
   (ALL a. ~ ?disc3.0 (Prot a)) |
   ?disc3.0 = is_Prot &
   (ALL r:set ?rs.
       ~ has_disc_negated is_Src_Ports False (get_match r) &
       ~ has_disc_negated is_Dst_Ports False (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r));
   ALL r:set ?rs. ~ has_disc_negated ?disc3.0 False (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc_negated ?disc3.0 False (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>transform_optimize_dnf_strict
    ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>transform_optimize_dnf_strict
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> (common_matcher,
     in_doubt_deny),?p\<turnstile> \<langle>transform_normalize_primitives
       ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> simple_ruleset (transform_normalize_primitives ?rs)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc1.0 (Src_Ports a)) &
   (ALL a. ~ ?disc1.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc1.0 (Src a)) & (ALL a. ~ ?disc1.0 (Dst a));
   ((ALL a. ~ ?disc1.0 (IIface a)) | ?disc1.0 = is_Iiface) &
   ((ALL a. ~ ?disc1.0 (OIface a)) | ?disc1.0 = is_Oiface);
   ALL a. ~ ?disc1.0 (Prot a);
   ALL r:set ?rs. ~ has_disc ?disc1.0 (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc ?disc1.0 (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_nnf_match (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_src_ports (get_match r) &
       normalized_dst_ports (get_match r) &
       normalized_src_ips (get_match r) &
       normalized_dst_ips (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc2.0 (Src_Ports a)) &
   (ALL a. ~ ?disc2.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc2.0 (Src a)) & (ALL a. ~ ?disc2.0 (Dst a));
   ALL a. ~ ?disc2.0 (IIface a); ALL a. ~ ?disc2.0 (OIface a);
   ALL a. ~ ?disc2.0 (Prot a);
   ALL r:set ?rs.
      normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc3.0 (Src_Ports a)) &
   (ALL a. ~ ?disc3.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc3.0 (Src a)) & (ALL a. ~ ?disc3.0 (Dst a));
   ((ALL a. ~ ?disc3.0 (IIface a)) | ?disc3.0 = is_Iiface) &
   ((ALL a. ~ ?disc3.0 (OIface a)) | ?disc3.0 = is_Oiface);
   (ALL a. ~ ?disc3.0 (Prot a)) |
   ?disc3.0 = is_Prot &
   (ALL r:set ?rs.
       ~ has_disc_negated is_Src_Ports False (get_match r) &
       ~ has_disc_negated is_Dst_Ports False (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r));
   ALL r:set ?rs. ~ has_disc_negated ?disc3.0 False (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc_negated ?disc3.0 False (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>transform_optimize_dnf_strict
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
### theory "Draft.Transform"
### 2.839s elapsed time, 11.051s cpu time, 0.810s GC time
Loading theory "Draft.Primitive_Abstract" (required by "Draft.SimpleFw_ComplianceTemplates" via "Draft.SimpleFw_Compliance")
"MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
  (MatchAnd (Match (Prot (Proto 6))) (MatchNot (Match (Extra ''foobar''))))"
  :: "32 common_primitive match_expr"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Primitive_Abstract"
### 0.729s elapsed time, 1.525s cpu time, 0.103s GC time
Loading theory "Draft.SimpleFw_Compliance" (required by "Draft.SimpleFw_ComplianceTemplates")
"[MatchAnd (MatchNot (Match (Prot (Proto 17))))
   (MatchAnd MatchAny
     (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
       (MatchAnd (Match (Prot (Proto 6))) MatchAny))),
  MatchAnd (Match (Src_Ports (L4Ports 17 [(0, 79)])))
   (MatchAnd MatchAny
     (MatchAnd MatchAny
       (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
         (MatchAnd (Match (Prot (Proto 6))) MatchAny)))),
  MatchAnd (Match (Src_Ports (L4Ports 17 [(81, 65535)])))
   (MatchAnd MatchAny
     (MatchAnd MatchAny
       (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
         (MatchAnd (Match (Prot (Proto 6))) MatchAny))))]"
  :: "32 common_primitive match_expr list"
Found termination order: "{}"
### Missing patterns in function definition:
### !!va. common_primitive_match_to_simple_match (Match (MultiportPorts va)) =
###       undefined
### !!v. common_primitive_match_to_simple_match
###       (MatchNot (Match (MultiportPorts v))) =
###      undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SimpleFw_Compliance"
### 1.910s elapsed time, 2.608s cpu time, 0.203s GC time
Loading theory "Draft.SimpleFw_ComplianceTemplates"
"False"
  :: "bool"
val templateLemmas =
   [("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "match_iface (iiface simple_match_any) (p_iiface ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "match_iface (oiface simple_match_any) (p_oiface ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "match_proto (proto simple_match_any) (p_proto ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "simple_match_ip (dst simple_match_any) (p_dst ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "simple_match_ip (src simple_match_any) (p_src ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "simple_match_port (dports simple_match_any) (p_dport ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.match_iface_simple_match_any_simps",
     "simple_match_port (sports simple_match_any) (p_sport ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SimpleFw_Compliance.simple_fw_remdups_Rev",
     "simple_fw (remdups_rev ?rs) ?p = simple_fw ?rs ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SimpleFw_Compliance.ports_to_set_singleton_simple_match_port",
     "(?p : ports_to_set [?a]) = simple_match_port ?a ?p",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SimpleFw_Compliance.transform_simple_fw_lower",
     "simple_ruleset ?rs ==>
      check_simple_fw_preconditions
       (lower_closure
         (optimize_matches abstract_for_simple_firewall
           (lower_closure (packet_assume_new ?rs))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("SimpleFw_Compliance.transform_simple_fw_upper",
     "simple_ruleset ?rs ==>
      check_simple_fw_preconditions
       (upper_closure
         (optimize_matches abstract_for_simple_firewall
           (upper_closure (packet_assume_new ?rs))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("SimpleFw_Compliance.ctstate_assume_new_not_has_CT_State",
     "?r : set (ctstate_assume_new ?rs) ==>
      ~ has_disc is_CT_State (get_match ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("SimpleFw_Compliance.to_simple_firewall",
     "check_simple_fw_preconditions ?rs ==>
      approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p ?rs
       Undecided =
      simple_fw (to_simple_firewall ?rs) ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)),
               template_var 0),
             template_var 2),
           template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("SimpleFw_Compliance.simple_match_to_ipportiface_match_correct",
     "simple_match_valid ?sm ==>
      matches (common_matcher, ?\<alpha>)
       (simple_match_to_ipportiface_match ?sm) ?a ?p =
      simple_matches ?sm ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 2)),
               template_app (template_hole 1, template_var 3)),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("SimpleFw_Compliance.to_simple_firewall_simps",
     "check_simple_fw_preconditions (Rule ?m ?a # ?rs) ==>
      to_simple_firewall (Rule ?m ?a # ?rs) =
      (case common_primitive_match_to_simple_match ?m of
       None => to_simple_firewall ?rs
       | Some sm =>
           SimpleRule sm (action_to_simple_action ?a) #
           to_simple_firewall ?rs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 0)),
             t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("SimpleFw_Compliance.transform_simple_fw_upper",
     "simple_ruleset ?rs ==>
      {p. (common_matcher,
           in_doubt_allow),p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> Decision
                            FinalAllow &
          match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
          p_tag_ctstate p = CT_New}
      <= {p. simple_fw
              (to_simple_firewall
                (upper_closure
                  (optimize_matches abstract_for_simple_firewall
                    (upper_closure (packet_assume_new ?rs)))))
              p =
             Decision FinalAllow &
             match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
             p_tag_ctstate p = CT_New}",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 21, t_empty),
         template_app (template_hole 21, t_empty)))),
    ("SimpleFw_Compliance.transform_simple_fw_lower",
     "simple_ruleset ?rs ==>
      {p. simple_fw
           (to_simple_firewall
             (lower_closure
               (optimize_matches abstract_for_simple_firewall
                 (lower_closure (packet_assume_new ?rs)))))
           p =
          Decision FinalAllow &
          match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
          p_tag_ctstate p = CT_New}
      <= {p. (common_matcher,
              in_doubt_deny),p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> Decision
                              FinalAllow &
             match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
             p_tag_ctstate p = CT_New}",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 21, t_empty),
         template_app (template_hole 21, t_empty)))),
    ("SimpleFw_Compliance.common_primitive_match_to_simple_match",
     "[| normalized_src_ports ?m; normalized_dst_ports ?m;
         normalized_src_ips ?m; normalized_dst_ips ?m; normalized_ifaces ?m;
         normalized_protocols ?m; ~ has_disc is_L4_Flags ?m;
         ~ has_disc is_CT_State ?m; ~ has_disc is_MultiportPorts ?m;
         ~ has_disc is_Extra ?m |]
      ==> (Some ?sm = common_primitive_match_to_simple_match ?m -->
           matches (common_matcher, ?\<alpha>) ?m ?a ?p =
           simple_matches ?sm ?p) &
          (common_primitive_match_to_simple_match ?m = None -->
           ~ matches (common_matcher, ?\<alpha>) ?m ?a ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_predicate
         (template_app (template_hole 21, template_var 4)),
        template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_hole 13),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_hole 12),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_hole 11),
                  template_var 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 3)),
                     template_app (template_hole 6, template_var 4))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_hole 2),
                               template_var 2)),
                           template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 6, template_var 4)),
                   template_hole 0)),
               template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2)),
                       template_var 4),
                     template_var 1),
                   template_var 0))))
           ))),
    ("SimpleFw_Compliance.to_simple_firewall_without_interfaces",
     "[| simple_ruleset ?rs; ipassmt_sanity_nowildcards (map_of ?ipassmt);
         distinct (map fst ?ipassmt);
         ALL p.
            EX ips.
               map_of ?ipassmt (Iface (p_iiface p)) = Some ips &
               p_src p : ipcidr_union_set (set ips);
         !!rtbl p.
            ?rtblo = Some rtbl ==>
            output_iface (routing_table_semantics rtbl (p_dst p)) =
            p_oiface p;
         !!rtbl. ?rtblo = Some rtbl ==> correct_routing rtbl;
         !!rtbl.
            ?rtblo = Some rtbl ==>
            ipassmt_sanity_nowildcards (map_of (routing_ipassmt rtbl)) |]
      ==> ALL r:set (to_simple_firewall_without_interfaces ?ipassmt ?rtblo
                      ?rs).
             iiface (match_sel r) = ifaceAny &
             oiface (match_sel r) = ifaceAny",
     template_implication
      ([template_predicate
         (template_app (template_hole 35, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 34,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 32,
              template_app
               (template_app (template_hole 31, template_hole 30),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0),
                   template_var 2))),
             t_empty)
           ))),
    ("SimpleFw_Compliance.to_simple_firewall_without_interfaces",
     "[| simple_ruleset ?rs; ipassmt_sanity_nowildcards (map_of ?ipassmt);
         distinct (map fst ?ipassmt);
         ALL p.
            EX ips.
               map_of ?ipassmt (Iface (p_iiface p)) = Some ips &
               p_src p : ipcidr_union_set (set ips);
         !!rtbl p.
            ?rtblo = Some rtbl ==>
            output_iface (routing_table_semantics rtbl (p_dst p)) =
            p_oiface p;
         !!rtbl. ?rtblo = Some rtbl ==> correct_routing rtbl;
         !!rtbl.
            ?rtblo = Some rtbl ==>
            ipassmt_sanity_nowildcards (map_of (routing_ipassmt rtbl)) |]
      ==> {p. (common_matcher,
               in_doubt_allow),p\<turnstile> \<langle>?rs, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> Decision
                                FinalAllow &
              match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
              p_tag_ctstate p = CT_New}
          <= {p. simple_fw
                  (to_simple_firewall_without_interfaces ?ipassmt ?rtblo
                    ?rs)
                  p =
                 Decision FinalAllow &
                 match_tcp_flags ipt_tcp_syn (p_tcp_flags p) &
                 p_tag_ctstate p = CT_New}",
     template_implication
      ([template_predicate
         (template_app (template_hole 45, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 44,
              template_app (template_hole 43, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 42,
              template_app
               (template_app (template_hole 41, template_hole 40),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 39, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 16, t_empty),
         template_app (template_hole 16, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SimpleFw_ComplianceTemplates"
### 1.411s elapsed time, 2.134s cpu time, 0.255s GC time
val it = (): unit
