Loading theory "Draft.Datatype_Selectors" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.Negation_Type" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses" via "Draft.WordInterval_Lists")
Loading theory "Draft.List_Misc" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action" via "Draft.Semantics_Ternary")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
### theory "Draft.List_Misc"
### 0.034s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.Ternary" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Datatype_Selectors"
### 0.124s elapsed time, 0.503s cpu time, 0.045s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Repeat_Stabilize"
### 0.133s elapsed time, 0.535s cpu time, 0.045s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.103s elapsed time, 0.405s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.905s cpu time, 0.180s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.382s cpu time, 0.180s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.851s elapsed time, 3.333s cpu time, 0.406s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.994s elapsed time, 3.759s cpu time, 0.741s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Matching_Ternary")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.934s elapsed time, 3.518s cpu time, 0.696s GC time
Loading theory "Draft.Conntrack_State" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax" via "Draft.Tagged_Packet")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.820s elapsed time, 6.948s cpu time, 1.103s GC time
Loading theory "Draft.L4_Protocol_Flags" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.L4_Protocol_Flags"
### 0.673s elapsed time, 2.586s cpu time, 0.286s GC time
Loading theory "Draft.WordInterval_Lists" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses")
### theory "HOL-Library.Tree"
### 2.090s elapsed time, 7.997s cpu time, 1.164s GC time
Loading theory "Draft.Templates" (required by "Draft.IpassmtTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
instantiation
  ctstate :: enum
  enum_ctstate == enum_class.enum :: ctstate list
  enum_all_ctstate == enum_class.enum_all :: (ctstate => bool) => bool
  enum_ex_ctstate == enum_class.enum_ex :: (ctstate => bool) => bool
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IpassmtTemplates")
Found termination order: "{}"
### theory "Draft.Conntrack_State"
### 1.273s elapsed time, 4.779s cpu time, 1.234s GC time
Loading theory "Draft.Tagged_Packet" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.WordInterval_Lists"
### 0.787s elapsed time, 2.925s cpu time, 1.032s GC time
Loading theory "Draft.Ports" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.986s elapsed time, 3.700s cpu time, 1.095s GC time
Loading theory "Draft.IpAddresses" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Common_Primitive_Syntax")
### theory "Draft.Tagged_Packet"
### 0.597s elapsed time, 2.343s cpu time, 0.204s GC time
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
"Some {CT_New}"
  :: "ctstate set option"
"False"
  :: "bool"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Ports"
### 1.028s elapsed time, 4.008s cpu time, 0.327s GC time
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'', p_tag_ctstate = CT_New |)"
  :: "32 tagged_packet"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses"
### 1.734s elapsed time, 5.663s cpu time, 1.557s GC time
Loading theory "Draft.Common_Primitive_Syntax" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt")
### theory "Draft.Common_Primitive_Syntax"
### 2.812s elapsed time, 6.825s cpu time, 0.547s GC time
"(| p_iiface = ''eth0'', p_oiface = ''eth1'', p_src = 3232236077,
    p_dst = 2915201135, p_proto = 6, p_sport = 2065, p_dport = 80,
    p_tcp_flags = {TCP_ACK}, p_payload = ''GET / HTTP/1.0'',
    p_tag_ctstate = CT_Established |)"
  :: "32 tagged_packet"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 9.599s elapsed time, 25.934s cpu time, 5.727s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.167s elapsed time, 1.409s cpu time, 0.237s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches" via "Draft.Fixed_Action")
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.511s elapsed time, 0.517s cpu time, 0.000s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches")
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.284s elapsed time, 0.378s cpu time, 0.123s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "size <*mlex*> {}"
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.383s elapsed time, 0.397s cpu time, 0.000s GC time
Loading theory "Draft.Negation_Type_Matching" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt" via "Draft.Primitive_Normalization")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Negation_Type_Matching"
### 0.694s elapsed time, 0.800s cpu time, 0.119s GC time
Loading theory "Draft.Primitive_Normalization" (required by "Draft.IpassmtTemplates" via "Draft.Ipassmt")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
match_list \<gamma> (map (Match o C) (f ml)) a p =
match_list \<gamma> [alist_and (NegPos_map C ml)] a p ==>
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) (map (Match o C) (f ml))) ?s =
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) [alist_and (NegPos_map C ml)]) ?s
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Primitive_Normalization"
### 1.386s elapsed time, 1.610s cpu time, 0.250s GC time
Loading theory "Draft.Ipassmt" (required by "Draft.IpassmtTemplates")
Found termination order: "size_list size <*mlex*> {}"
"True"
  :: "bool"
### theory "Draft.Ipassmt"
### 1.240s elapsed time, 1.911s cpu time, 0.118s GC time
Loading theory "Draft.IpassmtTemplates"
val templateLemmas =
   [("Ipassmt.ipassmt_ignore_wildcard_le",
     "ipassmt_ignore_wildcard ?ipassmt \<subseteq>\<^sub>m ?ipassmt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Ipassmt.ipcidr_union_cidr_split",
     "ipcidr_union_set (set (cidr_split ?a)) = wordinterval_to_set ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Ipassmt.ipassmt_sanity_nowildcards_ignore_wildcardD",
     "ipassmt_sanity_nowildcards ?ipassmt ==>
      ipassmt_sanity_nowildcards (ipassmt_ignore_wildcard ?ipassmt)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "ipassmt_ignore_wildcard ?ipassmt ?i = Some ?ips ==>
      the (?ipassmt ?i) = ?ips",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_var 0))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "ipassmt_ignore_wildcard ?ipassmt ?i = Some ?ips ==>
      ipcidr_union_set (set ?ips) ~= UNIV",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Ipassmt.dom_ipassmt_ignore_wildcard",
     "(?i : dom (ipassmt_ignore_wildcard ?ipassmt)) =
      (?i : dom ?ipassmt &
       ipcidr_union_set (set (the (?ipassmt ?i))) ~= UNIV)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app (template_hole 8, template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app (template_var 0, template_var 1))))),
                 template_hole 0)))
           ))),
    ("Ipassmt.ipassmt_ignore_wildcard_None_Some",
     "[| ipassmt_ignore_wildcard ?ipassmt ?ifce = None;
         ?ipassmt ?ifce = Some ?ips |]
      ==> ipcidr_union_set (set ?ips) = UNIV",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "[| ?ipassmt ?i = Some ?ips; ipcidr_union_set (set ?ips) ~= UNIV |]
      ==> the (ipassmt_ignore_wildcard ?ipassmt ?i) = ?ips",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ipassmt.ipassmt_sanity_nowildcards_match_iface",
     "[| ipassmt_sanity_nowildcards ?ipassmt;
         ?ipassmt (Iface ?ifce2.0) = None; ?ipassmt ?ifce = Some ?a |]
      ==> ~ match_iface ?ifce ?ifce2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_var 3, template_app (template_hole 4, template_var 2)),
          template_hole 3),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )
           ))),
    ("Ipassmt.ipassmt_disjoint_nonempty_inj",
     "[| ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?i_ips;
         ipcidr_union_set (set ?i_ips) ~= {}; ?ipassmt ?k = Some ?i_ips |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation (template_var 0, template_var 2))),
    ("Ipassmt.ipassmt_disjoint_ignore_wildcard_nonempty_inj",
     "[| ipassmt_sanity_disjoint (ipassmt_ignore_wildcard ?ipassmt);
         ?ipassmt ?ifce = Some ?i_ips; ipcidr_union_set (set ?i_ips) ~= {};
         ipassmt_ignore_wildcard ?ipassmt ?k = Some ?i_ips |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3))
            ),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation (template_var 0, template_var 2))),
    ("Ipassmt.ipassmt_disjoint_inj_k",
     "[| ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?ips;
         ?ipassmt ?k = Some ?ips'; ?p : ipcidr_union_set (set ?ips);
         ?p : ipcidr_union_set (set ?ips') |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app (template_var 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_equation (template_var 2, template_var 4))),
    ("Ipassmt.ipassmt_diff_ifce_equal",
     "[| (?ifce, [], []) : set (ipassmt_diff ?ipassmt1.0 ?ipassmt2.0);
         ?ifce : dom (map_of ?ipassmt1.0);
         ?ifce : dom (map_of ?ipassmt2.0) |]
      ==> ipcidr_union_set (set (the (map_of ?ipassmt1.0 ?ifce))) =
          ipcidr_union_set (set (the (map_of ?ipassmt2.0 ?ifce)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_hole 9))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))))))),
    ("Ipassmt.ipassmt_disjoint_matcheq_iifce_srcip",
     "[| ipassmt_sanity_nowildcards ?ipassmt;
         ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?i_ips;
         ?ipassmt (Iface (p_iiface ?p)) = Some ?p_ips &
         p_src ?p : ipcidr_union_set (set ?p_ips) |]
      ==> match_iface ?ifce (p_iiface ?p) =
          (p_src ?p : ipcidr_union_set (set ?i_ips))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_var 4,
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 1)))),
                  template_app (template_hole 9, template_var 0))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)))))),
    ("Ipassmt.ipassmt_sanity_disjoint_ignore_wildcards",
     "ipassmt_sanity_disjoint (ipassmt_ignore_wildcard ?ipassmt) =
      (ALL i1:dom ?ipassmt.
          ALL i2:dom ?ipassmt.
             ipcidr_union_set (set (the (?ipassmt i1))) ~= UNIV &
             ipcidr_union_set (set (the (?ipassmt i2))) ~= UNIV &
             i1 ~= i2 -->
             ipcidr_union_set (set (the (?ipassmt i1))) Int
             ipcidr_union_set (set (the (?ipassmt i2))) =
             {})",
     template_equation
      (template_app
        (template_hole 14, template_app (template_hole 13, template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 0)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.IpassmtTemplates"
### 1.026s elapsed time, 1.301s cpu time, 0.119s GC time
val it = (): unit
