Loading theory "Draft.Datatype_Selectors" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.Remdups_Rev" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Loading theory "Draft.List_Misc" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Loading theory "Draft.Negation_Type" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses" via "Draft.WordInterval_Lists")
### theory "Draft.List_Misc"
### 0.034s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
Found termination order: "{}"
### theory "Draft.Datatype_Selectors"
### 0.105s elapsed time, 0.427s cpu time, 0.042s GC time
Loading theory "Draft.Ternary" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Repeat_Stabilize"
### 0.121s elapsed time, 0.461s cpu time, 0.042s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.Remdups_Rev"
### 0.164s elapsed time, 0.656s cpu time, 0.042s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.112s elapsed time, 0.452s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.815s cpu time, 0.160s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.271s cpu time, 0.160s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.833s elapsed time, 3.267s cpu time, 0.374s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.995s elapsed time, 3.762s cpu time, 0.803s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
### theory "HOL-Library.BigO"
### 0.882s elapsed time, 3.325s cpu time, 0.710s GC time
Loading theory "Draft.Conntrack_State" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.Tagged_Packet")
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ternary"
### 1.765s elapsed time, 6.769s cpu time, 1.110s GC time
Loading theory "Draft.L4_Protocol_Flags" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  ctstate :: enum
  enum_ctstate == enum_class.enum :: ctstate list
  enum_all_ctstate == enum_class.enum_all :: (ctstate => bool) => bool
  enum_ex_ctstate == enum_class.enum_ex :: (ctstate => bool) => bool
### theory "HOL-Library.Tree"
### 2.212s elapsed time, 8.374s cpu time, 1.881s GC time
Loading theory "Draft.Templates" (required by "Draft.Parser6Templates" via "Draft.ExtrEqs")
Found termination order: "{}"
### theory "Draft.L4_Protocol_Flags"
### 0.901s elapsed time, 3.365s cpu time, 1.012s GC time
Loading theory "Draft.Word_Upto" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Protocols_Normalize")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.320s cpu time, 0.080s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Parser6Templates")
Found termination order: "{}"
### theory "Draft.Conntrack_State"
### 1.223s elapsed time, 4.629s cpu time, 1.158s GC time
Loading theory "Draft.Tagged_Packet" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
### theory "Draft.Word_Upto"
### 0.442s elapsed time, 1.732s cpu time, 0.161s GC time
Loading theory "Draft.WordInterval_Lists" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.910s elapsed time, 3.426s cpu time, 1.180s GC time
### theory "Draft.Tagged_Packet"
### 0.784s elapsed time, 2.941s cpu time, 1.103s GC time
Found termination order: "size_list size <*mlex*> {}"
"False"
  :: "bool"
"Some {CT_New}"
  :: "ctstate set option"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.WordInterval_Lists"
### 0.700s elapsed time, 2.608s cpu time, 1.088s GC time
Loading theory "Draft.Ports" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.IpAddresses" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'', p_tag_ctstate = CT_New |)"
  :: "32 tagged_packet"
### theory "Draft.Ports"
### 0.927s elapsed time, 3.292s cpu time, 0.418s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses"
### 1.285s elapsed time, 4.046s cpu time, 0.524s GC time
Loading theory "Draft.Common_Primitive_Syntax" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
### theory "Draft.Common_Primitive_Syntax"
### 3.788s elapsed time, 10.049s cpu time, 3.422s GC time
"(| p_iiface = ''eth0'', p_oiface = ''eth1'', p_src = 3232236077,
    p_dst = 2915201135, p_proto = 6, p_sport = 2065, p_dport = 80,
    p_tcp_flags = {TCP_ACK}, p_payload = ''GET / HTTP/1.0'',
    p_tag_ctstate = CT_Established |)"
  :: "32 tagged_packet"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 9.681s elapsed time, 26.491s cpu time, 6.663s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Loading theory "Draft.Semantics" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Call_Return_Unfolding" via "Draft.Matching")
Loading theory "Draft.Semantics_Goto" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "iptables_bigstep"
  Proving monotonicity ...
Found termination order: "{}"
locale iptables_bigstep_fixedbackground
  fixes \<Gamma> :: "char list => 'a rule list option"
    and \<gamma> :: "'a => 'p => bool"
Proofs for inductive predicate(s) "iptables_bigstep'"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
[| wf (calls_chain \<Gamma>);
   !!x. (!!y. (y, x) : calls_chain \<Gamma> ==>
              EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                         (Call y)], Undecided\<rangle> \<Rightarrow> t) ==>
        EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
                   (Call x)], Undecided\<rangle> \<Rightarrow> t |]
==> EX t. \<Gamma>,\<gamma>,p\<turnstile> \<langle>[Rule m
               (Call ?a)], Undecided\<rangle> \<Rightarrow> t
### theory "Draft.Semantics"
### 0.826s elapsed time, 2.577s cpu time, 0.352s GC time
Loading theory "Draft.Matching" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Call_Return_Unfolding")
Proofs for inductive predicate(s) "iptables_goto_bigstep"
  Proving monotonicity ...
### theory "Draft.Matching"
### 0.172s elapsed time, 0.569s cpu time, 0.180s GC time
Loading theory "Draft.Ruleset_Update" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Call_Return_Unfolding")
### theory "Draft.Ruleset_Update"
### 0.104s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "Draft.Call_Return_Unfolding" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 2.132s elapsed time, 6.958s cpu time, 2.942s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Loading theory "Draft.Unknown_Match_Tacs" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Proofs for inductive predicate(s) "approximating_bigstep"
Found termination order: "{}"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Unknown_Match_Tacs"
### 0.398s elapsed time, 1.571s cpu time, 0.093s GC time
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Call_Return_Unfolding"
### 1.723s elapsed time, 6.108s cpu time, 2.644s GC time
### theory "Draft.Semantics_Ternary"
### 0.845s elapsed time, 3.097s cpu time, 0.382s GC time
Loading theory "Draft.Fixed_Action" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching" via "Draft.Normalized_Matches")
Loading theory "Draft.Optimizing" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Loading theory "Draft.Common_Primitive_Matcher_Generic" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString" via "Draft.Common_Primitive_Matcher")
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Fixed_Action"
### 0.379s elapsed time, 1.495s cpu time, 0.152s GC time
Loading theory "Draft.Normalized_Matches" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization" via "Draft.Negation_Type_Matching")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Optimizing"
### 0.551s elapsed time, 2.187s cpu time, 0.152s GC time
0 < length (filter (%x. x = m) m2) ==>
approximating_bigstep_fun ?\<gamma> ?p (?r # ?rs) Undecided =
approximating_bigstep_fun ?\<gamma> ?p
 (replicate (length (filter (%x. x = m) m2)) ?r @ ?rs) Undecided
matches ?\<gamma> ?m ?a ?p = match_list ?\<gamma> (normalize_match ?m) ?a ?p
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normalized_Matches"
### 0.580s elapsed time, 1.978s cpu time, 0.200s GC time
Loading theory "Draft.Negation_Type_Matching" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas" via "Draft.Primitive_Normalization")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale primitive_matcher_generic
  fixes
    \<beta> ::
      "'i common_primitive => ('i, 'a) tagged_packet_scheme => ternaryvalue"
  assumes "primitive_matcher_generic \<beta>"
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Semantics_Goto"
### 4.299s elapsed time, 14.667s cpu time, 3.861s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Negation_Type_Matching"
### 0.892s elapsed time, 2.323s cpu time, 0.356s GC time
Loading theory "Draft.Primitive_Normalization" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
compress_extra (Match ?x) = Match ?x
compress_extra (MatchNot (Match (Extra ?e))) =
Match (Extra (''NOT ('' @ ?e @ '')''))
compress_extra (MatchNot (Match (Src ?va))) =
MatchNot (compress_extra (Match (Src ?va)))
compress_extra (MatchNot (Match (Dst ?va))) =
MatchNot (compress_extra (Match (Dst ?va)))
compress_extra (MatchNot (Match (IIface ?va))) =
MatchNot (compress_extra (Match (IIface ?va)))
compress_extra (MatchNot (Match (OIface ?va))) =
MatchNot (compress_extra (Match (OIface ?va)))
compress_extra (MatchNot (Match (Prot ?va))) =
MatchNot (compress_extra (Match (Prot ?va)))
compress_extra (MatchNot (Match (Src_Ports ?va))) =
MatchNot (compress_extra (Match (Src_Ports ?va)))
compress_extra (MatchNot (Match (Dst_Ports ?va))) =
MatchNot (compress_extra (Match (Dst_Ports ?va)))
compress_extra (MatchNot (Match (MultiportPorts ?va))) =
MatchNot (compress_extra (Match (MultiportPorts ?va)))
compress_extra (MatchNot (Match (L4_Flags ?va))) =
MatchNot (compress_extra (Match (L4_Flags ?va)))
compress_extra (MatchNot (Match (CT_State ?va))) =
MatchNot (compress_extra (Match (CT_State ?va)))
compress_extra (MatchNot (MatchNot ?v)) =
MatchNot (compress_extra (MatchNot ?v))
compress_extra (MatchNot (MatchAnd ?v ?va)) =
MatchNot (compress_extra (MatchAnd ?v ?va))
compress_extra (MatchNot MatchAny) = MatchNot (compress_extra MatchAny)
compress_extra (MatchAnd (Match (Extra ?e1.0)) ?m2.0) =
(case compress_extra ?m2.0 of
 Match (Src ipt_iprange) =>
   MatchAnd (Match (Extra ?e1.0)) (Match (Src ipt_iprange))
 | Match (Dst ipt_iprange) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst ipt_iprange))
 | Match (IIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (IIface iface))
 | Match (OIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (OIface iface))
 | Match (Prot protocol) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Prot protocol))
 | Match (Src_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Src_Ports ipt_l4_ports))
 | Match (Dst_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst_Ports ipt_l4_ports))
 | Match (MultiportPorts ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (MultiportPorts ipt_l4_ports))
 | Match (L4_Flags ipt_tcp_flags) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (L4_Flags ipt_tcp_flags))
 | Match (CT_State set) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (CT_State set))
 | Match (Extra e2) => Match (Extra (?e1.0 @ '' '' @ e2))
 | MatchNot match_expr =>
     MatchAnd (Match (Extra ?e1.0)) (MatchNot match_expr)
 | MatchAnd match_expr1 match_expr2 =>
     MatchAnd (Match (Extra ?e1.0)) (MatchAnd match_expr1 match_expr2)
 | MatchAny => Match (Extra ?e1.0))
compress_extra (MatchAnd (Match (Src ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (IIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (IIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (OIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (OIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Prot ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Prot ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Src_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (MultiportPorts ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (MultiportPorts ?va)))
 (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (L4_Flags ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (L4_Flags ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (CT_State ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (CT_State ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchNot ?v) ?m2.0) =
MatchAnd (compress_extra (MatchNot ?v)) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchAnd ?v ?va) ?m2.0) =
MatchAnd (compress_extra (MatchAnd ?v ?va)) (compress_extra ?m2.0)
compress_extra (MatchAnd MatchAny ?m2.0) =
MatchAnd (compress_extra MatchAny) (compress_extra ?m2.0)
compress_extra MatchAny = MatchAny
### theory "Draft.Common_Primitive_Matcher_Generic"
### 2.292s elapsed time, 6.862s cpu time, 0.813s GC time
Loading theory "Draft.Common_Primitive_Matcher" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Common_Primitive_toString")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
"Match (Extra ''foo NOT (bar)'')"
  :: "'a common_primitive match_expr"
"Match (Extra ''-m addrtype --dst-type BROADCAST'')"
  :: "'a common_primitive match_expr"
"Match (Extra ''foo bar'')"
  :: "'a common_primitive match_expr"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
match_list \<gamma> (map (Match o C) (f ml)) a p =
match_list \<gamma> [alist_and (NegPos_map C ml)] a p ==>
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) (map (Match o C) (f ml))) ?s =
approximating_bigstep_fun \<gamma> p
 (map (%m. Rule m a) [alist_and (NegPos_map C ml)]) ?s
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Primitive_Normalization"
### 1.700s elapsed time, 4.413s cpu time, 0.395s GC time
Loading theory "Draft.MatchExpr_Fold" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Common_Primitive_Lemmas")
Loading theory "Draft.Ipassmt" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Interface_Replace" via "Draft.No_Spoof")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.MatchExpr_Fold"
### 0.104s elapsed time, 0.318s cpu time, 0.000s GC time
Found termination order: "size_list size <*mlex*> {}"
"True"
  :: "bool"
### theory "Draft.Ipassmt"
### 1.512s elapsed time, 3.897s cpu time, 0.233s GC time
Loading theory "Draft.Routing_IpAssmt" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Interface_Replace" via "Draft.Output_Interface_Replace")
### theory "Draft.Routing_IpAssmt"
### 0.303s elapsed time, 0.607s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Common_Primitive_Matcher"
### 17.579s elapsed time, 27.084s cpu time, 3.017s GC time
Loading theory "Draft.Common_Primitive_Lemmas" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Loading theory "Draft.Conntrack_State_Transform" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.SimpleFw_Compliance" via "Draft.Primitive_Abstract")
Loading theory "Draft.Common_Primitive_toString" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface")
### theory "Draft.Common_Primitive_Lemmas"
### 0.298s elapsed time, 0.956s cpu time, 0.078s GC time
Loading theory "Draft.Interfaces_Normalize" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Loading theory "Draft.IpAddresses_Normalize" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Interfaces_Normalize"
### 0.135s elapsed time, 0.508s cpu time, 0.062s GC time
Loading theory "Draft.Ports_Normalize" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Conntrack_State_Transform"
### 0.729s elapsed time, 2.583s cpu time, 0.242s GC time
Loading theory "Draft.Protocols_Normalize" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Protocols_Normalize"
### 0.644s elapsed time, 2.414s cpu time, 0.238s GC time
Loading theory "Draft.No_Spoof" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Interface_Replace")
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses_Normalize"
### 1.589s elapsed time, 5.963s cpu time, 0.616s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Common_Primitive_toString"
### 2.948s elapsed time, 11.342s cpu time, 1.199s GC time
Found termination order: "{}"
### theory "Draft.Ports_Normalize"
### 3.911s elapsed time, 14.869s cpu time, 5.229s GC time
Loading theory "Draft.Output_Interface_Replace" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform" via "Draft.Interface_Replace")
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
"Some (MatchAnd MatchAny MatchAny)"
  :: "32 common_primitive match_expr option"
### theory "Draft.No_Spoof"
### 3.832s elapsed time, 14.707s cpu time, 5.076s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Output_Interface_Replace"
### 1.021s elapsed time, 3.992s cpu time, 0.244s GC time
Loading theory "Draft.Interface_Replace" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.Transform")
"Some
  (MatchAnd (Match (IIface (Iface ''eth1'')))
    (MatchAnd (MatchAnd (MatchAnd MatchAny MatchAny) MatchAny)
      (Match (Prot (Proto 6)))))"
  :: "32 common_primitive match_expr option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"Some (MatchAnd MatchAny MatchAny)"
  :: "32 common_primitive match_expr option"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"Some
  (MatchAnd MatchAny
    (MatchAnd (MatchAnd (MatchAnd MatchAny MatchAny) MatchAny) MatchAny))"
  :: "32 common_primitive match_expr option"
### theory "Draft.Interface_Replace"
### 1.626s elapsed time, 6.382s cpu time, 0.384s GC time
Loading theory "Draft.Transform" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface")
"[MatchAnd (Match (Src (IpAddrNetmask 0 0)))
   (MatchAnd (MatchNot (Match (Src_Ports (L4Ports 6 [(1, 2)]))))
     (Match (Src_Ports (L4Ports 6 [(1, 2)]))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 1073741824 2)))
   (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))),
  MatchAnd (Match (Src (IpAddrNetmask 2147483648 1)))
   (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)]))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 0 8)))
   (MatchAnd MatchAny
     (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))))]"
  :: "32 common_primitive match_expr list"
"[MatchAnd (Match (Src (IpAddrNetmask 0 8)))
   (MatchAnd MatchAny
     (MatchAnd MatchAny (Match (Src_Ports (L4Ports 6 [(1, 2)])))))]"
  :: "32 common_primitive match_expr list"
"MatchExpr (L4Ports 6 [(22, 23)])"
  :: "ipt_l4_ports match_compress"
[| normalized_nnf_match ?m; wf_disc_sel (?disc, ?sel) ?C;
   ALL a. ~ ?disc (Prot a); ?P (?disc2.0, ?sel2.0) ?m;
   !!a. [| normalized_nnf_match a;
           a : set (normalize_match
                     (rewrite_negated_primitives (?disc, ?sel) ?C
                       l4_ports_negate_one ?m)) |]
        ==> ?P (?disc2.0, ?sel2.0) a;
   !!a dpts rst.
      [| normalized_nnf_match a;
         primitive_extractor (?disc, ?sel) a = (dpts, rst);
         getNeg dpts = []; ?P (?disc2.0, ?sel2.0) a |]
      ==> ?P (?disc2.0, ?sel2.0) rst;
   !!a spt rst.
      ?P (?disc2.0, ?sel2.0) rst ==>
      ?P (?disc2.0, ?sel2.0) (MatchAnd (Match (?C spt)) rst);
   ?m'
   : set (normalize_ports_generic
           (normalize_positive_ports_step (?disc, ?sel) ?C)
           (rewrite_negated_primitives (?disc, ?sel) ?C l4_ports_negate_one)
           ?m) |]
==> ?P (?disc2.0, ?sel2.0) ?m'
[| ~ has_disc ?disc ?m; ?m' : set (normalize_match ?m) |]
==> ~ has_disc ?disc ?m'
[| normalized_nnf_match ?m; wf_disc_sel (disc2, ?sel) ?C;
   ~ has_disc ?disc2.0 ?m;
   has_disc_negated disc2 False ?m ==>
   ALL pts. ~ has_disc ?disc2.0 (?negate_f ?C pts);
   ALL a. ~ ?disc2.0 (?C a) |]
==> ~ has_disc ?disc2.0
       (rewrite_negated_primitives (disc2, ?sel) ?C ?negate_f ?m)
### theory "Draft.Transform"
### 2.803s elapsed time, 10.956s cpu time, 0.701s GC time
Loading theory "Draft.Primitive_Abstract" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface" via "Draft.SimpleFw_Compliance")
"MatchAnd
  (MatchNot
    (MatchAnd (MatchNot (MatchNot (Match (Prot (Proto 17)))))
      (MatchNot (Match (Src_Ports (L4Ports 17 [(0, 79), (81, 65535)]))))))
  (MatchAnd MatchAny
    (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
      (MatchAnd (Match (Prot (Proto 6))) MatchAny)))"
  :: "32 common_primitive match_expr"
ipassmt_sanity_disjoint ?ipassmt ==
ALL i1:dom ?ipassmt.
   ALL i2:dom ?ipassmt.
      i1 ~= i2 -->
      ipcidr_union_set (set (the (?ipassmt i1))) Int
      ipcidr_union_set (set (the (?ipassmt i2))) =
      {}
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> (common_matcher,
     ?\<alpha>),?p\<turnstile> \<langle>transform_remove_unknowns_generic
   (common_matcher, ?\<alpha>)
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     ?\<alpha>),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> simple_ruleset
     (transform_remove_unknowns_generic (common_matcher, ?\<alpha>) ?rs)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. ~ has_disc ?disc (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_disc ?disc (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha> |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_unknowns common_matcher (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. normalized_n_primitive ?disc_sel ?f (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       normalized_n_primitive ?disc_sel ?f (get_match r)
[| simple_ruleset ?rs; wf_unknown_match_tac ?\<alpha>;
   packet_independent_\<alpha> ?\<alpha>;
   ALL r:set ?rs. ~ has_disc_negated ?disc ?neg (get_match r) |]
==> ALL r:set (transform_remove_unknowns_generic (common_matcher, ?\<alpha>)
                ?rs).
       ~ has_disc_negated ?disc ?neg (get_match r)
[| normalized_nnf_match ?m;
   normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;
   wf_disc_sel (?disc1.0, ?sel1.0) ?C; ALL a. ~ ?disc2.0 (?C a) |]
==> ALL mn:set (normalize_primitive_extract (?disc1.0, ?sel1.0) ?C ?f ?m).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?P mn
[| ALL r:set ?rs.
      normalized_nnf_match (get_match r) &
      normalized_n_primitive (disc2, sel2) P (get_match r);
   ALL m.
      normalized_nnf_match m & normalized_n_primitive (disc2, sel2) P m -->
      (ALL m':set (normalize_primitive_extract (disc1, sel1) C f m).
          normalized_nnf_match m' &
          normalized_n_primitive (disc2, sel2) P m') |]
==> ALL r:set (normalize_rules
                (normalize_primitive_extract (disc1, sel1) C f) ?rs).
       normalized_nnf_match (get_match r) &
       normalized_n_primitive (disc2, sel2) P (get_match r)
(!!r m. [| r : set ?rs; ?f (get_match r) = Some m |] ==> ?P m) ==>
ALL r:set (optimize_matches_option ?f ?rs). ?P (get_match r)
(!!r m.
    [| r : set ?rs; ?f (get_match r) = Some m |]
    ==> normalized_nnf_match m & ~ has_disc_negated disc3 False m & P m) ==>
ALL r:set (optimize_matches_option ?f ?rs).
   normalized_nnf_match (get_match r) &
   ~ has_disc_negated disc3 False (get_match r) & P (get_match r)
[| ALL r:set ?rs.
      normalized_nnf_match (get_match r) &
      ~ has_disc_negated disc3 False (get_match r);
   ALL m.
      normalized_nnf_match m & ~ has_disc_negated disc3 False m -->
      (ALL m':set (?f m). ?Q m') |]
==> ALL r:set (normalize_rules ?f ?rs). ?Q (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>transform_optimize_dnf_strict
    ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> (common_matcher,
     in_doubt_allow),?p\<turnstile> \<langle>transform_normalize_primitives
        ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> simple_ruleset (transform_normalize_primitives ?rs)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc1.0 (Src_Ports a)) &
   (ALL a. ~ ?disc1.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc1.0 (Src a)) & (ALL a. ~ ?disc1.0 (Dst a));
   ((ALL a. ~ ?disc1.0 (IIface a)) | ?disc1.0 = is_Iiface) &
   ((ALL a. ~ ?disc1.0 (OIface a)) | ?disc1.0 = is_Oiface);
   ALL a. ~ ?disc1.0 (Prot a);
   ALL r:set ?rs. ~ has_disc ?disc1.0 (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc ?disc1.0 (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_nnf_match (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_src_ports (get_match r) &
       normalized_dst_ports (get_match r) &
       normalized_src_ips (get_match r) &
       normalized_dst_ips (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc2.0 (Src_Ports a)) &
   (ALL a. ~ ?disc2.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc2.0 (Src a)) & (ALL a. ~ ?disc2.0 (Dst a));
   ALL a. ~ ?disc2.0 (IIface a); ALL a. ~ ?disc2.0 (OIface a);
   ALL a. ~ ?disc2.0 (Prot a);
   ALL r:set ?rs.
      normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc3.0 (Src_Ports a)) &
   (ALL a. ~ ?disc3.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc3.0 (Src a)) & (ALL a. ~ ?disc3.0 (Dst a));
   ((ALL a. ~ ?disc3.0 (IIface a)) | ?disc3.0 = is_Iiface) &
   ((ALL a. ~ ?disc3.0 (OIface a)) | ?disc3.0 = is_Oiface);
   (ALL a. ~ ?disc3.0 (Prot a)) |
   ?disc3.0 = is_Prot &
   (ALL r:set ?rs.
       ~ has_disc_negated is_Src_Ports False (get_match r) &
       ~ has_disc_negated is_Dst_Ports False (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r));
   ALL r:set ?rs. ~ has_disc_negated ?disc3.0 False (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc_negated ?disc3.0 False (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>transform_optimize_dnf_strict
    ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_allow),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>transform_optimize_dnf_strict
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> (common_matcher,
     in_doubt_deny),?p\<turnstile> \<langle>transform_normalize_primitives
       ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
    (common_matcher,
     in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> simple_ruleset (transform_normalize_primitives ?rs)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc1.0 (Src_Ports a)) &
   (ALL a. ~ ?disc1.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc1.0 (Src a)) & (ALL a. ~ ?disc1.0 (Dst a));
   ((ALL a. ~ ?disc1.0 (IIface a)) | ?disc1.0 = is_Iiface) &
   ((ALL a. ~ ?disc1.0 (OIface a)) | ?disc1.0 = is_Oiface);
   ALL a. ~ ?disc1.0 (Prot a);
   ALL r:set ?rs. ~ has_disc ?disc1.0 (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc ?disc1.0 (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_nnf_match (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_src_ports (get_match r) &
       normalized_dst_ports (get_match r) &
       normalized_src_ips (get_match r) &
       normalized_dst_ips (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc2.0 (Src_Ports a)) &
   (ALL a. ~ ?disc2.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc2.0 (Src a)) & (ALL a. ~ ?disc2.0 (Dst a));
   ALL a. ~ ?disc2.0 (IIface a); ALL a. ~ ?disc2.0 (OIface a);
   ALL a. ~ ?disc2.0 (Prot a);
   ALL r:set ?rs.
      normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       normalized_n_primitive (?disc2.0, ?sel2.0) ?f (get_match r)
[| simple_ruleset ?rs; ALL r:set ?rs. normalized_nnf_match (get_match r);
   (ALL a. ~ ?disc3.0 (Src_Ports a)) &
   (ALL a. ~ ?disc3.0 (Dst_Ports a)) &
   (ALL a. ~ ?disc3.0 (Src a)) & (ALL a. ~ ?disc3.0 (Dst a));
   ((ALL a. ~ ?disc3.0 (IIface a)) | ?disc3.0 = is_Iiface) &
   ((ALL a. ~ ?disc3.0 (OIface a)) | ?disc3.0 = is_Oiface);
   (ALL a. ~ ?disc3.0 (Prot a)) |
   ?disc3.0 = is_Prot &
   (ALL r:set ?rs.
       ~ has_disc_negated is_Src_Ports False (get_match r) &
       ~ has_disc_negated is_Dst_Ports False (get_match r) &
       ~ has_disc is_MultiportPorts (get_match r));
   ALL r:set ?rs. ~ has_disc_negated ?disc3.0 False (get_match r) |]
==> ALL r:set (transform_normalize_primitives ?rs).
       ~ has_disc_negated ?disc3.0 False (get_match r)
simple_ruleset ?rs ==>
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>transform_optimize_dnf_strict
   ?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t =
(common_matcher,
 in_doubt_deny),?p\<turnstile> \<langle>?rs, ?s\<rangle> \<Rightarrow>\<^sub>\<alpha> ?t
"MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
  (MatchAnd (Match (Prot (Proto 6))) (MatchNot (Match (Extra ''foobar''))))"
  :: "32 common_primitive match_expr"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Primitive_Abstract"
### 0.752s elapsed time, 1.720s cpu time, 0.110s GC time
Loading theory "Draft.SimpleFw_Compliance" (required by "Draft.Parser6Templates" via "Draft.Parser6" via "Draft.Code_Interface")
"[MatchAnd (MatchNot (Match (Prot (Proto 17))))
   (MatchAnd MatchAny
     (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
       (MatchAnd (Match (Prot (Proto 6))) MatchAny))),
  MatchAnd (Match (Src_Ports (L4Ports 17 [(0, 79)])))
   (MatchAnd MatchAny
     (MatchAnd MatchAny
       (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
         (MatchAnd (Match (Prot (Proto 6))) MatchAny)))),
  MatchAnd (Match (Src_Ports (L4Ports 17 [(81, 65535)])))
   (MatchAnd MatchAny
     (MatchAnd MatchAny
       (MatchAnd (Match (Dst (IpAddrNetmask 2130706432 8)))
         (MatchAnd (Match (Prot (Proto 6))) MatchAny))))]"
  :: "32 common_primitive match_expr list"
Found termination order: "{}"
### Missing patterns in function definition:
### !!va. common_primitive_match_to_simple_match (Match (MultiportPorts va)) =
###       undefined
### !!v. common_primitive_match_to_simple_match
###       (MatchNot (Match (MultiportPorts v))) =
###      undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SimpleFw_Compliance"
### 2.046s elapsed time, 2.979s cpu time, 0.287s GC time
Loading theory "Draft.Code_Interface" (required by "Draft.Parser6Templates" via "Draft.Parser6")
"False"
  :: "bool"
Found termination order: "size_list size <*mlex*> length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Code_Interface"
### 2.838s elapsed time, 3.457s cpu time, 0.297s GC time
Loading theory "Draft.Parser6" (required by "Draft.Parser6Templates")
val takeWhile = fn: ('a -> bool) -> 'a list -> 'a list
val dropWhile = fn: ('a -> bool) -> 'a list -> 'a list
val dropWhileInclusive = fn: ('a -> bool) -> 'a list -> 'a list
val split_at = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val it = (["f", "o", "o"], ["b", "a", "r"]): string list * string list
val load_table = fn: string -> theory -> string list -> string list
val load_filter_table = fn: theory -> string list -> string list
val ipt_explode = fn: string -> string list
val it = ["a", "d", " ", "\"as das\"", " ", "b", "o", "o"]: string list
val it = ["a", "d", " ", "\"foobar --boo boo\""]: string list
val it = ["e", "n", "t", " ", "\"\\\"", "\"", " ", "t", "h", "i", "s"]:
   string list
val it = []: string list
datatype parsed_action_type = TypeCall | TypeGoto
datatype parsed_match_action
=
     ParsedAction of parsed_action_type * string
   | ParsedMatch of term
   | ParsedNegatedMatch of term
constructor TypeCall: parsed_action_type
constructor TypeGoto: parsed_action_type
constructor ParsedAction: parsed_action_type * string -> parsed_match_action
constructor ParsedMatch: term -> parsed_match_action
constructor ParsedNegatedMatch: term -> parsed_match_action
val parse_table_append = fn: string list -> string * string list
val option_parser = fn:
   string list -> parsed_match_action list * string list
val chain_decl_parser = fn: string list -> string * string option
val Scan_cons_repeat = fn: ('a -> 'b list * 'a) -> 'a -> 'b list * 'a
val it = ([], []): parsed_match_action list * string list
val it =
   ([ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.IIface",
                "iface => 128 common_primitive") $
           (Const ("Iface.iface.Iface", "char list => iface") $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char",
                       "bool
                        => bool
                           => bool
                              => bool => bool => bool ... ... ... ...") $
                 Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.True", "...") $ Const ("HOL.False", "...")) $
               (Const ("List.list.Cons", "char => char list => char list") $
                 (Const ("String.char.Char",
                         "bool => bool => bool ... ... ... ...") $
                   Const ("HOL.True", "bool") $
                   Const ("HOL.False", "bool") $
                   Const ("HOL.True", "bool") $ Const ("HOL.False", "...") $
                   Const ("HOL.True", "...") $ Const ("...", ...) $
                   Const ("...", "bool") $ ...) $
                 (Const ("List.list.Cons",
                         "char => char list ... char list") $
                   (Const ("String.char.Char", "... ... ...") $
                     Const ("HOL.False", "...") $
                     Const ("HOL.False", "...") $ Const ("...", ...) $
                     Const ("...", "bool") $ ... $ ... $ ... $ ...) $
                   Const ("List.list.Nil", "char list")))))
         ),
     ParsedAction (TypeCall, "net-fw")],
    []):
   parsed_match_action list * string list
val it =
   ([ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.IIface",
                "iface => 128 common_primitive") $
           (Const ("Iface.iface.Iface", "char list => iface") $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char",
                       "bool
                        => bool
                           => bool
                              => bool => bool => bool ... ... ... ...") $
                 Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.True", "...") $ Const ("HOL.False", "...")) $
               (Const ("List.list.Cons", "char => char list => char list") $
                 (Const ("String.char.Char",
                         "bool => bool => bool ... ... ... ...") $
                   Const ("HOL.True", "bool") $
                   Const ("HOL.False", "bool") $
                   Const ("HOL.True", "bool") $ Const ("HOL.False", "...") $
                   Const ("HOL.True", "...") $ Const ("...", ...) $
                   Const ("...", "bool") $ ...) $
                 (Const ("List.list.Cons",
                         "char => char list ... char list") $
                   (Const ("String.char.Char", "... ... ...") $
                     Const ("HOL.False", "...") $
                     Const ("HOL.False", "...") $ Const ("...", ...) $
                     Const ("...", "bool") $ ... $ ... $ ... $ ...) $
                   Const ("List.list.Nil", "char list")))))
         ),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Extra",
                "char list => 128 common_primitive") $
           (Const ("List.list.Cons", "char => char list => char list") $
             (Const ("String.char.Char",
                     "bool
                      => bool
                         => bool
                            => bool
                               => bool => bool => bool ... ... ... ...") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.True", "bool") $ Const ("HOL.False", "...")) $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char",
                       "bool => bool => bool => bool ... ... ... ...") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.False", "...") $ Const ("HOL.True", "...") $
                 Const ("...", ...) $ Const ("...", "bool")) $
               (Const ("List.list.Cons", "char => char list => char list") $
                 (Const ("String.char.Char", "bool ... ... ... ...") $
                   Const ("HOL.True", "bool") $ Const ("HOL.True", "...") $
                   Const ("HOL.True", "...") $ Const ("...", ...) $
                   Const ("...", "bool") $ ... $ ... $ ...) $
                 Const ("List.list.Nil", "char list"))))
         )],
    []):
   parsed_match_action list * string list
val it =
   ([ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Dst_Ports",
                "ipt_l4_ports => 128 common_primitive") $
           (Const ("Ports.ipt_l4_ports.L4Ports",
                   "8 word => (16 word * 16 word) list => ipt_l4_ports") $
             Const ("Groups.zero_class.zero", "8 word") $
             (Const ("List.list.Cons",
                     "16 word * 16 word
                      => (16 word * 16 word) list
                         => (16 word * 16 word) list") $
               (Const ("Product_Type.Pair",
                       "16 word => 16 word => 16 word * 16 word") $
                 (Const ("Code_Interface.nat_to_16word", "nat => 16 word") $
                   (Const ("Num.numeral_class.numeral", "num ... nat") $
                     (Const ("Num.num.Bit0", "...") $
                       (Const ("...", ...) $ (... $ ...))))) $
                 (Const ("Code_Interface.nat_to_16word", "nat => 16 word") $
                   (Const ("Num.numeral_class.numeral", "... ... ...") $
                     (Const ("Num.num.Bit0", "...") $
                       (Const ("...", "num => num") $ ...))))) $
               Const ("List.list.Nil", "(16 word * 16 word) list")))
         ),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Src_Ports",
                "ipt_l4_ports => 128 common_primitive") $
           (Const ("Ports.ipt_l4_ports.L4Ports",
                   "8 word => (16 word * 16 word) list => ipt_l4_ports") $
             Const ("Groups.zero_class.zero", "8 word") $
             (Const ("List.list.Cons",
                     "16 word * 16 word
                      => (16 word * 16 word) list
                         => (16 word * 16 word) list") $
               (Const ("Product_Type.Pair",
                       "16 word => 16 word => 16 word * 16 word") $
                 (Const ("Code_Interface.nat_to_16word", "nat => 16 word") $
                   (Const ("Num.numeral_class.numeral", "... ... ...") $
                     (Const ("Num.num.Bit0", "...") $
                       (Const ("...", "num => num") $ ...)))) $
                 (Const ("Code_Interface.nat_to_16word",
                         "nat ... 16 word") $
                   (Const ("Num.numeral_class.numeral", "...") $
                     (Const ("...", ...) $ (... $ ...))))) $
               Const ("List.list.Nil", "(16 word * 16 word) list")))
         )],
    []):
   parsed_match_action list * string list
val it =
   ([ParsedAction (TypeCall, "LOG"),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Extra",
                "char list => 128 common_primitive") $
           (Const ("List.list.Cons", "char => char list => char list") $
             (Const ("String.char.Char",
                     "bool
                      => bool
                         => bool
                            => bool
                               => bool => bool => bool ... ... ... ...") $
               Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
               Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.False", "...")) $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char",
                       "bool => bool => bool => bool ... ... ... ...") $
                 Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.False", "...") $ Const ("HOL.True", "...") $
                 Const ("...", ...) $ Const ("...", "bool")) $
               (Const ("List.list.Cons", "char => char list => char list") $
                 (Const ("String.char.Char", "bool ... ... ... ...") $
                   Const ("HOL.False", "bool") $
                   Const ("HOL.False", "...") $ Const ("HOL.True", "...") $
                   Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                   ...) $
                 (Const ("List.list.Cons", "... ... ...") $
                   (Const ("String.char.Char", "...") $ Const ("...", ...) $
                     Const ("...", "bool") $ ... $ ... $ ... $ ... $ ... $
                     ...) $
                   (Const ("...", ...) $
                     (... $ ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                     ...)))))
         ),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Extra",
                "char list => 128 common_primitive") $
           (Const ("List.list.Cons", "char => char list => char list") $
             (Const ("String.char.Char",
                     "bool
                      => bool
                         => bool => bool => bool => bool ... ... ... ...") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.False", "...") $ Const ("HOL.False", "...")) $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char",
                       "bool => bool => bool ... ... ... ...") $
                 Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                 Const ("HOL.False", "bool") $ Const ("HOL.False", "...") $
                 Const ("HOL.True", "...") $ Const ("...", ...) $
                 Const ("...", "bool") $ ...) $
               (Const ("List.list.Cons",
                       "char => char list ... char list") $
                 (Const ("String.char.Char", "... ... ...") $
                   Const ("HOL.False", "...") $ Const ("HOL.False", "...") $
                   Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                   ... $ ...) $
                 (Const ("List.list.Cons", "...") $
                   (Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                     ... $ ... $ ... $ ... $ ...) $
                   (Const ("...", "char => char list => char list") $ ... $
                     ...)))))
         ),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Extra",
                "char list => 128 common_primitive") $
           (Const ("List.list.Cons", "char => char list => char list") $
             (Const ("String.char.Char",
                     "bool
                      => bool => bool => bool => bool ... ... ... ...") $
               Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
               Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "...") $
               Const ("HOL.False", "...") $ Const ("...", ...)) $
             (Const ("List.list.Cons", "char => char list => char list") $
               (Const ("String.char.Char", "bool => bool ... ... ... ...") $
                 Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
                 Const ("HOL.True", "...") $ Const ("HOL.True", "...") $
                 Const ("...", ...) $ Const ("...", "bool") $ ... $ ...) $
               (Const ("List.list.Cons", "char ... ... ... ... ... ...") $
                 (Const ("String.char.Char", "...") $
                   Const ("HOL.False", "...") $ Const ("...", ...) $
                   Const ("...", "bool") $ ... $ ... $ ... $ ... $ ...) $
                 (Const ("List.list.Cons", "...") $
                   (Const ("...",
                           "bool
                            => bool
                               => bool
                                  => bool
                                     => bool
  => bool => bool => bool => char") $
                     ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                   (... $ ... $ ...)))))
         ),
     ParsedMatch
      (
         Const ("Common_Primitive_Syntax.common_primitive.Extra",
                "char list => 128 common_primitive") $
           (Const ("List.list.Cons", "char => char list => char list") $
             (Const ("String.char.Char",
                     "bool => bool => bool => bool ... ... ... ...") $
               Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
               Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
               Const ("HOL.True", "...") $ Const ("HOL.True", "...") $
               Const ("...", ...) $ Const ("...", "bool")) $
             Const ("List.list.Nil", "char list"))
         )],
    []):
   parsed_match_action list * string list
Extra ''-d''
Extra ''0.31.123.213/11.''
Extra ''--foo_bar''
Extra
 [CHR 0x22, CHR ''h'', CHR ''e'', CHR '' '', CHR ''h'', CHR ''e'', CHR 0x22]
Extra ''-f''
IIface (Iface ''eth0+'')
Extra ''-s''
Extra ''0.31.123.213/21''
Extra ''moreextra''
action: foobar
Extra ''--log''
### ML warning (line 360 of "$AFP/Iptables_Semantics/Primitive_Matchers/Parser6.thy"):
### Matches are not exhaustive.
### ML warning (line 361 of "$AFP/Iptables_Semantics/Primitive_Matchers/Parser6.thy"):
### Matches are not exhaustive.
val x =
   [ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool
                     => bool
                        => bool
                           => bool
                              => bool => bool => bool => bool => char") $
              Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool")) $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char",
                      "bool
                       => bool
                          => bool
                             => bool => bool => bool ... ... ... ...") $
                Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
                Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
                Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
                Const ("HOL.True", "...") $ Const ("HOL.False", "...")) $
              Const ("List.list.Nil", "char list")))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool
                     => bool
                        => bool
                           => bool
                              => bool => bool => bool => bool ... char") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool")) $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char",
                      "bool
                       => bool => bool => bool => bool ... ... ... ...") $
                Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
                Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                Const ("HOL.False", "bool") $ Const ("HOL.True", "...") $
                Const ("HOL.False", "...") $ Const ("...", ...)) $
              (Const ("List.list.Cons", "char => char list => char list") $
                (Const ("String.char.Char",
                        "bool => bool ... ... ... ...") $
                  Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                  Const ("HOL.False", "...") $ Const ("HOL.False", "...") $
                  Const ("...", ...) $ Const ("...", "bool") $ ... $ ...) $
                (Const ("List.list.Cons", "char ... ... ... ... ... ...") $
                  (Const ("String.char.Char", "...") $
                    Const ("HOL.True", "...") $ Const ("...", ...) $
                    Const ("...", "bool") $ ... $ ... $ ... $ ... $ ...) $
                  (Const ("List.list.Cons", "...") $
                    (Const ("...",
                            "bool
                             => bool
                                => bool
                                   => bool
=> bool => bool => bool => bool => char") $
                      ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                    (... $ ... $ ...))))))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool
                     => bool
                        => bool
                           => bool
                              => bool => bool => bool ... ... ... ...") $
              Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "...")) $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char",
                      "bool => bool => bool => bool ... ... ... ...") $
                Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
                Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
                Const ("HOL.False", "...") $ Const ("HOL.True", "...") $
                Const ("...", ...) $ Const ("...", "bool")) $
              (Const ("List.list.Cons", "char => char list => char list") $
                (Const ("String.char.Char", "bool ... ... ... ...") $
                  Const ("HOL.False", "bool") $ Const ("HOL.True", "...") $
                  Const ("HOL.True", "...") $ Const ("...", ...) $
                  Const ("...", "bool") $ ... $ ... $ ...) $
                (Const ("List.list.Cons", "... ... ...") $
                  (Const ("String.char.Char", "...") $ Const ("...", ...) $
                    Const ("...", "bool") $ ... $ ... $ ... $ ... $ ... $
                    ...) $
                  (Const ("...", ...) $
                    (... $ ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                    ...)))))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool
                     => bool
                        => bool => bool => bool => bool ... ... ... ...") $
              Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "...") $ Const ("HOL.False", "...")) $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char",
                      "bool => bool => bool ... ... ... ...") $
                Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
                Const ("HOL.False", "bool") $ Const ("HOL.True", "...") $
                Const ("HOL.False", "...") $ Const ("...", ...) $
                Const ("...", "bool") $ ...) $
              (Const ("List.list.Cons", "char => char list ... char list") $
                (Const ("String.char.Char", "... ... ...") $
                  Const ("HOL.True", "...") $ Const ("HOL.False", "...") $
                  Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                  ... $ ...) $
                (Const ("List.list.Cons", "...") $
                  (Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                    ... $ ... $ ... $ ... $ ...) $
                  (Const ("...", "char => char list => char list") $ ... $
                    ...)))))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool
                     => bool => bool => bool => bool ... ... ... ...") $
              Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.True", "bool") $ Const ("HOL.True", "bool") $
              Const ("HOL.False", "bool") $ Const ("HOL.True", "...") $
              Const ("HOL.False", "...") $ Const ("...", ...)) $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char", "bool => bool ... ... ... ...") $
                Const ("HOL.False", "bool") $ Const ("HOL.True", "bool") $
                Const ("HOL.True", "...") $ Const ("HOL.False", "...") $
                Const ("...", ...) $ Const ("...", "bool") $ ... $ ...) $
              Const ("List.list.Nil", "char list")))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.IIface",
               "iface => 128 common_primitive") $
          (Const ("Iface.iface.Iface", "char list => iface") $
            (Const ("List.list.Cons", "char => char list => char list") $
              (Const ("String.char.Char", "bool => bool ... ... ... ...") $
                Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
                Const ("HOL.True", "...") $ Const ("HOL.False", "...") $
                Const ("...", ...) $ Const ("...", "bool") $ ... $ ...) $
              (Const ("List.list.Cons", "char ... ... ... ... ... ...") $
                (Const ("String.char.Char", "...") $
                  Const ("HOL.False", "...") $ Const ("...", ...) $
                  Const ("...", "bool") $ ... $ ... $ ... $ ... $ ...) $
                (Const ("List.list.Cons", "...") $
                  (Const ("...",
                          "bool
                           => bool
                              => bool
                                 => bool
                                    => bool
 => bool => bool => bool => char") $
                    ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                  (... $ ... $ ...)))))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char",
                    "bool => bool => bool ... ... ... ...") $
              Const ("HOL.True", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.True", "bool") $ Const ("HOL.True", "...") $
              Const ("HOL.False", "...") $ Const ("...", ...) $
              Const ("...", "bool") $ ...) $
            (Const ("List.list.Cons", "char => char list ... char list") $
              (Const ("String.char.Char", "... ... ...") $
                Const ("HOL.True", "...") $ Const ("HOL.True", "...") $
                Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $
                ... $ ...) $
              Const ("List.list.Nil", "char list")))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char", "bool => bool ... ... ... ...") $
              Const ("HOL.False", "bool") $ Const ("HOL.False", "bool") $
              Const ("HOL.False", "...") $ Const ("HOL.False", "...") $
              Const ("...", ...) $ Const ("...", "bool") $ ... $ ...) $
            (Const ("List.list.Cons", "char ... ... ... ... ... ...") $
              (Const ("String.char.Char", "...") $
                Const ("HOL.False", "...") $ Const ("...", ...) $
                Const ("...", "bool") $ ... $ ... $ ... $ ... $ ...) $
              (Const ("List.list.Cons", "...") $
                (Const ("...",
                        "bool
                         => bool
                            => bool
                               => bool
                                  => bool
                                     => bool => bool => bool => char") $
                  ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                (... $ ... $ ...))))
        ),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char => char list => char list") $
            (Const ("String.char.Char", "bool ... ... ... ...") $
              Const ("HOL.True", "bool") $ Const ("HOL.False", "...") $
              Const ("HOL.True", "...") $ Const ("...", ...) $
              Const ("...", "bool") $ ... $ ... $ ...) $
            (Const ("List.list.Cons", "... ... ...") $
              (Const ("String.char.Char", "...") $ Const ("...", ...) $
                Const ("...", "bool") $ ... $ ... $ ... $ ... $ ... $ ...) $
              (Const ("...", ...) $
                (... $ ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
                ...)))
        ),
    ParsedAction (TypeCall, "foobar"),
    ParsedMatch
     (
        Const ("Common_Primitive_Syntax.common_primitive.Extra",
               "char list => 128 common_primitive") $
          (Const ("List.list.Cons", "char ... ... ... ... ... ...") $
            (Const ("String.char.Char", "...") $ Const ("HOL.True", "...") $
              Const ("...", ...) $ Const ("...", "bool") $ ... $ ... $ ... $
              ... $ ...) $
            (Const ("List.list.Cons", "...") $
              (Const ("...",
                      "bool
                       => bool
                          => bool
                             => bool
                                => bool => bool => bool => bool => char") $
                ... $ ... $ ... $ ... $ ... $ ... $ ... $ ...) $
              (... $ ... $ ...)))
        )]:
   parsed_match_action list
val rest = []: string list
val it =
   ["128 common_primitive", "128 common_primitive", "128 common_primitive",
    "128 common_primitive", "128 common_primitive", "128 common_primitive",
    "128 common_primitive", "128 common_primitive", "128 common_primitive",
    "_", "128 common_primitive"]:
   typ list
val it = [(), (), (), (), (), (), (), (), (), (), ()]: unit list
val rule_type_partition = fn:
   string list ->
     (string * string option) list *
     (string * (parsed_action_type * string) option * term) list
val get_chain_decls_policy = fn:
   (string * string option) list *
   (string * (parsed_action_type * string) option * term) list
     -> (string * string option) list
val get_parsed_rules = fn:
   (string * string option) list *
   (string * (parsed_action_type * string) option * term) list
     -> (string * (parsed_action_type * string) option * term) list
val filter_chain_decls_names_only = fn:
   (string * string option) list *
   (string * (parsed_action_type * string) option * term) list
     ->
     string list *
     (string * (parsed_action_type * string) option * term) list
structure FirewallTable: TABLE
type firewall_table = term list FirewallTable.table
val make_firewall_table = fn:
   string list * (string * (parsed_action_type * string) option * term) list
     -> firewall_table
val mk_Ruleset = fn: firewall_table -> term
val preparedefault_policies = fn:
   ('a * string option) list -> ('a * term) list
val trace_timing = fn: string -> ('a -> 'b) -> 'a -> 'b
val simplify_code = fn: Proof.context -> term -> term
val certify_term = fn: Proof.context -> term -> cterm
val parse_iptables_save_global = fn: theory -> string list -> term
val parse_iptables_save = fn:
   string -> binding -> string list -> Proof.context -> Proof.context
val it = (): unit
### theory "Draft.Parser6"
### 0.250s elapsed time, 0.313s cpu time, 0.034s GC time
Loading theory "Draft.Parser6Templates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Parser6Templates"
### 1.466s elapsed time, 1.788s cpu time, 0.183s GC time
val it = (): unit
