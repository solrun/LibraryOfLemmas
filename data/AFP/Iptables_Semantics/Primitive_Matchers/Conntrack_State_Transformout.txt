Loading theory "Draft.Datatype_Selectors" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Loading theory "Draft.List_Misc" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Loading theory "Draft.Negation_Type" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses" via "Draft.WordInterval_Lists")
Loading theory "Draft.Repeat_Stabilize" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary" via "Draft.Firewall_Common")
### theory "Draft.List_Misc"
### 0.042s elapsed time, 0.203s cpu time, 0.000s GC time
Loading theory "Draft.Ternary" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "{}"
### theory "Draft.Datatype_Selectors"
### 0.108s elapsed time, 0.449s cpu time, 0.036s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Repeat_Stabilize"
### 0.133s elapsed time, 0.546s cpu time, 0.036s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.105s elapsed time, 0.425s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.241s cpu time, 0.162s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 0.951s cpu time, 0.162s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.833s elapsed time, 3.266s cpu time, 0.403s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.149s elapsed time, 4.317s cpu time, 0.916s GC time
Loading theory "Draft.Firewall_Common" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary" via "Draft.Matching_Ternary")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.017s elapsed time, 3.802s cpu time, 0.779s GC time
Loading theory "Draft.Conntrack_State" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.Tagged_Packet")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "NegationNormalForm"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Ternary"
### 2.025s elapsed time, 7.712s cpu time, 1.246s GC time
Loading theory "Draft.L4_Protocol_Flags" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  ctstate :: enum
  enum_ctstate == enum_class.enum :: ctstate list
  enum_all_ctstate == enum_class.enum_all :: (ctstate => bool) => bool
  enum_ex_ctstate == enum_class.enum_ex :: (ctstate => bool) => bool
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.270s elapsed time, 8.652s cpu time, 1.368s GC time
Loading theory "Draft.Templates" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.ExtrEqs")
### theory "Draft.L4_Protocol_Flags"
### 0.684s elapsed time, 2.637s cpu time, 0.320s GC time
Loading theory "Draft.WordInterval_Lists" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax" via "Draft.IpAddresses")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Conntrack_State_TransformTemplates")
Found termination order: "{}"
### theory "Draft.Conntrack_State"
### 1.342s elapsed time, 5.064s cpu time, 1.316s GC time
Loading theory "Draft.Tagged_Packet" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.WordInterval_Lists"
### 0.745s elapsed time, 2.766s cpu time, 1.052s GC time
Loading theory "Draft.Ports" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
### theory "Draft.Tagged_Packet"
### 0.562s elapsed time, 2.191s cpu time, 0.179s GC time
Loading theory "Draft.IpAddresses" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Common_Primitive_Syntax")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.980s elapsed time, 3.680s cpu time, 1.111s GC time
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
"Some {CT_New}"
  :: "ctstate set option"
"False"
  :: "bool"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Ports"
### 1.353s elapsed time, 5.138s cpu time, 1.539s GC time
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'', p_tag_ctstate = CT_New |)"
  :: "32 tagged_packet"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses"
### 1.689s elapsed time, 5.635s cpu time, 1.647s GC time
Loading theory "Draft.Common_Primitive_Syntax" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
### theory "Draft.Common_Primitive_Syntax"
### 2.852s elapsed time, 6.779s cpu time, 0.493s GC time
"(| p_iiface = ''eth0'', p_oiface = ''eth1'', p_src = 3232236077,
    p_dst = 2915201135, p_proto = 6, p_sport = 2065, p_dport = 80,
    p_tcp_flags = {TCP_ACK}, p_payload = ''GET / HTTP/1.0'',
    p_tag_ctstate = CT_Established |)"
  :: "32 tagged_packet"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Firewall_Common"
### 9.060s elapsed time, 24.037s cpu time, 4.084s GC time
Loading theory "Draft.Matching_Ternary" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic" via "Draft.Semantics_Ternary")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
~ has_primitive ?m ==>
ternary_ternary_eval (map_match_tac ?\<beta> ?p ?m) ~= TernaryUnknown
### theory "Draft.Matching_Ternary"
### 1.137s elapsed time, 1.284s cpu time, 0.118s GC time
Loading theory "Draft.Semantics_Ternary" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Loading theory "Draft.Unknown_Match_Tacs" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher" via "Draft.Common_Primitive_Matcher_Generic")
Found termination order: "{}"
Proofs for inductive predicate(s) "approximating_bigstep"
  Proving monotonicity ...
[| \<gamma>,p\<turnstile> \<langle>rs, s\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
   !!t. P [] t t;
   !!m. matches \<gamma> m Accept p ==>
        P [Rule m Accept] Undecided (Decision FinalAllow);
   !!m. matches \<gamma> m Drop p ==>
        P [Rule m Drop] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Reject p ==>
        P [Rule m Reject] Undecided (Decision FinalDeny);
   !!m. matches \<gamma> m Log p ==> P [Rule m Log] Undecided Undecided;
   !!m. matches \<gamma> m Empty p ==> P [Rule m Empty] Undecided Undecided;
   !!m a. ~ matches \<gamma> m a p ==> P [Rule m a] Undecided Undecided;
   !!rs X. P rs (Decision X) (Decision X);
   !!rs\<^sub>1 t rs\<^sub>2 t'.
      [| \<gamma>,p\<turnstile> \<langle>rs\<^sub>1, Undecided\<rangle> \<Rightarrow>\<^sub>\<alpha> t;
         P rs\<^sub>1 Undecided t;
         \<gamma>,p\<turnstile> \<langle>rs\<^sub>2, t\<rangle> \<Rightarrow>\<^sub>\<alpha> t';
         P rs\<^sub>2 t t' |]
      ==> P (rs\<^sub>1 @ rs\<^sub>2) Undecided t' |]
==> P rs s t
Found termination order: "{}"
### theory "Draft.Unknown_Match_Tacs"
### 0.257s elapsed time, 0.585s cpu time, 0.109s GC time
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Semantics_Ternary"
### 0.567s elapsed time, 0.893s cpu time, 0.109s GC time
Loading theory "Draft.Common_Primitive_Matcher_Generic" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform" via "Draft.Common_Primitive_Matcher")
locale primitive_matcher_generic
  fixes
    \<beta> ::
      "'i common_primitive => ('i, 'a) tagged_packet_scheme => ternaryvalue"
  assumes "primitive_matcher_generic \<beta>"
Found termination order: "size <*mlex*> {}"
compress_extra (Match ?x) = Match ?x
compress_extra (MatchNot (Match (Extra ?e))) =
Match (Extra (''NOT ('' @ ?e @ '')''))
compress_extra (MatchNot (Match (Src ?va))) =
MatchNot (compress_extra (Match (Src ?va)))
compress_extra (MatchNot (Match (Dst ?va))) =
MatchNot (compress_extra (Match (Dst ?va)))
compress_extra (MatchNot (Match (IIface ?va))) =
MatchNot (compress_extra (Match (IIface ?va)))
compress_extra (MatchNot (Match (OIface ?va))) =
MatchNot (compress_extra (Match (OIface ?va)))
compress_extra (MatchNot (Match (Prot ?va))) =
MatchNot (compress_extra (Match (Prot ?va)))
compress_extra (MatchNot (Match (Src_Ports ?va))) =
MatchNot (compress_extra (Match (Src_Ports ?va)))
compress_extra (MatchNot (Match (Dst_Ports ?va))) =
MatchNot (compress_extra (Match (Dst_Ports ?va)))
compress_extra (MatchNot (Match (MultiportPorts ?va))) =
MatchNot (compress_extra (Match (MultiportPorts ?va)))
compress_extra (MatchNot (Match (L4_Flags ?va))) =
MatchNot (compress_extra (Match (L4_Flags ?va)))
compress_extra (MatchNot (Match (CT_State ?va))) =
MatchNot (compress_extra (Match (CT_State ?va)))
compress_extra (MatchNot (MatchNot ?v)) =
MatchNot (compress_extra (MatchNot ?v))
compress_extra (MatchNot (MatchAnd ?v ?va)) =
MatchNot (compress_extra (MatchAnd ?v ?va))
compress_extra (MatchNot MatchAny) = MatchNot (compress_extra MatchAny)
compress_extra (MatchAnd (Match (Extra ?e1.0)) ?m2.0) =
(case compress_extra ?m2.0 of
 Match (Src ipt_iprange) =>
   MatchAnd (Match (Extra ?e1.0)) (Match (Src ipt_iprange))
 | Match (Dst ipt_iprange) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst ipt_iprange))
 | Match (IIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (IIface iface))
 | Match (OIface iface) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (OIface iface))
 | Match (Prot protocol) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Prot protocol))
 | Match (Src_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Src_Ports ipt_l4_ports))
 | Match (Dst_Ports ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (Dst_Ports ipt_l4_ports))
 | Match (MultiportPorts ipt_l4_ports) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (MultiportPorts ipt_l4_ports))
 | Match (L4_Flags ipt_tcp_flags) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (L4_Flags ipt_tcp_flags))
 | Match (CT_State set) =>
     MatchAnd (Match (Extra ?e1.0)) (Match (CT_State set))
 | Match (Extra e2) => Match (Extra (?e1.0 @ '' '' @ e2))
 | MatchNot match_expr =>
     MatchAnd (Match (Extra ?e1.0)) (MatchNot match_expr)
 | MatchAnd match_expr1 match_expr2 =>
     MatchAnd (Match (Extra ?e1.0)) (MatchAnd match_expr1 match_expr2)
 | MatchAny => Match (Extra ?e1.0))
compress_extra (MatchAnd (Match (Src ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (IIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (IIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (OIface ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (OIface ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Prot ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Prot ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Src_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Src_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (Dst_Ports ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (Dst_Ports ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (MultiportPorts ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (MultiportPorts ?va)))
 (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (L4_Flags ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (L4_Flags ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (Match (CT_State ?va)) ?m2.0) =
MatchAnd (compress_extra (Match (CT_State ?va))) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchNot ?v) ?m2.0) =
MatchAnd (compress_extra (MatchNot ?v)) (compress_extra ?m2.0)
compress_extra (MatchAnd (MatchAnd ?v ?va) ?m2.0) =
MatchAnd (compress_extra (MatchAnd ?v ?va)) (compress_extra ?m2.0)
compress_extra (MatchAnd MatchAny ?m2.0) =
MatchAnd (compress_extra MatchAny) (compress_extra ?m2.0)
compress_extra MatchAny = MatchAny
### theory "Draft.Common_Primitive_Matcher_Generic"
### 2.372s elapsed time, 4.269s cpu time, 2.259s GC time
Loading theory "Draft.Common_Primitive_Matcher" (required by "Draft.Conntrack_State_TransformTemplates" via "Draft.Conntrack_State_Transform")
Found termination order: "{}"
"Match (Extra ''foo NOT (bar)'')"
  :: "'a common_primitive match_expr"
"Match (Extra ''foo bar'')"
  :: "'a common_primitive match_expr"
"Match (Extra ''-m addrtype --dst-type BROADCAST'')"
  :: "'a common_primitive match_expr"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Common_Primitive_Matcher"
### 19.437s elapsed time, 28.658s cpu time, 7.140s GC time
Loading theory "Draft.Conntrack_State_Transform" (required by "Draft.Conntrack_State_TransformTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Conntrack_State_Transform"
### 0.513s elapsed time, 0.631s cpu time, 0.000s GC time
Loading theory "Draft.Conntrack_State_TransformTemplates"
val templateLemmas =
   [("Conntrack_State_Transform.ctstate_assume_new_simple_ruleset",
     "simple_ruleset ?rs ==> simple_ruleset (ctstate_assume_new ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Conntrack_State_Transform.ipt_tcp_flags_assume_syn_simple_ruleset",
     "simple_ruleset ?rs ==> simple_ruleset (ipt_tcp_flags_assume_syn ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Conntrack_State_Transform.packet_assume_new_simple_ruleset",
     "simple_ruleset ?rs ==> simple_ruleset (packet_assume_new ?rs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Conntrack_State_Transform.ctstate_assume_new",
     "p_tag_ctstate ?p = CT_New ==>
      approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p
       (ctstate_assume_new ?rs) ?s =
      approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p ?rs ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("Conntrack_State_Transform.ipt_tcp_flags_assume_syn",
     "match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p) ==>
      approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p
       (ipt_tcp_flags_assume_syn ?rs) ?s =
      approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("Conntrack_State_Transform.ctstate_assume_state",
     "p_tag_ctstate ?p = ?s ==>
      matches (common_matcher, ?\<alpha>) (ctstate_assume_state ?s ?m) ?a
       ?p =
      matches (common_matcher, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4), template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 1),
             template_var 0),
           template_var 4)))),
    ("Conntrack_State_Transform.ipt_tcp_flags_assume_flag",
     "match_tcp_flags ?flg (p_tcp_flags ?p) ==>
      matches (common_matcher, ?\<alpha>)
       (ipt_tcp_flags_assume_flag ?flg ?m) ?a ?p =
      matches (common_matcher, ?\<alpha>) ?m ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("Conntrack_State_Transform.packet_assume_new",
     "[| match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p);
         p_tag_ctstate ?p = CT_New |]
      ==> approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p
           (packet_assume_new ?rs) ?s =
          approximating_bigstep_fun (common_matcher, ?\<alpha>) ?p ?rs ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 3))
            ),
        template_equation
         (template_app (template_hole 6, template_var 3), template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 3),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Conntrack_State_TransformTemplates"
### 1.064s elapsed time, 1.414s cpu time, 0.256s GC time
val it = (): unit
