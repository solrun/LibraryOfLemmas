Loading theory "Draft.Negation_Type" (required by "Draft.IpAddressesTemplates" via "Draft.IpAddresses" via "Draft.WordInterval_Lists")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.536s cpu time, 0.058s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 1.039s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.490s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.Negation_Type"
### 0.842s elapsed time, 3.300s cpu time, 0.347s GC time
Loading theory "Draft.WordInterval_Lists" (required by "Draft.IpAddressesTemplates" via "Draft.IpAddresses")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.011s elapsed time, 3.783s cpu time, 0.896s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.085s elapsed time, 3.928s cpu time, 0.811s GC time
### theory "Draft.WordInterval_Lists"
### 0.666s elapsed time, 2.269s cpu time, 0.683s GC time
Loading theory "Draft.IpAddresses" (required by "Draft.IpAddressesTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.017s elapsed time, 6.346s cpu time, 1.078s GC time
Loading theory "Draft.Templates" (required by "Draft.IpAddressesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IpAddressesTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IpAddresses"
### 1.107s elapsed time, 2.311s cpu time, 0.167s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.030s cpu time, 0.123s GC time
Loading theory "Draft.IpAddressesTemplates"
val templateLemmas =
   [("IpAddresses.ipt_ipvange_to_cidr",
     "ipcidr_union_set (set (ipt_iprange_to_cidr ?ips)) =
      ipt_iprange_to_set ?ips",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.ipt_iprange_compress_normalized_IpAddrNetmask",
     "ALL a':set (ipt_iprange_compress ?as). normalized_cidr_ip a'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("IpAddresses.wi_2_cidr_ipt_iprange_list_normalized_IpAddrNetmask",
     "ALL a':set (wi_2_cidr_ipt_iprange_list ?as). normalized_cidr_ip a'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("IpAddresses.ipt_iprange_to_set_uncurry_IpAddrNetmask",
     "ipt_iprange_to_set (uncurry IpAddrNetmask ?a) =
      uncurry ipset_from_cidr ?a",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("IpAddresses.interval_to_wi_to_ipt_ipv4range",
     "ipt_iprange_to_set (interval_to_wi_to_ipt_iprange ?s ?e) = {?s..?e}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IpAddresses.wi_to_ipt_ipv4range",
     "\<Union> (set (map ipt_iprange_to_set (wi_to_ipt_iprange ?wi))) =
      wordinterval_to_set ?wi",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.wi_2_cidr_ipt_iprange_list",
     "\<Union> (ipt_iprange_to_set ` set (wi_2_cidr_ipt_iprange_list ?r)) =
      wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.ipt_iprange_to_interval",
     "ipt_iprange_to_interval ?ip = (?s, ?e) ==>
      {?s..?e} = ipt_iprange_to_set ?ip",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IpAddresses.all_but_those_ips",
     "ipcidr_union_set (set (all_but_those_ips ?cidrips)) =
      UNIV - (UN (ip, n):set ?cidrips. ipset_from_cidr ip n)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_hole 7, template_var 0)))))),
    ("IpAddresses.ipt_iprange_to_set_nonempty",
     "(ipt_iprange_to_set ?ip = {}) =
      (EX ip1 ip2. ?ip = IpAddrRange ip1 ip2 & ip2 < ip1)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_app (template_hole 4, t_empty))),
    ("IpAddresses.ipt_iprange_negation_type_to_br_intersect",
     "wordinterval_to_set (ipt_iprange_negation_type_to_br_intersect ?l) =
      \<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -
      \<Union> (ipt_iprange_to_set ` set (getNeg ?l))",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("IpAddresses.ipt_iprange_compress",
     "\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ?l)) =
      \<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -
      \<Union> (ipt_iprange_to_set ` set (getNeg ?l))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0))))))),
    ("IpAddresses.element_ipt_iprange_to_set",
     "(?addr : ipt_iprange_to_set ?X) =
      (case ?X of IpAddr ip => ?addr = ip
       | IpAddrNetmask pre len =>
           pre && (mask len << LENGTH(?'i) - len) <= ?addr &
           ?addr <= pre || mask (LENGTH(?'i) - len)
       | IpAddrRange ip1 ip2 => ip1 <= ?addr & ?addr <= ip2)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1),
         template_app (template_hole 11, template_var 0)),
       template_app
        (template_app
          (template_app (template_app (template_hole 10, t_empty), t_empty),
           t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.IpAddressesTemplates"
### 0.635s elapsed time, 0.839s cpu time, 0.072s GC time
val it = (): unit
