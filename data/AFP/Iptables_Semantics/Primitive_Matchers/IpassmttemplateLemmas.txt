   [("Ipassmt.ipassmt_ignore_wildcard_le",
     "ipassmt_ignore_wildcard ?ipassmt \<subseteq>\<^sub>m ?ipassmt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Ipassmt.ipcidr_union_cidr_split",
     "ipcidr_union_set (set (cidr_split ?a)) = wordinterval_to_set ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Ipassmt.ipassmt_sanity_nowildcards_ignore_wildcardD",
     "ipassmt_sanity_nowildcards ?ipassmt ==>
      ipassmt_sanity_nowildcards (ipassmt_ignore_wildcard ?ipassmt)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "ipassmt_ignore_wildcard ?ipassmt ?i = Some ?ips ==>
      the (?ipassmt ?i) = ?ips",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_var 0))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "ipassmt_ignore_wildcard ?ipassmt ?i = Some ?ips ==>
      ipcidr_union_set (set ?ips) ~= UNIV",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Ipassmt.dom_ipassmt_ignore_wildcard",
     "(?i : dom (ipassmt_ignore_wildcard ?ipassmt)) =
      (?i : dom ?ipassmt &
       ipcidr_union_set (set (the (?ipassmt ?i))) ~= UNIV)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app (template_hole 8, template_var 0))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 1,
                         template_app (template_var 0, template_var 1))))),
                 template_hole 0)))
           ))),
    ("Ipassmt.ipassmt_ignore_wildcard_None_Some",
     "[| ipassmt_ignore_wildcard ?ipassmt ?ifce = None;
         ?ipassmt ?ifce = Some ?ips |]
      ==> ipcidr_union_set (set ?ips) = UNIV",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Ipassmt.ipassmt_ignore_wildcard_the",
     "[| ?ipassmt ?i = Some ?ips; ipcidr_union_set (set ?ips) ~= UNIV |]
      ==> the (ipassmt_ignore_wildcard ?ipassmt ?i) = ?ips",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ipassmt.ipassmt_sanity_nowildcards_match_iface",
     "[| ipassmt_sanity_nowildcards ?ipassmt;
         ?ipassmt (Iface ?ifce2.0) = None; ?ipassmt ?ifce = Some ?a |]
      ==> ~ match_iface ?ifce ?ifce2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_var 3, template_app (template_hole 4, template_var 2)),
          template_hole 3),
        template_equation
         (template_app (template_var 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )
           ))),
    ("Ipassmt.ipassmt_disjoint_nonempty_inj",
     "[| ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?i_ips;
         ipcidr_union_set (set ?i_ips) ~= {}; ?ipassmt ?k = Some ?i_ips |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation (template_var 0, template_var 2))),
    ("Ipassmt.ipassmt_disjoint_ignore_wildcard_nonempty_inj",
     "[| ipassmt_sanity_disjoint (ipassmt_ignore_wildcard ?ipassmt);
         ?ipassmt ?ifce = Some ?i_ips; ipcidr_union_set (set ?i_ips) ~= {};
         ipassmt_ignore_wildcard ?ipassmt ?k = Some ?i_ips |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3))
            ),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 0),
          template_app (template_hole 6, template_var 1))],
       template_equation (template_var 0, template_var 2))),
    ("Ipassmt.ipassmt_disjoint_inj_k",
     "[| ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?ips;
         ?ipassmt ?k = Some ?ips'; ?p : ipcidr_union_set (set ?ips);
         ?p : ipcidr_union_set (set ?ips') |]
      ==> ?k = ?ifce",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app (template_var 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_equation (template_var 2, template_var 4))),
    ("Ipassmt.ipassmt_diff_ifce_equal",
     "[| (?ifce, [], []) : set (ipassmt_diff ?ipassmt1.0 ?ipassmt2.0);
         ?ifce : dom (map_of ?ipassmt1.0);
         ?ifce : dom (map_of ?ipassmt2.0) |]
      ==> ipcidr_union_set (set (the (map_of ?ipassmt1.0 ?ifce))) =
          ipcidr_union_set (set (the (map_of ?ipassmt2.0 ?ifce)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_hole 9))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))))))),
    ("Ipassmt.ipassmt_disjoint_matcheq_iifce_srcip",
     "[| ipassmt_sanity_nowildcards ?ipassmt;
         ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?i_ips;
         ?ipassmt (Iface (p_iiface ?p)) = Some ?p_ips &
         p_src ?p : ipcidr_union_set (set ?p_ips) |]
      ==> match_iface ?ifce (p_iiface ?p) =
          (p_src ?p : ipcidr_union_set (set ?i_ips))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_var 4,
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 1)))),
                  template_app (template_hole 9, template_var 0))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)))))),
    ("Ipassmt.ipassmt_sanity_disjoint_ignore_wildcards",
     "ipassmt_sanity_disjoint (ipassmt_ignore_wildcard ?ipassmt) =
      (ALL i1:dom ?ipassmt.
          ALL i2:dom ?ipassmt.
             ipcidr_union_set (set (the (?ipassmt i1))) ~= UNIV &
             ipcidr_union_set (set (the (?ipassmt i2))) ~= UNIV &
             i1 ~= i2 -->
             ipcidr_union_set (set (the (?ipassmt i1))) Int
             ipcidr_union_set (set (the (?ipassmt i2))) =
             {})",
     template_equation
      (template_app
        (template_hole 14, template_app (template_hole 13, template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app (template_hole 11, template_var 0)),
         t_empty)))]
