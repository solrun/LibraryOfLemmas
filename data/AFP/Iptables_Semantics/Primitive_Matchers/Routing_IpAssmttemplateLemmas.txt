   [("Routing_IpAssmt.routing_ipassmt_distinct",
     "distinct (map fst (routing_ipassmt ?rtbl))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Routing_IpAssmt.ipcidr_union_cidr_split",
     "ipcidr_union_set (set (cidr_split ?x)) = wordinterval_to_set ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Routing_IpAssmt.routing_ipassmt_ipassmt_sanity_disjoint",
     "valid_prefixes ?rt ==>
      ipassmt_sanity_disjoint (map_of (routing_ipassmt ?rt))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Routing_IpAssmt.map_of_map_Iface",
     "map_of (map (%x. (Iface (fst x), ?f (snd x))) ?xs) (Iface ?ifce) =
      map_option ?f (map_of ?xs ?ifce)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Routing_IpAssmt.routing_ipassmt",
     "[| valid_prefixes ?rt;
         output_iface (routing_table_semantics ?rt (p_dst ?p)) =
         p_oiface ?p |]
      ==> EX p_ips.
             map_of (routing_ipassmt ?rt) (Iface (p_oiface ?p)) =
             Some p_ips &
             p_dst ?p : ipcidr_union_set (set p_ips)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 0))),
          template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty))))]
