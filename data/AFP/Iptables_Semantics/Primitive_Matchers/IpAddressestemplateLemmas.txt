   [("IpAddresses.ipt_ipvange_to_cidr",
     "ipcidr_union_set (set (ipt_iprange_to_cidr ?ips)) =
      ipt_iprange_to_set ?ips",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.ipt_iprange_compress_normalized_IpAddrNetmask",
     "ALL a':set (ipt_iprange_compress ?as). normalized_cidr_ip a'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("IpAddresses.wi_2_cidr_ipt_iprange_list_normalized_IpAddrNetmask",
     "ALL a':set (wi_2_cidr_ipt_iprange_list ?as). normalized_cidr_ip a'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("IpAddresses.ipt_iprange_to_set_uncurry_IpAddrNetmask",
     "ipt_iprange_to_set (uncurry IpAddrNetmask ?a) =
      uncurry ipset_from_cidr ?a",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("IpAddresses.interval_to_wi_to_ipt_ipv4range",
     "ipt_iprange_to_set (interval_to_wi_to_ipt_iprange ?s ?e) = {?s..?e}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IpAddresses.wi_to_ipt_ipv4range",
     "\<Union> (set (map ipt_iprange_to_set (wi_to_ipt_iprange ?wi))) =
      wordinterval_to_set ?wi",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.wi_2_cidr_ipt_iprange_list",
     "\<Union> (ipt_iprange_to_set ` set (wi_2_cidr_ipt_iprange_list ?r)) =
      wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("IpAddresses.ipt_iprange_to_interval",
     "ipt_iprange_to_interval ?ip = (?s, ?e) ==>
      {?s..?e} = ipt_iprange_to_set ?ip",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("IpAddresses.all_but_those_ips",
     "ipcidr_union_set (set (all_but_those_ips ?cidrips)) =
      UNIV - (UN (ip, n):set ?cidrips. ipset_from_cidr ip n)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_hole 7, template_var 0)))))),
    ("IpAddresses.ipt_iprange_to_set_nonempty",
     "(ipt_iprange_to_set ?ip = {}) =
      (EX ip1 ip2. ?ip = IpAddrRange ip1 ip2 & ip2 < ip1)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_app (template_hole 4, t_empty))),
    ("IpAddresses.ipt_iprange_negation_type_to_br_intersect",
     "wordinterval_to_set (ipt_iprange_negation_type_to_br_intersect ?l) =
      \<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -
      \<Union> (ipt_iprange_to_set ` set (getNeg ?l))",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("IpAddresses.ipt_iprange_compress",
     "\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ?l)) =
      \<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -
      \<Union> (ipt_iprange_to_set ` set (getNeg ?l))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_hole 5,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0))))))),
    ("IpAddresses.element_ipt_iprange_to_set",
     "(?addr : ipt_iprange_to_set ?X) =
      (case ?X of IpAddr ip => ?addr = ip
       | IpAddrNetmask pre len =>
           pre && (mask len << LENGTH(?'i) - len) <= ?addr &
           ?addr <= pre || mask (LENGTH(?'i) - len)
       | IpAddrRange ip1 ip2 => ip1 <= ?addr & ?addr <= ip2)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1),
         template_app (template_hole 11, template_var 0)),
       template_app
        (template_app
          (template_app (template_app (template_hole 10, t_empty), t_empty),
           t_empty),
         template_var 0)))]
