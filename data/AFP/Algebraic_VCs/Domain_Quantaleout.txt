Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.545s cpu time, 0.058s GC time
Loading theory "Draft.Domain_Quantale" (required by "Draft.Domain_QuantaleTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.810s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.337s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
class bd_lattice_ordered_monoid = monoid_mult + bounded_lattice +
  distrib_lattice +
  assumes
    "left_distrib":
      "!!x y z.
          x \<cdot> (y \<squnion> z) = x \<cdot> y \<squnion> x \<cdot> z"
    and
    "right_distrib":
      "!!x y z.
          (x \<squnion> y) \<cdot> z = x \<cdot> z \<squnion> y \<cdot> z"
    and "bot_annil": "!!x. \<bottom> \<cdot> x = \<bottom>"
    and "bot_annir": "!!x. x \<cdot> \<bottom> = \<bottom>"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) \<bottom> ?xs ==
### foldr (\<squnion>) ?xs \<bottom>
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) \<bottom> ?g (set ?xs) ==
### bd_lattice_ordered_monoid_class.sum_list (map ?g (remdups ?xs))
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.878s elapsed time, 3.245s cpu time, 0.735s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.961s elapsed time, 3.394s cpu time, 0.696s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class domain_bdlo_monoid = bd_lattice_ordered_monoid +
  assumes
    "rdv":
      "!!z x y.
          (z \<sqinter> x \<cdot> \<top>) \<cdot> y =
          z \<cdot> y \<sqinter> x \<cdot> \<top>"
### theory "HOL-Library.Tree"
### 1.824s elapsed time, 5.809s cpu time, 0.976s GC time
Loading theory "Draft.Templates" (required by "Draft.Domain_QuantaleTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Domain_QuantaleTemplates")
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.695s elapsed time, 1.649s cpu time, 0.668s GC time
class boolean_monoid = boolean_algebra + monoid_mult +
  assumes
    "left_distrib'":
      "!!x y z.
          x \<cdot> (y \<squnion> z) = x \<cdot> y \<squnion> x \<cdot> z"
    and
    "right_distrib'":
      "!!x y z.
          (x \<squnion> y) \<cdot> z = x \<cdot> z \<squnion> y \<cdot> z"
    and "bot_annil'": "!!x. \<bottom> \<cdot> x = \<bottom>"
    and "bot_annir'": "!!x. x \<cdot> \<bottom> = \<bottom>"
class domain_boolean_monoid = boolean_monoid +
  assumes
    "rdv'":
      "!!z x y.
          (z \<sqinter> x \<cdot> \<top>) \<cdot> y =
          z \<cdot> y \<sqinter> x \<cdot> \<top>"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
class range_boolean_monoid = boolean_monoid +
  assumes
    "ldv'":
      "!!y z x.
          y \<cdot> (z \<sqinter> \<top> \<cdot> x) =
          y \<cdot> z \<sqinter> \<top> \<cdot> x"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
class quantale = complete_lattice + monoid_mult +
  assumes
    "Sup_distr": "!!X y. Sup X \<cdot> y = Sup {z. EX x:X. z = x \<cdot> y}"
    and
    "Sup_distl": "!!x Y. x \<cdot> Sup Y = Sup {z. EX y:Y. z = x \<cdot> y}"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) \<bottom> ?xs ==
### foldr (\<squnion>) ?xs \<bottom>
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) \<bottom> ?g (set ?xs) ==
### quantale_class.sum_list (map ?g (remdups ?xs))
class domain_quantale = distributive_quantale +
  assumes
    "rdv''":
      "!!z x y.
          (z \<sqinter> x \<cdot> \<top>) \<cdot> y =
          z \<cdot> y \<sqinter> x \<cdot> \<top>"
class range_quantale = distributive_quantale +
  assumes
    "ldv''":
      "!!y z x.
          y \<cdot> (z \<sqinter> \<top> \<cdot> x) =
          y \<cdot> z \<sqinter> \<top> \<cdot> x"
### Partially applied constant "Relation.relcomp" on left hand side of equation, in theorem:
### monoid_mult.prod_list Id (O) ?xs == foldr (O) ?xs Id
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (Un) {} ?xs == foldr (Un) ?xs {}
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (Un) {} ?g (set ?xs) ==
### rel_dbq.sum_list (map ?g (remdups ?xs))
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list Id (%x y. y O x) ?xs == foldr (%x y. y O x) ?xs Id
class modal_boolean_quantale = domain_boolean_quantale +
  range_boolean_quantale +
  assumes "domrange'": "!!x. d (r x) = r x"
    and "rangedom'": "!!x. r (d x) = d x"
### theory "Draft.Domain_Quantale"
### 27.353s elapsed time, 34.017s cpu time, 4.758s GC time
Loading theory "Draft.Domain_QuantaleTemplates"
val templateLemmas =
   [("Domain_Quantale.recursion",
     "[| mono ?f; !!x. d ?p <=  |x] d ?q ==> d ?p <=  |?f x] d ?q |]
      ==> d ?p <=  |lfp ?f] d ?q",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 4, template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Domain_QuantaleTemplates"
### 0.818s elapsed time, 2.443s cpu time, 0.180s GC time
val it = (): unit
