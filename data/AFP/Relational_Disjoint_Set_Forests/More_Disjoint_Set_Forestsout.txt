Loading theory "HOL-Hoare.Hoare_Syntax" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Hoare.Hoare_Tac" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.099s elapsed time, 0.416s cpu time, 0.011s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.738s cpu time, 0.078s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.352s cpu time, 0.089s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### ML warning (line 58 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 62 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 232 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val hoare_tc_vars_tr: Proof.context -> term list -> term
    val hoare_vars_tr: Proof.context -> term list -> term
    val setup:
       {Basic: string,
        Cond: string,
        Seq: string,
        Skip: string, Valid: string, ValidTC: string, While: string}
         -> theory -> theory
    val spec_tr': string -> Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "HOL-Hoare.Hoare_Syntax"
### 0.884s elapsed time, 3.342s cpu time, 0.569s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.988s elapsed time, 3.742s cpu time, 0.539s GC time
Loading theory "Stone_Algebras.Lattice_Basics" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras" via "Stone_Algebras.P_Algebras")
Found termination order: "size <*mlex*> {}"
class sup = type +
  fixes sup :: "'a => 'a => 'a"
class inf = type +
  fixes inf :: "'a => 'a => 'a"
class uminus = type +
  fixes uminus :: "'a => 'a"
Found termination order: "size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
Found termination order: "size <*mlex*> {}"
### ML warning (line 49 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 64 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 76 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (file "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
signature HOARE_TAC =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val hoare_tc_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Hoare_Tac: HOARE_TAC
### theory "HOL-Hoare.Hoare_Tac"
### 1.671s elapsed time, 6.461s cpu time, 0.749s GC time
Loading theory "HOL-Hoare.Hoare_Logic" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests")
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
### theory "HOL-Library.BigO"
### 0.834s elapsed time, 3.287s cpu time, 0.237s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) bot ?xs == foldr (\<squnion>) ?xs bot
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) bot ?g (set ?xs) ==
### sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.023s elapsed time, 7.287s cpu time, 0.877s GC time
Loading theory "Draft.Templates" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates")
Proofs for inductive predicate(s) "Sem"
  Proving monotonicity ...
### theory "HOL-Hoare.Hoare_Logic"
### 0.930s elapsed time, 2.866s cpu time, 0.279s GC time
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) top ?xs == foldr (\<sqinter>) ?xs top
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) top ?g (set ?xs) ==
### inf.sup_monoid.sum_list (map ?g (remdups ?xs))
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.603s elapsed time, 1.489s cpu time, 0.127s GC time
class dense_lattice = bounded_lattice +
  assumes
    "bot_meet_irreducible":
      "!!x y. x \<sqinter> y = bot --> x = bot | y = bot"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
class linorder_lattice_expansion = bounded_linorder + inf + sup +
  assumes "sup_def": "!!x y. x \<squnion> y = max x y"
  assumes "inf_def": "!!x y. x \<sqinter> y = min x y"
### Additional type variable(s) in locale specification "non_trivial": 'a
class non_trivial = type +
  assumes "consistent": "EX x y. x ~= y"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Stone_Algebras.Lattice_Basics"
### 7.819s elapsed time, 11.348s cpu time, 0.713s GC time
Loading theory "Stone_Algebras.P_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras")
Loading theory "Stone_Relation_Algebras.Fixpoints" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras" via "Stone_Relation_Algebras.Semirings")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class p_algebra = uminus + bounded_lattice +
  assumes "pseudo_complement": "!!x y. (x \<sqinter> y = bot) = (x <= - y)"
### theory "Stone_Relation_Algebras.Fixpoints"
### 1.165s elapsed time, 2.718s cpu time, 0.142s GC time
Loading theory "Stone_Relation_Algebras.Semirings" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Relation_Algebras.Relation_Algebras")
class non_associative_left_semiring = one + times +
  bounded_semilattice_sup_bot +
  assumes
    "mult_left_sub_dist_sup":
      "!!x y z. x * y \<squnion> x * z <= x * (y \<squnion> z)"
  assumes
    "mult_right_dist_sup":
      "!!x y z. (x \<squnion> y) * z = x * z \<squnion> y * z"
  assumes "mult_left_zero": "!!x. bot * x = bot"
  assumes "mult_left_one": "!!x. (1::'a) * x = x"
  assumes "mult_sub_right_one": "!!x. x <= x * (1::'a)"
class p_algebra_eq = uminus + bounded_lattice +
  assumes "p_bot_eq": "- bot = top"
    and "p_top_eq": "- top = bot"
    and
    "inf_import_p_eq":
      "!!x y. x \<sqinter> - (x \<sqinter> y) = x \<sqinter> - y"
class pre_left_semiring = non_associative_left_semiring +
  assumes "mult_semi_associative": "!!x y z. x * y * z <= x * (y * z)"
class residuated_pre_left_semiring = divide + pre_left_semiring +
  assumes "lres_galois": "!!x y z. (x * y <= z) = (x <= z / y)"
class idempotent_left_zero_semiring = idempotent_left_semiring +
  assumes
    "mult_left_dist_sup":
      "!!x y z. x * (y \<squnion> z) = x * y \<squnion> x * z"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral num.One == 1::?'a
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit0 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semiring.numeral (num.Bit1 ?n) ==
### let m = semiring.numeral ?n in m \<squnion> m \<squnion> (1::?'a)
class stone_algebra = pd_algebra +
  assumes "stone": "!!x. - x \<squnion> - - x = top"
class idempotent_semiring = idempotent_left_zero_semiring +
  assumes "mult_right_zero": "!!x. x * bot = bot"
class bounded_non_associative_left_semiring = top +
  non_associative_left_semiring +
  assumes "sup_right_top": "!!x. x \<squnion> top = top"
class linorder_stone_algebra_expansion = uminus +
  linorder_lattice_expansion +
  assumes "uminus_def": "!!x. - x = (if x = bot then top else bot)"
class implies = type +
  fixes implies :: "'a => 'a => 'a"
class heyting_semilattice = semilattice_inf + implies +
  assumes
    "implies_galois":
      "!!x y z. (x \<sqinter> y <= z) = (x <= y \<leadsto> z)"
class heyting_semilattice_eq = semilattice_inf + implies +
  assumes "implies_mp_below": "!!x y. x \<sqinter> (x \<leadsto> y) <= y"
    and
    "implies_galois_increasing": "!!x y. x <= y \<leadsto> x \<sqinter> y"
    and
    "implies_isotone_inf":
      "!!x y z. x \<leadsto> y \<sqinter> z <= x \<leadsto> y"
### theory "Stone_Relation_Algebras.Semirings"
### 5.337s elapsed time, 10.886s cpu time, 0.691s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Iterings" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" via "Stone_Kleene_Relation_Algebras.Kleene_Algebras")
class circ = type +
  fixes circ :: "'a => 'a"
class left_conway_semiring = circ + idempotent_left_semiring +
  assumes
    "circ_left_unfold": "!!x. Rf x (x\<^sup>\<circ>) = x\<^sup>\<circ>"
  assumes
    "circ_left_slide":
      "!!x y. (x * y)\<^sup>\<circ> * x <= x * (y * x)\<^sup>\<circ>"
  assumes
    "circ_sup_1":
      "!!x y.
          (x \<squnion> y)\<^sup>\<circ> =
          x\<^sup>\<circ> * (y * x\<^sup>\<circ>)\<^sup>\<circ>"
class heyting_algebra = uminus + bounded_heyting_lattice +
  assumes "uminus_eq": "!!x. - x = x \<leadsto> bot"
class left_conway_semiring_1 = left_conway_semiring +
  assumes
    "circ_right_slide":
      "!!x y. x * (y * x)\<^sup>\<circ> <= (x * y)\<^sup>\<circ> * x"
class heyting_algebra_eq = uminus + bounded_lattice + implies +
  assumes
    "implies_mp_eq": "!!x y. x \<sqinter> (x \<leadsto> y) = x \<sqinter> y"
    and
    "implies_import_inf":
      "!!x y z.
          x \<sqinter> (x \<sqinter> y \<leadsto> (x \<leadsto> z)) =
          x \<sqinter> (y \<leadsto> z)"
    and
    "inf_inf_implies":
      "!!z x y. z \<sqinter> (x \<sqinter> y \<leadsto> x) = z"
    and "uminus_eq_eq": "!!x. - x = x \<leadsto> bot"
class itering_1 = left_conway_semiring_1 +
  assumes
    "circ_simulate":
      "!!z x y.
          z * x <= y * z --> z * x\<^sup>\<circ> <= y\<^sup>\<circ> * z"
class itering_2 = left_conway_semiring_1 +
  assumes
    "circ_simulate_right":
      "!!z x y w.
          z * x <= y * z \<squnion> w -->
          z * x\<^sup>\<circ>
          <= y\<^sup>\<circ> * (z \<squnion> w * x\<^sup>\<circ>)"
  assumes
    "circ_simulate_left":
      "!!x z y w.
          x * z <= z * y \<squnion> w -->
          x\<^sup>\<circ> * z
          <= (z \<squnion> x\<^sup>\<circ> * w) * y\<^sup>\<circ>"
class heyting_stone_algebra = heyting_algebra +
  assumes "heyting_stone": "!!x. - x \<squnion> - - x = top"
class brouwer_algebra = minus + uminus + bounded_lattice +
  assumes "minus_galois": "!!x y z. (x <= y \<squnion> z) = (x - y <= z)"
    and "uminus_eq_minus": "!!x. - x = top - x"
class itering = circ + idempotent_left_zero_semiring +
  assumes
    "circ_sup":
      "!!x y.
          (x \<squnion> y)\<^sup>\<circ> =
          (x\<^sup>\<circ> * y)\<^sup>\<circ> * x\<^sup>\<circ>"
  assumes
    "circ_mult":
      "!!x y. (x * y)\<^sup>\<circ> = Rf (x * (y * x)\<^sup>\<circ>) y"
  assumes
    "circ_simulate_right_plus":
      "!!z x y w.
          z * x <= y * y\<^sup>\<circ> * z \<squnion> w -->
          z * x\<^sup>\<circ>
          <= y\<^sup>\<circ> * (z \<squnion> w * x\<^sup>\<circ>)"
  assumes
    "circ_simulate_left_plus":
      "!!x z y w.
          x * z <= z * y\<^sup>\<circ> \<squnion> w -->
          x\<^sup>\<circ> * z
          <= (z \<squnion> x\<^sup>\<circ> * w) * y\<^sup>\<circ>"
class boolean_algebra = minus + sup_inf_top_bot_uminus_ord +
  bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
class L = type +
  fixes L :: "'a"
class left_conway_semiring_L = L + left_conway_semiring +
  assumes
    "one_circ_mult_split": "!!x. (1::'a)\<^sup>\<circ> * x = L \<squnion> x"
  assumes "L_split_sup": "!!x y. x * (y \<squnion> L) <= x * y \<squnion> L"
class itering_L = L + itering +
  assumes "L_def": "L = (1::'a)\<^sup>\<circ> * bot"
### theory "Stone_Kleene_Relation_Algebras.Iterings"
### 7.378s elapsed time, 15.954s cpu time, 3.071s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Kleene_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras")
class star = type +
  fixes star :: "'a => 'a"
class left_kleene_algebra = star + idempotent_left_semiring +
  assumes
    "star_left_unfold": "!!y. Rf y (y\<^sup>\<star>) <= y\<^sup>\<star>"
  assumes
    "star_left_induct":
      "!!z y x. z \<squnion> y * x <= x --> y\<^sup>\<star> * z <= x"
class left_kleene_algebra = star + idempotent_left_semiring +
  assumes
    "star_left_unfold":
      "!!y. (1::'a) \<squnion> y\<^sup>+ <= y\<^sup>\<star>"
  assumes
    "star_left_induct":
      "!!z y x. z \<squnion> y * x <= x --> y\<^sup>\<star> * z <= x"
class strong_left_kleene_algebra = left_kleene_algebra +
  assumes
    "star_right_induct":
      "!!z x y. z \<squnion> x * y <= x --> z * y\<^sup>\<star> <= x"
class strong_left_kleene_algebra = left_kleene_algebra +
  assumes
    "star_right_induct":
      "!!z x y. z \<squnion> x * y <= x --> z * y\<^sup>\<star> <= x"
### theory "Stone_Algebras.P_Algebras"
### 15.546s elapsed time, 32.946s cpu time, 4.056s GC time
Loading theory "Stone_Relation_Algebras.Relation_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests" via "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras")
class conv = type +
  fixes conv :: "'a => 'a"
class bounded_distrib_allegory = one + times + bounded_distrib_lattice +
  conv +
  assumes "comp_associative": "!!x y z. x * y * z = x * (y * z)"
  assumes
    "comp_right_dist_sup":
      "!!x y z. (x \<squnion> y) * z = x * z \<squnion> y * z"
  assumes "comp_left_zero": "!!x. bot * x = bot"
  assumes "comp_left_one": "!!x. (1::'a) * x = x"
  assumes "conv_involutive": "!!x. x\<^sup>T\<^sup>T = x"
  assumes
    "conv_dist_sup":
      "!!x y. (x \<squnion> y)\<^sup>T = x\<^sup>T \<squnion> y\<^sup>T"
  assumes "conv_dist_comp": "!!x y. (x * y)\<^sup>T = y\<^sup>T * x\<^sup>T"
  assumes
    "dedekind_1":
      "!!x y z. x * y \<sqinter> z <= x * (y \<sqinter> x\<^sup>T * z)"
class kleene_algebra_var = star + idempotent_semiring +
  assumes
    "star_left_unfold_var": "!!y. Rf y (y\<^sup>\<star>) <= y\<^sup>\<star>"
  assumes
    "star_left_induct_var": "!!y x. y * x <= x --> y\<^sup>\<star> * x <= x"
  assumes
    "star_right_induct_var":
      "!!x y. x * y <= x --> x * y\<^sup>\<star> <= x"
### theory "Stone_Kleene_Relation_Algebras.Kleene_Algebras"
### 6.610s elapsed time, 13.961s cpu time, 0.587s GC time
class stone_relation_algebra = stone_algebra + pd_allegory +
  assumes "pp_dist_comp": "!!x y. - - (x * y) = - - x * - - y"
  assumes "pp_one": "- - (1::'a) = (1::'a)"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral num.One == top
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = comp_inf.semiring.numeral ?n in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = comp_inf.semiring.numeral ?n in m \<squnion> m \<squnion> top
class linorder_stone_relation_algebra_expansion = one + times +
  linorder_stone_algebra_expansion + conv +
  assumes "times_def": "!!x y. x * y = min x y"
  assumes "conv_def": "!!x. x\<^sup>T = x"
  assumes "one_def": "(1::'a) = top"
class stone_relation_algebra_tarski = stone_relation_algebra +
  assumes
    "tarski":
      "!!x. [| regular x; x ~= bot |] ==> times_top_class.total (top * x)"
class stone_relation_algebra_consistent = stone_relation_algebra +
  assumes "consistent": "bot ~= top"
### theory "Stone_Relation_Algebras.Relation_Algebras"
### 20.794s elapsed time, 27.149s cpu time, 1.384s GC time
Loading theory "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests" via "Draft.Disjoint_Set_Forests")
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral num.One == bot
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = brouwer.comp_inf.semiring.numeral ?n in m \<sqinter> m
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### brouwer.comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = brouwer.comp_inf.semiring.numeral ?n
### in m \<sqinter> m \<sqinter> bot
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral num.One == top
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral (num.Bit0 ?n) ==
### let m = bounded_distrib_lattice_class.comp_inf.semiring.numeral ?n
### in m \<squnion> m
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### bounded_distrib_lattice_class.comp_inf.semiring.numeral (num.Bit1 ?n) ==
### let m = bounded_distrib_lattice_class.comp_inf.semiring.numeral ?n
### in m \<squnion> m \<squnion> top
class stone_kleene_relation_algebra = pd_kleene_allegory +
  stone_relation_algebra +
  assumes "pp_dist_star": "!!x. - - x\<^sup>\<star> = components x"
class linorder_stone_kleene_relation_algebra_expansion = star +
  linorder_stone_relation_algebra_expansion +
  assumes "star_def": "!!x. x\<^sup>\<star> = top"
### theory "Stone_Kleene_Relation_Algebras.Kleene_Relation_Algebras"
### 26.922s elapsed time, 31.072s cpu time, 5.507s GC time
Loading theory "Draft.Disjoint_Set_Forests" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates" via "Draft.More_Disjoint_Set_Forests")
class stone_relation_algebra = stone_algebra + pd_allegory +
  assumes "pp_dist_comp": "!!x y. - - (x * y) = - - x * - - y"
  assumes "pp_one": "- - (1::'a) = (1::'a)"
class stone_kleene_relation_algebra = pd_kleene_allegory +
  stone_relation_algebra +
  assumes "pp_dist_star": "!!x. - - x\<^sup>\<star> = components x"
class stone_relation_algebra_tarski = stone_relation_algebra +
  assumes
    "tarski":
      "!!x. [| regular x; x ~= bot |] ==> times_top_class.total (top * x)"
class finite_regular_p_algebra = p_algebra +
  assumes "finite_regular": "finite {x. regular x}"
### theory "Draft.Disjoint_Set_Forests"
### 23.416s elapsed time, 28.605s cpu time, 6.641s GC time
Loading theory "Draft.More_Disjoint_Set_Forests" (required by "Draft.More_Disjoint_Set_ForestsMoreTemplates")
class stone_relation_algebra = stone_algebra + pd_allegory +
  assumes "pp_dist_comp": "!!x y. - - (x * y) = - - x * - - y"
  assumes "pp_one": "- - (1::'a) = (1::'a)"
class stone_kleene_relation_algebra = pd_kleene_allegory +
  stone_relation_algebra +
  assumes "pp_dist_star": "!!x. - - x\<^sup>\<star> = components x"
class choose_point = type +
  fixes choose_point :: "'a => 'a"
class stone_kleene_relation_algebra_choose_point_finite_regular =
  finite_regular_p_algebra + stone_kleene_relation_algebra + choose_point +
  assumes
    "choose_point_point":
      "!!x. [| vector x; x ~= bot |] ==> point (choose_point x)"
  assumes "choose_point_decreasing": "!!x. choose_point x <= - - x"
class peano_signature = type +
  fixes Z :: "'a"
    and S :: "'a"
class skra_peano_1 = stone_kleene_relation_algebra + peano_signature +
  stone_relation_algebra_tarski_consistent +
  assumes "Z_point": "point Z"
  assumes "S_univalent": "coreflexive (S[[S]])"
  assumes "S_injective": "injective S"
  assumes "S_star_Z_top": "S\<^sup>T\<^sup>\<star> * Z = top"
class skra_peano_2 = skra_peano_1 +
  assumes "S_total": "times_top_class.total S"
### theory "Draft.More_Disjoint_Set_Forests"
### 29.282s elapsed time, 32.962s cpu time, 5.078s GC time
Loading theory "Draft.More_Disjoint_Set_ForestsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.More_Disjoint_Set_ForestsMoreTemplates"
### 0.670s elapsed time, 1.216s cpu time, 0.195s GC time
val it = (): unit
