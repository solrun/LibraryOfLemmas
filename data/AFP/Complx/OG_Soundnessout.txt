Loading theory "Draft.Language" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.OG_Soundness" via "Draft.OG_Hoare" via "Draft.OG_Annotations" via "Draft.SmallStep")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.530s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.813s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.327s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.026s elapsed time, 3.878s cpu time, 0.953s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.112s elapsed time, 4.030s cpu time, 0.900s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.053s elapsed time, 6.416s cpu time, 1.217s GC time
Loading theory "Draft.Templates" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OG_SoundnessMoreTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
### theory "Draft.Language"
### 2.523s elapsed time, 7.663s cpu time, 1.310s GC time
Loading theory "Draft.SmallStep" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.OG_Soundness" via "Draft.OG_Hoare" via "Draft.OG_Annotations")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.555s elapsed time, 1.172s cpu time, 0.113s GC time
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  atom_com :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 3.650s elapsed time, 4.279s cpu time, 0.306s GC time
Loading theory "Draft.OG_Annotations" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.OG_Soundness" via "Draft.OG_Hoare")
Loading theory "Draft.SeqCatch_decomp" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.OG_Soundness")
### theory "Draft.SeqCatch_decomp"
### 0.178s elapsed time, 0.401s cpu time, 0.051s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "ann_matches"
  Proving monotonicity ...
consts
  ann_guards ::
    "'s set => ('f * 's set) list => ('s, 'p, 'f) ann => ('s, 'p, 'f) ann"
### theory "Draft.OG_Annotations"
### 1.278s elapsed time, 1.680s cpu time, 0.190s GC time
Loading theory "Draft.OG_Hoare" (required by "Draft.OG_SoundnessMoreTemplates" via "Draft.OG_Soundness")
Proofs for inductive predicate(s) "atomicsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "assertionsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oghoare", "oghoare_seq"
  Proving monotonicity ...
### theory "Draft.OG_Hoare"
### 0.757s elapsed time, 0.844s cpu time, 0.081s GC time
Loading theory "Draft.OG_Soundness" (required by "Draft.OG_SoundnessMoreTemplates")
### Ambiguous input (line 101 of "$AFP/Complx/OG_Soundness.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>Set.subset_eq"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.subset_eq" ("_position" Q')
###                         ("_position" Q))
###                       ("_position" A')))))
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("_applC" ("_position" atom_com) ("_position" c))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq" ("_position" Q') ("_position" Q))
###                 ("\<^const>Set.subset_eq" ("_position" A')
###                   ("_position" A))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###               ("_position" \<Theta>) ("_position" F)
###               ("\<^const>Set.inter" ("_position" r) ("_position" b))
###               ("_position" P') ("_position" c) ("_position" Q')
###               ("\<^const>HOL.conj" ("_position" A')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" atom_com) ("_position" c))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q))
###                     ("\<^const>Set.subset_eq" ("_position" A')
###                       ("_position" A))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("_position" A'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" atom_com) ("_position" c))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.subset_eq" ("_position" Q')
###                     ("_position" Q))
###                   ("\<^const>Set.subset_eq" ("_position" A')
###                     ("_position" A)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q)))))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq"
###                 ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                   ("_position" \<Theta>) ("_position" F)
###                   ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                   ("_position" P') ("_position" c) ("_position" Q')
###                   ("\<^const>HOL.conj" ("_position" A')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" atom_com) ("_position" c))
###                       ("_position" Q'))))
###                 ("_position" Q))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1754 of "$AFP/Complx/OG_Soundness.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P')
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_position" P') ("_position" c) ("_position" Q) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P')
###       ("_position" P) ("_position" c) ("_position" Q)
###       ("\<^const>HOL.implies" ("_position" A)
###         ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###           ("_position" P') ("_position" c) ("_position" Q)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.OG_Soundness"
### 0.763s elapsed time, 1.576s cpu time, 1.127s GC time
Loading theory "Draft.OG_SoundnessMoreTemplates"
val templateLemmas =
   [("OG_Soundness.pre_weaken_pre",
     "?x : pre ?P ==> ?x : pre (weaken_pre ?P ?P')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("OG_Soundness.ThrowRule",
     "?P <= ?A ==>
      ?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> (AnnExpr ?P) Throw ?Q, ?A",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app (template_hole 1, template_var 5)),
                 template_hole 0),
               template_var 0),
             template_var 4)
           ))),
    ("OG_Soundness.SkipRule",
     "?P <= ?Q ==>
      ?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> (AnnExpr ?P) Skip ?Q, ?A",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app (template_hole 1, template_var 5)),
                 template_hole 0),
               template_var 4),
             template_var 0)
           ))),
    ("OG_Soundness.ann_matches_weaken",
     "ann_matches ?\<Gamma> ?\<Theta> (weaken_pre ?P ?P') ?c ==>
      ann_matches ?\<Gamma> ?\<Theta> ?P ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("OG_Soundness.oghoare_imp_ann_matches",
     "?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?a ?c ?Q, ?A ==>
      ann_matches ?\<Gamma> ?\<Theta> ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 5),
               template_var 3),
             template_var 2)
           ))),
    ("OG_Soundness.rtranclp_mono'",
     "[| ?r^** ?a ?b; ?r <= ?s |] ==> ?s^** ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("OG_Soundness.oghoare_seq_imp_ann_matches",
     "?\<Gamma>, ?\<Theta>
          \<tturnstile>\<^bsub>/?F\<^esub> ?P ?a ?c ?Q, ?A ==>
      ann_matches ?\<Gamma> ?\<Theta> ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 1, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 6),
               template_var 3),
             template_var 2)
           ))),
    ("OG_Soundness.oghoare_sound",
     "?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A ==>
      ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> (pre ?P) ?c ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 4),
                   template_app (template_hole 0, template_var 3)),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OG_Soundness.oghoare_seq_sound",
     "?\<Gamma>, ?\<Theta>
          \<tturnstile>\<^bsub>/?F\<^esub> ?P' ?P ?c ?Q, ?A ==>
      ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P' ?c ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 1, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 5),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OG_Soundness.oghoare_Skip",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P Skip ?Q, ?A ==>
      EX P'. ?P = AnnExpr P' & P' <= ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OG_Soundness.oghoare_Throw",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P Throw ?Q, ?A ==>
      EX P'. ?P = AnnExpr P' & P' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_hole 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OG_Soundness.BasicRule",
     "?P <= {s. ?f s : ?Q} ==>
      ?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> (AnnExpr ?P) (Basic ?f) ?Q, ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app (template_hole 1, template_var 6)),
                 template_app (template_hole 0, template_var 5)),
               template_var 4),
             template_var 0)
           ))),
    ("OG_Soundness.Skip_normal_steps_end",
     "?\<Gamma> \<turnstile> (Skip, Normal ?s) \<rightarrow>\<^sup>*
                             (?c, ?s') ==>
      ?c = Skip & ?s' = Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 2))),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 4)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("OG_Soundness.Throw_normal_steps_end",
     "?\<Gamma> \<turnstile> (Throw, Normal ?s) \<rightarrow>\<^sup>*
                             (?c, ?s') ==>
      ?c = Throw & ?s' = Normal ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 2))),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 4)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("OG_Soundness.ann_matches_imp_assertionsR",
     "[| ann_matches ?\<Gamma> ?\<Theta> ?a ?c; ~ pre_par ?a |]
      ==> assertionsR ?\<Gamma> ?\<Theta> ?Q ?A ?a ?c (pre ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 5),
                       template_var 4),
                     template_var 1),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 3))
           ))),
    ("OG_Soundness.ann_matches_imp_assertionsR'",
     "[| ann_matches ?\<Gamma> ?\<Theta> ?a ?c; ?a' : pre_set ?a |]
      ==> assertionsR ?\<Gamma> ?\<Theta> ?Q ?A ?a ?c ?a'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 5),
                     template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("OG_Soundness.valid_strengthen_abr",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A;
         ?A <= ?A' |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("OG_Soundness.valid_weaken_pre",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A;
         ?P' <= ?P |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P' ?c ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("OG_Soundness.valid_strengthen_post",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A;
         ?Q <= ?Q' |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q', ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("OG_Soundness.oghoare_atom_com_sound",
     "[| ?\<Gamma>, ?\<Theta>
             \<tturnstile>\<^bsub>/?F\<^esub> ?P ?a ?c ?Q, ?A;
         atom_com ?c |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 5),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("OG_Soundness.rtranclp_conjD",
     "(%x1 x2. ?r1.0 x1 x2 & ?r2.0 x1 x2)^** ?x1.0 ?x2.0 ==>
      ?r1.0^** ?x1.0 ?x2.0 & ?r2.0^** ?x1.0 ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, t_empty), template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("OG_Soundness.oghoare_Basic",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Basic ?f) ?Q, ?A ==>
      EX P'. ?P = AnnExpr P' & P' <= {x. ?f x : ?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_app (template_hole 7, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OG_Soundness.oghoare_seq_valid",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c\<^sub>1 ?R, ?A;
         ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?R ?c\<^sub>2 ?Q, ?A |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
          ?P Seq ?c\<^sub>1 ?c\<^sub>2 ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 3),
                  template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 0),
             template_var 2)
           ))),
    ("OG_Soundness.oghoare_catch_valid",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
         ?P\<^sub>1 ?c\<^sub>1 ?Q, ?P\<^sub>2;
         ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
         ?P\<^sub>2 ?c\<^sub>2 ?Q, ?A |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
          ?P\<^sub>1 Catch ?c\<^sub>1 ?c\<^sub>2 ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("OG_Soundness.oghoare_step_Stuck",
     "[| ?\<Gamma>\<turnstile> (?c, Normal ?x) \<rightarrow> (?c', Stuck);
         ?x : pre ?P;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A |]
      ==> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app (template_hole 5, template_var 8),
                  template_app (template_hole 4, template_var 7))),
              template_app
               (template_app (template_hole 5, template_var 6),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_app (template_hole 1, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 9),
                        template_var 4),
                      template_var 3),
                    template_var 5),
                  template_var 8),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("OG_Soundness.oghoare_steps_Stuck",
     "[| ?\<Gamma> \<turnstile> (?c, Normal ?x) \<rightarrow>\<^sup>*
                                (?c', Stuck);
         ?x : pre ?P;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A |]
      ==> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 9)),
                template_app
                 (template_app (template_hole 5, template_var 8),
                  template_app (template_hole 4, template_var 7))),
              template_app
               (template_app (template_hole 5, template_var 6),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_app (template_hole 1, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 9),
                        template_var 4),
                      template_var 3),
                    template_var 5),
                  template_var 8),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("OG_Soundness.oghoare_step_Fault",
     "[| ?\<Gamma>\<turnstile> (?c, Normal ?x) \<rightarrow>
                               (?c', Fault ?f);
         ?x : pre ?P;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A |]
      ==> ?f : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 9),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app (template_hole 5, template_var 7))),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app (template_hole 4, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_app (template_hole 2, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 9),
                        template_var 3),
                      template_var 2),
                    template_var 4),
                  template_var 8),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 5), template_var 2)
           ))),
    ("OG_Soundness.oghoare_steps_Fault",
     "[| ?\<Gamma> \<turnstile> (?c, Normal ?x) \<rightarrow>\<^sup>*
                                (?c', Fault ?f);
         ?x : pre ?P;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A |]
      ==> ?f : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 9)),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app (template_hole 5, template_var 7))),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app (template_hole 4, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_app (template_hole 2, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 9),
                        template_var 3),
                      template_var 2),
                    template_var 4),
                  template_var 8),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 5), template_var 2)
           ))),
    ("OG_Soundness.oghoare_while_valid",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?i, ?A;
         ?i Int ?b <= ?P; ?i Int - ?b <= ?Q |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?i While ?b ?c ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 1),
          template_var 5),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app (template_hole 1, template_var 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 7),
                     template_var 6),
                   template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 0),
             template_var 2)
           ))),
    ("OG_Soundness.AwaitRule",
     "[| atom_com ?c;
         ?\<Gamma>, ?\<Theta>
             \<tturnstile>\<^bsub>/?F\<^esub> ?P ?a ?c ?Q, ?A;
         ?r Int ?b <= ?P |]
      ==> ?\<Gamma>, ?\<Theta>
              \<turnstile>\<^bsub>/?F\<^esub> (AnnRec ?r ?a) (Await ?b ?c)
        ?Q, ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 5, template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 9),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 9)),
               template_var 3),
             template_var 2)
           ))),
    ("OG_Soundness.oghoare_soundness",
     "(?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?Q, ?A -->
       ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> (pre ?P) ?c ?Q, ?A) &
      (?\<Gamma>, ?\<Theta>
           \<tturnstile>\<^bsub>/?F\<^esub> ?P' ?P ?c ?Q, ?A -->
       ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P' ?c ?Q, ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 3, template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_var 7),
                         template_var 5),
                       template_app (template_hole 1, template_var 4)),
                     template_var 3),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 0),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 5),
                     template_var 0),
                   template_var 3),
                 template_var 2),
               template_var 1)))
         )),
    ("OG_Soundness.SpecRule",
     "?P <= {s. (ALL t. (s, t) : ?r --> t : ?Q) & (EX t. (s, t) : ?r)} ==>
      ?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> (AnnExpr ?P) (Spec ?r) ?Q, ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app (template_hole 1, template_var 6)),
                 template_app (template_hole 0, template_var 5)),
               template_var 4),
             template_var 0)
           ))),
    ("OG_Soundness.rtranclp_1n_induct",
     "[| ?r^** ?a ?b; ?P ?a;
         !!y z. [| ?r y z; ?r^** z ?b; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("OG_Soundness.oghoare_DynCom",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (DynCom ?c') ?Q, ?A ==>
      EX r ad.
         ?P = AnnRec r ad &
         r <= pre ad &
         (ALL s:r.
             ?\<Gamma>, ?\<Theta>
                 \<turnstile>\<^bsub>/?F\<^esub> ad (?c' s) ?Q, ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("OG_Soundness.oghoare_Spec",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Spec ?r) ?Q, ?A ==>
      EX P'.
         ?P = AnnExpr P' &
         P' <= {s. (ALL t. (s, t) : ?r --> t : ?Q) & (EX t. (s, t) : ?r)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_app (template_hole 12, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("OG_Soundness.oghoare_if_valid",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
         ?P\<^sub>1 ?c\<^sub>1 ?Q, ?A;
         ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
         ?P\<^sub>2 ?c\<^sub>2 ?Q, ?A;
         ?r Int ?b <= ?P\<^sub>1; ?r Int - ?b <= ?P\<^sub>2 |]
      ==> ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub>
          ?r Cond ?b ?c\<^sub>1 ?c\<^sub>2 ?Q, ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 9),
                      template_var 8),
                    template_var 3),
                  template_var 2),
                template_var 5),
              template_var 4)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_var 7),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 0)),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 9),
                     template_var 8),
                   template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 6),
                   template_var 2)),
               template_var 5),
             template_var 4)
           ))),
    ("OG_Soundness.WhileRule",
     "[| ?r <= ?I; ?I Int ?b <= pre ?P; ?I Int - ?b <= ?Q;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P ?c ?I, ?A |]
      ==> ?\<Gamma>, ?\<Theta>
              \<turnstile>\<^bsub>/?F\<^esub> (AnnWhile ?r ?I ?P)
        (While ?b ?c) ?Q, ?A",
     template_implication
      ([template_inequation (less_equals, template_var 9, template_var 8),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 8), template_var 7),
          template_app (template_hole 4, template_var 6)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 8),
            template_app (template_hole 3, template_var 7)),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 6),
                  template_var 1),
                template_var 8),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 9),
                       template_var 8),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 1)),
               template_var 5),
             template_var 0)
           ))),
    ("OG_Soundness.oghoare_sound_Parallel_Fault_case",
     "[| ?\<Gamma> \<turnstile> (Parallel ?cs,
                                 Normal ?x) \<rightarrow>\<^sup>*
                                (?c', ?t);
         ?x : pre ?P; ?t = Fault ?f;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P (Parallel ?cs) ?Q, ?A;
         final (?c', ?t) |]
      ==> ?f : ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 10)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 9)),
                  template_app (template_hole 7, template_var 8))),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 8),
              template_app (template_hole 5, template_var 5))
            ),
        template_equation
         (template_var 6, template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 10),
                        template_var 3),
                      template_var 2),
                    template_var 5),
                  template_app (template_hole 8, template_var 9)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 9, template_var 7),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 2)
           ))),
    ("OG_Soundness.oghoare_Await",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Await ?b ?c) ?Q, ?A ==>
      EX r P' Q' A'.
         ?P = AnnRec r P' &
         ?\<Gamma>, ?\<Theta>
             \<tturnstile>\<^bsub>/?F\<^esub> (r Int ?b) P' ?c Q', A' &
         atom_com ?c & Q' <= ?Q & A' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("OG_Soundness.oghoare_Guard",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Guard ?f ?g ?d) ?Q, ?A ==>
      EX P' r.
         ?P = AnnRec r P' &
         ?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> P' ?d ?Q, ?A &
         r Int ?g <= pre P' & (r Int - ?g ~= {} --> ?f : ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 15, template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("OG_Soundness.rtranclp_1n_induct2",
     "[| ?r^** (?ax, ?ay) (?bx, ?by); ?P ?ax ?ay;
         !!a b aa ba.
            [| ?r (a, b) (aa, ba); ?r^** (aa, ba) (?bx, ?by); ?P a b |]
            ==> ?P aa ba |]
      ==> ?P ?bx ?by",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 4), template_var 3)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("OG_Soundness.oghoare_Catch",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Catch ?p1.0 ?p2.0) ?Q, ?A ==>
      EX P\<^sub>1 P\<^sub>2 P' Q' A'.
         ?P = AnnComp P\<^sub>1 P\<^sub>2 &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>1 ?p1.0 Q', P' &
         P' <= pre P\<^sub>2 &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>2 ?p2.0 Q', A' &
         Q' <= ?Q & A' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OG_Soundness.oghoare_Seq",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Seq ?p1.0 ?p2.0) ?Q, ?A ==>
      EX P\<^sub>1 P\<^sub>2 P' Q' A'.
         ?P = AnnComp P\<^sub>1 P\<^sub>2 &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>1 ?p1.0 P', A' &
         P' <= pre P\<^sub>2 &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>2 ?p2.0 Q', A' &
         Q' <= ?Q & A' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OG_Soundness.CondRule",
     "[| ?P <= {s. (s : ?b --> s : pre ?P\<^sub>1) &
                   (s ~: ?b --> s : pre ?P\<^sub>2)};
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P\<^sub>1 ?c\<^sub>1 ?Q, ?A;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P\<^sub>2 ?c\<^sub>2 ?Q, ?A |]
      ==> ?\<Gamma>, ?\<Theta>
              \<turnstile>\<^bsub>/?F\<^esub> (AnnBin ?P ?P\<^sub>1
          ?P\<^sub>2)
        (Cond ?b ?c\<^sub>1 ?c\<^sub>2) ?Q, ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 10,
          template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 8),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 7),
                  template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 10),
                       template_var 8),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 9),
                     template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("OG_Soundness.oghoare_While",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (While ?b ?c) ?Q, ?A ==>
      EX r i P' A' Q'.
         ?P = AnnWhile r i P' &
         ?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> P' ?c i, A' &
         r <= i &
         i Int ?b <= pre P' & i Int - ?b <= Q' & Q' <= ?Q & A' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("OG_Soundness.state_upd_in_atomicsR",
     "[| ?\<Gamma>\<turnstile> (?c, Normal ?s) \<rightarrow>
                               (?c', Normal ?t);
         ?s ~= ?t; ann_matches ?\<Gamma> ?\<Theta> ?a ?c; ?s : pre ?a |]
      ==> EX p cm x.
             atomicsR ?\<Gamma> ?\<Theta> ?a ?c (p, cm) &
             ?s : p &
             ?\<Gamma>\<turnstile> (cm, Normal ?s) \<rightarrow>
                                   (x, Normal ?t) &
             final (x, Normal ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 6),
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app (template_hole 11, template_var 4))),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_app (template_hole 11, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 1),
                template_var 0),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("OG_Soundness.oghoare_sound_Parallel_Normal_case",
     "[| ?\<Gamma> \<turnstile> (Parallel ?cs,
                                 Normal ?x) \<rightarrow>\<^sup>*
                                (?c', ?t);
         ?t = Normal ?y;
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> ?P (Parallel ?cs) ?Q, ?A;
         final (?c', ?t); ?x : pre ?P; ?t ~: Fault ` ?F |]
      ==> ?c' = Throw & ?t : Normal ` ?A | ?c' = Skip & ?t : Normal ` ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 10)),
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 9)),
                  template_app (template_hole 15, template_var 8))),
              template_app
               (template_app (template_hole 17, template_var 7),
                template_var 6))
            ),
        template_equation
         (template_var 6, template_app (template_hole 15, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 10),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_app (template_hole 16, template_var 9)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 17, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 8),
              template_app (template_hole 10, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 3))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 8, template_var 6),
                   template_app
                    (template_app (template_hole 1, template_hole 15),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 7),
                   template_hole 0)),
               template_app
                (template_app (template_hole 8, template_var 6),
                 template_app
                  (template_app (template_hole 1, template_hole 15),
                   template_var 1))))
           ))),
    ("OG_Soundness.oghoare_Call",
     "?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?P ?x ?Q, ?A ==>
      ALL p.
         ?x = Call p -->
         (EX r n.
             ?P = AnnCall r n &
             (EX as P' f b.
                 ?\<Theta> p = Some as &
                 as ! n = P' &
                 r <= pre P' &
                 ?\<Gamma> p = Some b &
                 n < length as &
                 ?\<Gamma>, ?\<Theta>
                     \<turnstile>\<^bsub>/?F\<^esub> P' b ?Q, ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 22, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 21, t_empty)))),
    ("OG_Soundness.oghoare_Cond",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Cond ?b ?c\<^sub>1 ?c\<^sub>2)
    ?Q, ?A ==>
      EX P' P\<^sub>1 P\<^sub>2 Q' A'.
         ?P = AnnBin P' P\<^sub>1 P\<^sub>2 &
         P' <= {s. (s : ?b --> s : pre P\<^sub>1) &
                   (s ~: ?b --> s : pre P\<^sub>2)} &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>1 ?c\<^sub>1 Q', A' &
         ?\<Gamma>, ?\<Theta>
             \<turnstile>\<^bsub>/?F\<^esub> P\<^sub>2 ?c\<^sub>2 Q', A' &
         Q' <= ?Q & A' <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 12, template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("OG_Soundness.ParallelRuleAnn",
     "[| length ?as = length ?cs;
         ALL i<length ?cs.
            ?\<Gamma>, ?\<Theta>
                \<turnstile>\<^bsub>/?F\<^esub> (fst (?as ! i)) (?cs ! i)
          (fst (snd (?as ! i))), (snd (snd (?as ! i)));
         interfree ?\<Gamma> ?\<Theta> ?F ?as ?cs;
         \<Inter> (set (map (%a. fst (snd a)) ?as)) <= ?Q;
         \<Union> (set (map (%a. snd (snd a)) ?as)) <= ?A |]
      ==> ?\<Gamma>, ?\<Theta>
              \<turnstile>\<^bsub>/?F\<^esub> (AnnPar ?as) (Parallel ?cs)
        ?Q, ?A",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 6),
          template_app (template_hole 18, template_var 5)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, t_empty), template_var 6))),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, t_empty), template_var 6))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app (template_hole 1, template_var 6)),
                 template_app (template_hole 0, template_var 5)),
               template_var 1),
             template_var 0)
           ))),
    ("OG_Soundness.while_relpower_induct",
     "[| ?\<Gamma> \<Turnstile>\<^bsub>/?F\<^esub> ?P ?c ?i, ?A;
         ?i Int ?b <= ?P; ?i Int - ?b <= ?Q; final (?c', ?t); ?x : ?i;
         ?t ~: Fault ` ?F; ?c' = Throw --> ?t ~: Normal ` ?A;
         ?\<Gamma>\<turnstile> (While ?b ?c,
                                Normal ?x) \<rightarrow>\<^sup>n?n
                               (?c', ?t) |]
      ==> ?c' = Skip & ?t : Normal ` ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 18, template_var 7),
            template_var 5),
          template_var 9),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 18, template_var 7),
            template_app (template_hole 17, template_var 5)),
          template_var 4),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 7)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 10))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7)),
              template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 6))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app (template_hole 3, template_var 11)),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 8)),
                  template_app (template_hole 5, template_var 1))),
              template_app
               (template_app (template_hole 15, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_hole 0)),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)))
           ))),
    ("OG_Soundness.oghoare_step",
     "[| ?\<Gamma>\<turnstile> (?c, Normal ?s) \<rightarrow>
                               (?c', Normal ?t);
         ?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?a ?c ?Q, ?A;
         ?s : pre ?a |]
      ==> EX a'.
             ?\<Gamma>, ?\<Theta>
                 \<turnstile>\<^bsub>/?F\<^esub> a' ?c' ?Q, ?A &
             ?t : pre a' &
             (ALL as.
                 assertionsR ?\<Gamma> ?\<Theta> ?Q ?A a' ?c' as -->
                 assertionsR ?\<Gamma> ?\<Theta> ?Q ?A ?a ?c as) &
             (ALL pm cm.
                 atomicsR ?\<Gamma> ?\<Theta> a' ?c' (pm, cm) -->
                 atomicsR ?\<Gamma> ?\<Theta> ?a ?c (pm, cm))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 9),
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app (template_hole 11, template_var 7))),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_app (template_hole 11, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 9),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 8),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app (template_hole 8, template_var 2))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("OG_Soundness.oghoare_steps",
     "[| ?\<Gamma> \<turnstile> (?c, Normal ?s) \<rightarrow>\<^sup>*
                                (?c', Normal ?t);
         ?\<Gamma>, ?\<Theta> \<turnstile>\<^bsub>/?F\<^esub> ?a ?c ?Q, ?A;
         ?s : pre ?a |]
      ==> EX a'.
             ?\<Gamma>, ?\<Theta>
                 \<turnstile>\<^bsub>/?F\<^esub> a' ?c' ?Q, ?A &
             ?t : pre a' &
             (ALL as.
                 assertionsR ?\<Gamma> ?\<Theta> ?Q ?A a' ?c' as -->
                 assertionsR ?\<Gamma> ?\<Theta> ?Q ?A ?a ?c as) &
             (ALL pm cm.
                 atomicsR ?\<Gamma> ?\<Theta> a' ?c' (pm, cm) -->
                 atomicsR ?\<Gamma> ?\<Theta> ?a ?c (pm, cm))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 9)),
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app (template_hole 11, template_var 7))),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_app (template_hole 11, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 9),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 8),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app (template_hole 8, template_var 2))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("OG_Soundness.oghoare_Parallel",
     "?\<Gamma>, ?\<Theta>
          \<turnstile>\<^bsub>/?F\<^esub> ?P (Parallel ?cs) ?Q, ?A ==>
      EX as.
         ?P = AnnPar as &
         length as = length ?cs &
         \<Inter> (set (map (%a. fst (snd a)) as)) <= ?Q &
         \<Union> (set (map (%a. snd (snd a)) as)) <= ?A &
         (ALL i<length ?cs.
             EX Q' A'.
                ?\<Gamma>, ?\<Theta>
                    \<turnstile>\<^bsub>/?F\<^esub> (fst (as ! i)) (?cs ! i)
              Q', A' &
                Q' <= fst (snd (as ! i)) & A' <= snd (snd (as ! i))) &
         interfree ?\<Gamma> ?\<Theta> ?F as ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 24, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_app (template_hole 23, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 22, t_empty))))]:
   (string * thm * template) list
### theory "Draft.OG_SoundnessMoreTemplates"
### 0.404s elapsed time, 0.574s cpu time, 0.063s GC time
val it = (): unit
