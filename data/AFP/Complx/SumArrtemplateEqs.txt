   [("SumArr.word_min_0", "min 0 ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("SumArr.word_min_0", "min ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("SumArr.sumarr_proc_simp", "[ann (lock ?n)] ! 0 = ann (lock ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_hole 1)),
         template_hole 0),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("SumArr.sumarr_proc_simp", "[ann (sumarr ?n)] ! 0 = ann (sumarr ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_hole 1)),
         template_hole 0),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("SumArr.sumarr_proc_simp", "[ann (unlock ?n)] ! 0 = ann (unlock ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_hole 1)),
         template_hole 0),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("SumArr.imp_disjL_context'",
     "((?P --> ?R) & (?Q --> ?R)) = ((?P --> ?R) & (~ ?P & ?Q --> ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 2)),
               template_var 0)),
           template_var 1)))),
    ("SumArr.sumarr_proc_simp_unfolded",
     "[AnnRec
        \<lbrace>(\<acute>lock_inv &
                  \<acute>tarr_inv ?n &
                  \<acute>garr_inv ?n &
                  \<acute>tid ?n = word_of_nat ?n + 1) &
                 \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                 \<acute>glock = 1 &
                 \<acute>ghost_lock ?n &
                 bit \<acute>gdone (unat (\<acute>tid ?n - 1)) &
                 \<acute>sumarr_in_lock2 ?n\<rbrace>
        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))] !
      0 =
      AnnRec
       \<lbrace>(\<acute>lock_inv &
                 \<acute>tarr_inv ?n &
                 \<acute>garr_inv ?n &
                 \<acute>tid ?n = word_of_nat ?n + 1) &
                \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                \<acute>glock = 1 &
                \<acute>ghost_lock ?n &
                bit \<acute>gdone (unat (\<acute>tid ?n - 1)) &
                \<acute>sumarr_in_lock2 ?n\<rbrace>
       (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))",
     template_equation
      (template_app
        (template_app
          (template_hole 40,
           template_app
            (template_app
              (template_hole 39,
               template_app
                (template_app
                  (template_hole 38,
                   template_app (template_hole 37, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_app (template_hole 2, template_hole 1)))),
             template_hole 0)),
         template_hole 30),
       template_app
        (template_app
          (template_hole 38, template_app (template_hole 37, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 2, template_hole 1))))),
    ("SumArr.sumarr_proc_simp_unfolded",
     "[AnnRec
        \<lbrace>(\<acute>lock_inv &
                  \<acute>tarr_inv ?n &
                  \<acute>garr_inv ?n &
                  \<acute>tid ?n = word_of_nat ?n + 1) &
                 \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                 \<acute>sumarr_inv_till_lock ?n\<rbrace>
        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))] !
      0 =
      AnnRec
       \<lbrace>(\<acute>lock_inv &
                 \<acute>tarr_inv ?n &
                 \<acute>garr_inv ?n &
                 \<acute>tid ?n = word_of_nat ?n + 1) &
                \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                \<acute>sumarr_inv_till_lock ?n\<rbrace>
       (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))",
     template_equation
      (template_app
        (template_app
          (template_hole 41,
           template_app
            (template_app
              (template_hole 40,
               template_app
                (template_app
                  (template_hole 39,
                   template_app (template_hole 38, t_empty)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_app (template_hole 2, template_hole 1)))),
             template_hole 0)),
         template_hole 31),
       template_app
        (template_app
          (template_hole 39, template_app (template_hole 38, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 2, template_hole 1))))),
    ("SumArr.sumarr_proc_simp_unfolded",
     "[AnnComp
        (AnnComp
          (AnnComp
            (AnnComp
              (AnnComp
                (AnnComp
                  (AnnExpr
                    \<lbrace>(\<acute>lock_inv &
                              \<acute>tarr_inv ?n &
                              \<acute>garr_inv ?n &
                              \<acute>tid ?n = word_of_nat ?n + 1) &
                             \<acute>sumarr_inv_till_lock ?n\<rbrace>)
                  (AnnExpr
                    \<lbrace>\<acute>tsum ?n = 0 &
                             (\<acute>lock_inv &
                              \<acute>tarr_inv ?n &
                              \<acute>garr_inv ?n &
                              \<acute>tid ?n = word_of_nat ?n + 1) &
                             \<acute>sumarr_inv_till_lock ?n\<rbrace>))
                (AnnComp
                  (AnnWhile
                    \<lbrace>\<acute>tsum ?n = 0 &
                             (\<acute>lock_inv &
                              \<acute>tarr_inv ?n &
                              \<acute>garr_inv ?n &
                              \<acute>tid ?n = word_of_nat ?n + 1) &
                             \<acute>ti ?n = 0 &
                             \<acute>sumarr_inv_till_lock ?n\<rbrace>
                    \<lbrace>(\<acute>lock_inv &
                              \<acute>tarr_inv ?n &
                              \<acute>garr_inv ?n &
                              \<acute>tid ?n = word_of_nat ?n + 1) &
                             \<acute>ti ?n <= NSUM &
                             \<acute>tsum ?n <= MAXSUM &
                             \<acute>tsum ?n =
                             local_sum
                              (take (unat (\<acute>ti ?n))
                                (\<acute>tarr ?n)) &
                             \<acute>sumarr_inv_till_lock ?n\<rbrace>
                    (AnnComp
                      (AnnComp
                        (AnnRec
                          \<lbrace>(\<acute>lock_inv &
                                    \<acute>tarr_inv ?n &
                                    \<acute>garr_inv ?n &
                                    \<acute>tid ?n = word_of_nat ?n + 1) &
                                   \<acute>ti ?n < NSUM &
                                   \<acute>tsum ?n <= MAXSUM &
                                   \<acute>tsum ?n =
                                   local_sum
                                    (take (unat (\<acute>ti ?n))
(\<acute>tarr ?n)) &
                                   \<acute>sumarr_inv_till_lock ?n\<rbrace>
                          (AnnExpr
                            \<lbrace>(\<acute>lock_inv &
\<acute>tarr_inv ?n &
\<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
                                     \<acute>ti ?n < NSUM &
                                     \<acute>tsum ?n <= MAXSUM &
                                     \<acute>tsum ?n =
                                     local_sum
(take (unat (\<acute>ti ?n)) (\<acute>tarr ?n)) &
                                     \<acute>sumarr_inv_till_lock
?n\<rbrace>))
                        (AnnRec
                          \<lbrace>(\<acute>lock_inv &
                                    \<acute>tarr_inv ?n &
                                    \<acute>garr_inv ?n &
                                    \<acute>tid ?n = word_of_nat ?n + 1) &
                                   \<acute>ti ?n < NSUM &
                                   local_sum
                                    (take (unat (\<acute>ti ?n))
(\<acute>tarr ?n))
                                   <= MAXSUM &
                                   (\<acute>tsum ?n < MAXSUM &
                                    array_nth (\<acute>tarr ?n)
                                     (\<acute>ti ?n)
                                    < MAXSUM -->
                                    \<acute>tsum ?n =
                                    local_sum
                                     (take (Suc (unat (\<acute>ti ?n)))
 (\<acute>tarr ?n))) &
                                   (MAXSUM
                                    <= array_nth (\<acute>tarr ?n)
  (\<acute>ti ?n) |
                                    MAXSUM <= \<acute>tsum ?n -->
                                    local_sum (\<acute>tarr ?n) = MAXSUM) &
                                   \<acute>sumarr_inv_till_lock ?n\<rbrace>
                          (AnnBin
                            \<lbrace>(\<acute>lock_inv &
\<acute>tarr_inv ?n &
\<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
                                     \<acute>ti ?n < NSUM &
                                     (\<acute>tsum ?n < MAXSUM &
array_nth (\<acute>tarr ?n) (\<acute>ti ?n) < MAXSUM -->
\<acute>tsum ?n =
local_sum (take (Suc (unat (\<acute>ti ?n))) (\<acute>tarr ?n))) &
                                     (MAXSUM
<= array_nth (\<acute>tarr ?n) (\<acute>ti ?n) |
MAXSUM <= \<acute>tsum ?n -->
local_sum (\<acute>tarr ?n) = MAXSUM) &
                                     \<acute>sumarr_inv_till_lock
?n\<rbrace>
                            (AnnComp
                              (AnnExpr
                                \<lbrace>(\<acute>lock_inv &
    \<acute>tarr_inv ?n &
    \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
   \<acute>ti ?n < NSUM &
   local_sum (\<acute>tarr ?n) = MAXSUM &
   \<acute>sumarr_inv_till_lock ?n\<rbrace>)
                              (AnnExpr
                                \<lbrace>(\<acute>lock_inv &
    \<acute>tarr_inv ?n &
    \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
   \<acute>ti ?n < NSUM &
   \<acute>tsum ?n <= MAXSUM &
   \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
   \<acute>sumarr_inv_till_lock ?n\<rbrace>))
                            (AnnExpr
                              \<lbrace>(\<acute>lock_inv &
  \<acute>tarr_inv ?n &
  \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
 \<acute>ti ?n < NSUM &
 \<acute>tsum ?n <= MAXSUM &
 \<acute>tsum ?n =
 local_sum (take (Suc (unat (\<acute>ti ?n))) (\<acute>tarr ?n)) &
 \<acute>sumarr_inv_till_lock ?n\<rbrace>))))
                      (AnnExpr
                        \<lbrace>(\<acute>lock_inv &
                                  \<acute>tarr_inv ?n &
                                  \<acute>garr_inv ?n &
                                  \<acute>tid ?n = word_of_nat ?n + 1) &
                                 \<acute>ti ?n < NSUM &
                                 \<acute>tsum ?n <= MAXSUM &
                                 \<acute>tsum ?n =
                                 local_sum
                                  (take (Suc (unat (\<acute>ti ?n)))
                                    (\<acute>tarr ?n)) &
                                 \<acute>sumarr_inv_till_lock ?n\<rbrace>)))
                  (AnnExpr
                    \<lbrace>(\<acute>lock_inv &
                              \<acute>tarr_inv ?n &
                              \<acute>garr_inv ?n &
                              \<acute>tid ?n = word_of_nat ?n + 1) &
                             \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                             \<acute>sumarr_inv_till_lock ?n\<rbrace>)))
              (AnnCall
                \<lbrace>(\<acute>lock_inv &
                          \<acute>tarr_inv ?n &
                          \<acute>garr_inv ?n &
                          \<acute>tid ?n = word_of_nat ?n + 1) &
                         \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                         \<acute>sumarr_inv_till_lock ?n\<rbrace>
                0))
            (AnnExpr
              \<lbrace>(\<acute>lock_inv &
                        \<acute>tarr_inv ?n &
                        \<acute>garr_inv ?n &
                        \<acute>tid ?n = word_of_nat ?n + 1) &
                       \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                       \<acute>glock = 1 &
                       \<acute>ghost_lock ?n &
                       \<acute>sumarr_inv_till_lock ?n\<rbrace>))
          (AnnExpr
            \<lbrace>(\<acute>lock_inv &
                      \<acute>tarr_inv ?n &
                      \<acute>garr_inv ?n &
                      \<acute>tid ?n = word_of_nat ?n + 1) &
                     \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                     \<acute>glock = 1 &
                     \<acute>ghost_lock ?n &
                     \<acute>sumarr_in_lock1 ?n\<rbrace>))
        (AnnCall
          \<lbrace>(\<acute>lock_inv &
                    \<acute>tarr_inv ?n &
                    \<acute>garr_inv ?n &
                    \<acute>tid ?n = word_of_nat ?n + 1) &
                   \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                   \<acute>glock = 1 &
                   \<acute>ghost_lock ?n &
                   bit \<acute>gdone (unat (\<acute>tid ?n - 1)) &
                   \<acute>sumarr_in_lock2 ?n\<rbrace>
          0)] !
      0 =
      AnnComp
       (AnnComp
         (AnnComp
           (AnnComp
             (AnnComp
               (AnnComp
                 (AnnExpr
                   \<lbrace>(\<acute>lock_inv &
                             \<acute>tarr_inv ?n &
                             \<acute>garr_inv ?n &
                             \<acute>tid ?n = word_of_nat ?n + 1) &
                            \<acute>sumarr_inv_till_lock ?n\<rbrace>)
                 (AnnExpr
                   \<lbrace>\<acute>tsum ?n = 0 &
                            (\<acute>lock_inv &
                             \<acute>tarr_inv ?n &
                             \<acute>garr_inv ?n &
                             \<acute>tid ?n = word_of_nat ?n + 1) &
                            \<acute>sumarr_inv_till_lock ?n\<rbrace>))
               (AnnComp
                 (AnnWhile
                   \<lbrace>\<acute>tsum ?n = 0 &
                            (\<acute>lock_inv &
                             \<acute>tarr_inv ?n &
                             \<acute>garr_inv ?n &
                             \<acute>tid ?n = word_of_nat ?n + 1) &
                            \<acute>ti ?n = 0 &
                            \<acute>sumarr_inv_till_lock ?n\<rbrace>
                   \<lbrace>(\<acute>lock_inv &
                             \<acute>tarr_inv ?n &
                             \<acute>garr_inv ?n &
                             \<acute>tid ?n = word_of_nat ?n + 1) &
                            \<acute>ti ?n <= NSUM &
                            \<acute>tsum ?n <= MAXSUM &
                            \<acute>tsum ?n =
                            local_sum
                             (take (unat (\<acute>ti ?n))
                               (\<acute>tarr ?n)) &
                            \<acute>sumarr_inv_till_lock ?n\<rbrace>
                   (AnnComp
                     (AnnComp
                       (AnnRec
                         \<lbrace>(\<acute>lock_inv &
                                   \<acute>tarr_inv ?n &
                                   \<acute>garr_inv ?n &
                                   \<acute>tid ?n = word_of_nat ?n + 1) &
                                  \<acute>ti ?n < NSUM &
                                  \<acute>tsum ?n <= MAXSUM &
                                  \<acute>tsum ?n =
                                  local_sum
                                   (take (unat (\<acute>ti ?n))
                                     (\<acute>tarr ?n)) &
                                  \<acute>sumarr_inv_till_lock ?n\<rbrace>
                         (AnnExpr
                           \<lbrace>(\<acute>lock_inv &
                                     \<acute>tarr_inv ?n &
                                     \<acute>garr_inv ?n &
                                     \<acute>tid ?n = word_of_nat ?n + 1) &
                                    \<acute>ti ?n < NSUM &
                                    \<acute>tsum ?n <= MAXSUM &
                                    \<acute>tsum ?n =
                                    local_sum
                                     (take (unat (\<acute>ti ?n))
 (\<acute>tarr ?n)) &
                                    \<acute>sumarr_inv_till_lock
                                     ?n\<rbrace>))
                       (AnnRec
                         \<lbrace>(\<acute>lock_inv &
                                   \<acute>tarr_inv ?n &
                                   \<acute>garr_inv ?n &
                                   \<acute>tid ?n = word_of_nat ?n + 1) &
                                  \<acute>ti ?n < NSUM &
                                  local_sum
                                   (take (unat (\<acute>ti ?n))
                                     (\<acute>tarr ?n))
                                  <= MAXSUM &
                                  (\<acute>tsum ?n < MAXSUM &
                                   array_nth (\<acute>tarr ?n)
                                    (\<acute>ti ?n)
                                   < MAXSUM -->
                                   \<acute>tsum ?n =
                                   local_sum
                                    (take (Suc (unat (\<acute>ti ?n)))
(\<acute>tarr ?n))) &
                                  (MAXSUM
                                   <= array_nth (\<acute>tarr ?n)
 (\<acute>ti ?n) |
                                   MAXSUM <= \<acute>tsum ?n -->
                                   local_sum (\<acute>tarr ?n) = MAXSUM) &
                                  \<acute>sumarr_inv_till_lock ?n\<rbrace>
                         (AnnBin
                           \<lbrace>(\<acute>lock_inv &
                                     \<acute>tarr_inv ?n &
                                     \<acute>garr_inv ?n &
                                     \<acute>tid ?n = word_of_nat ?n + 1) &
                                    \<acute>ti ?n < NSUM &
                                    (\<acute>tsum ?n < MAXSUM &
                                     array_nth (\<acute>tarr ?n)
(\<acute>ti ?n)
                                     < MAXSUM -->
                                     \<acute>tsum ?n =
                                     local_sum
(take (Suc (unat (\<acute>ti ?n))) (\<acute>tarr ?n))) &
                                    (MAXSUM
                                     <= array_nth (\<acute>tarr ?n)
   (\<acute>ti ?n) |
                                     MAXSUM <= \<acute>tsum ?n -->
                                     local_sum (\<acute>tarr ?n) = MAXSUM) &
                                    \<acute>sumarr_inv_till_lock ?n\<rbrace>
                           (AnnComp
                             (AnnExpr
                               \<lbrace>(\<acute>lock_inv &
   \<acute>tarr_inv ?n &
   \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
  \<acute>ti ?n < NSUM &
  local_sum (\<acute>tarr ?n) = MAXSUM &
  \<acute>sumarr_inv_till_lock ?n\<rbrace>)
                             (AnnExpr
                               \<lbrace>(\<acute>lock_inv &
   \<acute>tarr_inv ?n &
   \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
  \<acute>ti ?n < NSUM &
  \<acute>tsum ?n <= MAXSUM &
  \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
  \<acute>sumarr_inv_till_lock ?n\<rbrace>))
                           (AnnExpr
                             \<lbrace>(\<acute>lock_inv &
 \<acute>tarr_inv ?n &
 \<acute>garr_inv ?n & \<acute>tid ?n = word_of_nat ?n + 1) &
\<acute>ti ?n < NSUM &
\<acute>tsum ?n <= MAXSUM &
\<acute>tsum ?n =
local_sum (take (Suc (unat (\<acute>ti ?n))) (\<acute>tarr ?n)) &
\<acute>sumarr_inv_till_lock ?n\<rbrace>))))
                     (AnnExpr
                       \<lbrace>(\<acute>lock_inv &
                                 \<acute>tarr_inv ?n &
                                 \<acute>garr_inv ?n &
                                 \<acute>tid ?n = word_of_nat ?n + 1) &
                                \<acute>ti ?n < NSUM &
                                \<acute>tsum ?n <= MAXSUM &
                                \<acute>tsum ?n =
                                local_sum
                                 (take (Suc (unat (\<acute>ti ?n)))
                                   (\<acute>tarr ?n)) &
                                \<acute>sumarr_inv_till_lock ?n\<rbrace>)))
                 (AnnExpr
                   \<lbrace>(\<acute>lock_inv &
                             \<acute>tarr_inv ?n &
                             \<acute>garr_inv ?n &
                             \<acute>tid ?n = word_of_nat ?n + 1) &
                            \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                            \<acute>sumarr_inv_till_lock ?n\<rbrace>)))
             (AnnCall
               \<lbrace>(\<acute>lock_inv &
                         \<acute>tarr_inv ?n &
                         \<acute>garr_inv ?n &
                         \<acute>tid ?n = word_of_nat ?n + 1) &
                        \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                        \<acute>sumarr_inv_till_lock ?n\<rbrace>
               0))
           (AnnExpr
             \<lbrace>(\<acute>lock_inv &
                       \<acute>tarr_inv ?n &
                       \<acute>garr_inv ?n &
                       \<acute>tid ?n = word_of_nat ?n + 1) &
                      \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                      \<acute>glock = 1 &
                      \<acute>ghost_lock ?n &
                      \<acute>sumarr_inv_till_lock ?n\<rbrace>))
         (AnnExpr
           \<lbrace>(\<acute>lock_inv &
                     \<acute>tarr_inv ?n &
                     \<acute>garr_inv ?n &
                     \<acute>tid ?n = word_of_nat ?n + 1) &
                    \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                    \<acute>glock = 1 &
                    \<acute>ghost_lock ?n &
                    \<acute>sumarr_in_lock1 ?n\<rbrace>))
       (AnnCall
         \<lbrace>(\<acute>lock_inv &
                   \<acute>tarr_inv ?n &
                   \<acute>garr_inv ?n &
                   \<acute>tid ?n = word_of_nat ?n + 1) &
                  \<acute>tsum ?n = local_sum (\<acute>tarr ?n) &
                  \<acute>glock = 1 &
                  \<acute>ghost_lock ?n &
                  bit \<acute>gdone (unat (\<acute>tid ?n - 1)) &
                  \<acute>sumarr_in_lock2 ?n\<rbrace>
         0)",
     template_equation
      (template_app
        (template_app
          (template_hole 53,
           template_app
            (template_app
              (template_hole 52,
               template_app
                (template_app
                  (template_hole 51,
                   template_app
                    (template_app
                      (template_hole 51,
                       template_app
                        (template_app
                          (template_hole 51,
                           template_app
                            (template_app
                              (template_hole 51,
                               template_app
                                (template_app
                                  (template_hole 51,
                                   template_app
                                    (template_app
(template_hole 51,
 template_app (template_hole 50, template_app (template_hole 49, t_empty))),
                                     template_app
(template_hole 50, template_app (template_hole 49, t_empty)))),
                                 template_app
                                  (template_app
                                    (template_hole 51,
                                     template_app
(template_app
  (template_app
    (template_hole 15, template_app (template_hole 49, t_empty)),
   template_app (template_hole 49, t_empty)),
 template_app
  (template_app
    (template_hole 51,
     template_app
      (template_app
        (template_hole 51,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 49, t_empty)),
           template_app
            (template_hole 50, template_app (template_hole 49, t_empty)))),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 49, t_empty)),
         template_app
          (template_app
            (template_app
              (template_hole 5, template_app (template_hole 49, t_empty)),
             template_app
              (template_app
                (template_hole 51,
                 template_app
                  (template_hole 50,
                   template_app (template_hole 49, t_empty))),
               template_app
                (template_hole 50,
                 template_app (template_hole 49, t_empty)))),
           template_app
            (template_hole 50,
             template_app (template_hole 49, t_empty)))))),
   template_app
    (template_hole 50, template_app (template_hole 49, t_empty))))),
                                   template_app
                                    (template_hole 50,
                                     template_app
(template_hole 49, t_empty))))),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app (template_hole 49, t_empty)),
                               template_hole 42))),
                         template_app
                          (template_hole 50,
                           template_app (template_hole 49, t_empty)))),
                     template_app
                      (template_hole 50,
                       template_app (template_hole 49, t_empty)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 49, t_empty)),
                   template_hole 42))),
             template_hole 0)),
         template_hole 42),
       template_app
        (template_app
          (template_hole 51,
           template_app
            (template_app
              (template_hole 51,
               template_app
                (template_app
                  (template_hole 51,
                   template_app
                    (template_app
                      (template_hole 51,
                       template_app
                        (template_app
                          (template_hole 51,
                           template_app
                            (template_app
                              (template_hole 51,
                               template_app
                                (template_hole 50,
                                 template_app (template_hole 49, t_empty))),
                             template_app
                              (template_hole 50,
                               template_app (template_hole 49, t_empty)))),
                         template_app
                          (template_app
                            (template_hole 51,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 15,
                                   template_app
                                    (template_hole 49, t_empty)),
                                 template_app (template_hole 49, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 51,
                                   template_app
                                    (template_app
(template_hole 51,
 template_app
  (template_app (template_hole 9, template_app (template_hole 49, t_empty)),
   template_app
    (template_hole 50, template_app (template_hole 49, t_empty)))),
                                     template_app
(template_app (template_hole 9, template_app (template_hole 49, t_empty)),
 template_app
  (template_app
    (template_app
      (template_hole 5, template_app (template_hole 49, t_empty)),
     template_app
      (template_app
        (template_hole 51,
         template_app
          (template_hole 50, template_app (template_hole 49, t_empty))),
       template_app
        (template_hole 50, template_app (template_hole 49, t_empty)))),
   template_app
    (template_hole 50, template_app (template_hole 49, t_empty)))))),
                                 template_app
                                  (template_hole 50,
                                   template_app
                                    (template_hole 49, t_empty))))),
                           template_app
                            (template_hole 50,
                             template_app (template_hole 49, t_empty))))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 49, t_empty)),
                       template_hole 42))),
                 template_app
                  (template_hole 50,
                   template_app (template_hole 49, t_empty)))),
             template_app
              (template_hole 50,
               template_app (template_hole 49, t_empty)))),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 49, t_empty)),
           template_hole 42))))]
