Loading theory "Draft.Cache_Tactics" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Tactics")
Loading theory "Draft.Language" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Hoare" via "Draft.OG_Annotations" via "Draft.SmallStep")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CACHE_TACTICS =
  sig
    val PARALLEL_GOALS_CACHE: cache_id -> tactic -> tactic
    val SUBGOAL_CACHE: cache_id -> (term * int -> tactic) -> int -> tactic
    eqtype cache_id
    val cacheify_tactic:
       int ->
         (Proof.context * cache_id list -> int -> tactic) ->
           Proof.context -> int -> tactic
    val clear_subgoal_cache: cache_id -> unit
    val new_subgoal_cache: unit -> cache_id
  end
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
structure Cache_Tactics: CACHE_TACTICS
### theory "Draft.Cache_Tactics"
### 0.065s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.566s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.318s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.291s elapsed time, 1.129s cpu time, 0.131s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.056s elapsed time, 4.007s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.084s elapsed time, 4.059s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 6.628s cpu time, 1.165s GC time
Loading theory "Draft.Templates" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.164s cpu time, 0.054s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OG_SyntaxMoreTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
### theory "Draft.Language"
### 2.519s elapsed time, 7.791s cpu time, 1.254s GC time
Loading theory "Draft.SmallStep" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Hoare" via "Draft.OG_Annotations")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.128s cpu time, 0.091s GC time
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  atom_com :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 4.000s elapsed time, 5.145s cpu time, 0.961s GC time
Loading theory "Draft.OG_Annotations" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Hoare")
Loading theory "Draft.SeqCatch_decomp" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Tactics" via "Draft.OG_Soundness")
### theory "Draft.SeqCatch_decomp"
### 0.182s elapsed time, 0.404s cpu time, 0.048s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "ann_matches"
  Proving monotonicity ...
consts
  ann_guards ::
    "'s set => ('f * 's set) list => ('s, 'p, 'f) ann => ('s, 'p, 'f) ann"
### theory "Draft.OG_Annotations"
### 1.699s elapsed time, 2.687s cpu time, 1.027s GC time
Loading theory "Draft.OG_Hoare" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax")
Proofs for inductive predicate(s) "atomicsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "assertionsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oghoare", "oghoare_seq"
  Proving monotonicity ...
### theory "Draft.OG_Hoare"
### 0.809s elapsed time, 0.917s cpu time, 0.102s GC time
Loading theory "Draft.OG_Soundness" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax" via "Draft.OG_Tactics")
### Ambiguous input (line 101 of "$AFP/Complx/OG_Soundness.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>Set.subset_eq"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.subset_eq" ("_position" Q')
###                         ("_position" Q))
###                       ("_position" A')))))
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("_applC" ("_position" atom_com) ("_position" c))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq" ("_position" Q') ("_position" Q))
###                 ("\<^const>Set.subset_eq" ("_position" A')
###                   ("_position" A))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###               ("_position" \<Theta>) ("_position" F)
###               ("\<^const>Set.inter" ("_position" r) ("_position" b))
###               ("_position" P') ("_position" c) ("_position" Q')
###               ("\<^const>HOL.conj" ("_position" A')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" atom_com) ("_position" c))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q))
###                     ("\<^const>Set.subset_eq" ("_position" A')
###                       ("_position" A))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("_position" A'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" atom_com) ("_position" c))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.subset_eq" ("_position" Q')
###                     ("_position" Q))
###                   ("\<^const>Set.subset_eq" ("_position" A')
###                     ("_position" A)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q)))))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq"
###                 ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                   ("_position" \<Theta>) ("_position" F)
###                   ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                   ("_position" P') ("_position" c) ("_position" Q')
###                   ("\<^const>HOL.conj" ("_position" A')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" atom_com) ("_position" c))
###                       ("_position" Q'))))
###                 ("_position" Q))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1754 of "$AFP/Complx/OG_Soundness.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P')
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_position" P') ("_position" c) ("_position" Q) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P')
###       ("_position" P) ("_position" c) ("_position" Q)
###       ("\<^const>HOL.implies" ("_position" A)
###         ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###           ("_position" P') ("_position" c) ("_position" Q)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.OG_Soundness"
### 0.476s elapsed time, 0.608s cpu time, 0.181s GC time
Loading theory "Draft.OG_Tactics" (required by "Draft.OG_SyntaxMoreTemplates" via "Draft.OG_Syntax")
val hyp_tac = fn: int -> tactic
val remove_single_Bound_mem = fn: Proof.context -> int -> tactic
### ML warning (line 598 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 605 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 614 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 623 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 633 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
val rt = fn: Proof.context -> thm -> int -> tactic
val rts = fn: Proof.context -> thm list -> int -> tactic
val conjI_Tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val get_oghoare_simps = fn: Proof.context -> thm list
val simp = fn: Proof.context -> thm list -> int -> tactic
val simp_only = fn: Proof.context -> thm list -> int -> tactic
val prod_sel_simp = fn: Proof.context -> int -> tactic
val oghoare_simp = fn: Proof.context -> int -> tactic
val ParallelConseq = fn: Proof.context -> int -> tactic
val enable_trace = false: bool
val trace = fn: string -> unit
val HoareRuleTac = fn: Proof.context * int list -> int -> tactic
val Call_asm_inst = fn: Proof.context -> int -> tactic
val ParallelTac = fn: Proof.context * int list -> int -> tactic
val MapAnn_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_swap_Tac = fn: Proof.context * int list -> int -> tactic
val inter_aux_Par_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_aux_Tac = fn: Proof.context * int list -> int -> tactic
val dest_inter_aux_Tac = fn: Proof.context * int list -> int -> tactic
val dest_inter_right_Tac = fn: Proof.context * int list -> int -> tactic
val oghoare_tac = fn: Proof.context -> int -> tactic
val oghoare_tac' = fn: Proof.context -> int -> thm -> thm Seq.seq
val oghoare_parallel_tac = fn: Proof.context -> int -> tactic
val oghoare_interfree_tac = fn: Proof.context -> int -> tactic
val oghoare_interfree_aux_tac = fn: Proof.context -> int -> tactic
### theory "Draft.OG_Tactics"
### 0.680s elapsed time, 0.712s cpu time, 0.044s GC time
Loading theory "Draft.OG_Syntax" (required by "Draft.OG_SyntaxMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
val syntax_debug = false: bool
### theory "Draft.OG_Syntax"
### 0.406s elapsed time, 0.422s cpu time, 0.023s GC time
Loading theory "Draft.OG_SyntaxMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.OG_SyntaxMoreTemplates"
### 0.382s elapsed time, 0.556s cpu time, 0.084s GC time
val it = (): unit
