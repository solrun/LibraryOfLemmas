Loading theory "Draft.Language" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.SeqCatch_decomp" via "Draft.SmallStep")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.517s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.082s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.376s elapsed time, 1.500s cpu time, 0.161s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.041s elapsed time, 3.885s cpu time, 0.937s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.163s elapsed time, 4.198s cpu time, 1.018s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.090s elapsed time, 6.639s cpu time, 1.332s GC time
Loading theory "Draft.Templates" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SeqCatch_decompMoreTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
### theory "Draft.Language"
### 2.829s elapsed time, 8.671s cpu time, 2.113s GC time
Loading theory "Draft.SmallStep" (required by "Draft.SeqCatch_decompMoreTemplates" via "Draft.SeqCatch_decomp")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.788s elapsed time, 1.863s cpu time, 0.735s GC time
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  atom_com :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 3.963s elapsed time, 4.589s cpu time, 0.321s GC time
Loading theory "Draft.SeqCatch_decomp" (required by "Draft.SeqCatch_decompMoreTemplates")
### theory "Draft.SeqCatch_decomp"
### 0.164s elapsed time, 0.196s cpu time, 0.000s GC time
Loading theory "Draft.SeqCatch_decompMoreTemplates"
val templateLemmas =
   [("SeqCatch_decomp.redex_size", "redex ?c = ?r ==> size ?r <= size ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SeqCatch_decomp.Throw_star",
     "?\<Gamma> \<turnstile> (Throw, Normal ?s) \<rightarrow>\<^sup>*
                             ?cfg\<^sub>2 ==>
      ?cfg\<^sub>2 = (Throw, Normal ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1))))),
    ("SeqCatch_decomp.Normal_pre",
     "?\<Gamma>\<turnstile> (?p, ?s) \<rightarrow> (?p', Normal ?u) ==>
      EX v. ?s = Normal v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SeqCatch_decomp.Catch_decomp_Skip",
     "?\<Gamma>\<turnstile> (Catch Skip ?p\<^sub>2, ?s) \<rightarrow>
                            (?p', ?s') ==>
      ?s' = ?s & ?p' = Skip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 3))
           ))),
    ("SeqCatch_decomp.Seq_decomp_Skip",
     "?\<Gamma>\<turnstile> (Seq Skip ?p\<^sub>2, ?s) \<rightarrow>
                            (?p', ?s') ==>
      ?s' = ?s & ?p' = ?p\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("SeqCatch_decomp.Normal_pre_star",
     "?\<Gamma> \<turnstile> ?cfg\<^sub>1 \<rightarrow>\<^sup>*
                             (?p', Normal ?t) ==>
      EX p s. ?cfg\<^sub>1 = (p, Normal s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SeqCatch_decomp.Seq_decomp_Throw",
     "?\<Gamma>\<turnstile> (Seq Throw ?p\<^sub>2, Normal ?z) \<rightarrow>
                            (?p', ?s') ==>
      ?s' = Normal ?z & ?p' = Throw",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_var 3)),
                  template_app (template_hole 3, template_var 2))),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 4))
           ))),
    ("SeqCatch_decomp.Catch_decomp",
     "[| ?\<Gamma>\<turnstile> (Catch ?p\<^sub>1 ?p\<^sub>2,
                                ?s) \<rightarrow>
                               (?p', ?s');
         ?p\<^sub>1 ~= Skip; ?p\<^sub>1 ~= Throw |]
      ==> EX p\<^sub>1'.
             ?\<Gamma>\<turnstile> (?p\<^sub>1, ?s) \<rightarrow>
                                   (p\<^sub>1', ?s') &
             ?p' = Catch p\<^sub>1' ?p\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 3)),
        template_negation
         (template_equation (template_var 4, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SeqCatch_decomp.Seq_decomp",
     "[| ?\<Gamma>\<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2, ?s) \<rightarrow>
                               (?p', ?s');
         ?p\<^sub>1 ~= Skip; ?p\<^sub>1 ~= Throw |]
      ==> EX p\<^sub>1'.
             ?\<Gamma>\<turnstile> (?p\<^sub>1, ?s) \<rightarrow>
                                   (p\<^sub>1', ?s') &
             ?p' = Seq p\<^sub>1' ?p\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 3)),
        template_negation
         (template_equation (template_var 4, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SeqCatch_decomp.Catch_decomp_star_Stuck",
     "?\<Gamma> \<turnstile> (Catch ?p\<^sub>1 ?p\<^sub>2,
                              Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Stuck) ==>
      ?\<Gamma> \<turnstile> (?p\<^sub>1, Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Stuck) |
      (EX s'.
          ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Throw, Normal s') &
          ?\<Gamma> \<turnstile> (?p\<^sub>2,
                                  Normal s') \<rightarrow>\<^sup>*
                                 (Skip, Stuck))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1)),
                  template_app (template_hole 6, template_var 0))),
              template_app
               (template_app (template_hole 8, template_hole 5),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 3)),
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_app (template_hole 6, template_var 0))),
                 template_app
                  (template_app (template_hole 8, template_hole 5),
                   template_hole 4))),
             template_app (template_hole 2, t_empty))
           ))),
    ("SeqCatch_decomp.Seq_decomp_star_Stuck",
     "?\<Gamma> \<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                              Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Stuck) ==>
      ?\<Gamma> \<turnstile> (?p\<^sub>1, Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Stuck) |
      (EX s'.
          ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Skip, Normal s') &
          ?\<Gamma> \<turnstile> (?p\<^sub>2,
                                  Normal s') \<rightarrow>\<^sup>*
                                 (Skip, Stuck))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 3)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_app (template_hole 5, template_var 0))),
              template_app
               (template_app (template_hole 7, template_hole 4),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 3)),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_app (template_hole 5, template_var 0))),
                 template_app
                  (template_app (template_hole 7, template_hole 4),
                   template_hole 3))),
             template_app (template_hole 1, t_empty))
           ))),
    ("SeqCatch_decomp.Catch_decomp_star_Fault",
     "?\<Gamma> \<turnstile> (Catch ?p\<^sub>1 ?p\<^sub>2,
                              Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Fault ?f) ==>
      ?\<Gamma> \<turnstile> (?p\<^sub>1, Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Fault ?f) |
      (EX s'.
          ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Throw, Normal s') &
          ?\<Gamma> \<turnstile> (?p\<^sub>2,
                                  Normal s') \<rightarrow>\<^sup>*
                                 (Skip, Fault ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 4)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)),
                  template_app (template_hole 6, template_var 1))),
              template_app
               (template_app (template_hole 8, template_hole 5),
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 4)),
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_app (template_hole 6, template_var 1))),
                 template_app
                  (template_app (template_hole 8, template_hole 5),
                   template_app (template_hole 4, template_var 0)))),
             template_app (template_hole 2, t_empty))
           ))),
    ("SeqCatch_decomp.Seq_decomp_star_Fault",
     "?\<Gamma> \<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                              Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Fault ?f) ==>
      ?\<Gamma> \<turnstile> (?p\<^sub>1, Normal ?s) \<rightarrow>\<^sup>*
                             (Skip, Fault ?f) |
      (EX s'.
          ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Skip, Normal s') &
          ?\<Gamma> \<turnstile> (?p\<^sub>2,
                                  Normal s') \<rightarrow>\<^sup>*
                                 (Skip, Fault ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)),
                  template_app (template_hole 5, template_var 1))),
              template_app
               (template_app (template_hole 7, template_hole 4),
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 4)),
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app (template_hole 5, template_var 1))),
                 template_app
                  (template_app (template_hole 7, template_hole 4),
                   template_app (template_hole 3, template_var 0)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("SeqCatch_decomp.Catch_decomp_star",
     "[| ?\<Gamma> \<turnstile> (Catch ?p\<^sub>1 ?p\<^sub>2,
                                 Normal ?s) \<rightarrow>\<^sup>*
                                (?p', Normal ?s');
         final (?p', Normal ?s') |]
      ==> (EX t. ?\<Gamma> \<turnstile> (?p\<^sub>1,
   Normal ?s) \<rightarrow>\<^sup>*
  (Throw, Normal t) &
                 ?\<Gamma> \<turnstile> (?p\<^sub>2,
   Normal t) \<rightarrow>\<^sup>*
  (?p', Normal ?s')) |
          ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Skip, Normal ?s') &
          ?p' = Skip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 5)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)),
                  template_app (template_hole 7, template_var 2))),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 7, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 7, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 5)),
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_app (template_hole 7, template_var 2))),
                   template_app
                    (template_app (template_hole 9, template_hole 1),
                     template_app (template_hole 7, template_var 0)))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 1)))
           ))),
    ("SeqCatch_decomp.Seq_decomp_star",
     "[| ?\<Gamma> \<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                                 Normal ?s) \<rightarrow>\<^sup>*
                                (?p', Normal ?s');
         final (?p', Normal ?s') |]
      ==> ?\<Gamma> \<turnstile> (?p\<^sub>1,
                                  Normal ?s) \<rightarrow>\<^sup>*
                                 (Throw, Normal ?s') &
          ?p' = Throw |
          (EX t. ?\<Gamma> \<turnstile> (?p\<^sub>1,
   Normal ?s) \<rightarrow>\<^sup>*
  (Skip, Normal t) &
                 ?\<Gamma> \<turnstile> (?p\<^sub>2,
   Normal t) \<rightarrow>\<^sup>*
  (?p', Normal ?s'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 5)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)),
                  template_app (template_hole 7, template_var 2))),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 7, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 7, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 5)),
                       template_app
                        (template_app (template_hole 9, template_var 4),
                         template_app (template_hole 7, template_var 2))),
                     template_app
                      (template_app (template_hole 9, template_hole 3),
                       template_app (template_hole 7, template_var 0)))),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 3))),
             template_app (template_hole 1, t_empty))
           ))),
    ("SeqCatch_decomp.Seq_decomp_relpowp_Stuck",
     "?\<Gamma>\<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                             Normal ?s) \<rightarrow>\<^sup>n?n
                            (Skip, Stuck) ==>
      (EX n1.
          ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                 Normal ?s) \<rightarrow>\<^sup>nn1
                                (Skip, Stuck)) |
      (EX t n1 n2.
          ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                 Normal ?s) \<rightarrow>\<^sup>nn1
                                (Skip, Normal t) &
          n1 < ?n &
          n2 < ?n &
          ?\<Gamma>\<turnstile> (?p\<^sub>2,
                                 Normal t) \<rightarrow>\<^sup>nn2
                                (Skip, Stuck))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app (template_hole 10, template_var 3)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 1)),
                  template_app (template_hole 7, template_var 0))),
              template_app
               (template_app (template_hole 9, template_hole 6),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("SeqCatch_decomp.Seq_decomp_relpowp_Fault",
     "?\<Gamma>\<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                             Normal ?s) \<rightarrow>\<^sup>n?n
                            (Skip, Fault ?f) ==>
      (EX n1.
          ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                 Normal ?s) \<rightarrow>\<^sup>nn1
                                (Skip, Fault ?f)) |
      (EX t n1 n2.
          ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                 Normal ?s) \<rightarrow>\<^sup>nn1
                                (Skip, Normal t) &
          n1 < ?n &
          n2 < ?n &
          ?\<Gamma>\<turnstile> (?p\<^sub>2,
                                 Normal t) \<rightarrow>\<^sup>nn2
                                (Skip, Fault ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app (template_hole 10, template_var 4)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_app (template_hole 7, template_var 1))),
              template_app
               (template_app (template_hole 9, template_hole 6),
                template_app (template_hole 5, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("SeqCatch_decomp.Seq_decomp_relpow",
     "[| ?\<Gamma>\<turnstile> (Seq ?p\<^sub>1 ?p\<^sub>2,
                                Normal ?s) \<rightarrow>\<^sup>n?n
                               (?p', Normal ?s');
         final (?p', Normal ?s') |]
      ==> (EX n1<?n.
              ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                     Normal ?s) \<rightarrow>\<^sup>nn1
                                    (Throw, Normal ?s')) &
          ?p' = Throw |
          (EX t n1 n2.
              ?\<Gamma>\<turnstile> (?p\<^sub>1,
                                     Normal ?s) \<rightarrow>\<^sup>nn1
                                    (Skip, Normal t) &
              n1 < ?n &
              n2 < ?n &
              ?\<Gamma>\<turnstile> (?p\<^sub>2,
                                     Normal t) \<rightarrow>\<^sup>nn2
                                    (?p', Normal ?s'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 6),
                  template_app (template_hole 12, template_var 5)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 3)),
                  template_app (template_hole 9, template_var 2))),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app (template_hole 9, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app (template_hole 9, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 3))),
             template_app (template_hole 1, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.SeqCatch_decompMoreTemplates"
### 0.351s elapsed time, 0.513s cpu time, 0.051s GC time
val it = (): unit
