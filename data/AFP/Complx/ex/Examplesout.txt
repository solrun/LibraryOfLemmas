Loading theory "Draft.Cache_Tactics" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Tactics")
Loading theory "Draft.Language" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Hoare" via "Draft.OG_Annotations" via "Draft.SmallStep")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CACHE_TACTICS =
  sig
    val PARALLEL_GOALS_CACHE: cache_id -> tactic -> tactic
    val SUBGOAL_CACHE: cache_id -> (term * int -> tactic) -> int -> tactic
    eqtype cache_id
    val cacheify_tactic:
       int ->
         (Proof.context * cache_id list -> int -> tactic) ->
           Proof.context -> int -> tactic
    val clear_subgoal_cache: cache_id -> unit
    val new_subgoal_cache: unit -> cache_id
  end
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
structure Cache_Tactics: CACHE_TACTICS
### theory "Draft.Cache_Tactics"
### 0.074s elapsed time, 0.326s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.628s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.897s cpu time, 0.149s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.369s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.767s cpu time, 0.870s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.082s elapsed time, 3.988s cpu time, 0.870s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.326s cpu time, 1.208s GC time
Loading theory "Draft.Templates" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExamplesMoreTemplates")
consts
  switch ::
    "('s => 'v) => ('v set * ('s, 'p, 'f) com) list => ('s, 'p, 'f) com"
consts
  guards :: "('f * 's set) list => ('s, 'p, 'f) com => ('s, 'p, 'f) com"
### theory "Draft.Language"
### 2.528s elapsed time, 7.720s cpu time, 1.307s GC time
Loading theory "Draft.SmallStep" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Hoare" via "Draft.OG_Annotations")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.144s cpu time, 0.111s GC time
consts
  redex :: "('s, 'p, 'f) com => ('s, 'p, 'f) com"
consts
  atom_com :: "('s, 'p, 'f) com => bool"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 3.893s elapsed time, 4.486s cpu time, 0.302s GC time
Loading theory "Draft.OG_Annotations" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Hoare")
Loading theory "Draft.SeqCatch_decomp" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Tactics" via "Draft.OG_Soundness")
### theory "Draft.SeqCatch_decomp"
### 0.183s elapsed time, 0.412s cpu time, 0.054s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "ann_matches"
  Proving monotonicity ...
consts
  ann_guards ::
    "'s set => ('f * 's set) list => ('s, 'p, 'f) ann => ('s, 'p, 'f) ann"
### theory "Draft.OG_Annotations"
### 1.344s elapsed time, 1.750s cpu time, 0.197s GC time
Loading theory "Draft.OG_Hoare" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax")
Proofs for inductive predicate(s) "atomicsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "assertionsR"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oghoare", "oghoare_seq"
  Proving monotonicity ...
### theory "Draft.OG_Hoare"
### 0.805s elapsed time, 0.904s cpu time, 0.084s GC time
Loading theory "Draft.OG_Soundness" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax" via "Draft.OG_Tactics")
### Ambiguous input (line 101 of "$AFP/Complx/OG_Soundness.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>Set.subset_eq"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Set.subset_eq" ("_position" Q')
###                         ("_position" Q))
###                       ("_position" A')))))
###               ("_position" A))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("_applC" ("_position" atom_com) ("_position" c))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.subset_eq" ("_position" Q') ("_position" Q))
###                 ("\<^const>Set.subset_eq" ("_position" A')
###                   ("_position" A))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###               ("_position" \<Theta>) ("_position" F)
###               ("\<^const>Set.inter" ("_position" r) ("_position" b))
###               ("_position" P') ("_position" c) ("_position" Q')
###               ("\<^const>HOL.conj" ("_position" A')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" atom_com) ("_position" c))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q))
###                     ("\<^const>Set.subset_eq" ("_position" A')
###                       ("_position" A))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("_position" A'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" atom_com) ("_position" c))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.subset_eq" ("_position" Q')
###                     ("_position" Q))
###                   ("\<^const>Set.subset_eq" ("_position" A')
###                     ("_position" A)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                 ("_position" \<Theta>) ("_position" F)
###                 ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                 ("_position" P') ("_position" c) ("_position" Q')
###                 ("\<^const>HOL.conj" ("_position" A')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" atom_com) ("_position" c))
###                     ("\<^const>Set.subset_eq" ("_position" Q')
###                       ("_position" Q)))))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P) ("_position" x)
###       ("_position" Q) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" x)
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" P')
###               ("_idts" ("_position" Q') ("_position" A'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" P)
###               ("_applC" ("_position" AnnRec)
###                 ("_cargs" ("_position" r) ("_position" P'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.subset_eq"
###                 ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###                   ("_position" \<Theta>) ("_position" F)
###                   ("\<^const>Set.inter" ("_position" r) ("_position" b))
###                   ("_position" P') ("_position" c) ("_position" Q')
###                   ("\<^const>HOL.conj" ("_position" A')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" atom_com) ("_position" c))
###                       ("_position" Q'))))
###                 ("_position" Q))
###               ("\<^const>Set.subset_eq" ("_position" A')
###                 ("_position" A)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1754 of "$AFP/Complx/OG_Soundness.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P')
###         ("_position" P) ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_position" P') ("_position" c) ("_position" Q) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>OG_Hoare.oghoare" ("_position" \<Gamma>)
###         ("_position" \<Theta>) ("_position" F) ("_position" P)
###         ("_position" c) ("_position" Q) ("_position" A))
###       ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###         ("_applC" ("_position" pre) ("_position" P)) ("_position" c)
###         ("_position" Q) ("_position" A)))
###     ("\<^const>OG_Hoare.oghoare_seq" ("_position" \<Gamma>)
###       ("_position" \<Theta>) ("_position" F) ("_position" P')
###       ("_position" P) ("_position" c) ("_position" Q)
###       ("\<^const>HOL.implies" ("_position" A)
###         ("\<^const>OG_Hoare.valid" ("_position" \<Gamma>) ("_position" F)
###           ("_position" P') ("_position" c) ("_position" Q)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.OG_Soundness"
### 0.793s elapsed time, 1.636s cpu time, 1.169s GC time
Loading theory "Draft.OG_Tactics" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.OG_Syntax")
val hyp_tac = fn: int -> tactic
val remove_single_Bound_mem = fn: Proof.context -> int -> tactic
### ML warning (line 598 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 605 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 614 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 623 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
### ML warning (line 633 of "$AFP/Complx/OG_Tactics.thy"):
### Value identifier (args) has not been referenced.
val rt = fn: Proof.context -> thm -> int -> tactic
val rts = fn: Proof.context -> thm list -> int -> tactic
val conjI_Tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val get_oghoare_simps = fn: Proof.context -> thm list
val simp = fn: Proof.context -> thm list -> int -> tactic
val simp_only = fn: Proof.context -> thm list -> int -> tactic
val prod_sel_simp = fn: Proof.context -> int -> tactic
val oghoare_simp = fn: Proof.context -> int -> tactic
val ParallelConseq = fn: Proof.context -> int -> tactic
val enable_trace = false: bool
val trace = fn: string -> unit
val HoareRuleTac = fn: Proof.context * int list -> int -> tactic
val Call_asm_inst = fn: Proof.context -> int -> tactic
val ParallelTac = fn: Proof.context * int list -> int -> tactic
val MapAnn_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_swap_Tac = fn: Proof.context * int list -> int -> tactic
val inter_aux_Par_Tac = fn: Proof.context * int list -> int -> tactic
val interfree_aux_Tac = fn: Proof.context * int list -> int -> tactic
val dest_inter_aux_Tac = fn: Proof.context * int list -> int -> tactic
val dest_inter_right_Tac = fn: Proof.context * int list -> int -> tactic
val oghoare_tac = fn: Proof.context -> int -> tactic
val oghoare_tac' = fn: Proof.context -> int -> thm -> thm Seq.seq
val oghoare_parallel_tac = fn: Proof.context -> int -> tactic
val oghoare_interfree_tac = fn: Proof.context -> int -> tactic
val oghoare_interfree_aux_tac = fn: Proof.context -> int -> tactic
### theory "Draft.OG_Tactics"
### 0.725s elapsed time, 0.771s cpu time, 0.066s GC time
Loading theory "Draft.OG_Syntax" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
Found termination order: "{}"
Found termination order: "{}"
val syntax_debug = false: bool
### theory "Draft.OG_Syntax"
### 0.415s elapsed time, 0.460s cpu time, 0.065s GC time
Loading theory "Draft.Examples" (required by "Draft.ExamplesMoreTemplates")
### theory "Draft.Examples"
### 1.130s elapsed time, 1.213s cpu time, 0.119s GC time
Loading theory "Draft.ExamplesMoreTemplates"
val templateLemmas =
   [("Examples.Example2'n_proc_simp",
     "[AnnExpr \<lbrace>\<acute>ex2_n ?i = ?i\<rbrace>] ! 0 =
      AnnExpr \<lbrace>\<acute>ex2_n ?i = ?i\<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5, template_app (template_hole 4, t_empty))),
             template_hole 1)),
         template_hole 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Examples.Example2'n_map_of_simps",
     "?i < ?n ==>
      map_of (map (%i. ((?p, i), ?g i)) [0..<?n]) (?p, ?i) = Some (?g ?i)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 3)),
         template_app
          (template_hole 0,
           template_app (template_var 0, template_var 3))))),
    ("Examples.Example1'",
     "\<Gamma>', \<Theta>'
      |\<turnstile>\<^bsub>/?F\<^esub> Example1'
 \<lbrace>ALL i<2. \<acute>ex1_a i = 0\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 16, template_hole 15),
                     template_hole 14),
                   template_var 0),
                 template_app (template_hole 13, template_hole 12)),
               template_app (template_hole 11, template_hole 12)),
             template_app (template_hole 10, t_empty)),
           template_app (template_hole 10, t_empty))
         )),
    ("Examples.Example2'n_proc_simp",
     "?i < ?n ==>
      \<Theta>'' ?n (''f'', ?i) =
      Some [AnnExpr \<lbrace>\<acute>ex2_n ?i = ?i\<rbrace>]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 13, template_var 0),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_hole 9),
                                 template_hole 8),
                               template_hole 8),
                             template_hole 9),
                           template_hole 9),
                         template_hole 8),
                       template_hole 8),
                     template_hole 9)),
                 template_hole 7)),
             template_var 1)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4, template_app (template_hole 3, t_empty))),
             template_hole 0))))),
    ("Examples.Example2'n_proc_simp",
     "?i < ?n ==>
      \<Gamma>'' ?n (''f'', ?i) =
      Some (Basic (%s. s(| ex2_a := (ex2_a s)(ex2_n s ?i := []) |)))",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 12, template_var 0),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 9, template_hole 8),
                                 template_hole 7),
                               template_hole 7),
                             template_hole 8),
                           template_hole 8),
                         template_hole 7),
                       template_hole 7),
                     template_hole 8)),
                 template_hole 6)),
             template_var 1)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Examples.exceptions_example",
     "?\<Gamma>, ?\<Theta>
      |\<turnstile>\<^bsub>/?F\<^esub> TRY
   \<lbrace>True\<rbrace>
   \<acute>y := 0;;
   \<lbrace>\<acute>y = 0\<rbrace> THROW
 CATCH \<lbrace>\<acute>y = 0\<rbrace>
       \<acute>x := \<acute>y + 1
 END
 \<lbrace>\<acute>x = 1 & \<acute>y = 0\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 18, template_var 2),
                     template_var 1),
                   template_var 0),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_hole 16,
                           template_app (template_hole 15, t_empty))),
                       template_app
                        (template_hole 16,
                         template_app (template_hole 15, t_empty)))),
                   template_app
                    (template_hole 16,
                     template_app (template_hole 15, t_empty)))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, t_empty)),
                     template_hole 6)),
                 template_app (template_hole 8, t_empty))),
             template_app (template_hole 15, t_empty)),
           template_app (template_hole 15, t_empty))
         )),
    ("Examples.Example1",
     "?\<Gamma>, ?\<Theta>
      |\<tturnstile>\<^bsub>/?F\<^esub> \<lbrace>True\<rbrace>
  COBEGIN
    SCHEME [0 \<le> i < ?n]
      \<lbrace>True\<rbrace>
      \<acute>ex1_a := \<acute>ex1_a(i := 0)
      \<lbrace>\<acute>ex1_a i = 0\<rbrace>, \<lbrace>False\<rbrace>
  COEND
  \<lbrace>ALL i<?n. \<acute>ex1_a i = 0\<rbrace>, ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 20, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app (template_hole 19, t_empty)),
                 template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 16, t_empty),
                     template_app
                      (template_app (template_hole 8, template_hole 10),
                       template_var 1)))),
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_app
                    (template_app (template_hole 8, template_hole 10),
                     template_var 1)))),
             template_app (template_hole 19, t_empty)),
           template_var 0)
         )),
    ("Examples.Example2_list",
     "?\<Gamma>, ?\<Theta>
      |\<tturnstile>\<^bsub>/?F\<^esub> \<lbrace>?n
           < length \<acute>ex2_A\<rbrace>
  COBEGIN
    SCHEME [0 \<le> i < ?n]
      \<lbrace>?n < length \<acute>ex2_A\<rbrace>
      \<acute>ex2_A := \<acute>ex2_A[i := 0]
      \<lbrace>\<acute>ex2_A ! i = 0\<rbrace>, \<lbrace>False\<rbrace>
  COEND
  \<lbrace>ALL i<?n. \<acute>ex2_A ! i = 0\<rbrace>, ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 21, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_app (template_hole 20, t_empty)),
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 15, t_empty),
                     template_app
                      (template_app (template_hole 7, template_hole 9),
                       template_var 1)))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_app
                    (template_app (template_hole 7, template_hole 9),
                     template_var 1)))),
             template_app (template_hole 20, t_empty)),
           template_var 0)
         )),
    ("Examples.guard_example",
     "?\<Gamma>, ?\<Theta>
      |\<turnstile>\<^bsub>/{42::?'c,
                             66::?'c}\<^esub> \<lbrace>True\<rbrace>
        (42::?'c, \<lbrace>\<acute>x = 0\<rbrace>),
        (66::?'c, \<lbrace>\<acute>y = 0\<rbrace>) \<longmapsto>
          \<lbrace>\<acute>x = 0\<rbrace>
          \<acute>y := 0;;
        \<lbrace>True\<rbrace>
        \<acute>x := 0
        \<lbrace>\<acute>x = 0\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 24, template_var 1),
                     template_var 0),
                   template_app
                    (template_app
                      (template_hole 23,
                       template_app
                        (template_hole 22,
                         template_app
                          (template_hole 21,
                           template_app
                            (template_hole 20,
                             template_app
                              (template_hole 21,
                               template_app
                                (template_hole 20,
                                 template_app
                                  (template_hole 21,
                                   template_hole 19))))))),
                     template_app
                      (template_app
                        (template_hole 23,
                         template_app
                          (template_hole 22,
                           template_app
                            (template_hole 21,
                             template_app
                              (template_hole 20,
                               template_app
                                (template_hole 21,
                                 template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 21,
                                     template_app
(template_hole 21, template_hole 19)))))))),
                       template_hole 18))),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 16,
                           template_app (template_hole 15, t_empty)),
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app
                                  (template_hole 22,
                                   template_app
                                    (template_hole 21,
                                     template_app
(template_hole 20,
 template_app
  (template_hole 21,
   template_app
    (template_hole 20,
     template_app (template_hole 21, template_hole 19))))))),
                               template_app (template_hole 15, t_empty))),
                           template_app
                            (template_app
                              (template_hole 13,
                               template_app
                                (template_app
                                  (template_hole 12,
                                   template_app
                                    (template_hole 22,
                                     template_app
(template_hole 21,
 template_app
  (template_hole 20,
   template_app
    (template_hole 21,
     template_app
      (template_hole 21,
       template_app
        (template_hole 21,
         template_app (template_hole 21, template_hole 19)))))))),
                                 template_app (template_hole 15, t_empty))),
                             template_hole 7))),
                       template_app
                        (template_hole 6,
                         template_app (template_hole 15, t_empty)))),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 15, t_empty)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 22,
                                 template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 20,
                                     template_app
(template_hole 21,
 template_app
  (template_hole 20,
   template_app (template_hole 21, template_hole 19))))))),
                             template_app (template_hole 15, t_empty))),
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app
                                  (template_hole 22,
                                   template_app
                                    (template_hole 21,
                                     template_app
(template_hole 20,
 template_app
  (template_hole 21,
   template_app
    (template_hole 21,
     template_app
      (template_hole 21,
       template_app (template_hole 21, template_hole 19)))))))),
                               template_app (template_hole 15, t_empty))),
                           template_hole 7))),
                     template_app (template_hole 3, t_empty))),
                 template_app (template_hole 3, t_empty))),
             template_app (template_hole 15, t_empty)),
           template_app (template_hole 15, t_empty))
         )),
    ("Examples.Example2",
     "\<Gamma>'' ?n, \<Theta>'' ?n
      |\<tturnstile>\<^bsub>/?F\<^esub> \<lbrace>True\<rbrace>
  COBEGIN
    SCHEME [0 \<le> i < ?n]
      \<lbrace>True\<rbrace>
      CALLX (%s. s(| ex2_n := (ex2_n s)(i := i) |))
        \<lbrace>\<acute>ex2_n i = i\<rbrace> (''f'', i) 0
        (%s t. t(| ex2_n := (ex2_n t)(i := ex2_n s i) |)) (%x y. Skip)
        \<lbrace>\<acute>ex2_a (\<acute>ex2_n i) = [] &
                 \<acute>ex2_n i = i\<rbrace>
        \<lbrace>\<acute>ex2_a i = []\<rbrace>
        \<lbrace>False\<rbrace> \<lbrace>False\<rbrace>
      \<lbrace>\<acute>ex2_a i = []\<rbrace>, \<lbrace>False\<rbrace>
  COEND
  \<lbrace>ALL i<?n.
              \<acute>ex2_a i = []\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 30,
                         template_app (template_hole 29, template_var 1)),
                       template_app (template_hole 28, template_var 1)),
                     template_var 0),
                   template_app (template_hole 27, t_empty)),
                 template_app
                  (template_hole 25,
                   template_app
                    (template_app (template_hole 24, t_empty),
                     template_app
                      (template_app (template_hole 12, template_hole 19),
                       template_var 1)))),
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, t_empty),
                   template_app
                    (template_app (template_hole 12, template_hole 19),
                     template_var 1)))),
             template_app (template_hole 27, t_empty)),
           template_app (template_hole 27, t_empty))
         )),
    ("Examples.peterson_thread_1",
     "?\<Gamma>, ?\<Theta>
      |\<turnstile>\<^bsub>/?F\<^esub> \<lbrace>\<acute>pr1 = 0 &
          ~ \<acute>in1\<rbrace>
 WHILE True INV \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>
 DO \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>
    \<langle>\<acute>in1 := True;;
             \<acute>pr1 := 1\<rangle>;;
    \<lbrace>\<acute>pr1 = 1 & \<acute>in1\<rbrace>
    \<langle>\<acute>hold := 1;;
             \<acute>pr1 := 2\<rangle>;;
    \<lbrace>\<acute>pr1 = 2 &
             \<acute>in1 &
             (\<acute>hold = 1 |
              \<acute>hold = 2 & \<acute>pr2 = 2)\<rbrace>
    AWAIT ~ \<acute>in2 | \<acute>hold ~= 1 THEN \<acute>pr1 := 3 END;;
    \<lbrace>\<acute>pr1 = 3 &
             \<acute>in1 &
             (\<acute>hold = 1 |
              \<acute>hold = 2 & \<acute>pr2 = 2)\<rbrace>
    \<langle>\<acute>in1 := False;;
             \<acute>pr1 := 0\<rangle>
 OD
 \<lbrace>\<acute>pr1 = 0 &
          ~ \<acute>in1\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 30, template_var 2),
                     template_var 1),
                   template_var 0),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 29,
                       template_app (template_hole 28, t_empty)),
                     template_app (template_hole 28, t_empty)),
                   template_app
                    (template_app
                      (template_hole 21,
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_app
                              (template_hole 21,
                               template_app
                                (template_app
                                  (template_hole 20,
                                   template_app
                                    (template_hole 28, t_empty)),
                                 template_app
                                  (template_app
                                    (template_hole 21,
                                     template_app
(template_hole 19, template_hole 18)),
                                   template_app
                                    (template_hole 19, template_hole 18)))),
                             template_app
                              (template_app
                                (template_hole 20,
                                 template_app (template_hole 28, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 19, template_hole 18)),
                                 template_app
                                  (template_hole 19, template_hole 18))))),
                         template_app
                          (template_app
                            (template_hole 20,
                             template_app (template_hole 28, t_empty)),
                           template_app
                            (template_hole 19, template_hole 18)))),
                     template_app
                      (template_app
                        (template_hole 20,
                         template_app (template_hole 28, t_empty)),
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_hole 19, template_hole 18)),
                         template_app
                          (template_hole 19, template_hole 18)))))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 28, t_empty)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app (template_hole 28, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app (template_hole 5, t_empty)),
                                 template_app (template_hole 5, t_empty)))),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app (template_hole 28, t_empty)),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app (template_hole 5, t_empty)),
                               template_app (template_hole 5, t_empty))))),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 28, t_empty)),
                         template_app (template_hole 5, t_empty)))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 28, t_empty)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 5, t_empty)),
                       template_app (template_hole 5, t_empty)))))),
             template_app (template_hole 28, t_empty)),
           template_app (template_hole 28, t_empty))
         )),
    ("Examples.peterson_thread_2",
     "?\<Gamma>, ?\<Theta>
      |\<turnstile>\<^bsub>/?F\<^esub> \<lbrace>\<acute>pr2 = 0 &
          ~ \<acute>in2\<rbrace>
 WHILE True INV \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
 DO \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
    \<langle>\<acute>in2 := True;;
             \<acute>pr2 := 1\<rangle>;;
    \<lbrace>\<acute>pr2 = 1 & \<acute>in2\<rbrace>
    \<langle>\<acute>hold := 2;;
             \<acute>pr2 := 2\<rangle>;;
    \<lbrace>\<acute>pr2 = 2 &
             \<acute>in2 &
             (\<acute>hold = 2 |
              \<acute>hold = 1 & \<acute>pr1 = 2)\<rbrace>
    AWAIT ~ \<acute>in1 | \<acute>hold ~= 2 THEN \<acute>pr2 := 3 END;;
    \<lbrace>\<acute>pr2 = 3 &
             \<acute>in2 &
             (\<acute>hold = 2 |
              \<acute>hold = 1 & \<acute>pr1 = 2)\<rbrace>
    \<langle>\<acute>in2 := False;;
             \<acute>pr2 := 0\<rangle>
 OD
 \<lbrace>\<acute>pr2 = 0 &
          ~ \<acute>in2\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 30, template_var 2),
                     template_var 1),
                   template_var 0),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 29,
                       template_app (template_hole 28, t_empty)),
                     template_app (template_hole 28, t_empty)),
                   template_app
                    (template_app
                      (template_hole 21,
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_app
                              (template_hole 21,
                               template_app
                                (template_app
                                  (template_hole 20,
                                   template_app
                                    (template_hole 28, t_empty)),
                                 template_app
                                  (template_app
                                    (template_hole 21,
                                     template_app
(template_hole 19, template_hole 18)),
                                   template_app
                                    (template_hole 19, template_hole 18)))),
                             template_app
                              (template_app
                                (template_hole 20,
                                 template_app (template_hole 28, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 19, template_hole 18)),
                                 template_app
                                  (template_hole 19, template_hole 18))))),
                         template_app
                          (template_app
                            (template_hole 20,
                             template_app (template_hole 28, t_empty)),
                           template_app
                            (template_hole 19, template_hole 18)))),
                     template_app
                      (template_app
                        (template_hole 20,
                         template_app (template_hole 28, t_empty)),
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_hole 19, template_hole 18)),
                         template_app
                          (template_hole 19, template_hole 18)))))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 28, t_empty)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app (template_hole 28, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app (template_hole 5, t_empty)),
                                 template_app (template_hole 5, t_empty)))),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app (template_hole 28, t_empty)),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app (template_hole 5, t_empty)),
                               template_app (template_hole 5, t_empty))))),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 28, t_empty)),
                         template_app (template_hole 5, t_empty)))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 28, t_empty)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 5, t_empty)),
                       template_app (template_hole 5, t_empty)))))),
             template_app (template_hole 28, t_empty)),
           template_app (template_hole 28, t_empty))
         )),
    ("Examples.Petersons_mutex_1",
     "?\<Gamma>, ?\<Theta>
      |\<tturnstile>\<^bsub>/?F\<^esub> \<lbrace>\<acute>pr1 = 0 &
           ~ \<acute>in1 & \<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
  COBEGIN
    \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>
    WHILE True INV \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>
    DO \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>
       \<langle>\<acute>in1 := True;;
                \<acute>pr1 := 1\<rangle>;;
       \<lbrace>\<acute>pr1 = 1 & \<acute>in1\<rbrace>
       \<langle>\<acute>hold := 1;;
                \<acute>pr1 := 2\<rangle>;;
       \<lbrace>\<acute>pr1 = 2 &
                \<acute>in1 &
                (\<acute>hold = 1 |
                 \<acute>hold = 2 & \<acute>pr2 = 2)\<rbrace>
       AWAIT ~ \<acute>in2 | \<acute>hold ~= 1 THEN \<acute>pr1 := 3 END;;
       \<lbrace>\<acute>pr1 = 3 &
                \<acute>in1 &
                (\<acute>hold = 1 |
                 \<acute>hold = 2 & \<acute>pr2 = 2)\<rbrace>
       \<langle>\<acute>in1 := False;;
                \<acute>pr1 := 0\<rangle>
    OD
    \<lbrace>\<acute>pr1 = 0 & ~ \<acute>in1\<rbrace>,
    \<lbrace>False\<rbrace>
  \<parallel>
    \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
    WHILE True INV \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
    DO \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>
       \<langle>\<acute>in2 := True;;
                \<acute>pr2 := 1\<rangle>;;
       \<lbrace>\<acute>pr2 = 1 & \<acute>in2\<rbrace>
       \<langle>\<acute>hold := 2;;
                \<acute>pr2 := 2\<rangle>;;
       \<lbrace>\<acute>pr2 = 2 &
                \<acute>in2 &
                (\<acute>hold = 2 |
                 \<acute>hold = 1 & \<acute>pr1 = 2)\<rbrace>
       AWAIT ~ \<acute>in1 | \<acute>hold ~= 2 THEN \<acute>pr2 := 3 END;;
       \<lbrace>\<acute>pr2 = 3 &
                \<acute>in2 &
                (\<acute>hold = 2 |
                 \<acute>hold = 1 & \<acute>pr1 = 2)\<rbrace>
       \<langle>\<acute>in2 := False;;
                \<acute>pr2 := 0\<rangle>
    OD
    \<lbrace>\<acute>pr2 = 0 & ~ \<acute>in2\<rbrace>,
    \<lbrace>False\<rbrace>
  COEND
  \<lbrace>\<acute>pr1 = 0 &
           ~ \<acute>in1 &
           \<acute>pr2 = 0 &
           ~ \<acute>in2\<rbrace>, \<lbrace>False\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 40, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_app (template_hole 39, t_empty)),
                 template_app
                  (template_hole 30,
                   template_app
                    (template_app
                      (template_hole 29,
                       template_app
                        (template_app
                          (template_hole 28,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 27,
                                 template_app (template_hole 39, t_empty)),
                               template_app (template_hole 39, t_empty)),
                             template_app
                              (template_app
                                (template_hole 26,
                                 template_app
                                  (template_app
                                    (template_hole 26,
                                     template_app
(template_app
  (template_hole 26,
   template_app
    (template_app
      (template_hole 25, template_app (template_hole 39, t_empty)),
     template_app
      (template_app
        (template_hole 26,
         template_app (template_hole 24, template_hole 23)),
       template_app (template_hole 24, template_hole 23)))),
 template_app
  (template_app
    (template_hole 25, template_app (template_hole 39, t_empty)),
   template_app
    (template_app
      (template_hole 26, template_app (template_hole 24, template_hole 23)),
     template_app (template_hole 24, template_hole 23))))),
                                   template_app
                                    (template_app
(template_hole 25, template_app (template_hole 39, t_empty)),
                                     template_app
(template_hole 24, template_hole 23)))),
                               template_app
                                (template_app
                                  (template_hole 25,
                                   template_app
                                    (template_hole 39, t_empty)),
                                 template_app
                                  (template_app
                                    (template_hole 26,
                                     template_app
(template_hole 24, template_hole 23)),
                                   template_app
                                    (template_hole 24,
                                     template_hole 23)))))),
                         template_app
                          (template_app
                            (template_hole 15,
                             template_app (template_hole 39, t_empty)),
                           template_app (template_hole 39, t_empty)))),
                     template_app
                      (template_app
                        (template_hole 29,
                         template_app
                          (template_app
                            (template_hole 28,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 27,
                                   template_app
                                    (template_hole 39, t_empty)),
                                 template_app (template_hole 39, t_empty)),
                               template_app
                                (template_app
                                  (template_hole 26,
                                   template_app
                                    (template_app
(template_hole 26,
 template_app
  (template_app
    (template_hole 26,
     template_app
      (template_app
        (template_hole 25, template_app (template_hole 39, t_empty)),
       template_app
        (template_app
          (template_hole 26,
           template_app (template_hole 24, template_hole 23)),
         template_app (template_hole 24, template_hole 23)))),
   template_app
    (template_app
      (template_hole 25, template_app (template_hole 39, t_empty)),
     template_app
      (template_app
        (template_hole 26,
         template_app (template_hole 24, template_hole 23)),
       template_app (template_hole 24, template_hole 23))))),
                                     template_app
(template_app (template_hole 25, template_app (template_hole 39, t_empty)),
 template_app (template_hole 24, template_hole 23)))),
                                 template_app
                                  (template_app
                                    (template_hole 25,
                                     template_app
(template_hole 39, t_empty)),
                                   template_app
                                    (template_app
(template_hole 26, template_app (template_hole 24, template_hole 23)),
                                     template_app
(template_hole 24, template_hole 23)))))),
                           template_app
                            (template_app
                              (template_hole 15,
                               template_app (template_hole 39, t_empty)),
                             template_app (template_hole 39, t_empty)))),
                       template_hole 13)))),
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 39, t_empty)),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, template_app (template_hole 39, t_empty)),
                                     template_app
(template_app (template_hole 8, template_app (template_hole 6, t_empty)),
 template_app (template_hole 6, t_empty)))),
                                 template_app
                                  (template_app
                                    (template_hole 7,
                                     template_app
(template_hole 39, t_empty)),
                                   template_app
                                    (template_app
(template_hole 8, template_app (template_hole 6, t_empty)),
                                     template_app
(template_hole 6, t_empty))))),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app (template_hole 39, t_empty)),
                               template_app (template_hole 6, t_empty)))),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app (template_hole 39, t_empty)),
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app (template_hole 6, t_empty)),
                             template_app (template_hole 6, t_empty)))))),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app (template_hole 39, t_empty)),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_app (template_hole 7, template_app (template_hole 39, t_empty)),
 template_app
  (template_app (template_hole 8, template_app (template_hole 6, t_empty)),
   template_app (template_hole 6, t_empty)))),
                                   template_app
                                    (template_app
(template_hole 7, template_app (template_hole 39, t_empty)),
                                     template_app
(template_app (template_hole 8, template_app (template_hole 6, t_empty)),
 template_app (template_hole 6, t_empty))))),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_hole 39, t_empty)),
                                 template_app (template_hole 6, t_empty)))),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app (template_hole 39, t_empty)),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app (template_hole 6, t_empty)),
                               template_app (template_hole 6, t_empty)))))),
                     template_hole 0)))),
             template_app (template_hole 39, t_empty)),
           template_app (template_hole 39, t_empty))
         ))]:
   (string * thm * template) list
### theory "Draft.ExamplesMoreTemplates"
### 0.439s elapsed time, 0.600s cpu time, 0.032s GC time
val it = (): unit
