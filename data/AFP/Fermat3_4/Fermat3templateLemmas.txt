   [("Fermat3.two_not_abs_cube", "\<bar>?x ^ 3\<bar> = 2 ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 3)))],
       template_predicate (template_hole 0))),
    ("Fermat3.fermat_3", "?x ^ 3 + ?y ^ 3 = ?z ^ 3 ==> ?x * ?y * ?z = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)))),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Fermat3.nat_relprime_power_divisors",
     "[| 0 < ?n; ?a * ?b = ?c ^ ?n; coprime ?a ?b |] ==> EX k. ?a = k ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Fermat3.fermat_mult3",
     "[| ?x ^ ?n + ?y ^ ?n = ?z ^ ?n; 3 dvd ?n |] ==> ?x * ?y * ?z = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Fermat3.int_relprime_odd_power_divisors",
     "[| odd ?n; ?a * ?b = ?c ^ ?n; coprime ?a ?b |] ==> EX k. ?a = k ^ ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 3)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Fermat3.factor_sum_cubes",
     "?x ^ 3 + ?y ^ 3 = (?x + ?y) * (?x\<^sup>2 - ?x * ?y + ?y\<^sup>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_hole 3)))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 0, template_hole 3))))))),
    ("Fermat3.no_rewritten_fermat3",
     "\<nexists>v w.
         v ^ 3 + w ^ 3 = ?x ^ 3 & v * w * ?x ~= 0 & even ?x & coprime v w",
     template_negation
      (template_predicate (template_app (template_hole 13, t_empty))))]
