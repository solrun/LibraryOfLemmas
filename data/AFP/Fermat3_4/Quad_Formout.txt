Loading theory "HOL-Library.Cancellation" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.594s cpu time, 0.038s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.247s elapsed time, 1.005s cpu time, 0.038s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.FuncSet"
### 0.358s elapsed time, 1.433s cpu time, 0.113s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.184s elapsed time, 0.715s cpu time, 0.139s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.301s elapsed time, 1.181s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.460s elapsed time, 1.846s cpu time, 0.177s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.930s cpu time, 0.098s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Algebra.Congruence"
### 0.906s elapsed time, 3.364s cpu time, 0.819s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.191s cpu time, 0.940s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  mset :: "'a list => 'a multiset"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
Found termination order: "size <*mlex*> {}"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.997s elapsed time, 3.922s cpu time, 0.514s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
### theory "HOL-Library.BigO"
### 0.896s elapsed time, 3.522s cpu time, 0.434s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Number_Theory.Fib"
### 0.284s elapsed time, 1.116s cpu time, 0.116s GC time
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.686s elapsed time, 9.918s cpu time, 2.530s GC time
Loading theory "Draft.Templates" (required by "Draft.Quad_FormMoreTemplates" via "Draft.ExtrEqs")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.123s elapsed time, 3.930s cpu time, 1.358s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Quad_FormMoreTemplates")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.954s elapsed time, 2.996s cpu time, 1.219s GC time
### theory "HOL-Algebra.Complete_Lattice"
### 0.973s elapsed time, 3.050s cpu time, 1.219s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
### theory "HOL-Library.Multiset"
### 4.479s elapsed time, 15.114s cpu time, 4.120s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.317s elapsed time, 2.930s cpu time, 0.481s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.439s elapsed time, 1.343s cpu time, 0.153s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.175s elapsed time, 3.613s cpu time, 0.494s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.648s elapsed time, 1.993s cpu time, 0.264s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.496s elapsed time, 1.514s cpu time, 0.152s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.500s elapsed time, 7.055s cpu time, 0.818s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.287s elapsed time, 3.914s cpu time, 0.299s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.819s elapsed time, 15.753s cpu time, 1.676s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.245s elapsed time, 5.969s cpu time, 0.452s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
### theory "HOL-Algebra.Ideal"
### 1.521s elapsed time, 3.132s cpu time, 0.214s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.637s elapsed time, 1.305s cpu time, 0.072s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.136s elapsed time, 14.901s cpu time, 1.279s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
### theory "HOL-Computational_Algebra.Primes"
### 0.197s elapsed time, 0.418s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.247s elapsed time, 0.982s cpu time, 0.115s GC time
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Number_Theory.Prime_Powers"
### 0.786s elapsed time, 2.618s cpu time, 0.274s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Cong"
### 0.866s elapsed time, 2.778s cpu time, 0.274s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
consts
  totient_naive :: "nat => nat => nat => nat"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Mod_Exp"
### 0.460s elapsed time, 1.463s cpu time, 0.224s GC time
### theory "HOL-Number_Theory.Totient"
### 0.492s elapsed time, 1.492s cpu time, 0.182s GC time
### theory "HOL-Algebra.UnivPoly"
### 7.081s elapsed time, 15.765s cpu time, 1.731s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.833s elapsed time, 5.625s cpu time, 3.368s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.136s elapsed time, 1.277s cpu time, 0.149s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.117s elapsed time, 0.272s cpu time, 0.085s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.232s elapsed time, 0.503s cpu time, 0.085s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.143s elapsed time, 0.284s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.235s elapsed time, 0.539s cpu time, 0.151s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.281s elapsed time, 0.574s cpu time, 0.151s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Quad_FormMoreTemplates" via "Draft.Quad_Form")
### theory "HOL-Number_Theory.Number_Theory"
### 1.933s elapsed time, 4.165s cpu time, 3.097s GC time
Loading theory "Draft.Quad_Form" (required by "Draft.Quad_FormMoreTemplates")
### theory "Draft.Quad_Form"
### 0.177s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.Quad_FormMoreTemplates"
val templateLemmas =
   [("Quad_Form.qfN_pos", "[| 1 <= ?N; is_qfN ?A ?N |] ==> 0 <= ?A",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Quad_Form.is_qfN_power",
     "[| 0 < ?n; is_qfN ?A ?N |] ==> is_qfN (?A ^ ?n) ?N",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Quad_Form.is_qfN_mult",
     "[| is_qfN ?A ?N; is_qfN ?B ?N |] ==> is_qfN (?A * ?B) ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Quad_Form.best_division_abs",
     "0 < ?n ==> EX k. 2 * \<bar>?a - k * ?n\<bar> <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Quad_Form.abs_eq_impl_unitfactor",
     "\<bar>?a\<bar> = \<bar>?b\<bar> ==>
      EX u. ?a = u * ?b & \<bar>u\<bar> = 1",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.prime_factor_int",
     "[| \<bar>?k\<bar> ~= 1; !!p. [| prime p; p dvd ?k |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Quad_Form.Legendre_zmult",
     "[| 2 < ?p; prime ?p |]
      ==> Legendre (?a * ?b) ?p = Legendre ?a ?p * Legendre ?b ?p",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 2),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Quad_Form.prime_power_dvd_cancel_right",
     "[| prime ?p; ~ ?p dvd ?b; ?p ^ ?n dvd ?a * ?b |] ==> ?p ^ ?n dvd ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Quad_Form.Legendre_1mod6",
     "prime (6 * ?m + 1) ==> Legendre (- 3) (6 * ?m + 1) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_hole 7,
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 5, template_hole 4)))),
                    template_var 0)),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app (template_hole 5, template_hole 4)))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)))),
                 template_var 0)),
             template_hole 3)),
         template_hole 3))),
    ("Quad_Form.qfN_zero",
     "[| 1 <= ?N; ?a\<^sup>2 + ?N * ?b\<^sup>2 = 0 |] ==> ?a = 0 & ?b = 0",
     template_implication
      ([template_inequation (less_equals, template_hole 9, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3)))),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_hole 1))
           ))),
    ("Quad_Form.qf3_even_general",
     "[| is_qfN ?A 3; even ?A |] ==> EX B. ?A = 4 * B & is_qfN B 3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 8,
                  template_app (template_hole 4, template_hole 6))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.qfN_div_prime_general",
     "[| prime ?P; ?P dvd ?A; is_qfN ?A ?N; is_qfN ?P ?N |]
      ==> EX Q. ?A = Q * ?P & is_qfN Q ?N",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.qfN_primedivisor_not",
     "prime ?P & 0 < ?Q & is_qfN (?P * ?Q) ?N & ~ is_qfN ?P ?N ==>
      EX R. prime R & R dvd ?Q & ~ is_qfN R ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 2),
                          template_var 1)),
                      template_var 0)),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Quad_Form.qf3_cube_impl_cube_form",
     "coprime ?a ?b & ?a\<^sup>2 + 3 * ?b\<^sup>2 = ?w ^ 3 & odd ?w ==>
      is_cube_form ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 2),
                            template_app
                             (template_hole 8,
                              template_app
                               (template_hole 7, template_hole 6)))),
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3, template_hole 6))),
                          template_app
                           (template_app (template_hole 9, template_var 1),
                            template_app
                             (template_hole 8,
                              template_app
                               (template_hole 7, template_hole 6)))))),
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 8,
                        template_app (template_hole 3, template_hole 6))))),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 7, template_hole 6))),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Quad_Form.qf3_prime_exists",
     "prime (6 * ?m + 1) ==>
      EX x y. 6 * ?m + 1 = x\<^sup>2 + 3 * y\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6, template_hole 5)))),
                    template_var 0)),
                template_hole 4))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.cube_form_mult",
     "[| is_cube_form ?a ?b; is_cube_form ?c ?d; \<bar>?e\<bar> = 1 |]
      ==> is_cube_form (?a * ?c + ?e * 3 * ?b * ?d)
           (?a * ?d - ?e * ?b * ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)))),
                       template_var 3)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 3)),
                 template_var 2)))
           ))),
    ("Quad_Form.qf3_oddprimedivisor",
     "[| prime ?P; odd ?P; coprime ?a ?b;
         ?P dvd ?a\<^sup>2 + 3 * ?b\<^sup>2 |]
      ==> is_qfN ?P 3",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app
                     (template_hole 3,
                      template_app (template_hole 8, template_hole 7)))),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 1, template_hole 7))),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_app
                     (template_hole 3,
                      template_app (template_hole 8, template_hole 7))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_hole 9,
               template_app (template_hole 1, template_hole 7)))
           ))),
    ("Quad_Form.qf3_cube_prime_impl_cube_form",
     "[| coprime ?a ?b; ?P ^ 3 = ?a\<^sup>2 + 3 * ?b\<^sup>2;
         prime ?P & odd ?P |]
      ==> is_cube_form ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 0),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9))),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_hole 11,
                  template_app (template_hole 7, template_hole 9)))),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 10, template_hole 9))),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_app
                 (template_hole 11,
                  template_app (template_hole 7, template_hole 9)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 7, template_hole 9))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Quad_Form.qf3_even",
     "even (?a\<^sup>2 + 3 * ?b\<^sup>2) ==>
      EX B. ?a\<^sup>2 + 3 * ?b\<^sup>2 = 4 * B & is_qfN B 3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 10, template_hole 9)))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 4, template_hole 9))),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 10, template_hole 9))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.qf3_oddprimedivisor_not",
     "prime ?P & odd ?P & 0 < ?Q & is_qfN (?P * ?Q) 3 & ~ is_qfN ?P 3 ==>
      EX R. prime R & odd R & R dvd ?Q & ~ is_qfN R 3",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app (template_hole 7, template_hole 6))),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_var 0)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app
                           (template_app (template_hole 2, template_var 1),
                            template_var 0)),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 1, template_hole 6)))),
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 1, template_hole 6))))))))
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Quad_Form.qfN_mult2",
     "(?a\<^sup>2 + ?N * ?b\<^sup>2) * (?c\<^sup>2 + ?N * ?d\<^sup>2) =
      (?a * ?c - ?N * ?b * ?d)\<^sup>2 + ?N * (?a * ?d + ?b * ?c)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2)),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Quad_Form.qfN_mult1",
     "(?a\<^sup>2 + ?N * ?b\<^sup>2) * (?c\<^sup>2 + ?N * ?d\<^sup>2) =
      (?a * ?c + ?N * ?b * ?d)\<^sup>2 + ?N * (?a * ?d - ?b * ?c)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2)),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Quad_Form.qf3_cube_primelist_impl_cube_form",
     "[| Multiset.Ball ?ps prime; odd (int (PROD i:#?ps. i)); coprime ?a ?b;
         ?a\<^sup>2 + 3 * ?b\<^sup>2 = int (PROD i:#?ps. i) ^ 3 |]
      ==> is_cube_form ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 2)),
              template_hole 16)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_hole 11))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, t_empty),
                        template_var 2))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 3,
                  template_app (template_hole 12, template_hole 11)))),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 13,
                  template_app (template_hole 1, template_hole 11))),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_hole 3,
                  template_app (template_hole 12, template_hole 11))))),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, t_empty),
                    template_var 2)))),
            template_app
             (template_hole 3,
              template_app (template_hole 1, template_hole 11))))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Quad_Form.qfN_prime_unique",
     "[| prime (?a\<^sup>2 + ?N * ?b\<^sup>2); 1 < ?N;
         ?a\<^sup>2 + ?N * ?b\<^sup>2 = ?c\<^sup>2 + ?N * ?d\<^sup>2 |]
      ==> \<bar>?a\<bar> = \<bar>?c\<bar> &
          \<bar>?b\<bar> = \<bar>?d\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6)))),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))))))
            ),
        template_inequation (less_than, template_hole 3, template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 4),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)))),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))))),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)))),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 4)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Quad_Form.qfN_square_prime",
     "prime (?p\<^sup>2 + ?N * ?q\<^sup>2) &
      1 < ?N &
      (?p\<^sup>2 + ?N * ?q\<^sup>2)\<^sup>2 =
      ?r\<^sup>2 + ?N * ?s\<^sup>2 &
      coprime ?r ?s ==>
      \<bar>?r\<bar> = \<bar>?p\<^sup>2 - ?N * ?q\<^sup>2\<bar> &
      \<bar>?s\<bar> = \<bar>2 * ?p * ?q\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_var 4),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 9, template_hole 8)))),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_app
                       (template_app (template_hole 11, template_var 2),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 9, template_hole 8))))))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 12,
                                template_app
                                 (template_app
                                   (template_hole 11, template_var 4),
                                  template_app
                                   (template_hole 10,
                                    template_app
                                     (template_hole 9, template_hole 8)))),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 3),
                                template_app
                                 (template_app
                                   (template_hole 11, template_var 2),
                                  template_app
                                   (template_hole 10,
                                    template_app
                                     (template_hole 9,
template_hole 8)))))),
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 9, template_hole 8)))),
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 1),
                            template_app
                             (template_hole 10,
                              template_app
                               (template_hole 9, template_hole 8)))),
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_app
                           (template_app (template_hole 11, template_var 0),
                            template_app
                             (template_hole 10,
                              template_app
                               (template_hole 9, template_hole 8))))))),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 11, template_var 4),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8)))),
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_app
                        (template_app (template_hole 11, template_var 2),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8)))))))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 9, template_hole 8))),
                       template_var 4)),
                   template_var 2))))
           ))),
    ("Quad_Form.qfN_oddprime_cube",
     "[| prime (?p\<^sup>2 + ?N * ?q\<^sup>2);
         odd (?p\<^sup>2 + ?N * ?q\<^sup>2); ?p ~= 0; 1 <= ?N |]
      ==> EX a b.
             (?p\<^sup>2 + ?N * ?q\<^sup>2) ^ 3 =
             a\<^sup>2 + ?N * b\<^sup>2 &
             coprime a (?N * b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app (template_hole 15, template_var 2),
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12)))),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app
                   (template_app (template_hole 15, template_var 0),
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 13, template_hole 12))),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_var 2),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 13, template_hole 12)))),
                    template_app
                     (template_app (template_hole 11, template_var 1),
                      template_app
                       (template_app (template_hole 15, template_var 0),
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 13, template_hole 12))))))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_inequation (less_equals, template_hole 4, template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Quad_Form.qfN_div_prime_weak",
     "[| prime (?p\<^sup>2 + ?N * ?q\<^sup>2);
         ?p\<^sup>2 + ?N * ?q\<^sup>2 dvd ?a\<^sup>2 + ?N * ?b\<^sup>2 |]
      ==> EX u v.
             ?a\<^sup>2 + ?N * ?b\<^sup>2 =
             (u\<^sup>2 + ?N * v\<^sup>2) * (?p\<^sup>2 + ?N * ?q\<^sup>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4)))),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4)))),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5, template_hole 4)))))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4)))),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Quad_Form.qfN_cube_prime",
     "prime (?p\<^sup>2 + ?N * ?q\<^sup>2) &
      1 < ?N &
      (?p\<^sup>2 + ?N * ?q\<^sup>2) ^ 3 = ?a\<^sup>2 + ?N * ?b\<^sup>2 &
      coprime ?a ?b ==>
      \<bar>?a\<bar> = \<bar>?p ^ 3 - 3 * ?N * ?p * ?q\<^sup>2\<bar> &
      \<bar>?b\<bar> = \<bar>3 * ?p\<^sup>2 * ?q - ?N * ?q ^ 3\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 4),
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9)))),
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_app
                       (template_app (template_hole 12, template_var 2),
                        template_app
                         (template_hole 11,
                          template_app
                           (template_hole 10, template_hole 9))))))),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 13,
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 4),
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, template_hole 9)))),
                              template_app
                               (template_app
                                 (template_hole 8, template_var 3),
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 2),
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10,
template_hole 9)))))),
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 4, template_hole 9)))),
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 12, template_var 1),
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 10, template_hole 9)))),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_app
                           (template_app (template_hole 12, template_var 0),
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 10, template_hole 9))))))),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 12, template_var 4),
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 4, template_hole 9)))),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 0,
                                   template_app
                                    (template_hole 4, template_hole 9))),
                               template_var 3)),
                           template_var 4)),
                       template_app
                        (template_app (template_hole 12, template_var 2),
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9)))))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 4, template_hole 9))),
                           template_app
                            (template_app
                              (template_hole 12, template_var 4),
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10, template_hole 9))))),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_app
                      (template_app (template_hole 12, template_var 2),
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 4, template_hole 9))))))))
           ))),
    ("Quad_Form.qfN_div_prime",
     "prime (?p\<^sup>2 + ?N * ?q\<^sup>2) &
      ?p\<^sup>2 + ?N * ?q\<^sup>2 dvd ?a\<^sup>2 + ?N * ?b\<^sup>2 ==>
      EX u v.
         ?a\<^sup>2 + ?N * ?b\<^sup>2 =
         (u\<^sup>2 + ?N * v\<^sup>2) * (?p\<^sup>2 + ?N * ?q\<^sup>2) &
         (EX e. ?a = ?p * u + e * ?N * ?q * v &
                ?b = ?p * v - e * ?q * u & \<bar>e\<bar> = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 4),
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8, template_hole 7)))),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app (template_hole 10, template_var 2),
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8, template_hole 7))))))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 4),
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8, template_hole 7)))),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app (template_hole 10, template_var 2),
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 8, template_hole 7)))))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 1),
                      template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_hole 7)))),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 10, template_var 0),
                      template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8, template_hole 7)))))))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Quad_Form.qfN_power_div_prime",
     "prime ?P &
      odd ?P &
      ?P dvd ?A &
      ?P ^ ?n = ?p\<^sup>2 + ?N * ?q\<^sup>2 &
      ?A ^ ?n = ?a\<^sup>2 + ?N * ?b\<^sup>2 &
      coprime ?a ?b & coprime ?p (?N * ?q) & 0 < ?n ==>
      EX u v.
         ?a\<^sup>2 + ?N * ?b\<^sup>2 =
         (u\<^sup>2 + ?N * v\<^sup>2) * (?p\<^sup>2 + ?N * ?q\<^sup>2) &
         coprime u v &
         (EX e. ?a = ?p * u + e * ?N * ?q * v &
                ?b = ?p * v - e * ?q * u & \<bar>e\<bar> = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 7)),
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 16,
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_hole 14,
                          template_app
                           (template_hole 13, template_hole 12))),
                      template_var 7))),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 15, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app
                     (template_hole 18,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app (template_hole 10, template_var 7),
                            template_var 5)),
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 10, template_var 4),
                              template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 13, template_hole 12)))),
                          template_app
                           (template_app (template_hole 7, template_var 3),
                            template_app
                             (template_app
                               (template_hole 10, template_var 2),
                              template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 13, template_hole 12))))))),
                    template_app
                     (template_app
                       (template_hole 18,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10, template_var 6),
                              template_var 5)),
                          template_app
                           (template_app
                             (template_hole 9,
                              template_app
                               (template_app
                                 (template_hole 10, template_var 1),
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 13, template_hole 12)))),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 10, template_var 0),
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 13,
                                    template_hole 12))))))),
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 6, template_var 1),
                            template_var 0)),
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_hole 6, template_var 4),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 3),
                                template_var 2))),
                          template_app
                           (template_app (template_hole 5, template_hole 4),
                            template_var 5))))))))
            )],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Quad_FormMoreTemplates"
### 0.614s elapsed time, 0.888s cpu time, 0.096s GC time
val it = (): unit
