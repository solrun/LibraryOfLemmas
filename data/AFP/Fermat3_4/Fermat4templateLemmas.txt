   [("Fermat4.nat_power_inject_base",
     "[| ?n ~= 0; ?a ^ ?n = ?b ^ ?n |] ==> ?a = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Fermat4.nat_power_le_imp_le_base",
     "[| ?n ~= 0; ?a ^ ?n <= ?b ^ ?n |] ==> ?a <= ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Fermat4.nat_relprime_power_divisors",
     "[| 0 < ?n; ?a * ?b = ?c ^ ?n; coprime ?a ?b |] ==> EX k. ?a = k ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Fermat4.fermat_mult4",
     "[| ?x ^ ?n + ?y ^ ?n = ?z ^ ?n; 4 dvd ?n |] ==> ?x * ?y * ?z = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2)),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 3, template_hole 2)))),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Fermat4.fermat_4", "?x ^ 4 + ?y ^ 4 = ?z ^ 4 ==> ?x * ?y * ?z = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 3, template_hole 2))))),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 3, template_hole 2))))),
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 3, template_hole 2)))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Fermat4.nat_power2_diff",
     "?b <= ?a ==>
      (?a - ?b)\<^sup>2 = ?a\<^sup>2 + ?b\<^sup>2 - 2 * ?a * ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 0)),
             template_var 1))))),
    ("Fermat4.int_relprime_power_divisors",
     "[| 0 < ?n; 0 <= ?a; 0 <= ?b; ?a * ?b = ?c ^ ?n; coprime ?a ?b |]
      ==> EX k. ?a = k ^ ?n",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 3),
        template_inequation (less_equals, template_hole 5, template_var 2),
        template_inequation (less_equals, template_hole 5, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Fermat4.no_rewritten_fermat4",
     "\<nexists>a b.
         a ^ 4 + b ^ 4 = ?c\<^sup>2 &
         a * b * ?c ~= 0 & odd a & coprime a b",
     template_negation
      (template_predicate (template_app (template_hole 12, t_empty)))),
    ("Fermat4.nat_euclid_pyth_triples",
     "[| ?a\<^sup>2 + ?b\<^sup>2 = ?c\<^sup>2; coprime ?a ?b; odd ?a |]
      ==> EX p q.
             ?a = p\<^sup>2 - q\<^sup>2 &
             ?b = 2 * p * q & ?c = p\<^sup>2 + q\<^sup>2 & coprime p q",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7)))),
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7)))),
          template_app
           (template_app (template_hole 10, template_var 0),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 2)
                )
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Fermat4.int_euclid_pyth_triples",
     "[| coprime ?a ?b; odd ?a; ?a\<^sup>2 + ?b\<^sup>2 = ?c\<^sup>2 |]
      ==> EX p q.
             ?a = p\<^sup>2 - q\<^sup>2 &
             ?b = 2 * p * q &
             \<bar>?c\<bar> = p\<^sup>2 + q\<^sup>2 & coprime p q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 2)
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_hole 5,
                  template_app (template_hole 10, template_hole 9)))),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 10, template_hole 9)))),
          template_app
           (template_app (template_hole 6, template_var 0),
            template_app
             (template_hole 5,
              template_app (template_hole 10, template_hole 9))))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Fermat4.smaller_fermat4",
     "[| ?a ^ 4 + ?b ^ 4 = ?c\<^sup>2; ?a * ?b * ?c ~= 0; odd ?a;
         coprime ?a ?b |]
      ==> EX p q r.
             p ^ 4 + q ^ 4 = r\<^sup>2 &
             p * q * r ~= 0 & odd p & coprime p q & r\<^sup>2 < ?c\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app (template_hole 10, template_hole 9))))),
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 10, template_hole 9))))),
          template_app
           (template_app (template_hole 12, template_var 0),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)))),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_var 0),
              template_hole 6)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]
