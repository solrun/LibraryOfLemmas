Loading theory "Draft.ReduceStoreBuffer" (required by "Draft.VariantsMoreTemplates" via "Draft.Variants" via "Draft.Abbrevs" via "Draft.PIMP" via "Draft.ReduceStoreBufferSimulation")
Loading theory "Draft.SyntaxTweaks" (required by "Draft.VariantsMoreTemplates" via "Draft.Variants" via "Draft.Abbrevs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Redefining markup mode "latex"
### ML warning (line 147 of "$AFP/Store_Buffer_Reduction/SyntaxTweaks.thy"):
### Value identifier (props) has not been referenced.
structure Latex:
  sig
    val block: text -> XML.tree
    val enclose_text: string -> string -> text -> text
    val environment: string -> text -> text
    val environment_text: string -> text -> text
    val index_entry: index_entry -> text
    type index_entry = {def: bool, items: index_item list}
    type index_item = {like: string, text: text}
    val index_variants:
       (binding -> bool option -> 'a -> 'a) -> binding -> 'a -> 'a
    val isabelle_body: string -> text -> text
    val latexN: string
    val latex_indent: string -> int -> string
    val latex_markup: string * Properties.T -> string * string
    val latex_output: string -> string * int
    val macro: string -> text -> text
    val macro0: string -> text
    val output: text -> text
    val output_ascii: string -> string
    val output_ascii_breakable: string -> string -> string
    val output_name: string -> string
    val output_symbols: string list -> string
    val output_syms: string -> string
    val string: string -> text
    val symbols: Symbol_Pos.T list -> text
    val symbols_output: Symbol_Pos.T list -> text
    val text: string * Position.T -> text
    type text = XML.body
    val theory_entry: string -> string
  end
val latex_markup = fn: string * Properties.T -> string * string
### theory "Draft.SyntaxTweaks"
### 0.055s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.158s elapsed time, 0.599s cpu time, 0.135s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.297s elapsed time, 1.102s cpu time, 0.298s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs")
locale valid_sop
  fixes sop :: "nat set * ((nat => nat option) => nat)"
  assumes "valid_sop sop"
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.440s cpu time, 0.298s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
locale memory_system
  fixes
    memop_step ::
      "instr list *
       (nat => nat option) *
       'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
       => instr list *
          (nat => nat option) *
          'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
          => bool"
      (\<open>_ \<rightarrow>\<^sub>m _\<close> [60, 60] 100)
    and
    storebuffer_step ::
      "(nat => nat) * 'sb * 'owns * 'rels * 'shared
       => (nat => nat) * 'sb * 'owns * 'rels * 'shared => bool"
      (\<open>_ \<rightarrow>\<^sub>s\<^sub>b _\<close> [60, 60] 100)
consts
  shift :: "'a list => 'a stream => 'a stream"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
locale computation
  fixes
    memop_step ::
      "instr list *
       (nat => nat option) *
       'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
       => instr list *
          (nat => nat option) *
          'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
          => bool"
      (\<open>_ \<rightarrow>\<^sub>m _\<close> [60, 60] 100)
    and
    storebuffer_step ::
      "(nat => nat) * 'sb * 'owns * 'rels * 'shared
       => (nat => nat) * 'sb * 'owns * 'rels * 'shared => bool"
      (\<open>_ \<rightarrow>\<^sub>s\<^sub>b _\<close> [60, 60] 100)
    and
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and "record" :: "'p => 'p => instr list => 'sb => 'sb"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "concurrent_step"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 1064 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared"
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("_position" A) ("_position" L))
###       ("_position" B) ("_position" M))
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.union" ("_position" A) ("_position" B))
###       ("\<^const>Set.union" ("_position" L) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("_position" A)
###     ("\<^const>HOL.eq"
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###         ("_position" B) ("_position" M))
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("\<^const>Set.union" ("_position" A) ("_position" B))
###         ("\<^const>Set.union" ("_position" L) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("_position" A)
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###         ("_position" B) ("_position" M)))
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.union" ("_position" A) ("_position" B))
###       ("\<^const>Set.union" ("_position" L) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("_position" A) ("_position" L))
###     ("_position" B)
###     ("\<^const>HOL.eq" ("_position" M)
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("\<^const>Set.union" ("_position" A) ("_position" B))
###         ("\<^const>Set.union" ("_position" L) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("_position" A)
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###       ("_position" B)
###       ("\<^const>HOL.eq" ("_position" M)
###         ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###           ("\<^const>Set.union" ("_position" A) ("_position" B))
###           ("\<^const>Set.union" ("_position" L) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1069 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.empty") ("\<^const>Set.empty"))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("\<^const>Set.empty")
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### ?a1 : dom ?m1 == ?m1 ?a1 ~= None
locale gen_direct_memop_step
  fixes emp :: "'rels"
    and aug :: "nat set => nat set => 'rels => 'rels"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "gen_direct_memop_step"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.055s elapsed time, 3.999s cpu time, 0.987s GC time
"(&)"
  :: "bool => bool => bool"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.138s elapsed time, 4.252s cpu time, 1.069s GC time
Found termination order: "size <*mlex*> {}"
"direct_memop_step.gen_direct_memop_step"
  :: "instr list *
      (nat => nat option) *
      unit *
      (nat => nat) *
      bool * nat set * (nat => bool option) * (nat => bool option)
      => instr list *
         (nat => nat option) *
         unit *
         (nat => nat) *
         bool * nat set * (nat => bool option) * (nat => bool option)
         => bool"
"x \<rightarrow> Y"
  :: "bool"
"x \<rightarrow>\<^sup>* Y"
  :: "bool"
Found termination order: "size <*mlex*> {}"
"x \<rightarrow>\<^sub>v Y"
  :: "bool"
"x \<rightarrow>\<^sup>* Y"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "safe_direct_memop_state"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "safe_delayed_direct_memop_state"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "id_storebuffer_step"
  Proving monotonicity ...
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
"x \<Rightarrow>\<^sub>v Y"
  :: "bool"
"x \<Rightarrow>\<^sub>d Y"
  :: "bool"
"x \<Rightarrow>\<^sub>v\<^sup>* Y"
  :: "bool"
"x \<Rightarrow>\<^sub>d\<^sup>* Y"
  :: "bool"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
### Ambiguous input (line 1460 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" safe_delayed) ("_position" cfg))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" ts)
###         ("_patterns" ("_position" m) ("_position" \<S>)))
###       ("_position" cfg))
###     ("_tuple"
###       ("_All_less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" ts))
###         ("_Let"
###           ("_bind"
###             ("_pattern" ("_position" p)
###               ("_patterns" ("_position" is)
###                 ("_patterns" ("_position" \<theta>)
###                   ("_patterns" ("_position" x)
###                     ("_patterns" ("_position" \<D>)
###                       ("_patterns" ("_position" \<O>)
###                         ("_position" \<R>)))))))
###             ("\<^const>List.nth" ("_position" ts) ("_position" i)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" owned) ("_position" ts)))))
###       ("_tuple_arg"
###         ("\<^const>ReduceStoreBuffer.safe_direct_memop_state"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" released) ("_position" ts)))
###           ("_position" i)
###           ("_tuple" ("_position" is)
###             ("_tuple_args" ("_position" \<theta>)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_args" ("_position" \<D>)
###                   ("_tuple_args" ("_position" \<O>)
###                     ("_tuple_arg" ("_position" \<S>))))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" safe_delayed) ("_position" cfg))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" ts)
###         ("_patterns" ("_position" m) ("_position" \<S>)))
###       ("_position" cfg))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" ts))
###       ("_Let"
###         ("_bind"
###           ("_pattern" ("_position" p)
###             ("_patterns" ("_position" is)
###               ("_patterns" ("_position" \<theta>)
###                 ("_patterns" ("_position" x)
###                   ("_patterns" ("_position" \<D>)
###                     ("_patterns" ("_position" \<O>) ("_position" \<R>)))))))
###           ("\<^const>List.nth" ("_position" ts) ("_position" i)))
###         ("\<^const>ReduceStoreBuffer.safe_delayed_direct_memop_state"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" owned) ("_position" ts)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" released) ("_position" ts)))
###           ("_position" i)
###           ("_tuple" ("_position" is)
###             ("_tuple_args" ("_position" \<theta>)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_args" ("_position" \<D>)
###                   ("_tuple_args" ("_position" \<O>)
###                     ("_tuple_arg" ("_position" \<S>))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale simple_ownership_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "simple_ownership_distinct ts"
locale read_only_unowned
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "read_only_unowned \<S> ts"
locale unowned_shared
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "unowned_shared \<S> ts"
locale program_progress
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
  assumes "program_progress program_step"
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 6.608s cpu time, 1.390s GC time
Loading theory "Draft.Templates" (required by "Draft.VariantsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.VariantsMoreTemplates")
locale program_trace
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and
    c :: "nat
          => ('a *
              instr list *
              (nat => nat option) *
              unit * bool * nat set * (nat => bool option)) list *
             (nat => nat) * (nat => bool option)"
    and n :: "nat"
    and k :: "nat"
  assumes "program_trace program_step c n k"
locale program_safe_reach_upto
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and n :: "nat"
    and
    safe ::
      "('a *
        instr list *
        (nat => nat option) *
        unit * bool * nat set * (nat => bool option)) list *
       (nat => nat) * (nat => bool option)
       => bool"
    and
    c\<^sub>0 ::
      "('a *
        instr list *
        (nat => nat option) *
        unit * bool * nat set * (nat => bool option)) list *
       (nat => nat) * (nat => bool option)"
  assumes "program_safe_reach_upto program_step n safe c\<^sub>0"
*** Undefined fact: "c_n" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
*** At command "thm" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.611s elapsed time, 1.417s cpu time, 0.301s GC time
Proofs for inductive predicate(s) "flush_step"
  Proving monotonicity ...
"x \<rightarrow>\<^sub>f\<^sup>* Y"
  :: "bool"
Proofs for inductive predicate(s) "store_buffer_step"
  Proving monotonicity ...
"x \<rightarrow>w\<^sup>* Y"
  :: "bool"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sb_memop_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sbh_memop_step"
  Proving monotonicity ...
consts
  non_volatile_owned_or_read_only ::
    "bool => (nat => bool option) => nat set => 'a memref list => bool"
consts
  acquired :: "bool => 'a memref list => nat set => nat set"
consts
  share :: "'a memref list => (nat => bool option) => nat => bool option"
consts
  acquired_reads :: "bool => 'a memref list => nat set => nat set"
consts
  all_acquired :: "'a memref list => nat set"
consts
  sharing_consistent ::
    "(nat => bool option) => nat set => 'a memref list => bool"
consts
  read_only_reads :: "nat set => 'a memref list => nat set"
consts
  non_volatile_writes_unshared ::
    "(nat => bool option) => 'a memref list => bool"
consts
  no_write_to_read_only_memory ::
    "(nat => bool option) => 'a memref list => bool"
locale outstanding_non_volatile_refs_owned_or_read_only
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_non_volatile_refs_owned_or_read_only \<S> ts"
locale outstanding_volatile_writes_unowned_by_others
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_volatile_writes_unowned_by_others ts"
locale read_only_reads_unowned
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "read_only_reads_unowned ts"
locale ownership_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "ownership_distinct ts"
locale valid_ownership
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_ownership \<S> ts"
locale outstanding_non_volatile_writes_unshared
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_non_volatile_writes_unshared \<S> ts"
locale sharing_consis
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "sharing_consis \<S> ts"
locale no_outstanding_write_to_read_only_memory
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "no_outstanding_write_to_read_only_memory \<S> ts"
locale valid_sharing
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_sharing \<S> ts"
locale valid_ownership_and_sharing
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_ownership_and_sharing \<S> ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 7457 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("\<^const>Pure.dummy_pattern")
###                       ("_cargs" ("_position" t\<^sub>i)
###                         ("\<^const>Pure.dummy_pattern")))))
###                 ("_case_syntax"
###                   ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("\<^const>Pure.dummy_pattern")
###                             ("_cargs" ("_position" t\<^sub>j)
###                               ("\<^const>Pure.dummy_pattern")))))
###                       ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                         ("_position" t\<^sub>j)))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True)))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_position" True)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("\<^const>Pure.dummy_pattern")
###                       ("_cargs" ("_position" t\<^sub>i)
###                         ("\<^const>Pure.dummy_pattern")))))
###                 ("_case_syntax"
###                   ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                   ("_case1"
###                     ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                       ("_cargs" ("\<^const>Pure.dummy_pattern")
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("_position" t\<^sub>j)
###                             ("\<^const>Pure.dummy_pattern")))))
###                     ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                       ("_position" t\<^sub>j)))))
###               ("_case2"
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_position" True))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case1"
###               ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                 ("_cargs" ("\<^const>Pure.dummy_pattern")
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("_position" t\<^sub>i)
###                       ("\<^const>Pure.dummy_pattern")))))
###               ("_case_syntax"
###                 ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                       ("_cargs" ("\<^const>Pure.dummy_pattern")
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("_position" t\<^sub>j)
###                             ("\<^const>Pure.dummy_pattern")))))
###                     ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                       ("_position" t\<^sub>j)))
###                   ("_case2"
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale load_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_distinct ts"
locale read_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "read_tmps_distinct ts"
locale load_tmps_read_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_read_tmps_distinct ts"
locale tmps_distinct
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "tmps_distinct ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale valid_write_sops
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_write_sops ts"
locale valid_store_sops
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_store_sops ts"
locale valid_sops
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_sops ts"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale valid_reads
  fixes m :: "nat => nat"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_reads m ts"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale valid_history
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_history program_step ts"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale valid_data_dependency
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_data_dependency ts"
locale load_tmps_fresh
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_fresh ts"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale enough_flushs
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "enough_flushs ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale causal_program_history
  fixes is\<^sub>s\<^sub>b :: "instr list"
    and sb :: "'a memref list"
  assumes "causal_program_history is\<^sub>s\<^sub>b sb"
locale valid_program_history
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_program_history ts"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst p)) <*mlex*>
   {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst p)) <*mlex*>
   {}"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
"x \<Rightarrow>\<^sub>s\<^sub>b Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sup>* Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sub>h Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sub>h\<^sup>* Y"
  :: "bool"
locale valid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
  assumes "valid_program program_step valid_prog"
consts
  release ::
    "'a memref list
     => nat set => (nat => bool option) => nat => bool option"
locale xvalid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program program_step valid_prog valid"
consts
  all_shared :: "'a memref list => nat set"
consts
  all_unshared :: "'a memref list => nat set"
### Ambiguous input (line 15203 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<S>) ("_idts" ("_position" R) ("_position" L)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ownership_distinct) ("_position" ts)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sharing_consis)
###             ("_cargs" ("_position" \<S>) ("_position" ts))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" is)
###                     ("_idts" ("_position" \<O>)
###                       ("_idts" ("_position" \<R>)
###                         ("_idts" ("_position" \<D>)
###                           ("_idts" ("_position" \<theta>)
###                             ("_position" sb))))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" i)
###                   ("_applC" ("_position" length) ("_position" ts)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_args" ("_position" \<theta>)
###                           ("_tuple_args" ("_position" sb)
###                             ("_tuple_args" ("_position" \<D>)
###                               ("_tuple_args" ("_position" \<O>)
###                                 ("_tuple_arg" ("_position" \<R>)))))))))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Set.inter"
###                       ("_applC" ("_position" all_shared)
###                         ("_applC" ("_position" takeWhile)
###                           ("_cargs"
###                             ("\<^const>Fun.comp" ("_position" Not)
###                               ("_position"
###                                 is_volatile_Write\<^sub>s\<^sub>b))
###                             ("_position" sb))))
###                       ("_position" L))
###                     ("\<^const>Set.empty"))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" i)
###                   ("_idts" ("_position" p)
###                     ("_idts" ("_position" is)
###                       ("_idts" ("_position" \<O>)
###                         ("_idts" ("_position" \<R>)
###                           ("_idts" ("_position" \<D>)
###                             ("_idts" ("_position" \<theta>)
###                               ("_position" sb))))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" ts)))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" is)
###                           ("_tuple_args" ("_position" \<theta>)
###                             ("_tuple_args" ("_position" sb)
###                               ("_tuple_args" ("_position" \<D>)
###                                 ("_tuple_args" ("_position" \<O>)
###                                   ("_tuple_arg" ("_position" \<R>)))))))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" all_shared)
###                           ("_applC" ("_position" takeWhile)
###                             ("_cargs"
###                               ("\<^const>Fun.comp" ("_position" Not)
###                                 ("_position"
###                                   is_volatile_Write\<^sub>s\<^sub>b))
###                               ("_position" sb))))
###                         ("_position" A))
###                       ("\<^const>Set.empty"))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" i)
###                     ("_idts" ("_position" p)
###                       ("_idts" ("_position" is)
###                         ("_idts" ("_position" \<O>)
###                           ("_idts" ("_position" \<R>)
###                             ("_idts" ("_position" \<D>)
###                               ("_idts" ("_position" \<theta>)
###                                 ("_position" sb))))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Orderings.ord_class.less" ("_position" i)
###                       ("_applC" ("_position" length) ("_position" ts)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>List.nth" ("_position" ts)
###                           ("_position" i))
###                         ("_tuple" ("_position" p)
###                           ("_tuple_args" ("_position" is)
###                             ("_tuple_args" ("_position" \<theta>)
###                               ("_tuple_args" ("_position" sb)
###                                 ("_tuple_args" ("_position" \<D>)
###                                   ("_tuple_args" ("_position" \<O>)
###                                     ("_tuple_arg" ("_position" \<R>)))))))))
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Set.inter"
###                           ("_applC" ("_position" all_acquired)
###                             ("_applC" ("_position" takeWhile)
###                               ("_cargs"
###                                 ("\<^const>Fun.comp" ("_position" Not)
###                                   ("_position"
###                                     is_volatile_Write\<^sub>s\<^sub>b))
###                                 ("_position" sb))))
###                           ("_position" R))
###                         ("\<^const>Set.empty"))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" i)
###                       ("_idts" ("_position" p)
###                         ("_idts" ("_position" is)
###                           ("_idts" ("_position" \<O>)
###                             ("_idts" ("_position" \<R>)
###                               ("_idts" ("_position" \<D>)
###                                 ("_idts" ("_position" \<theta>)
###                                   ("_position" sb))))))))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Orderings.ord_class.less" ("_position" i)
###                         ("_applC" ("_position" length) ("_position" ts)))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>List.nth" ("_position" ts)
###                             ("_position" i))
###                           ("_tuple" ("_position" p)
###                             ("_tuple_args" ("_position" is)
###                               ("_tuple_args" ("_position" \<theta>)
###                                 ("_tuple_args" ("_position" sb)
###                                   ("_tuple_args" ("_position" \<D>)
###                                     ("_tuple_args" ("_position" \<O>)
### ("_tuple_arg" ("_position" \<R>)))))))))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Set.inter"
###                             ("_applC" ("_position" all_unshared)
###                               ("_applC" ("_position" takeWhile)
###                                 ("_cargs"
###                                   ("\<^const>Fun.comp" ("_position" Not)
###                                     ("_position"
### is_volatile_Write\<^sub>s\<^sub>b))
###                                   ("_position" sb))))
###                             ("_position" R))
###                           ("\<^const>Set.empty"))))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" i)
###                         ("_idts" ("_position" p)
###                           ("_idts" ("_position" is)
###                             ("_idts" ("_position" \<O>)
###                               ("_idts" ("_position" \<R>)
###                                 ("_idts" ("_position" \<D>)
###                                   ("_idts" ("_position" \<theta>)
###                                     ("_position" sb))))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Orderings.ord_class.less" ("_position" i)
###                           ("_applC" ("_position" length) ("_position" ts)))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>List.nth" ("_position" ts)
###                               ("_position" i))
###                             ("_tuple" ("_position" p)
###                               ("_tuple_args" ("_position" is)
###                                 ("_tuple_args" ("_position" \<theta>)
###                                   ("_tuple_args" ("_position" sb)
###                                     ("_tuple_args" ("_position" \<D>)
### ("_tuple_args" ("_position" \<O>) ("_tuple_arg" ("_position" \<R>)))))))))
###                           ("\<^const>HOL.eq"
###                             ("\<^const>Set.inter"
###                               ("_applC" ("_position" all_shared)
###                                 ("_applC" ("_position" takeWhile)
###                                   ("_cargs"
###                                     ("\<^const>Fun.comp" ("_position" Not)
### ("_position" is_volatile_Write\<^sub>s\<^sub>b))
###                                     ("_position" sb))))
###                               ("_position" R))
###                             ("\<^const>Set.empty")))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>ReduceStoreBuffer.restrict_shared"
###           ("\<^const>ReduceStoreBuffer.augment_shared"
###             ("_applC" ("_position" share_all_until_volatile_write)
###               ("_cargs" ("_position" ts) ("_position" \<S>)))
###             ("_position" W) ("_position" R))
###           ("_position" A) ("_position" L))
###         ("_applC" ("_position" share_all_until_volatile_write)
###           ("_cargs" ("_position" ts)
###             ("\<^const>ReduceStoreBuffer.restrict_shared"
###               ("\<^const>ReduceStoreBuffer.augment_shared"
###                 ("_position" \<S>) ("_position" W) ("_position" R))
###               ("_position" A) ("_position" L))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<S>) ("_idts" ("_position" R) ("_position" L)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ownership_distinct) ("_position" ts)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sharing_consis)
###             ("_cargs" ("_position" \<S>) ("_position" ts))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" is)
###                     ("_idts" ("_position" \<O>)
###                       ("_idts" ("_position" \<R>)
###                         ("_idts" ("_position" \<D>)
###                           ("_idts" ("_position" \<theta>)
###                             ("_position" sb))))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" i)
###                   ("_applC" ("_position" length) ("_position" ts)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_args" ("_position" \<theta>)
###                           ("_tuple_args" ("_position" sb)
###                             ("_tuple_args" ("_position" \<D>)
###                               ("_tuple_args" ("_position" \<O>)
###                                 ("_tuple_arg" ("_position" \<R>)))))))))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Set.inter"
###                       ("_applC" ("_position" all_shared)
###                         ("_applC" ("_position" takeWhile)
###                           ("_cargs"
###                             ("\<^const>Fun.comp" ("_position" Not)
###                               ("_position"
###                                 is_volatile_Write\<^sub>s\<^sub>b))
###                             ("_position" sb))))
###                       ("_position" L))
###                     ("\<^const>Set.empty"))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" i)
###                   ("_idts" ("_position" p)
###                     ("_idts" ("_position" is)
###                       ("_idts" ("_position" \<O>)
###                         ("_idts" ("_position" \<R>)
###                           ("_idts" ("_position" \<D>)
###                             ("_idts" ("_position" \<theta>)
###                               ("_position" sb))))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" ts)))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" is)
###                           ("_tuple_args" ("_position" \<theta>)
###                             ("_tuple_args" ("_position" sb)
###                               ("_tuple_args" ("_position" \<D>)
###                                 ("_tuple_args" ("_position" \<O>)
###                                   ("_tuple_arg" ("_position" \<R>)))))))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" all_shared)
###                           ("_applC" ("_position" takeWhile)
###                             ("_cargs"
###                               ("\<^const>Fun.comp" ("_position" Not)
###                                 ("_position"
###                                   is_volatile_Write\<^sub>s\<^sub>b))
###                               ("_position" sb))))
###                         ("_position" A))
###                       ("\<^const>Set.empty"))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" i)
###                     ("_idts" ("_position" p)
###                       ("_idts" ("_position" is)
###                         ("_idts" ("_position" \<O>)
###                           ("_idts" ("_position" \<R>)
###                             ("_idts" ("_position" \<D>)
###                               ("_idts" ("_position" \<theta>)
###                                 ("_position" sb))))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Orderings.ord_class.less" ("_position" i)
###                       ("_applC" ("_position" length) ("_position" ts)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>List.nth" ("_position" ts)
###                           ("_position" i))
###                         ("_tuple" ("_position" p)
###                           ("_tuple_args" ("_position" is)
###                             ("_tuple_args" ("_position" \<theta>)
###                               ("_tuple_args" ("_position" sb)
###                                 ("_tuple_args" ("_position" \<D>)
###                                   ("_tuple_args" ("_position" \<O>)
###                                     ("_tuple_arg" ("_position" \<R>)))))))))
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Set.inter"
###                           ("_applC" ("_position" all_acquired)
###                             ("_applC" ("_position" takeWhile)
###                               ("_cargs"
###                                 ("\<^const>Fun.comp" ("_position" Not)
###                                   ("_position"
###                                     is_volatile_Write\<^sub>s\<^sub>b))
###                                 ("_position" sb))))
###                           ("_position" R))
###                         ("\<^const>Set.empty"))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" i)
###                       ("_idts" ("_position" p)
###                         ("_idts" ("_position" is)
###                           ("_idts" ("_position" \<O>)
###                             ("_idts" ("_position" \<R>)
###                               ("_idts" ("_position" \<D>)
###                                 ("_idts" ("_position" \<theta>)
###                                   ("_position" sb))))))))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Orderings.ord_class.less" ("_position" i)
###                         ("_applC" ("_position" length) ("_position" ts)))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>List.nth" ("_position" ts)
###                             ("_position" i))
###                           ("_tuple" ("_position" p)
###                             ("_tuple_args" ("_position" is)
###                               ("_tuple_args" ("_position" \<theta>)
###                                 ("_tuple_args" ("_position" sb)
###                                   ("_tuple_args" ("_position" \<D>)
###                                     ("_tuple_args" ("_position" \<O>)
### ("_tuple_arg" ("_position" \<R>)))))))))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Set.inter"
###                             ("_applC" ("_position" all_unshared)
###                               ("_applC" ("_position" takeWhile)
###                                 ("_cargs"
###                                   ("\<^const>Fun.comp" ("_position" Not)
###                                     ("_position"
### is_volatile_Write\<^sub>s\<^sub>b))
###                                   ("_position" sb))))
###                             ("_position" R))
###                           ("\<^const>Set.empty"))))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" i)
###                         ("_idts" ("_position" p)
###                           ("_idts" ("_position" is)
###                             ("_idts" ("_position" \<O>)
###                               ("_idts" ("_position" \<R>)
###                                 ("_idts" ("_position" \<D>)
###                                   ("_idts" ("_position" \<theta>)
###                                     ("_position" sb))))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Orderings.ord_class.less" ("_position" i)
###                           ("_applC" ("_position" length) ("_position" ts)))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>List.nth" ("_position" ts)
###                               ("_position" i))
###                             ("_tuple" ("_position" p)
###                               ("_tuple_args" ("_position" is)
###                                 ("_tuple_args" ("_position" \<theta>)
###                                   ("_tuple_args" ("_position" sb)
###                                     ("_tuple_args" ("_position" \<D>)
### ("_tuple_args" ("_position" \<O>) ("_tuple_arg" ("_position" \<R>)))))))))
###                           ("\<^const>HOL.eq"
###                             ("\<^const>Set.inter"
###                               ("_applC" ("_position" all_shared)
###                                 ("_applC" ("_position" takeWhile)
###                                   ("_cargs"
###                                     ("\<^const>Fun.comp" ("_position" Not)
### ("_position" is_volatile_Write\<^sub>s\<^sub>b))
###                                     ("_position" sb))))
###                               ("_position" R))
###                             ("\<^const>Set.empty")))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ReduceStoreBuffer.restrict_shared"
###         ("\<^const>ReduceStoreBuffer.augment_shared"
###           ("_applC" ("_position" share_all_until_volatile_write)
###             ("_cargs" ("_position" ts) ("_position" \<S>)))
###           ("_position" W) ("_position" R))
###         ("_position" A)
###         ("\<^const>HOL.eq" ("_position" L)
###           ("_applC" ("_position" share_all_until_volatile_write)
###             ("_cargs" ("_position" ts)
###               ("\<^const>ReduceStoreBuffer.restrict_shared"
###                 ("\<^const>ReduceStoreBuffer.augment_shared"
###                   ("_position" \<S>) ("_position" W) ("_position" R))
###                 ("_position" A) ("_position" L)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  weak_sharing_consistent :: "nat set => 'a memref list => bool"
locale weak_sharing_consis
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "weak_sharing_consis ts"
consts
  unforwarded_non_volatile_reads :: "'a memref list => nat set => nat set"
### theory "Draft.ReduceStoreBuffer"
### 9.117s elapsed time, 16.456s cpu time, 4.809s GC time
Loading theory "Draft.ReduceStoreBufferSimulation" (required by "Draft.VariantsMoreTemplates" via "Draft.Variants" via "Draft.Abbrevs" via "Draft.PIMP")
locale initial\<^sub>s\<^sub>b
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
    and \<S> :: "nat => bool option"
  assumes "initial\<^sub>s\<^sub>b ts \<S>"
Proofs for inductive predicate(s) "sim_config"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sim_history_config"
  Proving monotonicity ...
"program_trace"
  :: "((nat => nat option) => 'a => 'a * instr list => bool)
      => (nat
          => ('a *
              instr list *
              (nat => nat option) *
              unit * bool * nat set * (nat => bool option)) list *
             (nat => nat) * (nat => bool option))
         => nat => nat => bool"
locale xvalid_program_progress
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program_progress program_step valid_prog valid"
Proofs for inductive predicate(s) "sim_direct_config"
  Proving monotonicity ...
locale initial\<^sub>d
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) * 'b * 'c * nat set * ('d => 'e option)) list"
    and \<S> :: "nat => bool option"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'f list * 'c * nat set * ('d => 'e option)) list
       => bool"
  assumes "initial\<^sub>d ts \<S> valid"
locale empty_store_buffers
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "empty_store_buffers ts"
locale initial\<^sub>v
  fixes
    ts ::
      "('a *
        instr list * (nat => nat option) * 'b * 'c * nat set * 'd) list"
    and \<S> :: "nat => bool option"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'e list * 'c * nat set * ('f => 'g option)) list
       => bool"
  assumes "initial\<^sub>v ts \<S> valid"
locale xvalid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program program_step valid_prog valid"
### theory "Draft.ReduceStoreBufferSimulation"
### 3.191s elapsed time, 6.672s cpu time, 4.789s GC time
Loading theory "Draft.PIMP" (required by "Draft.VariantsMoreTemplates" via "Draft.Variants" via "Draft.Abbrevs")
consts
  used_tmps :: "expr => nat"
consts
  issue_expr :: "nat => expr => instr list"
consts
  eval_expr :: "nat => expr => nat set * ((nat => nat option) => nat)"
consts
  valid_sops_expr :: "nat => expr => bool"
consts
  valid_sops_stmt :: "nat => stmt => bool"
Proofs for inductive predicate(s) "stmt_step"
  Proving monotonicity ...
consts
  prog_configs :: "'a memref list => 'a set"
locale separated_tmps
  fixes
    ts ::
      "((stmt * nat) *
        instr list *
        (nat => 'a option) * (stmt * nat) memref list * 'b * 'c) list"
  assumes "separated_tmps ts"
[| ?i < length ?ts;
   ?ts ! ?i = (?p, ?is, ?\<theta>, ?sb, ?\<D>, ?\<O>, ?\<R>);
   (?m, ?sb, ?\<O>, ?\<R>,
    ?\<S>) \<rightarrow>\<^sub>f (?m', ?sb', ?\<O>', ?\<R>', ?\<S>');
   valid_pimp ?ts |]
==> valid_pimp
     (?ts[?i := (?p, ?is, ?\<theta>, ?sb', ?\<D>, ?\<O>', ?\<R>')])
[| PIMP.sbh_concurrent_step
    (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b, ?\<S>\<^sub>s\<^sub>b)
    (?ts\<^sub>s\<^sub>b', ?m\<^sub>s\<^sub>b', ?\<S>\<^sub>s\<^sub>b');
   valid_ownership ?\<S>\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   valid_reads ?m\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   valid_history stmt_step ?ts\<^sub>s\<^sub>b;
   valid_sharing ?\<S>\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   tmps_distinct ?ts\<^sub>s\<^sub>b; valid_sops ?ts\<^sub>s\<^sub>b;
   valid_data_dependency ?ts\<^sub>s\<^sub>b;
   load_tmps_fresh ?ts\<^sub>s\<^sub>b; enough_flushs ?ts\<^sub>s\<^sub>b;
   valid_program_history ?ts\<^sub>s\<^sub>b;
   valid_pimp ?ts\<^sub>s\<^sub>b;
   (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b,
    ?\<S>\<^sub>s\<^sub>b) \<sim> (?ts, ?m, ?\<S>);
   PIMP.safe_reach_direct safe_delayed (?ts, ?m, ?\<S>) |]
==> valid_ownership ?\<S>\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    valid_reads ?m\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    valid_history stmt_step ?ts\<^sub>s\<^sub>b' &
    valid_sharing ?\<S>\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    tmps_distinct ?ts\<^sub>s\<^sub>b' &
    valid_data_dependency ?ts\<^sub>s\<^sub>b' &
    valid_sops ?ts\<^sub>s\<^sub>b' &
    load_tmps_fresh ?ts\<^sub>s\<^sub>b' &
    enough_flushs ?ts\<^sub>s\<^sub>b' &
    valid_program_history ?ts\<^sub>s\<^sub>b' &
    valid_pimp ?ts\<^sub>s\<^sub>b' &
    (EX ts' \<S>' m'.
        PIMP.direct_concurrent_steps (?ts, ?m, ?\<S>) (ts', m', \<S>') &
        (?ts\<^sub>s\<^sub>b', ?m\<^sub>s\<^sub>b',
         ?\<S>\<^sub>s\<^sub>b') \<sim> (ts', m', \<S>'))
[| PIMP.sbh_concurrent_steps
    (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b, ?\<S>\<^sub>s\<^sub>b)
    (?ts\<^sub>s\<^sub>b', ?m\<^sub>s\<^sub>b', ?\<S>\<^sub>s\<^sub>b');
   valid_ownership ?\<S>\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   valid_reads ?m\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   valid_history stmt_step ?ts\<^sub>s\<^sub>b;
   valid_sharing ?\<S>\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b;
   tmps_distinct ?ts\<^sub>s\<^sub>b; valid_sops ?ts\<^sub>s\<^sub>b;
   valid_data_dependency ?ts\<^sub>s\<^sub>b;
   load_tmps_fresh ?ts\<^sub>s\<^sub>b; enough_flushs ?ts\<^sub>s\<^sub>b;
   valid_program_history ?ts\<^sub>s\<^sub>b;
   valid_pimp ?ts\<^sub>s\<^sub>b;
   (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b,
    ?\<S>\<^sub>s\<^sub>b) \<sim> (?ts, ?m, ?\<S>);
   PIMP.safe_reach_direct safe_delayed (?ts, ?m, ?\<S>) |]
==> valid_ownership ?\<S>\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    valid_reads ?m\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    valid_history stmt_step ?ts\<^sub>s\<^sub>b' &
    valid_sharing ?\<S>\<^sub>s\<^sub>b' ?ts\<^sub>s\<^sub>b' &
    tmps_distinct ?ts\<^sub>s\<^sub>b' &
    valid_data_dependency ?ts\<^sub>s\<^sub>b' &
    valid_sops ?ts\<^sub>s\<^sub>b' &
    load_tmps_fresh ?ts\<^sub>s\<^sub>b' &
    enough_flushs ?ts\<^sub>s\<^sub>b' &
    valid_program_history ?ts\<^sub>s\<^sub>b' &
    valid_pimp ?ts\<^sub>s\<^sub>b' &
    (EX ts' m' \<S>'.
        PIMP.direct_concurrent_steps (?ts, ?m, ?\<S>) (ts', m', \<S>') &
        (?ts\<^sub>s\<^sub>b', ?m\<^sub>s\<^sub>b',
         ?\<S>\<^sub>s\<^sub>b') \<sim> (ts', m', \<S>'))
[| PIMP.sb_concurrent_step
    (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b, ?\<S>\<^sub>s\<^sub>b)
    (?ts\<^sub>s\<^sub>b', ?m\<^sub>s\<^sub>b', ?\<S>\<^sub>s\<^sub>b');
   ?ts\<^sub>s\<^sub>b \<sim>\<^sub>h ?ts\<^sub>s\<^sub>b\<^sub>h ;
   (?ts\<^sub>s\<^sub>b\<^sub>h, ?m\<^sub>s\<^sub>b,
    ?\<S>\<^sub>s\<^sub>b\<^sub>h) \<sim> (?ts, ?m, ?\<S>);
   valid_ownership ?\<S>\<^sub>s\<^sub>b\<^sub>h
    ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_reads ?m\<^sub>s\<^sub>b ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_history stmt_step ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_sharing ?\<S>\<^sub>s\<^sub>b\<^sub>h ?ts\<^sub>s\<^sub>b\<^sub>h;
   tmps_distinct ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_sops ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_data_dependency ?ts\<^sub>s\<^sub>b\<^sub>h;
   load_tmps_fresh ?ts\<^sub>s\<^sub>b\<^sub>h;
   enough_flushs ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_program_history ?ts\<^sub>s\<^sub>b\<^sub>h;
   valid_pimp ?ts\<^sub>s\<^sub>b\<^sub>h;
   PIMP.safe_reach_direct safe_delayed (?ts, ?m, ?\<S>) |]
==> EX ts\<^sub>s\<^sub>b\<^sub>h' \<S>\<^sub>s\<^sub>b\<^sub>h'.
       PIMP.sbh_concurrent_steps
        (?ts\<^sub>s\<^sub>b\<^sub>h, ?m\<^sub>s\<^sub>b,
         ?\<S>\<^sub>s\<^sub>b\<^sub>h)
        (ts\<^sub>s\<^sub>b\<^sub>h', ?m\<^sub>s\<^sub>b',
         \<S>\<^sub>s\<^sub>b\<^sub>h') &
       ?ts\<^sub>s\<^sub>b' \<sim>\<^sub>h ts\<^sub>s\<^sub>b\<^sub>h'  &
       valid_ownership \<S>\<^sub>s\<^sub>b\<^sub>h'
        ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_reads ?m\<^sub>s\<^sub>b' ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_history stmt_step ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_sharing \<S>\<^sub>s\<^sub>b\<^sub>h'
        ts\<^sub>s\<^sub>b\<^sub>h' &
       tmps_distinct ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_data_dependency ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_sops ts\<^sub>s\<^sub>b\<^sub>h' &
       load_tmps_fresh ts\<^sub>s\<^sub>b\<^sub>h' &
       enough_flushs ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_program_history ts\<^sub>s\<^sub>b\<^sub>h' &
       valid_pimp ts\<^sub>s\<^sub>b\<^sub>h' &
       (EX ts' \<S>' m'.
           PIMP.direct_concurrent_steps (?ts, ?m, ?\<S>) (ts', m', \<S>') &
           (ts\<^sub>s\<^sub>b\<^sub>h', ?m\<^sub>s\<^sub>b',
            \<S>\<^sub>s\<^sub>b\<^sub>h') \<sim> (ts', m', \<S>'))
### theory "Draft.PIMP"
### 1.874s elapsed time, 2.648s cpu time, 0.979s GC time
Loading theory "Draft.Abbrevs" (required by "Draft.VariantsMoreTemplates" via "Draft.Variants")
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
"(ts, m) \<Rightarrow>\<^sub>s\<^sub>b (ts', m')"
  :: "bool"
[| ?i < length ?ts;
   ?ts ! ?i = (?p, ?is, ?\<theta>, ?sb, ?\<D>, ?\<O>, ?\<R>);
   ?\<theta>\<turnstile> ?p \<rightarrow>\<^sub>s (?p', ?is') |]
==> store_buffer.concurrent_step (?ts, ?m, ?\<S>)
     (?ts[?i := (?p', ?is @ ?is', ?\<theta>, ?sb, ?\<D>, ?\<O>, ?\<R>)], ?m,
      ?\<S>)
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
locale xvalid_program_progress
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program_progress program_step valid_prog valid"
### theory "Draft.Abbrevs"
### 0.328s elapsed time, 0.503s cpu time, 0.194s GC time
Loading theory "Draft.Variants" (required by "Draft.VariantsMoreTemplates")
val it =
   Const ("Product_Type.prod.case_prod",
          "('a => 'b * 'c * unit * 'd * 'e * 'f
                  => 'a * 'b * 'c * 'g list * unit * unit * unit)
           => 'a * 'b * 'c * unit * 'd * 'e * 'f
              => 'a * 'b * 'c * 'g list * unit * unit * unit") $
     Abs ("p", "'a",
       Const ("Product_Type.prod.case_prod",
              "('b => 'c * unit * 'd * 'e * 'f
                      => 'a * 'b * 'c * 'g list * unit ... ... ... ...)
               => 'b * 'c * unit * 'd * 'e * 'f
                  => 'a * 'b * 'c * 'g list * unit * unit * unit") $
         Abs ("is", "'b",
           Const ("Product_Type.prod.case_prod",
                  "('c => ... ... ... ... ... ... ...)
                   => 'c * unit ... ... ... ...
                      => 'a * 'b ... ... ... ...") $
             Abs ("\<theta>", "'c",
               Const ("Product_Type.prod.case_prod", "...") $
                 Abs ("sb", "...", ...)))):
   term
### theory "Draft.Variants"
### 0.420s elapsed time, 0.609s cpu time, 0.253s GC time
Loading theory "Draft.VariantsMoreTemplates"
val templateLemmas =
   [("Variants.restrict_map_inverse", "?m |` (dom ?m - ?X) = ?m |` (- ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Variants.conj_assoc", "((?P & ?Q) & ?X) = (?P & ?Q & ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Variants.SWhile'",
     "?s' = Cond ?e (Seq ?s (While ?e ?s)) Skip ==>
      ?\<theta>\<turnstile> (While ?e ?s,
                             ?t) \<rightarrow>\<^sub>p ((?s', ?t), [])",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2))),
            template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Variants.Write\<^sub>s\<^sub>bNonVolatile",
     "(?m, Write\<^sub>s\<^sub>b False ?a ?sop ?v ?A ?L ?R ?W # ?rs, ?\<O>,
       ?\<R>,
       ?\<S>) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?m(?a := ?v), ?rs,
               ?\<O>, ?\<R>, ?\<S>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 11),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_var 10),
                                   template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 4)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 11),
                   template_var 10),
                 template_var 8)),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))))
         )),
    ("Variants.DRead",
     "(Read ?volatile ?a ?t # ?is, ?\<theta>, ?x, ?m,
       ?ghst) \<rightarrow> (?is, ?\<theta>(?t |-> ?m ?a), ?x, ?m, ?ghst)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, t_empty), template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 7),
                         template_var 6),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 5),
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 6)))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))))
         )),
    ("Variants.SBHGhost'",
     "(Ghost ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
       ?G) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>,
            ?sb @ [Ghost\<^sub>s\<^sub>b ?A ?L ?R ?W], ?m, ?G)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 7, template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 9, template_var 4),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 5)),
                       template_hole 0))),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)))))
         )),
    ("Variants.VRead",
     "(Read ?volatile ?a ?t # ?is, ?\<theta>, ?x, ?m,
       ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>(?t |-> ?m ?a), ?x, ?m,
                                     ?ghst)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8), t_empty),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 7),
                         template_var 6),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 5),
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 6)))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))))
         )),
    ("Variants.DWriteNonVolatile",
     "(Write False ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
       ?ghst) \<rightarrow> (?is, ?\<theta>, ?x, ?m(?a := ?f ?\<theta>),
                             ?ghst)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, t_empty), template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_hole 5),
                                 template_var 11),
                               template_app
                                (template_app
                                  (template_hole 4, template_var 10),
                                 template_var 9)),
                             template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 8, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 11),
                       template_app (template_var 9, template_var 3))),
                   template_var 0)))))
         )),
    ("Variants.VWriteNonVolatile",
     "(Write False ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
       ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>, ?x, ?m
                                     (?a := ?f ?\<theta>), ?ghst)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 9), t_empty),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_hole 5),
                                 template_var 11),
                               template_app
                                (template_app
                                  (template_hole 4, template_var 10),
                                 template_var 9)),
                             template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))))),
           template_app
            (template_app (template_hole 8, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 11),
                       template_app (template_var 9, template_var 3))),
                   template_var 0)))))
         )),
    ("Variants.SBRead",
     "?v = (case buffered_val ?sb ?a of None => ?m ?a | Some v' => v') ==>
      (Read ?volatile ?a ?t # ?is, ?\<theta>, ?sb, ?m,
       ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>(?t |-> ?v), ?sb,
       ?m, ?ghst)",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_var 7, template_var 6)),
              t_empty),
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 6)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 4),
                           template_var 6),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 0))))),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3),
                     template_app (template_hole 0, template_var 8))),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 0)))))
           ))),
    ("Variants.SafeRMWReadOnly",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a)); ?a : dom ?\<S> Un ?\<O> |]
      ==> ?\<O>s,?i\<turnstile> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W #
                                 ?is,
                                 ?\<theta>, ?m, ?\<D>, ?\<O>,
                                 ?\<S>) \<surd>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 17,
                  template_app
                   (template_app
                     (template_app (template_hole 13, template_var 16),
                      template_var 15),
                    template_app
                     (template_hole 12,
                      template_app (template_var 14, template_var 13))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 13),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 12)),
                template_var 11))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 10),
               template_var 9),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 5, template_var 13),
                                     template_var 15),
                                   template_app
                                    (template_app
(template_hole 4, template_var 8),
                                     template_var 7)),
                                 template_var 17),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 16),
                 template_app
                  (template_app (template_hole 2, template_var 14),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 11),
                       template_var 12))))))
           ))),
    ("Variants.VFence",
     "[| ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' = (False, ?\<O>, ?\<R>, ?\<S>) |]
      ==> (Fence # ?is, ?\<theta>, ?x, ?m,
           ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>, ?x, ?m, ?ghst')",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 11, template_var 8),
            template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5)))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 11, template_hole 8),
            template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6), t_empty),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 9))))),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)))))
           ))),
    ("Variants.SCond'",
     "[| ALL sop. ?e ~= Tmp sop; ?e' = Tmp (eval_expr ?t ?e);
         ?t' = ?t + used_tmps ?e; ?is = issue_expr ?t ?e |]
      ==> ?\<theta>\<turnstile> (Cond ?e ?s\<^sub>1 ?s\<^sub>2,
                                 ?t) \<rightarrow>\<^sub>p ((Cond ?e'
                        ?s\<^sub>1 ?s\<^sub>2,
                       ?t'),
                      ?is)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 7))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_app (template_hole 6, template_var 7))),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 1),
                     template_var 0)),
                 template_var 5)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 6),
                         template_var 1),
                       template_var 0)),
                   template_var 4)),
               template_var 3))
           ))),
    ("Variants.SBWriteNonVolatile'",
     "?sb' =
      ?sb @
      [Write\<^sub>s\<^sub>b False ?a (?D, ?f) (?f ?\<theta>) ?A ?L ?R
        ?W] ==>
      (Write False ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
       ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>, ?sb', ?m,
       ?ghst)",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 12, template_var 11),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_hole 9),
                              template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8)),
                          template_app (template_var 8, template_var 7)),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 9),
                                   template_var 10),
                                 template_app
                                  (template_app
                                    (template_hole 8, template_var 9),
                                   template_var 8)),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_app
                    (template_app (template_hole 1, template_var 11),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_app
                  (template_app (template_hole 1, template_var 12),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Variants.SBHWriteNonVolatile'",
     "?sb' =
      ?sb @
      [Write\<^sub>s\<^sub>b False ?a (?D, ?f) (?f ?\<theta>) ?A ?L ?R
        ?W] ==>
      (Write False ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
       ?ghst) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>, ?sb',
               ?m, ?ghst)",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 12, template_var 11),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_hole 9),
                              template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8)),
                          template_app (template_var 8, template_var 7)),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 9),
                                   template_var 10),
                                 template_app
                                  (template_app
                                    (template_hole 8, template_var 9),
                                   template_var 8)),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_app
                    (template_app (template_hole 1, template_var 11),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_app
                  (template_app (template_hole 1, template_var 12),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Variants.SBWriteVolatile'",
     "?sb' =
      ?sb @
      [Write\<^sub>s\<^sub>b True ?a (?D, ?f) (?f ?\<theta>) ?A ?L ?R
        ?W] ==>
      (Write True ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
       ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>, ?sb', ?m,
       ?ghst)",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 12, template_var 11),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_hole 9),
                              template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8)),
                          template_app (template_var 8, template_var 7)),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 9),
                                   template_var 10),
                                 template_app
                                  (template_app
                                    (template_hole 8, template_var 9),
                                   template_var 8)),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_app
                    (template_app (template_hole 1, template_var 11),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_app
                  (template_app (template_hole 1, template_var 12),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Variants.SBWrite'",
     "?sb' =
      ?sb @
      [Write\<^sub>s\<^sub>b ?volatile ?a (?D, ?f) (?f ?\<theta>) ?A ?L ?R
        ?W] ==>
      (Write ?volatile ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
       ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>, ?sb', ?m,
       ?ghst)",
     template_implication
      ([template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 11, template_var 12),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 11),
                              template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8)),
                          template_app (template_var 8, template_var 7)),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_var 11),
                                   template_var 10),
                                 template_app
                                  (template_app
                                    (template_hole 8, template_var 9),
                                   template_var 8)),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_app
                    (template_app (template_hole 1, template_var 12),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_app
                  (template_app (template_hole 1, template_var 13),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Variants.SBRMWReadOnly'",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a));
         ?\<theta>' = ?\<theta>(?t |-> ?m ?a) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, [],
           ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>', [], ?m,
           ?ghst)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 14,
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 13),
                      template_var 12),
                    template_app
                     (template_hole 10,
                      template_app (template_var 11, template_var 10))))
                )
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_app (template_hole 11, template_var 13),
              template_var 12),
            template_app
             (template_hole 10,
              template_app (template_var 11, template_var 10))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_var 10), template_var 12),
                                     template_app
(template_app (template_hole 4, template_var 8), template_var 7)),
                                   template_var 14),
                                 template_var 6),
                               template_var 5),
                             template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 13),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 0, template_var 11),
                       template_var 0))))),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 9),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 11),
                     template_var 0)))))
           ))),
    ("Variants.Write\<^sub>s\<^sub>bVolatile",
     "[| ?\<O>' = ?\<O> Un ?A - ?R;
         ?\<S>' =
         ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L |]
      ==> (?m, Write\<^sub>s\<^sub>b True ?a ?sop ?v ?A ?L ?R ?W # ?rs,
           ?\<O>, ?\<R>,
           ?\<S>) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?m(?a := ?v), ?rs,
                   ?\<O>', Map.empty, ?\<S>')",
     template_implication
      ([template_equation
         (template_var 13,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 12),
                template_var 11)),
            template_var 10)),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 8),
                    template_var 7),
                  template_var 10)),
              template_var 11),
            template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_hole 4), template_var 4),
                                     template_var 3),
                                   template_var 2),
                                 template_var 11),
                               template_var 6),
                             template_var 10),
                           template_var 7)),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 12),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 8))))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 13),
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_var 9)))))
           ))),
    ("Variants.SBHRead",
     "[| ?v = (case buffered_val ?sb ?a of None => ?m ?a | Some v' => v');
         ?sb' = ?sb @ [Read\<^sub>s\<^sub>b ?volatile ?a ?t ?v] |]
      ==> (Read ?volatile ?a ?t # ?is, ?\<theta>, ?sb, ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>(?t 
                   |-> ?v), ?sb', ?m, ?ghst)",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app
             (template_app
               (template_hole 15,
                template_app (template_var 8, template_var 7)),
              t_empty),
            template_app
             (template_app (template_hole 14, template_var 6),
              template_var 7))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 6),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 7),
                    template_var 3),
                  template_var 9)),
              template_hole 9)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 4),
                           template_var 7),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 0))))),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3),
                     template_app (template_hole 0, template_var 9))),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 8),
                     template_var 0)))))
           ))),
    ("Variants.Assign'",
     "[| ?D <= dom ?\<theta>;
         ?is =
         issue_expr ?t ?e @
         [Write ?volatile (?a ?\<theta>) (eval_expr ?t ?e) (?A ?\<theta>)
           (?L ?\<theta>) (?R ?\<theta>) (?W ?\<theta>)] |]
      ==> ?\<theta>\<turnstile> (Assign ?volatile (Tmp (?D, ?a)) ?e ?A ?L ?R
                                  ?W,
                                 ?t) \<rightarrow>\<^sub>p ((Skip,
                       ?t + used_tmps ?e),
                      ?is)",
     template_implication
      ([template_inequation
         (less_equals, template_var 10,
          template_app (template_hole 16, template_var 9)),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 7),
                template_var 6)),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 11, template_var 5),
                            template_app (template_var 4, template_var 9)),
                          template_app
                           (template_app (template_hole 10, template_var 7),
                            template_var 6)),
                        template_app (template_var 3, template_var 9)),
                      template_app (template_var 2, template_var 9)),
                    template_app (template_var 1, template_var 9)),
                  template_app (template_var 0, template_var 9))),
              template_hole 9)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 5),
                               template_app
                                (template_hole 5,
                                 template_app
                                  (template_app
                                    (template_hole 4, template_var 10),
                                   template_var 4))),
                             template_var 6),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 7, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_var 7),
                     template_app (template_hole 0, template_var 6)))),
               template_var 8))
           ))),
    ("Variants.Ghost\<^sub>s\<^sub>b",
     "[| ?\<O>' = ?\<O> Un ?A - ?R; ?\<R>' = aug (dom ?\<S>) ?R ?\<R>;
         ?\<S>' =
         ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L |]
      ==> (?m, Ghost\<^sub>s\<^sub>b ?A ?L ?R ?W # ?rs, ?\<O>, ?\<R>,
           ?\<S>) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?m, ?rs, ?\<O>',
                   ?\<R>', ?\<S>')",
     template_implication
      ([template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 10),
                template_var 9)),
            template_var 8)),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 6)),
              template_var 8),
            template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 6),
                    template_var 3),
                  template_var 8)),
              template_var 9),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 2, template_var 9),
                               template_var 2),
                             template_var 8),
                           template_var 3)),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 10),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 6))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 11),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 4)))))
           ))),
    ("Variants.AssignAddr'",
     "[| ALL sop. ?a ~= Tmp sop; ?a' = Tmp (eval_expr ?t ?a);
         ?t' = ?t + used_tmps ?a; ?is = issue_expr ?t ?a |]
      ==> ?\<theta>\<turnstile> (Assign ?volatile ?a ?e ?A ?L ?R ?W,
                                 ?t) \<rightarrow>\<^sub>p ((Assign
                        ?volatile ?a' ?e ?A ?L ?R ?W,
                       ?t'),
                      ?is)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_var 10,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 9),
              template_var 11))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 7, template_var 9),
            template_app (template_hole 6, template_var 11))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 9),
            template_var 11))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 5),
                               template_var 11),
                             template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 5),
                                 template_var 10),
                               template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 8)),
               template_var 7))
           ))),
    ("Variants.CASAddr'",
     "[| ALL sop. ?a ~= Tmp sop; ?a' = Tmp (eval_expr ?t ?a);
         ?t' = ?t + used_tmps ?a; ?is = issue_expr ?t ?a |]
      ==> ?\<theta>\<turnstile> (CAS ?a ?c\<^sub>e ?s\<^sub>e ?A ?L ?R ?W,
                                 ?t) \<rightarrow>\<^sub>p ((CAS ?a'
                        ?c\<^sub>e ?s\<^sub>e ?A ?L ?R ?W,
                       ?t'),
                      ?is)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_var 10,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 9),
              template_var 11))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 7, template_var 9),
            template_app (template_hole 6, template_var 11))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 9),
            template_var 11))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_var 11),
                               template_var 5),
                             template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 10),
                                 template_var 5),
                               template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 8)),
               template_var 7))
           ))),
    ("Variants.CASComp'",
     "[| ALL sop. ?c\<^sub>e ~= Tmp sop;
         ?c\<^sub>e' = Tmp (eval_expr ?t ?c\<^sub>e);
         ?t' = ?t + used_tmps ?c\<^sub>e; ?is = issue_expr ?t ?c\<^sub>e |]
      ==> ?\<theta>\<turnstile> (CAS (Tmp ?a) ?c\<^sub>e ?s\<^sub>e ?A ?L ?R
                                  ?W,
                                 ?t) \<rightarrow>\<^sub>p ((CAS (Tmp ?a)
                        ?c\<^sub>e' ?s\<^sub>e ?A ?L ?R ?W,
                       ?t'),
                      ?is)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_var 10,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 9),
              template_var 11))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 7, template_var 9),
            template_app (template_hole 6, template_var 11))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 9),
            template_var 11))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 10, template_var 5)),
                               template_var 11),
                             template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1,
                                   template_app
                                    (template_hole 10, template_var 5)),
                                 template_var 10),
                               template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_var 8)),
               template_var 7))
           ))),
    ("Variants.SBHReadBuffered'",
     "[| buffered_val ?sb ?a = Some ?v;
         ?sb' = ?sb @ [Read\<^sub>s\<^sub>b ?volatile ?a ?t ?v] |]
      ==> (Read ?volatile ?a ?t # ?is, ?\<theta>, ?sb, ?m, ?\<D>, ?\<O>,
           ?\<R>,
           ?\<S>) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>(?t 
                   |-> ?v), ?sb', ?m, ?\<D>, ?\<O>, ?\<R>, ?\<S>)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 12),
            template_var 11),
          template_app (template_hole 16, template_var 10)),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 14, template_var 12),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 8),
                      template_var 11),
                    template_var 7),
                  template_var 10)),
              template_hole 11)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app (template_hole 7, template_var 8),
                           template_var 11),
                         template_var 7)),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 6, template_var 5),
                   template_app
                    (template_app (template_hole 5, template_var 12),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_app (template_hole 2, template_var 2),
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 0)))))))),
             template_app
              (template_app (template_hole 9, template_var 6),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 7),
                     template_app (template_hole 16, template_var 10))),
                 template_app
                  (template_app (template_hole 5, template_var 9),
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_app
                          (template_app (template_hole 1, template_var 1),
                           template_var 0))))))))
           ))),
    ("Variants.SBHReadUnbuffered'",
     "[| buffered_val ?sb ?a = None;
         ?sb' = ?sb @ [Read\<^sub>s\<^sub>b ?volatile ?a ?t (?m ?a)] |]
      ==> (Read ?volatile ?a ?t # ?is, ?\<theta>, ?sb, ?m, ?\<D>, ?\<O>,
           ?\<R>,
           ?\<S>) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>(?t 
                   |-> ?m ?a), ?sb', ?m, ?\<D>, ?\<O>, ?\<R>, ?\<S>)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 10),
          template_hole 17),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 15, template_var 11),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 8),
                      template_var 10),
                    template_var 7),
                  template_app (template_var 6, template_var 10))),
              template_hole 12)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app (template_hole 8, template_var 8),
                           template_var 10),
                         template_var 7)),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_app
                    (template_app (template_hole 6, template_var 11),
                     template_app
                      (template_app (template_hole 5, template_var 6),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_app
                            (template_app (template_hole 2, template_var 1),
                             template_var 0)))))))),
             template_app
              (template_app (template_hole 10, template_var 5),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 7),
                     template_app
                      (template_hole 0,
                       template_app (template_var 6, template_var 10)))),
                 template_app
                  (template_app (template_hole 6, template_var 9),
                   template_app
                    (template_app (template_hole 5, template_var 6),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 0))))))))
           ))),
    ("Variants.VGhost",
     "[| ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (?\<D>, ?\<O> Un ?A - ?R, ?\<R>,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (Ghost ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
           ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>, ?x, ?m, ?ghst')",
     template_implication
      ([template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 14, template_var 12),
            template_app
             (template_app (template_hole 13, template_var 11),
              template_app
               (template_app (template_hole 12, template_var 10),
                template_var 9)))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 14, template_var 12),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 11),
                      template_var 7)),
                  template_var 6)),
              template_app
               (template_app (template_hole 12, template_var 10),
                template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_app (template_hole 8, template_var 9),
                          template_var 5),
                        template_var 6)),
                    template_var 7),
                  template_var 4)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6), t_empty),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 3, template_var 7),
                             template_var 4),
                           template_var 6),
                         template_var 5)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 13))))),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 8)))))
           ))),
    ("Variants.DGhost",
     "[| ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (?\<D>, ?\<O> Un ?A - ?R, aug (dom ?\<S>) ?R ?\<R>,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (Ghost ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
           ?ghst) \<rightarrow> (?is, ?\<theta>, ?x, ?m, ?ghst')",
     template_implication
      ([template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 16, template_var 12),
            template_app
             (template_app (template_hole 15, template_var 11),
              template_app
               (template_app (template_hole 14, template_var 10),
                template_var 9)))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 16, template_var 12),
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 11),
                      template_var 7)),
                  template_var 6)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 11,
                        template_app (template_hole 10, template_var 9)),
                      template_var 6),
                    template_var 10)),
                template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_app (template_hole 8, template_var 9),
                          template_var 5),
                        template_var 6)),
                    template_var 7),
                  template_var 4)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, t_empty), template_hole 11),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 3, template_var 7),
                             template_var 4),
                           template_var 6),
                         template_var 5)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 13))))),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 8)))))
           ))),
    ("Variants.SafeDelayedRMWReadOnly",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a)); ?a : dom ?\<S> Un ?\<O>;
         ALL j<length ?\<O>s. ?i ~= j --> (?\<R>s ! j) ?a ~= Some False |]
      ==> ?\<O>s,?\<R>s,?i\<turnstile> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L
   ?R ?W #
  ?is,
  ?\<theta>, ?m, ?\<D>, ?\<O>, ?\<S>) \<surd>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 18,
                  template_app
                   (template_app
                     (template_app (template_hole 22, template_var 17),
                      template_var 16),
                    template_app
                     (template_hole 21,
                      template_app (template_var 15, template_var 14))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 14),
              template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 13)),
                template_var 12))
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 11),
                 template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 5, template_var 14),
                                     template_var 16),
                                   template_app
                                    (template_app
(template_hole 4, template_var 8),
                                     template_var 7)),
                                 template_var 18),
                               template_var 6),
                             template_var 5),
                           template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 17),
                 template_app
                  (template_app (template_hole 2, template_var 15),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 12),
                       template_var 13))))))
           ))),
    ("Variants.DWriteVolatile",
     "[| ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (True, ?\<O> Un ?A - ?R, Map.empty,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (Write True ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
           ?ghst) \<rightarrow> (?is, ?\<theta>, ?x, ?m(?a := ?f ?\<theta>),
                                 ?ghst')",
     template_implication
      ([template_equation
         (template_var 16,
          template_app
           (template_app (template_hole 18, template_var 15),
            template_app
             (template_app (template_hole 17, template_var 14),
              template_app
               (template_app (template_hole 16, template_var 13),
                template_var 12)))),
        template_equation
         (template_var 11,
          template_app
           (template_app (template_hole 18, template_hole 15),
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_var 14),
                      template_var 10)),
                  template_var 9)),
              template_app
               (template_app (template_hole 16, t_empty),
                template_app
                 (template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_app (template_hole 10, template_var 12),
                          template_var 8),
                        template_var 9)),
                    template_var 10),
                  template_var 7)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, t_empty), template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 5, template_hole 15),
                                   template_var 6),
                                 template_app
                                  (template_app
                                    (template_hole 4, template_var 5),
                                   template_var 4)),
                               template_var 10),
                             template_var 7),
                           template_var 9),
                         template_var 8)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 16))))),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 6),
                         template_app (template_var 4, template_var 2))),
                     template_var 11)))))
           ))),
    ("Variants.SBHRMWReadOnly'",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' = (False, ?\<O>, Map.empty, ?\<S>) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, [],
           ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>(?t 
                   |-> ?m ?a), [], ?m, ?ghst')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 18,
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 17),
                      template_var 16),
                    template_app
                     (template_hole 15,
                      template_app (template_var 15, template_var 14))))
                )
            ),
        template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 13, template_var 12),
            template_app
             (template_app (template_hole 12, template_var 11),
              template_app
               (template_app (template_hole 11, template_var 10),
                template_var 9)))),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 13, template_hole 10),
            template_app
             (template_app (template_hole 12, template_var 11),
              template_app
               (template_app (template_hole 11, t_empty),
                template_var 9))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_var 14), template_var 16),
                                     template_app
(template_app (template_hole 4, template_var 7), template_var 6)),
                                   template_var 18),
                                 template_var 5),
                               template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 17),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 0, template_var 15),
                       template_var 13))))),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 16, template_var 17),
                       template_var 16),
                     template_app
                      (template_hole 15,
                       template_app (template_var 15, template_var 14)))),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 15),
                     template_var 8)))))
           ))),
    ("Variants.VWriteVolatile",
     "[| ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (True, ?\<O> Un ?A - ?R, ?\<R>,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (Write True ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?x, ?m,
           ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>, ?x, ?m
   (?a := ?f ?\<theta>), ?ghst')",
     template_implication
      ([template_equation
         (template_var 16,
          template_app
           (template_app (template_hole 17, template_var 15),
            template_app
             (template_app (template_hole 16, template_var 14),
              template_app
               (template_app (template_hole 15, template_var 13),
                template_var 12)))),
        template_equation
         (template_var 11,
          template_app
           (template_app (template_hole 17, template_hole 14),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 14),
                      template_var 10)),
                  template_var 9)),
              template_app
               (template_app (template_hole 15, template_var 13),
                template_app
                 (template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_app (template_hole 10, template_var 12),
                          template_var 8),
                        template_var 9)),
                    template_var 10),
                  template_var 7)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_hole 8), t_empty),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 5, template_hole 14),
                                   template_var 6),
                                 template_app
                                  (template_app
                                    (template_hole 4, template_var 5),
                                   template_var 4)),
                               template_var 10),
                             template_var 7),
                           template_var 9),
                         template_var 8)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 16))))),
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 6),
                         template_app (template_var 4, template_var 2))),
                     template_var 11)))))
           ))),
    ("Variants.SBHWriteVolatile'",
     "[| ?sb' =
         ?sb @
         [Write\<^sub>s\<^sub>b True ?a (?D, ?f) (?f ?\<theta>) ?A ?L ?R
           ?W];
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' = (True, ?\<O>, ?\<R>, ?\<S>) |]
      ==> (Write True ?a (?D, ?f) ?A ?L ?R ?W # ?is, ?\<theta>, ?sb, ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>,
                   ?sb', ?m, ?ghst')",
     template_implication
      ([template_equation
         (template_var 17,
          template_app
           (template_app (template_hole 16, template_var 16),
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 14, template_hole 13),
                              template_var 15),
                            template_app
                             (template_app
                               (template_hole 12, template_var 14),
                              template_var 13)),
                          template_app (template_var 13, template_var 12)),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8)),
              template_hole 11))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 9, template_var 6),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3)))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 9, template_hole 13),
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 13),
                                   template_var 15),
                                 template_app
                                  (template_app
                                    (template_hole 12, template_var 14),
                                   template_var 13)),
                               template_var 11),
                             template_var 10),
                           template_var 9),
                         template_var 8)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 12),
                   template_app
                    (template_app (template_hole 1, template_var 16),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 7))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 12),
                 template_app
                  (template_app (template_hole 1, template_var 17),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))))
           ))),
    ("Variants.SBRMWWrite'",
     "[| ?cond (?\<theta>(?t |-> ?m ?a));
         ?\<theta>' = ?\<theta>(?t |->
         ?ret (?m ?a) (?f (?\<theta>(?t |-> ?m ?a))));
         ?m' = ?m(?a := ?f (?\<theta>(?t |-> ?m ?a))) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, [],
           ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b (?is, ?\<theta>', [], ?m',
           ?ghst)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 15,
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 14),
                  template_var 13),
                template_app
                 (template_hole 12,
                  template_app (template_var 12, template_var 11))))
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_app (template_hole 13, template_var 14),
              template_var 13),
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_var 9,
                  template_app (template_var 12, template_var 11)),
                template_app
                 (template_var 8,
                  template_app
                   (template_app
                     (template_app (template_hole 13, template_var 14),
                      template_var 13),
                    template_app
                     (template_hole 12,
                      template_app
                       (template_var 12, template_var 11)))))))),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 12),
              template_var 11),
            template_app
             (template_var 8,
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 14),
                  template_var 13),
                template_app
                 (template_hole 12,
                  template_app (template_var 12, template_var 11))))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_var 11), template_var 13),
                                     template_app
(template_app (template_hole 4, template_var 6), template_var 8)),
                                   template_var 15),
                                 template_var 9),
                               template_var 5),
                             template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 14),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 0, template_var 12),
                       template_var 0))))),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 10),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 0)))))
           ))),
    ("Variants.DRMWReadOnly",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' = (False, ?\<O>, Map.empty, ?\<S>) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, ?x,
           ?m,
           ?ghst) \<rightarrow> (?is, ?\<theta>(?t |-> ?m ?a), ?x, ?m,
                                 ?ghst')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 19,
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 18),
                      template_var 17),
                    template_app
                     (template_hole 15,
                      template_app (template_var 16, template_var 15))))
                )
            ),
        template_equation
         (template_var 14,
          template_app
           (template_app (template_hole 13, template_var 13),
            template_app
             (template_app (template_hole 12, template_var 12),
              template_app
               (template_app (template_hole 11, template_var 11),
                template_var 10)))),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 13, template_hole 10),
            template_app
             (template_app (template_hole 12, template_var 12),
              template_app
               (template_app (template_hole 11, t_empty),
                template_var 10))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, t_empty), template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_var 15), template_var 17),
                                     template_app
(template_app (template_hole 3, template_var 8), template_var 7)),
                                   template_var 19),
                                 template_var 6),
                               template_var 5),
                             template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 18),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 16),
                       template_var 14))))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 16, template_var 18),
                       template_var 17),
                     template_app
                      (template_hole 15,
                       template_app (template_var 16, template_var 15)))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 16),
                     template_var 9)))))
           ))),
    ("Variants.VRMWReadOnly",
     "[| ~ ?cond (?\<theta>(?t |-> ?m ?a));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' = (False, ?\<O>, ?\<R>, ?\<S>) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, ?x,
           ?m,
           ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>(?t |-> ?m ?a), ?x,
   ?m, ?ghst')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 19,
                  template_app
                   (template_app
                     (template_app (template_hole 15, template_var 18),
                      template_var 17),
                    template_app
                     (template_hole 14,
                      template_app (template_var 16, template_var 15))))
                )
            ),
        template_equation
         (template_var 14,
          template_app
           (template_app (template_hole 12, template_var 13),
            template_app
             (template_app (template_hole 11, template_var 12),
              template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10)))),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 12, template_hole 9),
            template_app
             (template_app (template_hole 11, template_var 12),
              template_app
               (template_app (template_hole 10, template_var 11),
                template_var 10))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_hole 7), t_empty),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_var 15), template_var 17),
                                     template_app
(template_app (template_hole 3, template_var 8), template_var 7)),
                                   template_var 19),
                                 template_var 6),
                               template_var 5),
                             template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 18),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 16),
                       template_var 14))))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 15, template_var 18),
                       template_var 17),
                     template_app
                      (template_hole 14,
                       template_app (template_var 16, template_var 15)))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 16),
                     template_var 9)))))
           ))),
    ("Variants.CAS'",
     "[| ?D\<^sub>a <= dom ?\<theta>; ?D\<^sub>c <= dom ?\<theta>;
         eval_expr ?t ?s\<^sub>e = (?D, ?f);
         ?t' = ?t + used_tmps ?s\<^sub>e;
         ?cond = (%\<theta>. the (\<theta> ?t') = ?c \<theta>);
         ?ret = (%v\<^sub>1 v\<^sub>2. v\<^sub>1);
         ?is =
         issue_expr ?t ?s\<^sub>e @
         [RMW (?a ?\<theta>) ?t' (?D, ?f) ?cond ?ret (?A ?\<theta>)
           (?L ?\<theta>) (?R ?\<theta>) (?W ?\<theta>)] |]
      ==> ?\<theta>\<turnstile> (CAS (Tmp (?D\<^sub>a, ?a))
                                  (Tmp (?D\<^sub>c, ?c)) ?s\<^sub>e ?A ?L ?R
                                  ?W,
                                 ?t) \<rightarrow>\<^sub>p ((Skip, Suc ?t'),
                      ?is)",
     template_implication
      ([template_inequation
         (less_equals, template_var 16,
          template_app (template_hole 22, template_var 15)),
        template_inequation
         (less_equals, template_var 14,
          template_app (template_hole 22, template_var 15)),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 13),
            template_var 12),
          template_app
           (template_app (template_hole 19, template_var 11),
            template_var 10)),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 17, template_var 13),
            template_app (template_hole 16, template_var 12))),
        template_equation (template_var 8, t_empty),
        template_equation (template_var 6, t_empty),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 13),
                template_var 12)),
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 8,
                                  template_app
                                   (template_var 4, template_var 15)),
                                template_var 9),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 11),
                                template_var 10)),
                            template_var 8),
                          template_var 6),
                        template_app (template_var 3, template_var 15)),
                      template_app (template_var 2, template_var 15)),
                    template_app (template_var 1, template_var 15)),
                  template_app (template_var 0, template_var 15))),
              template_hole 7)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 15),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_app
(template_hole 19, template_var 16),
                                     template_var 4))),
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_app
                                    (template_hole 19, template_var 14),
                                   template_var 7))),
                             template_var 12),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_var 13)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_hole 1),
                   template_app (template_hole 0, template_var 9))),
               template_var 5))
           ))),
    ("Variants.SafeWriteVolatile",
     "[| ALL j<length ?\<O>s. ?i ~= j --> ?a ~: ?\<O>s ! j;
         ?a ~: read_only ?\<S>;
         ALL j<length ?\<O>s. ?i ~= j --> ?A Int ?\<O>s ! j = _emptyset;
         ?A <= ?\<O> Un dom ?\<S>; ?L <= ?A; ?R <= ?\<O>;
         ?A Int ?R = _emptyset |]
      ==> ?\<O>s,?i\<turnstile> (Write True ?a (?D, ?f) ?A ?L ?R ?W # ?is,
                                 ?\<theta>, ?m, ?\<D>, ?\<O>,
                                 ?\<S>) \<surd>",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 12),
                  template_app (template_hole 16, template_var 11))
                )
            ),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_inequation
         (less_equals, template_var 10,
          template_app
           (template_app (template_hole 11, template_var 9),
            template_app (template_hole 10, template_var 11))),
        template_inequation (less_equals, template_var 8, template_var 10),
        template_inequation (less_equals, template_var 7, template_var 9),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 10),
            template_var 7),
          template_hole 13)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 14),
               template_var 13),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_hole 5),
                                 template_var 12),
                               template_app
                                (template_app
                                  (template_hole 4, template_var 6),
                                 template_var 5)),
                             template_var 10),
                           template_var 8),
                         template_var 7),
                       template_var 4)),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 11))))))
           ))),
    ("Variants.SBHRMWWrite'",
     "[| ?cond (?\<theta>(?t |-> ?m ?a));
         ?\<theta>' = ?\<theta>(?t |->
         ?ret (?m ?a) (?f (?\<theta>(?t |-> ?m ?a))));
         ?m' = ?m(?a := ?f (?\<theta>(?t |-> ?m ?a)));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (False, ?\<O> Un ?A - ?R, Map.empty,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, [],
           ?m,
           ?ghst) \<rightarrow>\<^sub>s\<^sub>b\<^sub>h (?is, ?\<theta>',
                   [], ?m', ?ghst')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 20,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 19),
                  template_var 18),
                template_app
                 (template_hole 22,
                  template_app (template_var 17, template_var 16))))
            ),
        template_equation
         (template_var 15,
          template_app
           (template_app
             (template_app (template_hole 23, template_var 19),
              template_var 18),
            template_app
             (template_hole 22,
              template_app
               (template_app
                 (template_var 14,
                  template_app (template_var 17, template_var 16)),
                template_app
                 (template_var 13,
                  template_app
                   (template_app
                     (template_app (template_hole 23, template_var 19),
                      template_var 18),
                    template_app
                     (template_hole 22,
                      template_app
                       (template_var 17, template_var 16)))))))),
        template_equation
         (template_var 12,
          template_app
           (template_app
             (template_app (template_hole 19, template_var 17),
              template_var 16),
            template_app
             (template_var 13,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 19),
                  template_var 18),
                template_app
                 (template_hole 22,
                  template_app (template_var 17, template_var 16)))))),
        template_equation
         (template_var 11,
          template_app
           (template_app (template_hole 17, template_var 10),
            template_app
             (template_app (template_hole 16, template_var 9),
              template_app
               (template_app (template_hole 15, template_var 8),
                template_var 7)))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 17, template_hole 14),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 9),
                      template_var 5)),
                  template_var 4)),
              template_app
               (template_app (template_hole 15, t_empty),
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_app (template_hole 9, template_var 7),
                          template_var 3),
                        template_var 4)),
                    template_var 5),
                  template_var 2)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 5, template_var 16), template_var 18),
                                     template_app
(template_app (template_hole 4, template_var 1), template_var 13)),
                                   template_var 20),
                                 template_var 14),
                               template_var 5),
                             template_var 2),
                           template_var 4),
                         template_var 3)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 19),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 0, template_var 17),
                       template_var 11))))),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 15),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 12),
                     template_var 6)))))
           ))),
    ("Variants.DRMWWrite",
     "[| ?cond (?\<theta>(?t |-> ?m ?a));
         ?\<theta>' = ?\<theta>(?t |->
         ?ret (?m ?a) (?f (?\<theta>(?t |-> ?m ?a))));
         ?m' = ?m(?a := ?f (?\<theta>(?t |-> ?m ?a)));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (False, ?\<O> Un ?A - ?R, Map.empty,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, ?x,
           ?m, ?ghst) \<rightarrow> (?is, ?\<theta>', ?x, ?m', ?ghst')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 21,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 20),
                  template_var 19),
                template_app
                 (template_hole 22,
                  template_app (template_var 18, template_var 17))))
            ),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_app (template_hole 23, template_var 20),
              template_var 19),
            template_app
             (template_hole 22,
              template_app
               (template_app
                 (template_var 15,
                  template_app (template_var 18, template_var 17)),
                template_app
                 (template_var 14,
                  template_app
                   (template_app
                     (template_app (template_hole 23, template_var 20),
                      template_var 19),
                    template_app
                     (template_hole 22,
                      template_app
                       (template_var 18, template_var 17)))))))),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_app (template_hole 19, template_var 18),
              template_var 17),
            template_app
             (template_var 14,
              template_app
               (template_app
                 (template_app (template_hole 23, template_var 20),
                  template_var 19),
                template_app
                 (template_hole 22,
                  template_app (template_var 18, template_var 17)))))),
        template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 17, template_var 11),
            template_app
             (template_app (template_hole 16, template_var 10),
              template_app
               (template_app (template_hole 15, template_var 9),
                template_var 8)))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 17, template_hole 14),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 10),
                      template_var 6)),
                  template_var 5)),
              template_app
               (template_app (template_hole 15, t_empty),
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_app (template_hole 9, template_var 8),
                          template_var 4),
                        template_var 5)),
                    template_var 6),
                  template_var 3)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, t_empty), template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_var 17), template_var 19),
                                     template_app
(template_app (template_hole 3, template_var 2), template_var 14)),
                                   template_var 21),
                                 template_var 15),
                               template_var 6),
                             template_var 3),
                           template_var 5),
                         template_var 4)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 20),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 18),
                       template_var 12))))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 16),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 13),
                     template_var 7)))))
           ))),
    ("Variants.SafeDelayedWriteVolatile",
     "[| ALL j<length ?\<O>s.
            ?i ~= j --> ?a ~: ?\<O>s ! j Un dom (?\<R>s ! j);
         ?a ~: read_only ?\<S>;
         ALL j<length ?\<O>s.
            ?i ~= j --> ?A Int (?\<O>s ! j Un dom (?\<R>s ! j)) = _emptyset;
         ?A <= dom ?\<S> Un ?\<O>; ?L <= ?A; ?R <= ?\<O>;
         ?A Int ?R = _emptyset |]
      ==> ?\<O>s,?\<R>s,?i\<turnstile> (Write True ?a (?D, ?f) ?A ?L ?R ?W #
  ?is,
  ?\<theta>, ?m, ?\<D>, ?\<O>, ?\<S>) \<surd>",
     template_implication
      ([template_predicate (template_app (template_hole 25, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 19, template_var 13),
                  template_app (template_hole 14, template_var 11))
                )
            ),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_inequation
         (less_equals, template_var 10,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 16, template_var 11)),
            template_var 9)),
        template_inequation (less_equals, template_var 8, template_var 10),
        template_inequation (less_equals, template_var 7, template_var 9),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 10),
            template_var 7),
          template_hole 11)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 15),
                 template_var 12),
               template_var 14),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_hole 5),
                                 template_var 13),
                               template_app
                                (template_app
                                  (template_hole 4, template_var 6),
                                 template_var 5)),
                             template_var 10),
                           template_var 8),
                         template_var 7),
                       template_var 4)),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 11))))))
           ))),
    ("Variants.SafeRMWWrite",
     "[| ?cond (?\<theta>(?t |-> ?m ?a));
         ALL j<length ?\<O>s. ?i ~= j --> ?a ~: ?\<O>s ! j;
         ?a ~: read_only ?\<S>;
         ALL j<length ?\<O>s. ?i ~= j --> ?A Int ?\<O>s ! j = _emptyset;
         ?A <= ?\<O> Un dom ?\<S>; ?L <= ?A; ?R <= ?\<O>;
         ?A Int ?R = _emptyset |]
      ==> ?\<O>s,?i\<turnstile> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W #
                                 ?is,
                                 ?\<theta>, ?m, ?\<D>, ?\<O>,
                                 ?\<S>) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 17,
              template_app
               (template_app
                 (template_app (template_hole 25, template_var 16),
                  template_var 15),
                template_app
                 (template_hole 24,
                  template_app (template_var 14, template_var 13))))
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 13),
                  template_app (template_hole 15, template_var 10))
                )
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_inequation
         (less_equals, template_var 9,
          template_app
           (template_app (template_hole 10, template_var 8),
            template_app (template_hole 9, template_var 10))),
        template_inequation (less_equals, template_var 7, template_var 9),
        template_inequation (less_equals, template_var 6, template_var 8),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 9),
            template_var 6),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 12),
               template_var 11),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 5, template_var 13),
                                     template_var 15),
                                   template_app
                                    (template_app
(template_hole 4, template_var 5),
                                     template_var 4)),
                                 template_var 17),
                               template_var 3),
                             template_var 9),
                           template_var 7),
                         template_var 6),
                       template_var 2)),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 16),
                 template_app
                  (template_app (template_hole 2, template_var 14),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 10))))))
           ))),
    ("Variants.VRMWWrite",
     "[| ?cond (?\<theta>(?t |-> ?m ?a));
         ?\<theta>' = ?\<theta>(?t |->
         ?ret (?m ?a) (?f (?\<theta>(?t |-> ?m ?a))));
         ?m' = ?m(?a := ?f (?\<theta>(?t |-> ?m ?a)));
         ?ghst = (?\<D>, ?\<O>, ?\<R>, ?\<S>);
         ?ghst' =
         (False, ?\<O> Un ?A - ?R, ?\<R>,
          ?\<S> \<oplus>\<^bsub>?W\<^esub> ?R \<ominus>\<^bsub>?A\<^esub> ?L) |]
      ==> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R ?W # ?is, ?\<theta>, ?x,
           ?m,
           ?ghst) \<rightarrow>\<^sub>v (?is, ?\<theta>', ?x, ?m', ?ghst')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 21,
              template_app
               (template_app
                 (template_app (template_hole 22, template_var 20),
                  template_var 19),
                template_app
                 (template_hole 21,
                  template_app (template_var 18, template_var 17))))
            ),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_app (template_hole 22, template_var 20),
              template_var 19),
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_var 15,
                  template_app (template_var 18, template_var 17)),
                template_app
                 (template_var 14,
                  template_app
                   (template_app
                     (template_app (template_hole 22, template_var 20),
                      template_var 19),
                    template_app
                     (template_hole 21,
                      template_app
                       (template_var 18, template_var 17)))))))),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_app (template_hole 18, template_var 18),
              template_var 17),
            template_app
             (template_var 14,
              template_app
               (template_app
                 (template_app (template_hole 22, template_var 20),
                  template_var 19),
                template_app
                 (template_hole 21,
                  template_app (template_var 18, template_var 17)))))),
        template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 16, template_var 11),
            template_app
             (template_app (template_hole 15, template_var 10),
              template_app
               (template_app (template_hole 14, template_var 9),
                template_var 8)))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 16, template_hole 13),
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 10),
                      template_var 6)),
                  template_var 5)),
              template_app
               (template_app (template_hole 14, template_var 9),
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_app (template_hole 9, template_var 8),
                          template_var 4),
                        template_var 5)),
                    template_var 6),
                  template_var 3)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_hole 7), t_empty),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_var 17), template_var 19),
                                     template_app
(template_app (template_hole 3, template_var 2), template_var 14)),
                                   template_var 21),
                                 template_var 15),
                               template_var 6),
                             template_var 3),
                           template_var 5),
                         template_var 4)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 20),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 18),
                       template_var 12))))),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 16),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 13),
                     template_var 7)))))
           ))),
    ("Variants.SafeDelayedRMWWrite",
     "[| ?cond (?\<theta>(?t |-> ?m ?a)); ?a : dom ?\<S> Un ?\<O>;
         ALL j<length ?\<O>s.
            ?i ~= j --> ?a ~: ?\<O>s ! j Un dom (?\<R>s ! j);
         ?a ~: read_only ?\<S>;
         ALL j<length ?\<O>s.
            ?i ~= j --> ?A Int (?\<O>s ! j Un dom (?\<R>s ! j)) = _emptyset;
         ?A <= dom ?\<S> Un ?\<O>; ?L <= ?A; ?R <= ?\<O>;
         ?A Int ?R = _emptyset |]
      ==> ?\<O>s,?\<R>s,?i\<turnstile> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L
   ?R ?W #
  ?is,
  ?\<theta>, ?m, ?\<D>, ?\<O>, ?\<S>) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 18,
              template_app
               (template_app
                 (template_app (template_hole 26, template_var 17),
                  template_var 16),
                template_app
                 (template_hole 25,
                  template_app (template_var 15, template_var 14))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 14),
              template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 13)),
                template_var 12))
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 24, template_var 14),
                  template_app (template_hole 13, template_var 13))
                )
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_inequation
         (less_equals, template_var 8,
          template_app
           (template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 13)),
            template_var 12)),
        template_inequation (less_equals, template_var 7, template_var 8),
        template_inequation (less_equals, template_var 6, template_var 12),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 8),
            template_var 6),
          template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 11),
                 template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 5, template_var 14),
                                     template_var 16),
                                   template_app
                                    (template_app
(template_hole 4, template_var 5),
                                     template_var 4)),
                                 template_var 18),
                               template_var 3),
                             template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 2)),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 17),
                 template_app
                  (template_app (template_hole 2, template_var 15),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 0, template_var 12),
                       template_var 13))))))
           ))),
    ("Variants.sim_config'",
     "[| ?m =
         exec_all_until_volatile_write ?ts\<^sub>s\<^sub>b\<^sub>h
          ?m\<^sub>s\<^sub>b\<^sub>h;
         ?\<S> =
         share_all_until_volatile_write ?ts\<^sub>s\<^sub>b\<^sub>h
          ?\<S>\<^sub>s\<^sub>b\<^sub>h;
         length ?ts\<^sub>s\<^sub>b\<^sub>h = length ?ts;
         ALL i<length ?ts\<^sub>s\<^sub>b\<^sub>h.
            let (p\<^sub>s\<^sub>b\<^sub>h, is\<^sub>s\<^sub>b\<^sub>h,
                  \<theta>\<^sub>s\<^sub>b\<^sub>h, sb,
                  \<D>\<^sub>s\<^sub>b\<^sub>h,
                  \<O>\<^sub>s\<^sub>b\<^sub>h,
                  \<R>\<^sub>s\<^sub>b\<^sub>h) =
                  ?ts\<^sub>s\<^sub>b\<^sub>h ! i;
                execs = takeWhile not_volatile_write sb;
                suspends = dropWhile not_volatile_write sb
            in EX is \<D>.
                  instrs suspends @ is\<^sub>s\<^sub>b\<^sub>h =
                  is @ prog_instrs suspends &
                  \<D>\<^sub>s\<^sub>b\<^sub>h =
                  (\<D> | refs volatile_Write sb ~= _emptyset) &
                  ?ts ! i =
                  (hd_prog p\<^sub>s\<^sub>b\<^sub>h suspends, is,
                   \<theta>\<^sub>s\<^sub>b\<^sub>h |`
                   (dom \<theta>\<^sub>s\<^sub>b\<^sub>h -
                    read_tmps suspends),
                   \<D>, acquire execs \<O>\<^sub>s\<^sub>b\<^sub>h,
                   release execs (dom ?\<S>\<^sub>s\<^sub>b\<^sub>h)
                    \<R>\<^sub>s\<^sub>b\<^sub>h) |]
      ==> (?ts\<^sub>s\<^sub>b\<^sub>h, ?m\<^sub>s\<^sub>b\<^sub>h,
           ?\<S>\<^sub>s\<^sub>b\<^sub>h) \<sim> (?ts, ?m, ?\<S>)",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 56, template_var 4),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 54, template_var 4),
            template_var 1)),
        template_equation
         (template_app (template_hole 52, template_var 4),
          template_app (template_hole 51, template_var 0)),
        template_predicate (template_app (template_hole 50, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.VariantsMoreTemplates"
### 0.483s elapsed time, 0.832s cpu time, 0.278s GC time
*** Undefined fact: "c_n" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
*** At command "thm" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
Exception- TOPLEVEL_ERROR raised
