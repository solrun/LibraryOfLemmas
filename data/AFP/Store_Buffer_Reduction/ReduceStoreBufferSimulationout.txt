Loading theory "Draft.ReduceStoreBuffer" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ReduceStoreBufferSimulation")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.589s cpu time, 0.133s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.309s elapsed time, 1.167s cpu time, 0.289s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs")
locale valid_sop
  fixes sop :: "nat set * ((nat => nat option) => nat)"
  assumes "valid_sop sop"
### theory "HOL-Library.Nat_Bijection"
### 0.384s elapsed time, 1.465s cpu time, 0.289s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
locale memory_system
  fixes
    memop_step ::
      "instr list *
       (nat => nat option) *
       'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
       => instr list *
          (nat => nat option) *
          'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
          => bool"
      (\<open>_ \<rightarrow>\<^sub>m _\<close> [60, 60] 100)
    and
    storebuffer_step ::
      "(nat => nat) * 'sb * 'owns * 'rels * 'shared
       => (nat => nat) * 'sb * 'owns * 'rels * 'shared => bool"
      (\<open>_ \<rightarrow>\<^sub>s\<^sub>b _\<close> [60, 60] 100)
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
locale computation
  fixes
    memop_step ::
      "instr list *
       (nat => nat option) *
       'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
       => instr list *
          (nat => nat option) *
          'sb * (nat => nat) * 'dirty * 'owns * 'rels * 'shared
          => bool"
      (\<open>_ \<rightarrow>\<^sub>m _\<close> [60, 60] 100)
    and
    storebuffer_step ::
      "(nat => nat) * 'sb * 'owns * 'rels * 'shared
       => (nat => nat) * 'sb * 'owns * 'rels * 'shared => bool"
      (\<open>_ \<rightarrow>\<^sub>s\<^sub>b _\<close> [60, 60] 100)
    and
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and "record" :: "'p => 'p => instr list => 'sb => 'sb"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "concurrent_step"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 1064 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared"
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("_position" A) ("_position" L))
###       ("_position" B) ("_position" M))
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.union" ("_position" A) ("_position" B))
###       ("\<^const>Set.union" ("_position" L) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("_position" A)
###     ("\<^const>HOL.eq"
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###         ("_position" B) ("_position" M))
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("\<^const>Set.union" ("_position" A) ("_position" B))
###         ("\<^const>Set.union" ("_position" L) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("_position" A)
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###         ("_position" B) ("_position" M)))
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.union" ("_position" A) ("_position" B))
###       ("\<^const>Set.union" ("_position" L) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("_position" A) ("_position" L))
###     ("_position" B)
###     ("\<^const>HOL.eq" ("_position" M)
###       ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###         ("\<^const>Set.union" ("_position" A) ("_position" B))
###         ("\<^const>Set.union" ("_position" L) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("_position" A)
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" L)
###       ("_position" B)
###       ("\<^const>HOL.eq" ("_position" M)
###         ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###           ("\<^const>Set.union" ("_position" A) ("_position" B))
###           ("\<^const>Set.union" ("_position" L) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1069 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###       ("\<^const>Set.empty") ("\<^const>Set.empty"))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>ReduceStoreBuffer.restrict_shared" ("_position" S)
###     ("\<^const>Set.empty")
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### ?a1 : dom ?m1 == ?m1 ?a1 ~= None
locale gen_direct_memop_step
  fixes emp :: "'rels"
    and aug :: "nat set => nat set => 'rels => 'rels"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "gen_direct_memop_step"
### theory "HOL-Library.BigO"
### 1.053s elapsed time, 3.995s cpu time, 0.907s GC time
consts
  flat :: "'a list stream => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.152s elapsed time, 4.237s cpu time, 0.979s GC time
"direct_memop_step.gen_direct_memop_step"
  :: "instr list *
      (nat => nat option) *
      unit *
      (nat => nat) *
      bool * nat set * (nat => bool option) * (nat => bool option)
      => instr list *
         (nat => nat option) *
         unit *
         (nat => nat) *
         bool * nat set * (nat => bool option) * (nat => bool option)
         => bool"
Found termination order: "size <*mlex*> {}"
"x \<rightarrow> Y"
  :: "bool"
"x \<rightarrow>\<^sup>* Y"
  :: "bool"
Found termination order: "size <*mlex*> {}"
"x \<rightarrow>\<^sub>v Y"
  :: "bool"
"x \<rightarrow>\<^sup>* Y"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "safe_direct_memop_state"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "safe_delayed_direct_memop_state"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "id_storebuffer_step"
  Proving monotonicity ...
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
"x \<Rightarrow>\<^sub>d Y"
  :: "bool"
"x \<Rightarrow>\<^sub>v Y"
  :: "bool"
"x \<Rightarrow>\<^sub>d\<^sup>* Y"
  :: "bool"
"x \<Rightarrow>\<^sub>v\<^sup>* Y"
  :: "bool"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
### Ambiguous input (line 1460 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" safe_delayed) ("_position" cfg))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" ts)
###         ("_patterns" ("_position" m) ("_position" \<S>)))
###       ("_position" cfg))
###     ("_tuple"
###       ("_All_less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" ts))
###         ("_Let"
###           ("_bind"
###             ("_pattern" ("_position" p)
###               ("_patterns" ("_position" is)
###                 ("_patterns" ("_position" \<theta>)
###                   ("_patterns" ("_position" x)
###                     ("_patterns" ("_position" \<D>)
###                       ("_patterns" ("_position" \<O>)
###                         ("_position" \<R>)))))))
###             ("\<^const>List.nth" ("_position" ts) ("_position" i)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" owned) ("_position" ts)))))
###       ("_tuple_arg"
###         ("\<^const>ReduceStoreBuffer.safe_direct_memop_state"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" released) ("_position" ts)))
###           ("_position" i)
###           ("_tuple" ("_position" is)
###             ("_tuple_args" ("_position" \<theta>)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_args" ("_position" \<D>)
###                   ("_tuple_args" ("_position" \<O>)
###                     ("_tuple_arg" ("_position" \<S>))))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" safe_delayed) ("_position" cfg))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" ts)
###         ("_patterns" ("_position" m) ("_position" \<S>)))
###       ("_position" cfg))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" ts))
###       ("_Let"
###         ("_bind"
###           ("_pattern" ("_position" p)
###             ("_patterns" ("_position" is)
###               ("_patterns" ("_position" \<theta>)
###                 ("_patterns" ("_position" x)
###                   ("_patterns" ("_position" \<D>)
###                     ("_patterns" ("_position" \<O>) ("_position" \<R>)))))))
###           ("\<^const>List.nth" ("_position" ts) ("_position" i)))
###         ("\<^const>ReduceStoreBuffer.safe_delayed_direct_memop_state"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" owned) ("_position" ts)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" released) ("_position" ts)))
###           ("_position" i)
###           ("_tuple" ("_position" is)
###             ("_tuple_args" ("_position" \<theta>)
###               ("_tuple_args" ("_position" m)
###                 ("_tuple_args" ("_position" \<D>)
###                   ("_tuple_args" ("_position" \<O>)
###                     ("_tuple_arg" ("_position" \<S>))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale simple_ownership_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "simple_ownership_distinct ts"
locale read_only_unowned
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "read_only_unowned \<S> ts"
locale unowned_shared
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) * 'sb * 'dirty * nat set * 'rels) list"
  assumes "unowned_shared \<S> ts"
locale program_progress
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
  assumes "program_progress program_step"
### theory "HOL-Library.Tree"
### 2.097s elapsed time, 6.637s cpu time, 1.280s GC time
Loading theory "Draft.Templates" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates")
locale program_trace
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and
    c :: "nat
          => ('a *
              instr list *
              (nat => nat option) *
              unit * bool * nat set * (nat => bool option)) list *
             (nat => nat) * (nat => bool option)"
    and n :: "nat"
    and k :: "nat"
  assumes "program_trace program_step c n k"
locale program_safe_reach_upto
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and n :: "nat"
    and
    safe ::
      "('a *
        instr list *
        (nat => nat option) *
        unit * bool * nat set * (nat => bool option)) list *
       (nat => nat) * (nat => bool option)
       => bool"
    and
    c\<^sub>0 ::
      "('a *
        instr list *
        (nat => nat option) *
        unit * bool * nat set * (nat => bool option)) list *
       (nat => nat) * (nat => bool option)"
  assumes "program_safe_reach_upto program_step n safe c\<^sub>0"
*** Undefined fact: "c_n" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
*** At command "thm" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.603s elapsed time, 1.378s cpu time, 0.291s GC time
Proofs for inductive predicate(s) "flush_step"
  Proving monotonicity ...
"x \<rightarrow>\<^sub>f\<^sup>* Y"
  :: "bool"
Proofs for inductive predicate(s) "store_buffer_step"
  Proving monotonicity ...
"x \<rightarrow>w\<^sup>* Y"
  :: "bool"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "sb_memop_step"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sbh_memop_step"
  Proving monotonicity ...
consts
  non_volatile_owned_or_read_only ::
    "bool => (nat => bool option) => nat set => 'a memref list => bool"
consts
  acquired :: "bool => 'a memref list => nat set => nat set"
consts
  share :: "'a memref list => (nat => bool option) => nat => bool option"
consts
  acquired_reads :: "bool => 'a memref list => nat set => nat set"
consts
  all_acquired :: "'a memref list => nat set"
consts
  sharing_consistent ::
    "(nat => bool option) => nat set => 'a memref list => bool"
consts
  read_only_reads :: "nat set => 'a memref list => nat set"
consts
  non_volatile_writes_unshared ::
    "(nat => bool option) => 'a memref list => bool"
consts
  no_write_to_read_only_memory ::
    "(nat => bool option) => 'a memref list => bool"
locale outstanding_non_volatile_refs_owned_or_read_only
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_non_volatile_refs_owned_or_read_only \<S> ts"
locale outstanding_volatile_writes_unowned_by_others
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_volatile_writes_unowned_by_others ts"
locale read_only_reads_unowned
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "read_only_reads_unowned ts"
locale ownership_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "ownership_distinct ts"
locale valid_ownership
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_ownership \<S> ts"
locale outstanding_non_volatile_writes_unshared
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "outstanding_non_volatile_writes_unshared \<S> ts"
locale sharing_consis
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "sharing_consis \<S> ts"
locale no_outstanding_write_to_read_only_memory
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "no_outstanding_write_to_read_only_memory \<S> ts"
locale valid_sharing
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_sharing \<S> ts"
locale valid_ownership_and_sharing
  fixes \<S> :: "nat => bool option"
    and
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_ownership_and_sharing \<S> ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 7457 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("\<^const>Pure.dummy_pattern")
###                       ("_cargs" ("_position" t\<^sub>i)
###                         ("\<^const>Pure.dummy_pattern")))))
###                 ("_case_syntax"
###                   ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("\<^const>Pure.dummy_pattern")
###                             ("_cargs" ("_position" t\<^sub>j)
###                               ("\<^const>Pure.dummy_pattern")))))
###                       ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                         ("_position" t\<^sub>j)))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True)))))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_position" True)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("\<^const>Pure.dummy_pattern")
###                       ("_cargs" ("_position" t\<^sub>i)
###                         ("\<^const>Pure.dummy_pattern")))))
###                 ("_case_syntax"
###                   ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                   ("_case1"
###                     ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                       ("_cargs" ("\<^const>Pure.dummy_pattern")
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("_position" t\<^sub>j)
###                             ("\<^const>Pure.dummy_pattern")))))
###                     ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                       ("_position" t\<^sub>j)))))
###               ("_case2"
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_position" True))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" distinct_read_tmps) ("_position" xs))
###     ("_All_less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" xs))
###       ("_All_less" ("_position" j)
###         ("_applC" ("_position" length) ("_position" xs))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.not_equal" ("_position" i) ("_position" j))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" xs) ("_position" i))
###             ("_case1"
###               ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                 ("_cargs" ("\<^const>Pure.dummy_pattern")
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("_position" t\<^sub>i)
###                       ("\<^const>Pure.dummy_pattern")))))
###               ("_case_syntax"
###                 ("\<^const>List.nth" ("_position" xs) ("_position" j))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" Read\<^sub>s\<^sub>b)
###                       ("_cargs" ("\<^const>Pure.dummy_pattern")
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_cargs" ("_position" t\<^sub>j)
###                             ("\<^const>Pure.dummy_pattern")))))
###                     ("\<^const>HOL.not_equal" ("_position" t\<^sub>i)
###                       ("_position" t\<^sub>j)))
###                   ("_case2"
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_position" True))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale load_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_distinct ts"
locale read_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "read_tmps_distinct ts"
locale load_tmps_read_tmps_distinct
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_read_tmps_distinct ts"
locale tmps_distinct
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "tmps_distinct ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale valid_write_sops
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_write_sops ts"
locale valid_store_sops
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_store_sops ts"
locale valid_sops
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_sops ts"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale valid_reads
  fixes m :: "nat => nat"
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_reads m ts"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale valid_history
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_history program_step ts"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale valid_data_dependency
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_data_dependency ts"
locale load_tmps_fresh
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "load_tmps_fresh ts"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale enough_flushs
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "enough_flushs ts"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale causal_program_history
  fixes is\<^sub>s\<^sub>b :: "instr list"
    and sb :: "'a memref list"
  assumes "causal_program_history is\<^sub>s\<^sub>b sb"
locale valid_program_history
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "valid_program_history ts"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst p)) <*mlex*>
   {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst p)) <*mlex*>
   {}"
locale program
  fixes
    program_step :: "(nat => nat option) => 'p => 'p * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
"x \<Rightarrow>\<^sub>s\<^sub>b Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sup>* Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sub>h Y"
  :: "bool"
"x \<Rightarrow>\<^sub>s\<^sub>b\<^sub>h\<^sup>* Y"
  :: "bool"
locale valid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
  assumes "valid_program program_step valid_prog"
consts
  release ::
    "'a memref list
     => nat set => (nat => bool option) => nat => bool option"
locale xvalid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program program_step valid_prog valid"
consts
  all_shared :: "'a memref list => nat set"
consts
  all_unshared :: "'a memref list => nat set"
### Ambiguous input (line 15203 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<S>) ("_idts" ("_position" R) ("_position" L)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ownership_distinct) ("_position" ts)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sharing_consis)
###             ("_cargs" ("_position" \<S>) ("_position" ts))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" is)
###                     ("_idts" ("_position" \<O>)
###                       ("_idts" ("_position" \<R>)
###                         ("_idts" ("_position" \<D>)
###                           ("_idts" ("_position" \<theta>)
###                             ("_position" sb))))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" i)
###                   ("_applC" ("_position" length) ("_position" ts)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_args" ("_position" \<theta>)
###                           ("_tuple_args" ("_position" sb)
###                             ("_tuple_args" ("_position" \<D>)
###                               ("_tuple_args" ("_position" \<O>)
###                                 ("_tuple_arg" ("_position" \<R>)))))))))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Set.inter"
###                       ("_applC" ("_position" all_shared)
###                         ("_applC" ("_position" takeWhile)
###                           ("_cargs"
###                             ("\<^const>Fun.comp" ("_position" Not)
###                               ("_position"
###                                 is_volatile_Write\<^sub>s\<^sub>b))
###                             ("_position" sb))))
###                       ("_position" L))
###                     ("\<^const>Set.empty"))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" i)
###                   ("_idts" ("_position" p)
###                     ("_idts" ("_position" is)
###                       ("_idts" ("_position" \<O>)
###                         ("_idts" ("_position" \<R>)
###                           ("_idts" ("_position" \<D>)
###                             ("_idts" ("_position" \<theta>)
###                               ("_position" sb))))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" ts)))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" is)
###                           ("_tuple_args" ("_position" \<theta>)
###                             ("_tuple_args" ("_position" sb)
###                               ("_tuple_args" ("_position" \<D>)
###                                 ("_tuple_args" ("_position" \<O>)
###                                   ("_tuple_arg" ("_position" \<R>)))))))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" all_shared)
###                           ("_applC" ("_position" takeWhile)
###                             ("_cargs"
###                               ("\<^const>Fun.comp" ("_position" Not)
###                                 ("_position"
###                                   is_volatile_Write\<^sub>s\<^sub>b))
###                               ("_position" sb))))
###                         ("_position" A))
###                       ("\<^const>Set.empty"))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" i)
###                     ("_idts" ("_position" p)
###                       ("_idts" ("_position" is)
###                         ("_idts" ("_position" \<O>)
###                           ("_idts" ("_position" \<R>)
###                             ("_idts" ("_position" \<D>)
###                               ("_idts" ("_position" \<theta>)
###                                 ("_position" sb))))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Orderings.ord_class.less" ("_position" i)
###                       ("_applC" ("_position" length) ("_position" ts)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>List.nth" ("_position" ts)
###                           ("_position" i))
###                         ("_tuple" ("_position" p)
###                           ("_tuple_args" ("_position" is)
###                             ("_tuple_args" ("_position" \<theta>)
###                               ("_tuple_args" ("_position" sb)
###                                 ("_tuple_args" ("_position" \<D>)
###                                   ("_tuple_args" ("_position" \<O>)
###                                     ("_tuple_arg" ("_position" \<R>)))))))))
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Set.inter"
###                           ("_applC" ("_position" all_acquired)
###                             ("_applC" ("_position" takeWhile)
###                               ("_cargs"
###                                 ("\<^const>Fun.comp" ("_position" Not)
###                                   ("_position"
###                                     is_volatile_Write\<^sub>s\<^sub>b))
###                                 ("_position" sb))))
###                           ("_position" R))
###                         ("\<^const>Set.empty"))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" i)
###                       ("_idts" ("_position" p)
###                         ("_idts" ("_position" is)
###                           ("_idts" ("_position" \<O>)
###                             ("_idts" ("_position" \<R>)
###                               ("_idts" ("_position" \<D>)
###                                 ("_idts" ("_position" \<theta>)
###                                   ("_position" sb))))))))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Orderings.ord_class.less" ("_position" i)
###                         ("_applC" ("_position" length) ("_position" ts)))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>List.nth" ("_position" ts)
###                             ("_position" i))
###                           ("_tuple" ("_position" p)
###                             ("_tuple_args" ("_position" is)
###                               ("_tuple_args" ("_position" \<theta>)
###                                 ("_tuple_args" ("_position" sb)
###                                   ("_tuple_args" ("_position" \<D>)
###                                     ("_tuple_args" ("_position" \<O>)
### ("_tuple_arg" ("_position" \<R>)))))))))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Set.inter"
###                             ("_applC" ("_position" all_unshared)
###                               ("_applC" ("_position" takeWhile)
###                                 ("_cargs"
###                                   ("\<^const>Fun.comp" ("_position" Not)
###                                     ("_position"
### is_volatile_Write\<^sub>s\<^sub>b))
###                                   ("_position" sb))))
###                             ("_position" R))
###                           ("\<^const>Set.empty"))))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" i)
###                         ("_idts" ("_position" p)
###                           ("_idts" ("_position" is)
###                             ("_idts" ("_position" \<O>)
###                               ("_idts" ("_position" \<R>)
###                                 ("_idts" ("_position" \<D>)
###                                   ("_idts" ("_position" \<theta>)
###                                     ("_position" sb))))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Orderings.ord_class.less" ("_position" i)
###                           ("_applC" ("_position" length) ("_position" ts)))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>List.nth" ("_position" ts)
###                               ("_position" i))
###                             ("_tuple" ("_position" p)
###                               ("_tuple_args" ("_position" is)
###                                 ("_tuple_args" ("_position" \<theta>)
###                                   ("_tuple_args" ("_position" sb)
###                                     ("_tuple_args" ("_position" \<D>)
### ("_tuple_args" ("_position" \<O>) ("_tuple_arg" ("_position" \<R>)))))))))
###                           ("\<^const>HOL.eq"
###                             ("\<^const>Set.inter"
###                               ("_applC" ("_position" all_shared)
###                                 ("_applC" ("_position" takeWhile)
###                                   ("_cargs"
###                                     ("\<^const>Fun.comp" ("_position" Not)
### ("_position" is_volatile_Write\<^sub>s\<^sub>b))
###                                     ("_position" sb))))
###                               ("_position" R))
###                             ("\<^const>Set.empty")))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>ReduceStoreBuffer.restrict_shared"
###           ("\<^const>ReduceStoreBuffer.augment_shared"
###             ("_applC" ("_position" share_all_until_volatile_write)
###               ("_cargs" ("_position" ts) ("_position" \<S>)))
###             ("_position" W) ("_position" R))
###           ("_position" A) ("_position" L))
###         ("_applC" ("_position" share_all_until_volatile_write)
###           ("_cargs" ("_position" ts)
###             ("\<^const>ReduceStoreBuffer.restrict_shared"
###               ("\<^const>ReduceStoreBuffer.augment_shared"
###                 ("_position" \<S>) ("_position" W) ("_position" R))
###               ("_position" A) ("_position" L))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<S>) ("_idts" ("_position" R) ("_position" L)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" ownership_distinct) ("_position" ts)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" sharing_consis)
###             ("_cargs" ("_position" \<S>) ("_position" ts))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" i)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" is)
###                     ("_idts" ("_position" \<O>)
###                       ("_idts" ("_position" \<R>)
###                         ("_idts" ("_position" \<D>)
###                           ("_idts" ("_position" \<theta>)
###                             ("_position" sb))))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>Orderings.ord_class.less" ("_position" i)
###                   ("_applC" ("_position" length) ("_position" ts)))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_args" ("_position" \<theta>)
###                           ("_tuple_args" ("_position" sb)
###                             ("_tuple_args" ("_position" \<D>)
###                               ("_tuple_args" ("_position" \<O>)
###                                 ("_tuple_arg" ("_position" \<R>)))))))))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Set.inter"
###                       ("_applC" ("_position" all_shared)
###                         ("_applC" ("_position" takeWhile)
###                           ("_cargs"
###                             ("\<^const>Fun.comp" ("_position" Not)
###                               ("_position"
###                                 is_volatile_Write\<^sub>s\<^sub>b))
###                             ("_position" sb))))
###                       ("_position" L))
###                     ("\<^const>Set.empty"))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" i)
###                   ("_idts" ("_position" p)
###                     ("_idts" ("_position" is)
###                       ("_idts" ("_position" \<O>)
###                         ("_idts" ("_position" \<R>)
###                           ("_idts" ("_position" \<D>)
###                             ("_idts" ("_position" \<theta>)
###                               ("_position" sb))))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" ts)))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>List.nth" ("_position" ts) ("_position" i))
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" is)
###                           ("_tuple_args" ("_position" \<theta>)
###                             ("_tuple_args" ("_position" sb)
###                               ("_tuple_args" ("_position" \<D>)
###                                 ("_tuple_args" ("_position" \<O>)
###                                   ("_tuple_arg" ("_position" \<R>)))))))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" all_shared)
###                           ("_applC" ("_position" takeWhile)
###                             ("_cargs"
###                               ("\<^const>Fun.comp" ("_position" Not)
###                                 ("_position"
###                                   is_volatile_Write\<^sub>s\<^sub>b))
###                               ("_position" sb))))
###                         ("_position" A))
###                       ("\<^const>Set.empty"))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" i)
###                     ("_idts" ("_position" p)
###                       ("_idts" ("_position" is)
###                         ("_idts" ("_position" \<O>)
###                           ("_idts" ("_position" \<R>)
###                             ("_idts" ("_position" \<D>)
###                               ("_idts" ("_position" \<theta>)
###                                 ("_position" sb))))))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Orderings.ord_class.less" ("_position" i)
###                       ("_applC" ("_position" length) ("_position" ts)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>List.nth" ("_position" ts)
###                           ("_position" i))
###                         ("_tuple" ("_position" p)
###                           ("_tuple_args" ("_position" is)
###                             ("_tuple_args" ("_position" \<theta>)
###                               ("_tuple_args" ("_position" sb)
###                                 ("_tuple_args" ("_position" \<D>)
###                                   ("_tuple_args" ("_position" \<O>)
###                                     ("_tuple_arg" ("_position" \<R>)))))))))
###                       ("\<^const>HOL.eq"
###                         ("\<^const>Set.inter"
###                           ("_applC" ("_position" all_acquired)
###                             ("_applC" ("_position" takeWhile)
###                               ("_cargs"
###                                 ("\<^const>Fun.comp" ("_position" Not)
###                                   ("_position"
###                                     is_volatile_Write\<^sub>s\<^sub>b))
###                                 ("_position" sb))))
###                           ("_position" R))
###                         ("\<^const>Set.empty"))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" i)
###                       ("_idts" ("_position" p)
###                         ("_idts" ("_position" is)
###                           ("_idts" ("_position" \<O>)
###                             ("_idts" ("_position" \<R>)
###                               ("_idts" ("_position" \<D>)
###                                 ("_idts" ("_position" \<theta>)
###                                   ("_position" sb))))))))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Orderings.ord_class.less" ("_position" i)
###                         ("_applC" ("_position" length) ("_position" ts)))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq"
###                           ("\<^const>List.nth" ("_position" ts)
###                             ("_position" i))
###                           ("_tuple" ("_position" p)
###                             ("_tuple_args" ("_position" is)
###                               ("_tuple_args" ("_position" \<theta>)
###                                 ("_tuple_args" ("_position" sb)
###                                   ("_tuple_args" ("_position" \<D>)
###                                     ("_tuple_args" ("_position" \<O>)
### ("_tuple_arg" ("_position" \<R>)))))))))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>Set.inter"
###                             ("_applC" ("_position" all_unshared)
###                               ("_applC" ("_position" takeWhile)
###                                 ("_cargs"
###                                   ("\<^const>Fun.comp" ("_position" Not)
###                                     ("_position"
### is_volatile_Write\<^sub>s\<^sub>b))
###                                   ("_position" sb))))
###                             ("_position" R))
###                           ("\<^const>Set.empty"))))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" i)
###                         ("_idts" ("_position" p)
###                           ("_idts" ("_position" is)
###                             ("_idts" ("_position" \<O>)
###                               ("_idts" ("_position" \<R>)
###                                 ("_idts" ("_position" \<D>)
###                                   ("_idts" ("_position" \<theta>)
###                                     ("_position" sb))))))))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>Orderings.ord_class.less" ("_position" i)
###                           ("_applC" ("_position" length) ("_position" ts)))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq"
###                             ("\<^const>List.nth" ("_position" ts)
###                               ("_position" i))
###                             ("_tuple" ("_position" p)
###                               ("_tuple_args" ("_position" is)
###                                 ("_tuple_args" ("_position" \<theta>)
###                                   ("_tuple_args" ("_position" sb)
###                                     ("_tuple_args" ("_position" \<D>)
### ("_tuple_args" ("_position" \<O>) ("_tuple_arg" ("_position" \<R>)))))))))
###                           ("\<^const>HOL.eq"
###                             ("\<^const>Set.inter"
###                               ("_applC" ("_position" all_shared)
###                                 ("_applC" ("_position" takeWhile)
###                                   ("_cargs"
###                                     ("\<^const>Fun.comp" ("_position" Not)
### ("_position" is_volatile_Write\<^sub>s\<^sub>b))
###                                     ("_position" sb))))
###                               ("_position" R))
###                             ("\<^const>Set.empty")))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ReduceStoreBuffer.restrict_shared"
###         ("\<^const>ReduceStoreBuffer.augment_shared"
###           ("_applC" ("_position" share_all_until_volatile_write)
###             ("_cargs" ("_position" ts) ("_position" \<S>)))
###           ("_position" W) ("_position" R))
###         ("_position" A)
###         ("\<^const>HOL.eq" ("_position" L)
###           ("_applC" ("_position" share_all_until_volatile_write)
###             ("_cargs" ("_position" ts)
###               ("\<^const>ReduceStoreBuffer.restrict_shared"
###                 ("\<^const>ReduceStoreBuffer.augment_shared"
###                   ("_position" \<S>) ("_position" W) ("_position" R))
###                 ("_position" A) ("_position" L)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  weak_sharing_consistent :: "nat set => 'a memref list => bool"
locale weak_sharing_consis
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "weak_sharing_consis ts"
consts
  unforwarded_non_volatile_reads :: "'a memref list => nat set => nat set"
### theory "Draft.ReduceStoreBuffer"
### 9.577s elapsed time, 17.599s cpu time, 5.659s GC time
Loading theory "Draft.ReduceStoreBufferSimulation" (required by "Draft.ReduceStoreBufferSimulationMoreTemplates")
locale initial\<^sub>s\<^sub>b
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
    and \<S> :: "nat => bool option"
  assumes "initial\<^sub>s\<^sub>b ts \<S>"
Proofs for inductive predicate(s) "sim_config"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sim_history_config"
  Proving monotonicity ...
"program_trace"
  :: "((nat => nat option) => 'a => 'a * instr list => bool)
      => (nat
          => ('a *
              instr list *
              (nat => nat option) *
              unit * bool * nat set * (nat => bool option)) list *
             (nat => nat) * (nat => bool option))
         => nat => nat => bool"
locale xvalid_program_progress
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program_progress program_step valid_prog valid"
Proofs for inductive predicate(s) "sim_direct_config"
  Proving monotonicity ...
locale initial\<^sub>d
  fixes
    ts ::
      "('a *
        instr list *
        (nat => nat option) * 'b * 'c * nat set * ('d => 'e option)) list"
    and \<S> :: "nat => bool option"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'f list * 'c * nat set * ('d => 'e option)) list
       => bool"
  assumes "initial\<^sub>d ts \<S> valid"
locale empty_store_buffers
  fixes
    ts ::
      "('p *
        instr list *
        (nat => nat option) *
        'p memref list * bool * nat set * (nat => bool option)) list"
  assumes "empty_store_buffers ts"
locale initial\<^sub>v
  fixes
    ts ::
      "('a *
        instr list * (nat => nat option) * 'b * 'c * nat set * 'd) list"
    and \<S> :: "nat => bool option"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'e list * 'c * nat set * ('f => 'g option)) list
       => bool"
  assumes "initial\<^sub>v ts \<S> valid"
locale xvalid_program
  fixes
    program_step :: "(nat => nat option) => 'a => 'a * instr list => bool"
      (\<open>_\<turnstile> _ \<rightarrow>\<^sub>p _\<close> [60, 60, 60]
        100)
    and valid_prog :: "'a => bool"
    and
    valid ::
      "('a *
        instr list *
        (nat => nat option) *
        'a memref list * bool * nat set * (nat => bool option)) list
       => bool"
  assumes "xvalid_program program_step valid_prog valid"
### theory "Draft.ReduceStoreBufferSimulation"
### 2.680s elapsed time, 4.955s cpu time, 3.092s GC time
Loading theory "Draft.ReduceStoreBufferSimulationMoreTemplates"
val templateLemmas =
   [("ReduceStoreBufferSimulation.bufferd_val_filter_is_Write\<^sub>s\<^sub>b_eq",
     "buffered_val (filter is_Write\<^sub>s\<^sub>b ?sb) =
      buffered_val ?sb",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("ReduceStoreBufferSimulation.conj_commI", "?P & ?Q ==> ?Q & ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("ReduceStoreBufferSimulation.outstanding_refs_is_volatile_Write\<^sub>s\<^sub>b_filter_writes",
     "outstanding_refs is_volatile_Write\<^sub>s\<^sub>b
       (filter is_Write\<^sub>s\<^sub>b ?xs) =
      outstanding_refs is_volatile_Write\<^sub>s\<^sub>b ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2), template_var 0))),
    ("ReduceStoreBufferSimulation.bufferd_val_filter_is_Write\<^sub>s\<^sub>b_eq_ext",
     "buffered_val (filter is_Write\<^sub>s\<^sub>b ?sb) ?a =
      buffered_val ?sb ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("ReduceStoreBufferSimulation.acquired_reads_all_acquired'",
     "acquired_reads True ?sb ?\<O>
      <= acquired True ?sb ?\<O> Un all_shared ?sb",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 3),
               template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("ReduceStoreBufferSimulation.read_only_share_all_shared",
     "?a : read_only (share ?sb ?\<S>) ==>
      ?a : read_only ?\<S> Un all_shared ?sb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("ReduceStoreBufferSimulation.filter_is_Write\<^sub>s\<^sub>b_empty",
     "filter is_Write\<^sub>s\<^sub>b ?xs = [] ==>
      ALL r:set ?xs.
         is_Read\<^sub>s\<^sub>b r |
         is_Prog\<^sub>s\<^sub>b r | is_Ghost\<^sub>s\<^sub>b r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 0),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("ReduceStoreBufferSimulation.release_False_mono_take",
     "?\<R> ?a = Some False ==>
      release (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb) ?S
       ?\<R> ?a =
      Some False",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 0)),
                   template_var 1)),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app (template_hole 6, template_hole 5)))),
    ("ReduceStoreBufferSimulation.all_acquired_unshared_acquired",
     "[| ?a : all_acquired ?sb; ?a ~: all_shared ?sb |]
      ==> ?a : acquired True ?sb ?\<O>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("ReduceStoreBufferSimulation.empty_d_sims",
     "?ts\<^sub>s\<^sub>b \<sim>\<^sub>d ?ts  ==>
      EX ts\<^sub>h.
         ?ts\<^sub>s\<^sub>b \<sim>\<^sub>h ts\<^sub>h  &
         (ts\<^sub>h, ?m, ?\<S>) \<sim> (?ts, ?m, ?\<S>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ReduceStoreBufferSimulation.release_all_shared_exchange",
     "ALL a:all_shared ?sb. (a : ?S') = (a : ?S) ==>
      release ?sb ?S' ?\<R> = release ?sb ?S ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("ReduceStoreBufferSimulation.map_onws_sb_owned'",
     "[| ?j < length ?ts;
         \<O>_sb (?ts ! ?j) = (?\<O>\<^sub>j, ?sb\<^sub>j) |]
      ==> owned (?ts ! ?j) = ?\<O>\<^sub>j",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 3)),
         template_var 1))),
    ("ReduceStoreBufferSimulation.release_False_mono",
     "[| ?\<R> ?a = Some False;
         outstanding_refs is_volatile_Write\<^sub>s\<^sub>b ?sb = {} |]
      ==> release ?sb ?S ?\<R> ?a = Some False",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_hole 6, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app (template_hole 6, template_hole 5)))),
    ("ReduceStoreBufferSimulation.release_append_Prog\<^sub>s\<^sub>b",
     "release
       (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
         (?sb @ [Prog\<^sub>s\<^sub>b ?p\<^sub>1 ?p\<^sub>2 ?mis]))
       ?S ?\<R> =
      release (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb) ?S
       ?\<R>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4)),
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_hole 0)))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4)),
               template_var 5)),
           template_var 1),
         template_var 0))),
    ("ReduceStoreBufferSimulation.map_onws_sb_owned",
     "[| ?j < length ?ts;
         map \<O>_sb ?ts ! ?j = (?\<O>\<^sub>j, ?sb\<^sub>j) |]
      ==> map owned ?ts ! ?j = ?\<O>\<^sub>j",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2)),
            template_var 3),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 3),
         template_var 1))),
    ("ReduceStoreBufferSimulation.flush_progress",
     "EX m' \<O>' \<S>' \<R>'.
         (?m, ?r # ?sb, ?\<O>, ?\<R>,
          ?\<S>) \<rightarrow>\<^sub>f (m', ?sb, \<O>', \<R>', \<S>')",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("ReduceStoreBufferSimulation.release_shared_exchange_weak",
     "[| ALL a:?\<O> Un all_acquired ?sb. ?\<S>' a = ?\<S> a;
         weak_sharing_consistent ?\<O> ?sb |]
      ==> release ?sb (dom ?\<S>') ?\<R> = release ?sb (dom ?\<S>) ?\<R>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("ReduceStoreBufferSimulation.read_only_shared_all_until_volatile_write_subset'",
     "read_only (share_all_until_volatile_write ?ts ?\<S>)
      <= read_only ?\<S> Un
         (UN (uu_, uu_, uu_, sb, uu_, uu_, uu_):set ?ts.
             all_shared
              (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) sb))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 16,
         template_app
          (template_app (template_hole 15, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 14,
           template_app (template_hole 16, template_var 0)),
         template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12, template_app (template_hole 11, t_empty)),
             template_app (template_hole 0, template_var 1)))))),
    ("ReduceStoreBufferSimulation.shared_switch_release_False",
     "[| outstanding_refs is_volatile_Write\<^sub>s\<^sub>b ?sb = {};
         ?a ~: dom ?\<S>; ?a : dom (share ?sb ?\<S>) |]
      ==> release ?sb (dom ?\<S>) ?\<R> ?a = Some False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 3),
          template_hole 8),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 5, template_var 1)),
             template_var 0),
           template_var 2),
         template_app (template_hole 1, template_hole 0)))),
    ("ReduceStoreBufferSimulation.read_only_share_acquired_all_shared",
     "[| weak_sharing_consistent ?\<O> ?sb; ?\<O> Int read_only ?\<S> = {};
         ?a : read_only (share ?sb ?\<S>); ?a : ?\<O> Un all_acquired ?sb |]
      ==> ?a : all_shared ?sb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app (template_hole 6, template_var 1)),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("ReduceStoreBufferSimulation.read_only_share_unowned'",
     "[| weak_sharing_consistent ?\<O> ?sb; ?\<O> Int read_only ?\<S> = {};
         ?a ~: ?\<O> Un all_acquired ?sb; ?a : read_only ?\<S> |]
      ==> ?a : read_only (share ?sb ?\<S>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app (template_hole 6, template_var 1)),
          template_hole 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app (template_hole 1, template_var 2)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("ReduceStoreBufferSimulation.not_shared_not_acquired_switch",
     "[| ?a ~: all_shared ?sb; ?a ~: ?X; ?a ~: acquired True ?sb ?X;
         ?a ~: ?Y |]
      ==> ?a ~: acquired True ?sb ?Y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_hole 0),
                      template_var 2),
                    template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2),
                   template_var 0))
               )
           ))),
    ("ReduceStoreBufferSimulation.initial_d_sb",
     "initial\<^sub>d ?ts ?\<S> ?valid ==>
      initial\<^sub>s\<^sub>b
       (map (%(p, is, \<theta>, sb, \<D>, \<O>, \<R>).
                (p, is, \<theta>, [], \<D>, \<O>, \<R>))
         ?ts)
       ?\<S>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, t_empty)),
                 template_var 2)),
             template_var 1)
           ))),
    ("ReduceStoreBufferSimulation.shared_switch",
     "[| weak_sharing_consistent ?\<O> ?sb; read_only ?\<S> Int ?\<O> = {};
         ?\<S> ?a ~= Some False; share ?sb ?\<S> ?a = Some False |]
      ==> ?a : ?\<O> Un all_acquired ?sb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1)),
            template_var 3),
          template_hole 8),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_app (template_hole 5, template_hole 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0),
          template_app (template_hole 5, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ReduceStoreBufferSimulation.release_not_unshared_no_write",
     "[| outstanding_refs is_volatile_Write\<^sub>s\<^sub>b ?sb = {};
         non_volatile_writes_unshared ?\<S> ?sb;
         release ?sb (dom ?\<S>) ?\<R> ?a ~= Some False;
         ?a : dom (share ?sb ?\<S>) |]
      ==> ?a ~: outstanding_refs is_non_volatile_Write\<^sub>s\<^sub>b ?sb",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_hole 11),
            template_var 3),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app (template_hole 5, template_var 2)),
                  template_var 1),
                template_var 0),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 12, template_hole 0),
                   template_var 3))
               )
           ))),
    ("ReduceStoreBufferSimulation.flush_reads_program",
     "ALL r:set ?sb.
         is_Read\<^sub>s\<^sub>b r |
         is_Prog\<^sub>s\<^sub>b r | is_Ghost\<^sub>s\<^sub>b r ==>
      EX \<O>' \<R>' \<S>'.
         (?m, ?sb, ?\<O>, ?\<R>,
          ?\<S>) \<rightarrow>\<^sub>f\<^sup>* (?m, [], \<O>', \<R>',
          \<S>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 4)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("ReduceStoreBufferSimulation.mem_eq_un_eq",
     "[| length ?ts' = length ?ts;
         ALL i<length ?ts'. ?P (?ts' ! i) = ?Q (?ts ! i) |]
      ==> \<Union> (?P ` set ?ts') = \<Union> (?Q ` set ?ts)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 3))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 2)))))),
    ("ReduceStoreBufferSimulation.read_only_unacquired_share'",
     "[| ?\<O> Int read_only ?S = {}; weak_sharing_consistent ?\<O> ?sb;
         ?a : read_only ?S; ?a ~: all_shared ?sb;
         ?a ~: acquired True ?sb ?\<O> |]
      ==> ?a : read_only (share ?sb ?S)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3),
            template_app (template_hole 8, template_var 2)),
          template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 8, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_var 1),
                    template_var 3))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("ReduceStoreBufferSimulation.flush_append",
     "(?m, ?sb, ?\<O>, ?\<R>,
       ?\<S>) \<rightarrow>\<^sub>f\<^sup>* (?m', ?sb', ?\<O>', ?\<R>',
       ?\<S>') ==>
      (?m, ?sb @ ?xs, ?\<O>, ?\<R>,
       ?\<S>) \<rightarrow>\<^sub>f\<^sup>* (?m', ?sb' @ ?xs, ?\<O>',
       ?\<R>', ?\<S>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 10),
                  template_app
                   (template_app (template_hole 3, template_var 9),
                    template_app
                     (template_app (template_hole 2, template_var 8),
                      template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6))))),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 1)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 10),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 8),
                     template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6))))),
             template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)))))
           ))),
    ("ReduceStoreBufferSimulation.flush_empty",
     "[| (?m, ?sb, ?\<O>, ?\<R>,
          ?\<S>) \<rightarrow>\<^sub>f\<^sup>* (?m', ?sb', ?\<O>', ?\<R>',
          ?\<S>');
         ?sb = [] |]
      ==> ?m' = ?m &
          ?sb' = [] & ?\<O>' = ?\<O> & ?\<R>' = ?\<R> & ?\<S>' = ?\<S>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app (template_hole 9, template_var 9),
                  template_app
                   (template_app (template_hole 8, template_var 8),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5))))),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 0)))))
            ),
        template_equation (template_var 8, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5)))))
           ))),
    ("ReduceStoreBufferSimulation.read_only_share_all_acquired_in'",
     "[| ?\<O> Int read_only ?S = {}; weak_sharing_consistent ?\<O> ?sb;
         ?a : read_only (share ?sb ?S) |]
      ==> ?a : read_only (share ?sb Map.empty) |
          ?a : read_only ?S &
          ?a ~: acquired True ?sb ?\<O> & ?a ~: all_shared ?sb",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 3),
            template_app (template_hole 11, template_var 2)),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     t_empty)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app (template_hole 11, template_var 2))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_var 1),
                         template_var 3)))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app (template_hole 0, template_var 1))))))
           ))),
    ("ReduceStoreBufferSimulation.release_not_unshared_no_write_take",
     "[| non_volatile_writes_unshared ?\<S>
          (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb);
         release (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb)
          (dom ?\<S>) ?\<R> ?a ~=
         Some False;
         ?a : dom (share
                    (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
                      ?sb)
                    ?\<S>) |]
      ==> ?a ~: outstanding_refs is_non_volatile_Write\<^sub>s\<^sub>b
                 (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_hole 9)),
                template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 11, template_hole 10),
                            template_hole 9)),
                        template_var 2)),
                    template_app (template_hole 6, template_var 3)),
                  template_var 1),
                template_var 0),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 11, template_hole 10),
                          template_hole 9)),
                      template_var 2)),
                  template_var 3)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_hole 9)),
                     template_var 2)))
               )
           ))),
    ("ReduceStoreBufferSimulation.flush_all_empty",
     "ALL i p is xs sb \<D> \<O> \<R>.
         i < length ?ts -->
         ?ts ! i = (p, is, xs, sb, \<D>, \<O>, \<R>) --> sb = [] ==>
      flush_all_until_volatile_write ?ts ?m = ?m",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("ReduceStoreBufferSimulation.share_all_empty",
     "ALL i p is xs sb \<D> \<O> \<R>.
         i < length ?ts -->
         ?ts ! i = (p, is, xs, sb, \<D>, \<O>, \<R>) --> sb = [] ==>
      share_all_until_volatile_write ?ts ?\<S> = ?\<S>",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("ReduceStoreBufferSimulation.filter_is_Write\<^sub>s\<^sub>b_Cons_Write\<^sub>s\<^sub>b",
     "filter is_Write\<^sub>s\<^sub>b ?xs =
      Write\<^sub>s\<^sub>b ?volatile ?a ?sop ?v ?A ?L ?R ?W # ?ys ==>
      EX rs rws.
         (ALL r:set rs.
             is_Read\<^sub>s\<^sub>b r |
             is_Prog\<^sub>s\<^sub>b r | is_Ghost\<^sub>s\<^sub>b r) &
         ?xs =
         rs @ Write\<^sub>s\<^sub>b ?volatile ?a ?sop ?v ?A ?L ?R ?W # rws &
         ?ys = filter is_Write\<^sub>s\<^sub>b rws",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_hole 11),
            template_var 9),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 9, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1)),
            template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("ReduceStoreBufferSimulation.safe_RMW_common",
     "?\<O>s,?\<R>s,?i\<turnstile> (RMW ?a ?t (?D, ?f) ?cond ?ret ?A ?L ?R
                                     ?W #
                                    ?is,
                                    ?\<theta>, ?m, ?\<D>, ?\<O>,
                                    ?\<S>) \<surd> ==>
      (?a : ?\<O> | ?a : dom ?\<S>) &
      (ALL j<length ?\<O>s. ?i ~= j --> (?\<R>s ! j) ?a ~= Some False)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 18),
                  template_var 17),
                template_var 16),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app
                     (template_hole 20,
                      template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 19, template_var 15),
template_var 14),
                                    template_app
                                     (template_app
 (template_hole 18, template_var 13),
template_var 12)),
                                  template_var 11),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6)),
                    template_var 5)),
                template_app
                 (template_app (template_hole 17, template_var 4),
                  template_app
                   (template_app (template_hole 16, template_var 3),
                    template_app
                     (template_app (template_hole 15, template_var 2),
                      template_app
                       (template_app (template_hole 14, template_var 1),
                        template_var 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 15),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 11, template_var 15),
                   template_app (template_hole 10, template_var 0)))),
             template_app (template_hole 9, t_empty))
           ))),
    ("ReduceStoreBufferSimulation.flush_simulates_filter_writes",
     "[| (?m, ?sb, ?\<O>, ?\<R>,
          ?\<S>) \<rightarrow>\<^sub>w (?m', ?sb', ?\<O>', ?\<R>', ?\<S>');
         ?sb = filter is_Write\<^sub>s\<^sub>b ?sb\<^sub>h |]
      ==> EX sb\<^sub>h' \<O>\<^sub>h' \<R>\<^sub>h' \<S>\<^sub>h'.
             (?m, ?sb\<^sub>h, ?\<O>\<^sub>h, ?\<R>\<^sub>h,
              ?\<S>\<^sub>h) \<rightarrow>\<^sub>f\<^sup>* (?m',
                      sb\<^sub>h', \<O>\<^sub>h', \<R>\<^sub>h',
                      \<S>\<^sub>h') &
             ?sb' = filter is_Write\<^sub>s\<^sub>b sb\<^sub>h' &
             (?sb' = [] --> sb\<^sub>h' = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 13),
                  template_app
                   (template_app (template_hole 17, template_var 12),
                    template_app
                     (template_app (template_hole 16, template_var 11),
                      template_app
                       (template_app (template_hole 15, template_var 10),
                        template_var 9))))),
              template_app
               (template_app (template_hole 18, template_var 8),
                template_app
                 (template_app (template_hole 17, template_var 7),
                  template_app
                   (template_app (template_hole 16, template_var 6),
                    template_app
                     (template_app (template_hole 15, template_var 5),
                      template_var 4)))))
            ),
        template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 13, template_hole 12),
            template_var 3))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("ReduceStoreBufferSimulation.read_only_share_all_until_volatile_write_unacquired'",
     "[| ownership_distinct ?ts; read_only_unowned ?\<S> ?ts;
         weak_sharing_consis ?ts;
         ALL i<length ?ts.
            let (uu_, uu_, uu_, sb, uu_, \<O>, \<R>) = ?ts ! i
            in ?a ~: acquired True
                      (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
                        sb)
                      \<O> &
               ?a ~: all_shared
                      (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
                        sb);
         ?a : read_only ?\<S> |]
      ==> ?a : read_only (share_all_until_volatile_write ?ts ?\<S>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 25, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 1),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 23, template_var 2)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("ReduceStoreBufferSimulation.empty_sb_sims",
     "[| ALL i p is xs sb \<D> \<O> \<R>.
            i < length ?ts\<^sub>s\<^sub>b -->
            ?ts\<^sub>s\<^sub>b ! i = (p, is, xs, sb, \<D>, \<O>, \<R>) -->
            sb = [];
         ?ts\<^sub>s\<^sub>b \<sim>\<^sub>h ?ts\<^sub>h ;
         (?ts\<^sub>h, ?m\<^sub>h, ?\<S>\<^sub>h) \<sim> (?ts, ?m, ?\<S>) |]
      ==> ?ts\<^sub>s\<^sub>b \<sim>\<^sub>d ?ts  &
          ?m\<^sub>h = ?m & length ?ts\<^sub>s\<^sub>b = length ?ts",
     template_implication
      ([template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 20, template_var 6)),
                 template_app (template_hole 0, template_var 2))))
           ))),
    ("ReduceStoreBufferSimulation.store_buffer_step_induct",
     "[| (?x1a, ?x1b, ?x1c, ?x1d,
          ?x1e) \<rightarrow>\<^sub>w (?x2a, ?x2b, ?x2c, ?x2d, ?x2e);
         !!m volatile a aa b v A L R W rs \<O> \<R> \<S>.
            ?P m (Write\<^sub>s\<^sub>b volatile a (aa, b) v A L R W # rs)
             \<O> \<R> \<S> (m(a := v)) rs \<O> \<R> \<S> |]
      ==> ?P ?x1a ?x1b ?x1c ?x1d ?x1e ?x2a ?x2b ?x2c ?x2d ?x2e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 10),
                  template_app
                   (template_app (template_hole 15, template_var 9),
                    template_app
                     (template_app (template_hole 14, template_var 8),
                      template_app
                       (template_app (template_hole 13, template_var 7),
                        template_var 6))))),
              template_app
               (template_app (template_hole 16, template_var 5),
                template_app
                 (template_app (template_hole 15, template_var 4),
                  template_app
                   (template_app (template_hole 14, template_var 3),
                    template_app
                     (template_app (template_hole 13, template_var 2),
                      template_var 1)))))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_var 0, template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("ReduceStoreBufferSimulation.sim_config_emptyI",
     "[| ALL i p is xs sb \<D> \<O> \<R>.
            i < length ?ts\<^sub>s\<^sub>b -->
            ?ts\<^sub>s\<^sub>b ! i = (p, is, xs, sb, \<D>, \<O>, \<R>) -->
            sb = [];
         length ?ts = length ?ts\<^sub>s\<^sub>b;
         ALL i<length ?ts\<^sub>s\<^sub>b.
            let (p, is, \<theta>, sb, \<D>, \<O>, \<R>) =
                  ?ts\<^sub>s\<^sub>b ! i
            in ?ts ! i = (p, is, \<theta>, (), \<D>, \<O>, \<R>) |]
      ==> (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b,
           ?\<S>\<^sub>s\<^sub>b) \<sim> (?ts, ?m\<^sub>s\<^sub>b,
    ?\<S>\<^sub>s\<^sub>b)",
     template_implication
      ([template_predicate (template_app (template_hole 40, t_empty)),
        template_equation
         (template_app (template_hole 18, template_var 2),
          template_app (template_hole 30, template_var 3)),
        template_predicate (template_app (template_hole 40, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("ReduceStoreBufferSimulation.in_read_only_share_all_until_volatile_write'",
     "[| ownership_distinct ?ts; sharing_consis ?\<S> ?ts;
         read_only_unowned ?\<S> ?ts; ?i < length ?ts;
         ?ts ! ?i = (?p, ?is, ?\<theta>, ?sb, ?\<D>, ?\<O>, ?\<R>);
         ALL j<length ?ts.
            ?i ~= j -->
            (let (uu_, uu_, uu_, sb\<^sub>j, uu_, \<O>, uu_) = ?ts ! j
             in ?a ~: acquired True
                       (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
                         sb\<^sub>j)
                       \<O> &
                ?a ~: all_shared
                       (takeWhile (Not o is_volatile_Write\<^sub>s\<^sub>b)
                         sb\<^sub>j));
         ?a : read_only (share ?sb ?\<S>) |]
      ==> ?a : read_only
                (share
                  (dropWhile (Not o is_volatile_Write\<^sub>s\<^sub>b) ?sb)
                  (share_all_until_volatile_write ?ts ?\<S>))",
     template_implication
      ([template_predicate
         (template_app (template_hole 35, template_var 10)),
        template_predicate
         (
            template_app
             (template_app (template_hole 34, template_var 9),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 9),
              template_var 10)
            ),
        template_inequation
         (less_than, template_var 8,
          template_app (template_hole 31, template_var 10)),
        template_equation
         (template_app
           (template_app (template_hole 29, template_var 10),
            template_var 8),
          template_app
           (template_app (template_hole 28, template_var 7),
            template_app
             (template_app (template_hole 27, template_var 6),
              template_app
               (template_app (template_hole 26, template_var 5),
                template_app
                 (template_app (template_hole 25, template_var 4),
                  template_app
                   (template_app (template_hole 24, template_var 3),
                    template_app
                     (template_app (template_hole 23, template_var 2),
                      template_var 1))))))),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 9)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 0),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 6, template_hole 20),
                         template_hole 5)),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 10),
                   template_var 9))))
           ))),
    ("ReduceStoreBufferSimulation.sim_config_emptyE",
     "[| ALL i p is xs sb \<D> \<O> \<R>.
            i < length ?ts\<^sub>s\<^sub>b -->
            ?ts\<^sub>s\<^sub>b ! i = (p, is, xs, sb, \<D>, \<O>, \<R>) -->
            sb = [];
         (?ts\<^sub>s\<^sub>b, ?m\<^sub>s\<^sub>b,
          ?\<S>\<^sub>s\<^sub>b) \<sim> (?ts, ?m, ?\<S>) |]
      ==> ?\<S> = ?\<S>\<^sub>s\<^sub>b &
          ?m = ?m\<^sub>s\<^sub>b &
          length ?ts = length ?ts\<^sub>s\<^sub>b &
          (ALL i<length ?ts\<^sub>s\<^sub>b.
              let (p, is, \<theta>, sb, \<D>, \<O>, \<R>) =
                    ?ts\<^sub>s\<^sub>b ! i
              in ?ts ! i = (p, is, \<theta>, (), \<D>, \<O>, \<R>))",
     template_implication
      ([template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_var 5),
                  template_app
                   (template_app (template_hole 20, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 19, template_var 2),
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app (template_hole 17, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app (template_hole 16, template_var 1),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app (template_hole 14, template_var 2)),
                     template_app (template_hole 33, template_var 5))),
                 template_app (template_hole 43, t_empty))))
           ))),
    ("ReduceStoreBufferSimulation.read_only_read_acquired_unforwarded_acquire_witness",
     "[| non_volatile_owned_or_read_only True ?\<S> ?\<O> ?sb;
         sharing_consistent ?\<S> ?\<O> ?sb; ?a ~: read_only ?\<S>;
         ?a ~: ?\<O>; ?a : unforwarded_non_volatile_reads ?sb ?X |]
      ==> (EX sop a' v ys zs A L R W.
              ?sb = ys @ Write\<^sub>s\<^sub>b True a' sop v A L R W # zs &
              ?a : A &
              ?a ~: outstanding_refs is_Write\<^sub>s\<^sub>b ys &
              a' ~= ?a) |
          (EX A L R W ys zs.
              ?sb = ys @ Ghost\<^sub>s\<^sub>b A L R W # zs &
              ?a : A & ?a ~: outstanding_refs is_Write\<^sub>s\<^sub>b ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_hole 19),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_app (template_hole 15, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13, template_app (template_hole 12, t_empty)),
             template_app (template_hole 9, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.ReduceStoreBufferSimulationMoreTemplates"
### 0.421s elapsed time, 0.674s cpu time, 0.183s GC time
*** Undefined fact: "c_n" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
*** At command "thm" (line 3223 of "$AFP/Store_Buffer_Reduction/ReduceStoreBuffer.thy")
Exception- TOPLEVEL_ERROR raised
