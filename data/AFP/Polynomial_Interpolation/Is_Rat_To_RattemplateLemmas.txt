   [("Is_Rat_To_Rat.int_of_rat", "int_of_rat (rat_of_int ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Is_Rat_To_Rat.to_rat_of_rat", "to_rat (of_rat ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Is_Rat_To_Rat.is_int_rat", "is_int_rat ?x = (?x : \<int>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Is_Rat_To_Rat.complex_of_real_of_rat",
     "complex_of_real (real_of_rat ?q) = of_rat ?q",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Is_Rat_To_Rat.of_int_complex",
     "of_int ?z = Complex (real_of_int ?z) 0",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Is_Rat_To_Rat.of_nat_complex", "of_nat ?n = Complex (real ?n) 0",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Is_Rat_To_Rat.of_rat_complex",
     "of_rat ?q = Complex (real_of_rat ?q) 0",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Is_Rat_To_Rat.int_of_rat_0", "(int_of_rat ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Is_Rat_To_Rat.of_rat_to_rat",
     "?x : \<rat> ==> of_rat (to_rat ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Is_Rat_To_Rat.int_of_rat",
     "?z : \<int> ==> rat_of_int (int_of_rat ?z) = ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Is_Rat_To_Rat.is_rat_complex_iff",
     "(?x : \<rat>) = (Re ?x : \<rat> & Im ?x = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           )))]
