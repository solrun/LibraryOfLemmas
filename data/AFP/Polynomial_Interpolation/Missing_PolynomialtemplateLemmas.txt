   [("Missing_Polynomial.unit_factor_field", "unit_factor ?x = ?x",
     template_equation
      (template_app (template_hole 0, template_var 0), template_var 0)),
    ("Missing_Polynomial.irreducible_connect_field",
     "irreducible\<^sub>d ?f = irreducible ?f",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Polynomial.smult_map_poly", "smult ?a = map_poly ((*) ?a)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.zero_divisor_iff_eq_0",
     "zero_divisor ?a = (?a = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("Missing_Polynomial.degree_prod_list_le",
     "degree (prod_list ?ps) <= sum_list (map degree ?ps)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Missing_Polynomial.degree_pderiv_le",
     "degree (pderiv ?f) <= degree ?f - 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Missing_Polynomial.irreducible\<^sub>dD",
     "irreducible\<^sub>d ?p ==> 0 < degree ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.zero_divisor_mult_right",
     "zero_divisor ?b ==> zero_divisor (?a * ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Missing_Polynomial.zero_divisor_smult_left",
     "zero_divisor ?a ==> zero_divisor (smult ?a ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Missing_Polynomial.zero_divisor_mult_left",
     "zero_divisor ?a ==> zero_divisor (?a * ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Missing_Polynomial.unit_not_zero_divisor",
     "?a dvd (1::?'a) ==> ~ zero_divisor ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Missing_Polynomial.linear_irreducible\<^sub>d",
     "degree ?p = 1 ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.coeff_Poly",
     "coeff (Poly ?xs) ?i = nth_default (0::?'a) ?xs ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Missing_Polynomial.const_poly_dvd_1",
     "([:?a:] dvd 1) = (?a dvd (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Missing_Polynomial.monom_mult_unfold",
     "?f * monom (1::?'a) ?n = monom_mult ?n ?f",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Missing_Polynomial.monom_mult_unfold",
     "monom (1::?'a) ?n * ?f = monom_mult ?n ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Missing_Polynomial.range_coeff",
     "range (coeff ?p) = insert (0::?'a) (set (coeffs ?p))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Missing_Polynomial.not_zero_divisor_mult",
     "~ zero_divisor (?a * ?b) ==> ~ zero_divisor ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 1, template_var 1))
           ))),
    ("Missing_Polynomial.not_zero_divisor_mult",
     "~ zero_divisor (?a * ?b) ==> ~ zero_divisor ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 1, template_var 0))
           ))),
    ("Missing_Polynomial.coeff_f_0_code",
     "coeff ?f 0 = (case coeffs ?f of [] => 0::?'a | x # xa => x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.coeff_sdiv_poly",
     "coeff (sdiv_poly ?f ?a) ?n = coeff ?f ?n div ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Missing_Polynomial.degree_linear_power_neg",
     "degree ([:?a, - (1::?'a):] ^ ?n) = ?n",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 0))),
           template_var 0)),
       template_var 0)),
    ("Missing_Polynomial.poly_compare_0_code",
     "(?f = 0) = (case coeffs ?f of [] => True | a # list => False)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.const_poly_dvd",
     "([:?a:] dvd [:?b:]) = (?a dvd ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Missing_Polynomial.map_div_is_smult_inverse",
     "map_poly (%x. x / ?a) ?p = smult (inverse ?a) ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Missing_Polynomial.pCons_0_as_mult",
     "pCons (0::?'a) ?p = [:0::?'a, 1::?'a:] * ?p",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_hole 0))),
         template_var 0))),
    ("Missing_Polynomial.poly_const_pow", "[:?a:] ^ ?b = [:?a ^ ?b:]",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Missing_Polynomial.pderiv_sum",
     "pderiv (sum ?f ?I) = (SUM i:?I. pderiv (?f i))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Missing_Polynomial.poly_sum_list",
     "poly (sum_list ?ps) ?x = (SUM p<-?ps. poly p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Missing_Polynomial.poly_prod_list",
     "poly (prod_list ?ps) ?x = (PROD p<-?ps. poly p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Missing_Polynomial.irreducible_smult_field",
     "irreducible (smult ?c ?p) = (?c ~= (0::?'a) & irreducible ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app (template_hole 5, template_var 0))
           ))),
    ("Missing_Polynomial.degree_smult_not_zero_divisor_left",
     "~ zero_divisor ?c ==> degree (smult ?c ?p) = degree ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Missing_Polynomial.normalize_monic", "monic ?p ==> normalize ?p = ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Missing_Polynomial.is_unit_field_poly",
     "is_unit ?p = (?p ~= 0 & degree ?p = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Missing_Polynomial.monom_power",
     "monom ?a ?b ^ ?n = monom (?a ^ ?n) (?b * ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Missing_Polynomial.smult_power",
     "smult ?a ?p ^ ?n = smult (?a ^ ?n) (?p ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Missing_Polynomial.pCons_0_add",
     "pCons (0::?'a) (?p + ?q) = pCons (0::?'a) ?p + pCons (0::?'a) ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Missing_Polynomial.sum_pCons_0_commute",
     "(SUM i:?S. pCons (0::?'a) (?f i)) = pCons (0::?'a) (sum ?f ?S)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Missing_Polynomial.degree0_coeffs",
     "degree ?p = 0 ==> EX a. ?p = [:a:]",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Missing_Polynomial.degree_0_id",
     "degree ?p = 0 ==> [:coeff ?p 0:] = ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 4)),
           template_hole 0),
         template_var 0))),
    ("Missing_Polynomial.irreducible\<^sub>d_smult_not_zero_divisor_left",
     "[| ~ zero_divisor ?c; irreducible\<^sub>d (smult ?c ?p) |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Missing_Polynomial.leading_coeff_code",
     "leading_coeff ?f =
      (let xs = coeffs ?f in if xs = [] then 0::?'a else last xs)",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         t_empty))),
    ("Missing_Polynomial.degree_linear_factors",
     "degree (PROD a<-?as. [:?f a, 1::?'a:]) = length ?as",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Missing_Polynomial.poly_dvd_1",
     "(?p dvd 1) = (degree ?p = 0 & coeff ?p 0 dvd (1::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 3)),
               template_hole 0))
           ))),
    ("Missing_Polynomial.poly_root_factor",
     "(poly [:?r, 1::?'a:] ?k = (0::?'a)) = (?k = - ?r)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2))),
           template_var 0),
         template_hole 1),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Missing_Polynomial.mult_eq_0_not_zero_divisor_left",
     "~ zero_divisor ?a ==> (?a * ?b = (0::?'a)) = (?b = (0::?'a))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Missing_Polynomial.mult_eq_0_not_zero_divisor_right",
     "~ zero_divisor ?b ==> (?a * ?b = (0::?'a)) = (?a = (0::?'a))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Missing_Polynomial.poly_ext",
     "(!!x. poly ?p x = poly ?q x) ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Missing_Polynomial.irreducible\<^sub>d_smultI",
     "[| ?c ~= (0::?'a); irreducible\<^sub>d (smult ?c ?p) |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Missing_Polynomial.coeff_linear_power_neg",
     "coeff ([:?a, - (1::?'a):] ^ ?n) ?n = (- (1::?'a)) ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 1))),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2)),
         template_var 0))),
    ("Missing_Polynomial.smult_sum2",
     "smult ?m (sum ?f ?S) = (SUM i:?S. smult ?m (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Missing_Polynomial.smult_sum",
     "smult (sum ?f ?S) ?p = (SUM i:?S. smult (?f i) ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Missing_Polynomial.degree_power_eq",
     "?p ~= 0 ==> degree (?p ^ ?n) = degree ?p * ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Missing_Polynomial.poly_zero",
     "poly ?p ?x = (0::?'a) ==> (?p = 0) = (degree ?p = 0)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6)],
       template_bimplication
        (template_equation (template_var 1, template_hole 3),
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Missing_Polynomial.nth_coeffs_coeff",
     "?i < length (coeffs ?f) ==> coeffs ?f ! ?i = coeff ?f ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Missing_Polynomial.poly_as_sum",
     "poly ?p ?x = (SUM i<=degree ?p. ?x ^ i * coeff ?p i)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Missing_Polynomial.poly_prod_list_zero_iff",
     "(poly (prod_list ?ps) ?x = (0::?'a)) =
      (EX p:set ?ps. poly p ?x = (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("Missing_Polynomial.monom_pCons_0_monom",
     "monom (pCons (0::?'a) (monom ?a ?n)) ?d =
      map_poly (pCons (0::?'a)) (monom (monom ?a ?n) ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Missing_Polynomial.pcompose_eq_0",
     "degree ?q ~= 0 ==> (?p \<circ>\<^sub>p ?q = 0) = (?p = 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Missing_Polynomial.monic_degree_0",
     "monic ?p ==> (degree ?p = 0) = (?p = 1)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 0),
            template_app (template_hole 6, template_var 0)),
          template_hole 5)],
       template_bimplication
        (template_equation
          (template_app (template_hole 6, template_var 0), template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Missing_Polynomial.irreducible\<^sub>d_smult_not_zero_divisor_right",
     "[| ~ zero_divisor (lead_coeff ?p);
         irreducible\<^sub>d (smult ?c ?p) |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app (template_hole 2, template_var 1)))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 1))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("Missing_Polynomial.coeff_monom_Suc",
     "coeff (monom ?a (Suc ?d) * ?p) (Suc ?i) =
      coeff (monom ?a ?d * ?p) ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 2))),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Missing_Polynomial.poly_smult_zero_iff",
     "(poly (smult ?a ?p) ?x = (0::?'a)) =
      (?a = (0::?'a) | poly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("Missing_Polynomial.poly_roots_degree",
     "?p ~= 0 ==> card {x. poly ?p x = (0::?'a)} <= degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.map_poly_map_poly",
     "?f (0::?'b) = (0::?'a) ==>
      map_poly ?f (map_poly ?g ?p) = map_poly (?f o ?g) ?p",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 6), template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Missing_Polynomial.sum_list_neutral",
     "(!!x. x : set ?xs ==> x = (0::?'a)) ==> sum_list ?xs = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Missing_Polynomial.prod_list_neutral",
     "(!!x. x : set ?xs ==> x = (1::?'a)) ==> prod_list ?xs = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Missing_Polynomial.dvd_dvd_smult",
     "[| ?a dvd ?b; ?f dvd ?g |] ==> smult ?a ?f dvd smult ?b ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Missing_Polynomial.expand_powers",
     "(PROD (n, a)<-?n_as. ?f a ^ n) =
      prod_list (map ?f (expand_powers ?n_as))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Missing_Polynomial.poly_power_zero_iff",
     "(poly (?p ^ ?n) ?x = (0::?'a)) = (?n ~= 0 & poly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0)),
               template_hole 4))
           ))),
    ("Missing_Polynomial.coeff_sum_monom",
     "?n <= ?d ==> coeff (SUM i<=?d. monom (?f i) i) ?n = ?f ?n",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 1))),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("Missing_Polynomial.monic_power", "monic ?p ==> monic (?p ^ ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_hole 1))),
    ("Missing_Polynomial.poly_mult_zero_iff",
     "(poly (?p * ?q) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a) | poly ?q ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("Missing_Polynomial.monom_mult_code",
     "coeffs (monom_mult ?n ?f) =
      (let xs = coeffs ?f
       in if xs = [] then xs else replicate ?n (0::?'a) @ xs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 0)),
         t_empty))),
    ("Missing_Polynomial.coeff_pcompose_x_pow_n",
     "?n ~= 0 ==>
      coeff (?f \<circ>\<^sub>p monom (1::?'a) ?n) (?n * ?i) = coeff ?f ?i",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Missing_Polynomial.degree_sum_list_le",
     "(!!p. p : set ?ps ==> degree p <= ?n) ==>
      degree (sum_list ?ps) <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Missing_Polynomial.coeff_monom_mult",
     "coeff (monom ?a ?d * ?p) ?i =
      (if ?d <= ?i then ?a * coeff ?p (?i - ?d) else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))),
         template_hole 0))),
    ("Missing_Polynomial.linear_poly_root",
     "?a : set ?as ==> poly (PROD a<-?as. [:- a, 1::?'a:]) ?a = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty), template_var 0))),
           template_var 1),
         template_hole 0))),
    ("Missing_Polynomial.degree_smult_not_zero_divisor_right",
     "~ zero_divisor (lead_coeff ?p) ==>
      degree (smult ?c ?p) = (if ?c = (0::?'a) then 0 else degree ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app (template_hole 6, template_var 1)))
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_hole 0),
               template_app (template_hole 6, template_var 1))
             )))),
    ("Missing_Polynomial.map_poly_simps",
     "map_poly ?f (pCons ?c ?p) =
      (if ?c = (0::?'b) & ?p = 0 then 0
       else pCons (?f ?c) (map_poly ?f ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_hole 4)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 1)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 0)))
           ))),
    ("Missing_Polynomial.poly_linear_exp_linear_factors_rev",
     "[:?b, 1::?'a:] ^ length (filter ((=) ?b) ?as) dvd
      (PROD a<-?as. [:a, 1::?'a:])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_hole 5))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_var 0)))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 0)))
         )),
    ("Missing_Polynomial.poly_prod_0",
     "finite ?ps ==>
      (poly (prod ?f ?ps) ?x = (0::?'a)) =
      (EX p:?ps. poly (?f p) ?x = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Missing_Polynomial.poly_root_constant",
     "?c ~= (0::?'a) ==>
      (poly (?p * [:?c:]) ?k = (0::?'a)) = (poly ?p ?k = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0))),
             template_var 0),
           template_hole 5),
         template_equation
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_hole 5)))),
    ("Missing_Polynomial.poly_gcd_monic",
     "?p ~= 0 | ?q ~= 0 ==> monic (gcd ?p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("Missing_Polynomial.map_poly_zero",
     "ALL c. ?f c = (0::?'b) --> c = (0::?'a) ==>
      (map_poly ?f ?p = 0) = (?p = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Missing_Polynomial.smult_exact_sdiv_poly",
     "(!!c. c : set (coeffs ?p) ==> ?a dvd c) ==>
      smult ?a (sdiv_poly ?p ?a) = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Missing_Polynomial.poly_linear_linear_factor",
     "[:?b, 1::?'a:] dvd (PROD a<-?as. [:a, 1::?'a:]) ==> ?b : set ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Missing_Polynomial.monic_irreducible_gcd",
     "[| monic ?f; irreducible ?f |] ==> gcd ?f ?u : {1, ?f}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1),
            template_app (template_hole 7, template_var 1)),
          template_hole 6),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("Missing_Polynomial.poly_root_factor",
     "(poly (?q * [:?r, 1::?'a:]) ?k = (0::?'a)) =
      (?k = - ?r | poly ?q ?k = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3)))),
           template_var 0),
         template_hole 2),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 0)),
               template_hole 2))
           ))),
    ("Missing_Polynomial.poly_root_factor",
     "(poly ([:?r, 1::?'a:] * ?q) ?k = (0::?'a)) =
      (?k = - ?r | poly ?q ?k = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 3))),
               template_var 1)),
           template_var 0),
         template_hole 2),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_hole 2))
           ))),
    ("Missing_Polynomial.degree1_coeffs",
     "degree ?p = 1 ==> EX a b. ?p = [:b, a:] & a ~= (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 0), template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Missing_Polynomial.lcoeff_monic_mult",
     "monic ?p ==> coeff (?p * ?q) (degree ?p + degree ?q) = lead_coeff ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 0))))),
    ("Missing_Polynomial.degree_prod_list_eq",
     "(!!p. p : set ?ps ==> p ~= 0) ==>
      degree (prod_list ?ps) = sum_list (map degree ?ps)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Missing_Polynomial.map_poly_pCons",
     "?c ~= (0::?'a) | ?p ~= 0 ==>
      map_poly ?f (pCons ?c ?p) = pCons (?f ?c) (map_poly ?f ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_hole 6))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Missing_Polynomial.order_max",
     "[| [:- ?a, 1::?'a:] ^ ?k dvd ?p; ?p ~= 0 |] ==> ?k <= order ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 2)),
                      template_app
                       (template_app (template_hole 7, template_hole 5),
                        template_hole 4))),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Missing_Polynomial.irreducible\<^sub>d_factor",
     "0 < degree ?p ==>
      EX q r. irreducible\<^sub>d q & ?p = q * r & degree r < degree ?p",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Missing_Polynomial.degree_mult_not_eq",
     "degree (?f * ?g) ~= degree ?f + degree ?g ==>
      lead_coeff ?f * lead_coeff ?g = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 6, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 6, template_var 0))),
         template_hole 0))),
    ("Missing_Polynomial.order_prod_list",
     "(!!p. p : set ?ps ==> p ~= 0) ==>
      order ?x (prod_list ?ps) = sum_list (map (order ?x) ?ps)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1))))),
    ("Missing_Polynomial.monic_prod_list",
     "(!!a. a : set ?as ==> monic a) ==> monic (prod_list ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))),
         template_hole 1))),
    ("Missing_Polynomial.degree_monic_mult",
     "[| monic ?p; ?q ~= 0 |] ==> degree (?p * ?q) = degree ?p + degree ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1),
            template_app (template_hole 7, template_var 1)),
          template_hole 6),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 7, template_var 0))))),
    ("Missing_Polynomial.irreducible\<^sub>dD",
     "[| irreducible\<^sub>d ?p; degree ?q < degree ?p;
         degree ?r < degree ?p |]
      ==> ?p ~= ?q * ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 3, template_var 2))],
       template_negation
        (
           template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Missing_Polynomial.poly_dvd_antisym",
     "[| lead_coeff ?p = lead_coeff ?q; ?p dvd ?q; ?q dvd ?p |]
      ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Missing_Polynomial.coeff_pcompose_monom",
     "?j < ?n ==>
      coeff (?f \<circ>\<^sub>p monom (1::?'a) ?n) (?n * ?i + ?j) =
      (if ?j = 0 then coeff ?f ?i else (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 2))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)),
                  template_var 3))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_var 0)),
               template_hole 0)
             )))),
    ("Missing_Polynomial.irreducible_monic_factor",
     "0 < degree ?p ==> EX q r. irreducible q & ?p = q * r & monic q",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Missing_Polynomial.poly_linear_exp_linear_factors",
     "[:?b, 1::?'a:] ^ ?n dvd (PROD a<-?as. [:a, 1::?'a:]) ==>
      ?n <= length (filter ((=) ?b) ?as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_app
                       (template_app (template_hole 8, template_hole 7),
                        template_hole 6))),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Missing_Polynomial.monic_mult",
     "[| monic ?p; monic ?q |] ==> monic (?p * ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)),
          template_hole 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_hole 1))),
    ("Missing_Polynomial.monic_factor",
     "[| monic (?p * ?q); monic ?p |] ==> monic ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0)),
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))),
          template_hole 0),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 1, template_var 1)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Missing_Polynomial.monic_prod",
     "(!!a. a : ?as ==> monic (?f a)) ==> monic (prod ?f ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_hole 1))),
    ("Missing_Polynomial.poly_eqI2",
     "[| degree ?p = degree ?q;
         !!i. i <= degree ?p ==> coeff ?p i = coeff ?q i |]
      ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Missing_Polynomial.irreducible\<^sub>d_dvd_smult",
     "[| 0 < degree ?p; irreducible\<^sub>d ?q; ?p dvd ?q |]
      ==> EX c. c ~= (0::?'a) & ?q = smult c ?p",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Missing_Polynomial.degree2_coeffs",
     "degree ?p = 2 ==> EX a b c. ?p = [:c, b, a:] & a ~= (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 0),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Missing_Polynomial.poly_pinfty_ge",
     "[| 0 < lead_coeff ?p; degree ?p ~= 0 |]
      ==> EX n. ALL x>=n. ?b <= poly ?p x",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app
           (template_app (template_hole 9, template_var 1),
            template_app (template_hole 8, template_var 1))),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 1),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Missing_Polynomial.irreducible\<^sub>d_factorization_exists",
     "0 < degree ?p ==>
      EX fs.
         fs ~= [] &
         (ALL f:set fs. irreducible\<^sub>d f & degree f <= degree ?p) &
         ?p = prod_list fs",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Missing_Polynomial.irreducible\<^sub>d_multD",
     "irreducible\<^sub>d (?a * ?b) ==>
      degree ?a = 0 & ?a ~= 0 & irreducible\<^sub>d ?b |
      degree ?b = 0 & ?b ~= 0 & irreducible\<^sub>d ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 1)),
                     template_hole 3)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_hole 0))),
                   template_app (template_hole 9, template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_app (template_hole 9, template_var 1))))
           ))),
    ("Missing_Polynomial.reducible\<^sub>dI",
     "(0 < degree ?p ==>
       EX q r. degree q < degree ?p & degree r < degree ?p & ?p = q * r) ==>
      ~ irreducible\<^sub>d ?p",
     template_implication
      ([template_implication
         ([template_inequation
            (less_than, template_hole 7,
             template_app (template_hole 6, template_var 0))],
          template_predicate (template_app (template_hole 5, t_empty)))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Missing_Polynomial.irreducible\<^sub>d_dvd_eq",
     "[| irreducible\<^sub>d ?a; irreducible\<^sub>d ?b; ?a dvd ?b;
         monic ?a; monic ?b |]
      ==> ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)),
          template_hole 1),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_equation (template_var 1, template_var 0))),
    ("Missing_Polynomial.irreducible\<^sub>dI2",
     "[| 0 < degree ?p;
         !!q. [| 0 < degree q; degree q <= degree ?p div 2 |]
              ==> ~ q dvd ?p |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.monic_gcd_dvd",
     "[| ?f dvd ?g; monic ?f; gcd ?g ?h : {1, ?g} |]
      ==> gcd ?f ?h : {1, ?f}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app (template_hole 6, template_var 2)),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 0)))
           ))),
    ("Missing_Polynomial.monic_prod_list_pow",
     "monic (PROD (x, i)<-?xis. [:- x, 1::?'a:] ^ Suc i)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_var 0)))),
       template_hole 3)),
    ("Missing_Polynomial.degree_prod_sum_lt_n",
     "[| !!i. i < ?n ==> degree (?f i) <= 1; ?i < ?n; degree (?f ?i) = 0 |]
      ==> degree (prod ?f {0..<?n}) < ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_than, template_var 0, template_var 2),
        template_equation
         (template_app
           (template_hole 5, template_app (template_var 1, template_var 0)),
          template_hole 2)],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 2))),
         template_var 2))),
    ("Missing_Polynomial.map_poly_add",
     "[| ?h (0::?'b) = (0::?'a); ALL p q. ?h (p + q) = ?h p + ?h q |]
      ==> map_poly ?h (?p + ?q) = map_poly ?h ?p + map_poly ?h ?q",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 8), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Missing_Polynomial.irreducible\<^sub>d_factorization_exists",
     "[| 0 < degree ?p; ~ irreducible\<^sub>d ?p |]
      ==> EX fs.
             1 < length fs &
             (ALL f:set fs. irreducible\<^sub>d f & degree f < degree ?p) &
             ?p = prod_list fs",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Missing_Polynomial.sum_monom_0_iff",
     "[| finite ?S; !!i j. ?g i = ?g j ==> i = j |]
      ==> ((SUM i:?S. monom (?f i) (?g i)) = 0) =
          (ALL i:?S. ?f i = (0::?'b))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_var 2)),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2), t_empty)))),
    ("Missing_Polynomial.monic_irreducible_factorization",
     "monic ?p ==>
      EX as f.
         finite as &
         ?p = (PROD a:as. a ^ Suc (f a)) &
         as <= {q. irreducible q & monic q}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 0),
            template_app (template_hole 12, template_var 0)),
          template_hole 11)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Missing_Polynomial.irreducible\<^sub>dE",
     "[| irreducible\<^sub>d ?p;
         [| 0 < degree ?p;
            !!q r.
               [| degree q < degree ?p; degree r < degree ?p |]
               ==> ?p ~= q * r |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_implication
         ([template_inequation
            (less_than, template_hole 5,
             template_app (template_hole 4, template_var 1))],
          template_implication
           ([template_predicate (template_app (template_hole 3, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Missing_Polynomial.degree_prod_monic",
     "[| !!i. i < ?n ==> degree (?f i) = 1;
         !!i. i < ?n ==> coeff (?f i) 1 = (1::?'a) |]
      ==> degree (prod ?f {0..<?n}) = ?n &
          coeff (prod ?f {0..<?n}) ?n = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 1)))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 1))),
                   template_var 1)),
               template_hole 4))
           ))),
    ("Missing_Polynomial.irreducible\<^sub>dI",
     "[| 0 < degree ?p;
         !!q r.
            [| 0 < degree q; degree q < degree ?p; 0 < degree r;
               degree r < degree ?p; ?p = q * r |]
            ==> False |]
      ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Missing_Polynomial.degree_prod_sum_monic",
     "[| finite ?S; 0 ~: (degree o ?f) ` ?S; !!a. a : ?S ==> monic (?f a) |]
      ==> degree (prod ?f ?S) = sum (degree o ?f) ?S &
          coeff (prod ?f ?S) (sum (degree o ?f) ?S) = (1::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_hole 9),
                        template_var 0)),
                    template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_var 0)),
                     template_var 1))),
               template_hole 4))
           ))),
    ("Missing_Polynomial.reducible\<^sub>dE",
     "[| ~ irreducible\<^sub>d ?p; degree ?p = 0 ==> ?thesis;
         !!q r.
            [| 0 < degree q; degree q < degree ?p; 0 < degree r;
               degree r < degree ?p; ?p = q * r |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            ),
        template_implication
         ([template_equation
            (template_app (template_hole 5, template_var 1),
             template_hole 4)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Missing_Polynomial.degree_lcoeff_sum",
     "[| degree (?f ?q) = ?n; finite ?S; ?q : ?S;
         !!p. p : ?S - {?q} ==> degree (?f p) < ?n; coeff (?f ?q) ?n = ?c |]
      ==> degree (sum ?f ?S) = ?n & coeff (sum ?f ?S) ?n = ?c",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app (template_var 4, template_var 3)),
          template_var 2),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_var 4, template_var 3)),
            template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 1)),
                   template_var 2)),
               template_var 0))
           )))]
