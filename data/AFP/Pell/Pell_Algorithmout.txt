Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.095s elapsed time, 0.405s cpu time, 0.000s GC time
Loading theory "HOL-Library.IArray" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Efficient_Discrete_Sqrt")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.438s elapsed time, 1.748s cpu time, 0.093s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
consts
  list_of :: "'a iarray => 'a list"
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.529s elapsed time, 2.095s cpu time, 0.153s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  tabulate :: "integer * (integer => 'a) => 'a iarray"
consts
  sub' :: "'a iarray * integer => 'a"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.IArray"
### 0.514s elapsed time, 2.002s cpu time, 0.220s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
### theory "HOL-Library.More_List"
### 0.324s elapsed time, 1.139s cpu time, 0.431s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.002s elapsed time, 3.802s cpu time, 0.699s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Infinite_Set"
### 0.473s elapsed time, 1.712s cpu time, 0.546s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.943s cpu time, 0.091s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm")
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.430s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "{}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.While_Combinator"
### 0.471s elapsed time, 1.838s cpu time, 0.258s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.976s elapsed time, 3.820s cpu time, 0.495s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Efficient_Discrete_Sqrt")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Discrete"
### 0.180s elapsed time, 0.712s cpu time, 0.078s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.BigO"
### 1.165s elapsed time, 4.290s cpu time, 1.290s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.305s elapsed time, 8.002s cpu time, 1.733s GC time
Loading theory "Draft.Templates" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pell_AlgorithmMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.094s cpu time, 0.079s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.737s elapsed time, 11.492s cpu time, 2.433s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.678s elapsed time, 5.807s cpu time, 1.503s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.325s elapsed time, 9.178s cpu time, 0.896s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.222s elapsed time, 0.486s cpu time, 0.082s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.592s elapsed time, 12.044s cpu time, 1.266s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.228s elapsed time, 0.733s cpu time, 0.141s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Squarefree"
### 0.117s elapsed time, 0.465s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.145s elapsed time, 0.558s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.385s elapsed time, 1.326s cpu time, 0.141s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.881s elapsed time, 1.971s cpu time, 0.324s GC time
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 2.644s elapsed time, 4.859s cpu time, 0.848s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.385s elapsed time, 0.402s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.438s elapsed time, 1.688s cpu time, 0.335s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm" via "Draft.Pell")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.905s elapsed time, 0.914s cpu time, 0.000s GC time
Loading theory "Draft.Pell" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm")
Loading theory "Draft.Efficient_Discrete_Sqrt" (required by "Draft.Pell_AlgorithmMoreTemplates" via "Draft.Pell_Algorithm")
locale pell
  fixes D :: "nat"
  assumes "pell D"
### theory "Draft.Pell"
### 0.324s elapsed time, 0.686s cpu time, 0.076s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Efficient_Discrete_Sqrt"
### 0.909s elapsed time, 1.338s cpu time, 0.149s GC time
Loading theory "Draft.Pell_Algorithm" (required by "Draft.Pell_AlgorithmMoreTemplates")
Found termination order: "{}"
### theory "Draft.Pell_Algorithm"
### 0.858s elapsed time, 0.859s cpu time, 0.000s GC time
Loading theory "Draft.Pell_AlgorithmMoreTemplates"
val templateLemmas =
   [("Pell_Algorithm.efficient_pell_power_correct",
     "efficient_pell_power ?D ?z ?n = (pell_mul_nat ?D ?z ^^ ?n) (1, 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Pell_Algorithm.find_fund_sol_correct",
     "find_fund_sol ?D =
      (if is_square ?D then (0, 0) else pell.fund_sol ?D)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Pell_Algorithm.Discrete_sqrt_square_is_square",
     "is_square ?n ==> (Discrete.sqrt ?n)\<^sup>2 = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_var 0))),
    ("Pell_Algorithm.fund_sol_code",
     "~ is_square ?D ==>
      pell.fund_sol ?D =
      projr (while isl (find_fund_sol_step ?D) (Inl (Suc 0, Suc ?D)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)),
                 template_app (template_hole 1, template_var 0)))))))),
    ("Pell_Algorithm.efficient_power_correct",
     "(!!x z. ?f x (?f x z) = ?f (?f x x) z) ==>
      efficient_power ?f ?y ?x ?n = (?f ?x ^^ ?n) ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_var 3, template_var 1)),
           template_var 2)))),
    ("Pell_Algorithm.efficient_power_code",
     "efficient_power ?f ?y ?x ?n =
      (if ?n = 0 then ?y
       else if ?n = 1 then ?f ?x ?y
            else if even ?n then efficient_power ?f ?y (?f ?x ?x) (?n div 2)
                 else efficient_power ?f (?f ?x ?y) (?f ?x ?x) (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app (template_var 3, template_var 1),
                   template_var 2)),
               template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 9, template_var 3),
                         template_var 2),
                       template_app
                        (template_app (template_var 3, template_var 1),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 3),
                       template_app
                        (template_app (template_var 3, template_var 1),
                         template_var 2)),
                     template_app
                      (template_app (template_var 3, template_var 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))))
           )))]:
   (string * thm * template) list
### theory "Draft.Pell_AlgorithmMoreTemplates"
### 0.596s elapsed time, 0.839s cpu time, 0.089s GC time
val it = (): unit
