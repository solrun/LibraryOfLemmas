Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.523s cpu time, 0.000s GC time
Loading theory "HOL-Library.IArray" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.419s elapsed time, 1.683s cpu time, 0.122s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.523s elapsed time, 2.068s cpu time, 0.222s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  list_of :: "'a iarray => 'a list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  tabulate :: "integer * (integer => 'a) => 'a iarray"
consts
  sub' :: "'a iarray * integer => 'a"
### theory "HOL-Library.IArray"
### 0.537s elapsed time, 2.085s cpu time, 0.300s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
### theory "HOL-Library.Infinite_Set"
### 0.458s elapsed time, 1.667s cpu time, 0.543s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
### theory "HOL-Library.More_List"
### 0.339s elapsed time, 1.203s cpu time, 0.464s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.066s elapsed time, 4.052s cpu time, 0.810s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.249s elapsed time, 0.982s cpu time, 0.091s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.361s elapsed time, 1.425s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.BigO"
### 0.865s elapsed time, 3.413s cpu time, 0.354s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.967s elapsed time, 3.803s cpu time, 0.443s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Discrete"
### 0.186s elapsed time, 0.728s cpu time, 0.089s GC time
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.942s elapsed time, 6.435s cpu time, 0.738s GC time
Loading theory "Draft.Templates" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.159s cpu time, 0.139s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.411s elapsed time, 10.181s cpu time, 1.516s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.113s elapsed time, 6.658s cpu time, 2.117s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.283s elapsed time, 8.947s cpu time, 0.728s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.241s elapsed time, 0.543s cpu time, 0.133s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.523s elapsed time, 11.626s cpu time, 0.922s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.196s elapsed time, 0.606s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Squarefree"
### 0.176s elapsed time, 0.686s cpu time, 0.203s GC time
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.202s elapsed time, 0.774s cpu time, 0.203s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.407s elapsed time, 1.405s cpu time, 0.203s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.884s elapsed time, 1.966s cpu time, 0.335s GC time
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 2.641s elapsed time, 4.827s cpu time, 0.815s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.390s elapsed time, 0.407s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.411s elapsed time, 1.561s cpu time, 0.204s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates" via "Draft.Efficient_Discrete_Sqrt")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.910s elapsed time, 0.919s cpu time, 0.000s GC time
Loading theory "Draft.Efficient_Discrete_Sqrt" (required by "Draft.Efficient_Discrete_SqrtMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Efficient_Discrete_Sqrt"
### 0.879s elapsed time, 0.913s cpu time, 0.048s GC time
Loading theory "Draft.Efficient_Discrete_SqrtMoreTemplates"
val templateLemmas =
   [("Efficient_Discrete_Sqrt.Discrete_sqrt_eq_newton_sqrt",
     "Discrete.sqrt ?n = newton_sqrt ?n",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Efficient_Discrete_Sqrt.sqrt_eq_floor_sqrt",
     "Discrete.sqrt ?n = nat \<lfloor>sqrt (real ?n)\<rfloor>",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Efficient_Discrete_Sqrt.square_test_correct",
     "square_test ?n = is_square ?n",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Efficient_Discrete_Sqrt.newton_sqrt_aux_correct",
     "Discrete.sqrt ?n <= ?x ==> newton_sqrt_aux ?x ?n = Discrete.sqrt ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app (template_hole 2, template_var 1)))),
    ("Efficient_Discrete_Sqrt.heron_step",
     "0 < ?t ==> Discrete.sqrt ?n <= (?t + ?n div ?t) div 2",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Efficient_Discrete_Sqrt.sub_q11_array",
     "?i : {..<11} ==> q11_array !! ?i = (?i : q11)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app
          (template_app (template_hole 9, template_var 0),
           template_hole 0)))),
    ("Efficient_Discrete_Sqrt.newton_sqrt_aux_simps",
     "?x <= (?x + ?n div ?x) div 2 ==> newton_sqrt_aux ?x ?n = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1))),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Efficient_Discrete_Sqrt.in_q11_code",
     "(?x mod 11 : q11) = q11_array !! (?x mod 11)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("Efficient_Discrete_Sqrt.sub_q63_array",
     "?i : {..<63} ==> q63_array !! ?i = (?i : q63)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 5, template_hole 4))))))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 0)))),
    ("Efficient_Discrete_Sqrt.sub_q64_array",
     "?i : {..<64} ==> q64_array !! ?i = (?i : q64)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 5,
                            template_app
                             (template_hole 5, template_hole 4)))))))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 0)))),
    ("Efficient_Discrete_Sqrt.sub_q65_array",
     "?i : {..<65} ==> q65_array !! ?i = (?i : q65)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 5,
                            template_app
                             (template_hole 5, template_hole 4)))))))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app
          (template_app (template_hole 9, template_var 0),
           template_hole 0)))),
    ("Efficient_Discrete_Sqrt.heron_step_real",
     "[| 0 < ?t; 0 <= ?n |] ==> sqrt ?n <= (?t + ?n / ?t) / 2",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Efficient_Discrete_Sqrt.in_q63_code",
     "(?x mod 63 : q63) = q63_array !! (?x mod 63)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4, template_hole 3)))))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4, template_hole 3)))))))))),
    ("Efficient_Discrete_Sqrt.square_mod_existence",
     "EX q. q\<^sup>2 = ?n ==> EX q. ?n mod ?k = q\<^sup>2 mod ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Efficient_Discrete_Sqrt.in_q64_code",
     "(?x mod 64 : q64) = q64_array !! (?x mod 64)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4, template_hole 3))))))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4, template_hole 3))))))))))),
    ("Efficient_Discrete_Sqrt.in_q65_code",
     "(?x mod 65 : q65) = q65_array !! (?x mod 65)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4, template_hole 3))))))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 4, template_hole 3))))))))))),
    ("Efficient_Discrete_Sqrt.newton_sqrt_aux_simps",
     "(?x + ?n div ?x) div 2 < ?x ==>
      newton_sqrt_aux ?x ?n = newton_sqrt_aux ((?x + ?n div ?x) div 2) ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1))),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 1))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_var 0)))),
    ("Efficient_Discrete_Sqrt.heron_step_div_eq_floored",
     "0 < ?t ==>
      (?t + ?n div ?t) div 2 =
      nat \<lfloor>(real ?t + real ?n / real ?t) / 2\<rfloor>",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 1, template_var 0)),
                     template_app (template_hole 1, template_var 1)))),
               template_app
                (template_hole 0,
                 template_app (template_hole 7, template_hole 6)))))))),
    ("Efficient_Discrete_Sqrt.square_mod_lower",
     "[| 0 < ?m; ?q\<^sup>2 mod ?m = ?a |]
      ==> EX q'<?m. q'\<^sup>2 mod ?m = ?a",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2)))),
            template_var 2),
          template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Efficient_Discrete_Sqrt.square_test_code",
     "square_test ?n =
      (q64_array !! (?n mod 64) &
       (let r = ?n mod 45045
        in q63_array !! (r mod 63) &
           q65_array !! (r mod 65) &
           q11_array !! (r mod 11) & ?n = (Discrete.sqrt ?n)\<^sup>2))",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_app
              (template_app (template_hole 11, template_var 0),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 9, template_hole 8)))))))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 11, template_var 0),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 6,
                                     template_app
(template_hole 6,
 template_app
  (template_hole 6,
   template_app
    (template_hole 9,
     template_app
      (template_hole 6,
       template_app (template_hole 9, template_hole 8)))))))))))))))))),
           t_empty)))),
    ("Efficient_Discrete_Sqrt.get_nat_sqrt_code",
     "get_nat_sqrt ?n =
      (if q64_array !! (?n mod 64) &
          (let r = ?n mod 45045
           in q63_array !! (r mod 63) &
              q65_array !! (r mod 65) & q11_array !! (r mod 11))
       then let x = Discrete.sqrt ?n
            in if x\<^sup>2 = ?n then Some x else None
       else None)",
     template_equation
      (template_app (template_hole 19, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, template_hole 15),
                   template_app
                    (template_app (template_hole 14, template_var 0),
                     template_app
                      (template_hole 13,
                       template_app
                        (template_hole 12,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 12,
                             template_app
                              (template_hole 12,
                               template_app
                                (template_hole 12,
                                 template_app
                                  (template_hole 12,
                                   template_hole 11)))))))))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 14, template_var 0),
                     template_app
                      (template_hole 13,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 12,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 9,
                                   template_app
                                    (template_hole 9,
                                     template_app
(template_hole 9,
 template_app
  (template_hole 9,
   template_app
    (template_hole 9,
     template_app
      (template_hole 9,
       template_app
        (template_hole 9,
         template_app
          (template_hole 12,
           template_app
            (template_hole 9,
             template_app
              (template_hole 12, template_hole 11)))))))))))))))))),
                 t_empty))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.Efficient_Discrete_SqrtMoreTemplates"
### 0.580s elapsed time, 0.779s cpu time, 0.078s GC time
val it = (): unit
