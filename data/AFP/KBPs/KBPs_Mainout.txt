Loading theory "Draft.DFS" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg")
Loading theory "Draft.MapOps" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg")
Loading theory "Draft.Kripke" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.KBPs")
Loading theory "Draft.Traces" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.KBPs")
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
### theory "Draft.DFS"
### 0.203s elapsed time, 0.838s cpu time, 0.035s GC time
Loading theory "HOL-Library.AList" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Trie2" via "Trie.Trie")
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
### theory "Draft.MapOps"
### 0.312s elapsed time, 1.256s cpu time, 0.100s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList" via "HOL-Library.Multiset")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### Missing patterns in function definition:
### !!a v va vb. tZip a (v \<leadsto> va) (tInit vb) = undefined
### !!a vb v va. tZip a (tInit vb) (v \<leadsto> va) = undefined
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.478s elapsed time, 1.876s cpu time, 0.191s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Traces"
### 0.863s elapsed time, 3.431s cpu time, 0.291s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.280s elapsed time, 0.986s cpu time, 0.499s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.199s elapsed time, 4.609s cpu time, 0.841s GC time
Loading theory "Trie.Trie" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Trie2")
### theory "HOL-Library.Nat_Bijection"
### 0.357s elapsed time, 1.405s cpu time, 0.155s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "{}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Kripke"
### 2.178s elapsed time, 8.493s cpu time, 1.203s GC time
Loading theory "Draft.KBPs" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Mapping"
### 1.388s elapsed time, 5.318s cpu time, 1.367s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.AList_Mapping"
### 0.120s elapsed time, 0.470s cpu time, 0.076s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs")
### theory "Trie.Trie"
### 1.616s elapsed time, 6.217s cpu time, 1.512s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.Extra")
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
locale PreEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
  assumes "PreEnvironment jkbp"
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
### Additional type variable(s) in specification of "jkbpTn_rel": 'a, 'aAct, 'eAct
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### Additional type variable(s) in specification of "jkbpTn_dom": 'a, 'aAct, 'eAct
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Option_ord"
### 0.330s elapsed time, 1.296s cpu time, 0.188s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
### Additional type variable(s) in specification of "jkbpCn_rel": 'a, 's, 'aAct, 'eAct
### Additional type variable(s) in specification of "jkbpCn_dom": 'a, 's, 'aAct, 'eAct
consts
  shift :: "'a list => 'a stream => 'a stream"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.KBPs"
### 1.710s elapsed time, 6.402s cpu time, 2.422s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.Extra")
consts
  stake :: "nat => 'a stream => 'a list"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
### theory "HOL-Library.Product_Lexorder"
### 0.123s elapsed time, 0.484s cpu time, 0.088s GC time
Loading theory "Draft.Extra" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Extra"
### 0.190s elapsed time, 0.747s cpu time, 0.070s GC time
Loading theory "Draft.KBPsAuto" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.KBPsAlg")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.Phantom_Type"
### 0.909s elapsed time, 3.379s cpu time, 1.299s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.281s elapsed time, 4.855s cpu time, 1.487s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Additional type variable(s) in locale specification "CARD_1": 'a
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Additional type variable(s) in locale specification "card2": 'a
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.872s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
Proofs for inductive predicate(s) "jpTracesp"
### theory "HOL-Library.Cardinality"
### 0.777s elapsed time, 3.079s cpu time, 0.376s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated")
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
Found termination order: "size <*mlex*> {}"
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Multiset"
### 4.558s elapsed time, 17.523s cpu time, 4.050s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList" via "Draft.List_local")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
Found termination order: "{}"
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Numeral_Type"
### 0.770s elapsed time, 3.058s cpu time, 0.309s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated")
### theory "HOL-Library.While_Combinator"
### 0.464s elapsed time, 1.840s cpu time, 0.220s GC time
Loading theory "Draft.List_local" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList")
Found termination order: "size <*mlex*> {}"
class len0 = type +
  fixes len_of :: "'a itself => nat"
Found termination order: "size <*mlex*> {}"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Draft.KBPsAuto"
### 2.155s elapsed time, 8.529s cpu time, 0.980s GC time
Loading theory "Draft.KBPsAlg" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.628s elapsed time, 2.485s cpu time, 0.295s GC time
Loading theory "HOL-Library.Saturated" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples" via "Draft.Robot")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  sat :: (len) linorder
  less_eq_sat == less_eq :: 'a sat => 'a sat => bool
  less_sat == less :: 'a sat => 'a sat => bool
instantiation
  sat :: (len) {minus,comm_semiring_1}
  zero_sat == zero_class.zero :: 'a sat
  plus_sat == plus :: 'a sat => 'a sat => 'a sat
  one_sat == one_class.one :: 'a sat
  times_sat == times :: 'a sat => 'a sat => 'a sat
  minus_sat == minus :: 'a sat => 'a sat => 'a sat
instantiation
  sat :: (len) ordered_comm_semiring
instantiation
  sat :: (len) equal
  equal_sat == equal_class.equal :: 'a sat => 'a sat => bool
instantiation
  sat :: (len) {bounded_lattice,distrib_lattice}
  bot_sat == bot :: 'a sat
  sup_sat == sup :: 'a sat => 'a sat => 'a sat
  top_sat == top :: 'a sat
  inf_sat == inf :: 'a sat => 'a sat => 'a sat
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. size_list size (fst p)) <*mlex*> {}"
instantiation
  sat :: (len) {Inf,Sup}
  Sup_sat == Sup :: 'a sat set => 'a sat
  Inf_sat == Inf :: 'a sat set => 'a sat
locale FiniteEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "FiniteEnvironment jkbp"
### theory "Draft.List_local"
### 0.817s elapsed time, 3.238s cpu time, 0.281s GC time
Loading theory "Draft.SPRView" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.SPRViewDet")
### theory "HOL-Library.Tree"
### 2.162s elapsed time, 8.548s cpu time, 0.972s GC time
Loading theory "Draft.Templates" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Saturated"
### 0.273s elapsed time, 1.086s cpu time, 0.071s GC time
Loading theory "Draft.ODList" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Draft.Eval")
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.ExtrEqs")
locale Algorithm
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
  assumes
    "Algorithm jkbp envInit envAction envTrans envVal jview envObs jviewInit
      jviewIncr simf simRels simVal simAbs simObs simInit simTrans simAction
      aOps tOps"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.SPRView"
### 0.392s elapsed time, 1.551s cpu time, 0.126s GC time
Loading theory "Draft.SPRViewNonDet" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views")
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.835s elapsed time, 3.304s cpu time, 0.383s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KBPs_MainMoreTemplates")
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
Found termination order: "length <*mlex*> {}"
instantiation
  odlist :: (linorder) equal
  equal_odlist == equal_class.equal :: 'a odlist => 'a odlist => bool
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
instantiation
  odlist :: (linorder) linorder
  less_eq_odlist == less_eq :: 'a odlist => 'a odlist => bool
  less_odlist == less :: 'a odlist => 'a odlist => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.683s elapsed time, 2.716s cpu time, 0.205s GC time
Loading theory "Transitive-Closure.Transitive_Closure_Impl" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView" via "Transitive-Closure.Transitive_Closure_List_Impl")
### theory "Draft.ODList"
### 1.732s elapsed time, 6.865s cpu time, 0.727s GC time
Loading theory "Draft.Eval" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale set_access
  fixes un :: "'a list => 'b => 'b"
    and set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
  assumes "set_access un set_of memb empty"
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
locale set_access_succ
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and succ :: "'a list => 'a list"
    and rel :: "('a * 'a) set"
  assumes "set_access_succ set_of memb empty un succ rel"
locale set_access_gen
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and gen_succ :: "('a * 'a) list => 'a list => 'a list"
  assumes "set_access_gen set_of memb empty un gen_succ"
### theory "Transitive-Closure.Transitive_Closure_Impl"
### 0.332s elapsed time, 1.319s cpu time, 0.138s GC time
Loading theory "Draft.Trie2" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView")
locale Algorithm
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
  assumes
    "Algorithm jkbp envInit envAction envTrans envVal jview envObs jviewInit
      jviewIncr simf simRels simVal simAbs simObs simInit KBP.k_succs
      simAction aOps tOps"
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
### theory "Draft.KBPsAlg"
### 2.561s elapsed time, 10.160s cpu time, 0.927s GC time
Loading theory "Transitive-Closure.Transitive_Closure_List_Impl" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views" via "Draft.ClockView")
### theory "Transitive-Closure.Transitive_Closure_List_Impl"
### 0.119s elapsed time, 0.469s cpu time, 0.142s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
instantiation
  odlist :: (linorder) linorder
  less_eq_odlist == less_eq :: 'a odlist => 'a odlist => bool
  less_odlist == less :: 'a odlist => 'a odlist => bool
### theory "Draft.Trie2"
### 0.473s elapsed time, 1.871s cpu time, 0.270s GC time
Loading theory "Draft.SPRViewSingle" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views")
Found termination order: "size <*mlex*> {}"
### theory "Draft.SPRViewNonDet"
### 2.253s elapsed time, 8.837s cpu time, 0.902s GC time
Loading theory "Draft.SPRViewNonDetIndInit" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.Eval"
### 1.246s elapsed time, 4.550s cpu time, 0.487s GC time
Loading theory "Draft.ClockView" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views")
Loading theory "Draft.SPRViewDet" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Views")
locale FiniteBroadcastEnvironmentIndependentInit
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
    and agents :: "'a list"
    and envInitBits :: "'es list * ('a => 'ps list)"
  assumes "FiniteBroadcastEnvironmentIndependentInit jkbp agents"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
    and
    "envInit ==
     concat
      (map (%psf. map (%esf. (| es = esf, ps = psf,
                                pubActs = (default, %_. default) |))
                   (fst envInitBits))
        (listToFuns (snd envInitBits) agents))"
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale FiniteBroadcastEnvironmentIndependentInit
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
    and agents :: "'a list"
    and envInitBits :: "'es list * ('a => 'ps list)"
  assumes "FiniteBroadcastEnvironmentIndependentInit jkbp agents"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
    and
    "envInit ==
     concat
      (map (%psf. map (%esf. (| es = esf, ps = psf,
                                pubActs = (default, %_. default) |))
                   (fst envInitBits))
        (listToFuns (snd envInitBits) agents))"
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
### theory "Draft.SPRViewNonDetIndInit"
### 1.430s elapsed time, 5.363s cpu time, 0.451s GC time
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
instantiation
  BEState_ext :: (linorder, linorder, linorder, linorder) linorder
  less_eq_BEState_ext == less_eq ::
    ('a, 'b, 'c, 'd) BEState_scheme
    => ('a, 'b, 'c, 'd) BEState_scheme => bool
  less_BEState_ext == less ::
    ('a, 'b, 'c, 'd) BEState_scheme
    => ('a, 'b, 'c, 'd) BEState_scheme => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
locale FiniteLinorderEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agents :: "'a odlist"
  assumes "FiniteLinorderEnvironment jkbp agents"
locale FiniteLinorderEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agents :: "'a odlist"
  assumes "FiniteLinorderEnvironment jkbp agents"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
### theory "Draft.SPRViewSingle"
### 3.430s elapsed time, 11.720s cpu time, 1.171s GC time
### theory "Draft.ClockView"
### 3.916s elapsed time, 12.030s cpu time, 1.219s GC time
Loading theory "Draft.Robot" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples")
instantiation
  Agent :: linorder
  less_eq_Agent == less_eq :: Agent => Agent => bool
  less_Agent == less :: Agent => Agent => bool
### theory "Draft.SPRViewDet"
### 6.154s elapsed time, 16.718s cpu time, 1.725s GC time
Loading theory "Draft.MuddyChildren" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main" via "Draft.Examples")
Loading theory "Draft.Views" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main")
### theory "Draft.Views"
### 0.459s elapsed time, 1.389s cpu time, 0.064s GC time
instantiation
  Agent :: linorder
  less_eq_Agent == less_eq :: Agent => Agent => bool
  less_Agent == less :: Agent => Agent => bool
Found termination order: "{}"
instantiation
  Agent :: enum
  enum_Agent == enum_class.enum :: Agent list
  enum_all_Agent == enum_class.enum_all :: (Agent => bool) => bool
  enum_ex_Agent == enum_class.enum_ex :: (Agent => bool) => bool
instantiation
  ChildAct :: enum
  enum_ChildAct == enum_class.enum :: ChildAct list
  enum_all_ChildAct == enum_class.enum_all :: (ChildAct => bool) => bool
  enum_ex_ChildAct == enum_class.enum_ex :: (ChildAct => bool) => bool
instantiation
  ChildAct :: linorder
  less_eq_ChildAct == less_eq :: ChildAct => ChildAct => bool
  less_ChildAct == less :: ChildAct => ChildAct => bool
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Robot"
### 3.976s elapsed time, 8.765s cpu time, 0.827s GC time
### theory "Draft.MuddyChildren"
### 5.031s elapsed time, 10.262s cpu time, 4.073s GC time
Loading theory "Draft.Examples" (required by "Draft.KBPs_MainMoreTemplates" via "Draft.KBPs_Main")
See theory exports
### theory "Draft.Examples"
### 2.797s elapsed time, 5.659s cpu time, 3.543s GC time
Loading theory "Draft.KBPs_Main" (required by "Draft.KBPs_MainMoreTemplates")
### theory "Draft.KBPs_Main"
### 0.371s elapsed time, 0.371s cpu time, 0.000s GC time
Loading theory "Draft.KBPs_MainMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.KBPs_MainMoreTemplates"
### 0.900s elapsed time, 1.145s cpu time, 0.077s GC time
val it = (): unit
