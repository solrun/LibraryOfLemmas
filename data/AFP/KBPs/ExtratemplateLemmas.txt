   [("Extraction.exI_realizer",
     "?P ?y ?x ==> ?P (snd (?x, ?y)) (fst (?x, ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)))
           ))),
    ("Extra.map_id_clunky",
     "set ?xs = UNIV ==> ?x : fst ` set (map (%x. (x, ?f x)) ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))))
           ))),
    ("Extraction.conjI_realizer",
     "[| ?P ?p; ?Q ?q |] ==> ?P (fst (?p, ?q)) & ?Q (snd (?p, ?q))",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_app
              (template_var 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))))
           ))),
    ("Extra.relation_mono",
     "[| ?A <= ?C; ?B <= ?D |] ==> ?A \<times> ?B <= ?C \<times> ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Extra.quotientI2", "[| ?x : ?A; ?X = ?r `` {?x} |] ==> ?X : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Extraction.exE_realizer'",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Extra.distinct_map_fst",
     "[| ?x ~: fst ` set ?xs; distinct (map fst ?xs) |]
      ==> (?x, ?y) ~: set ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app (template_hole 4, template_var 1)))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 5),
                template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))
               )
           ))),
    ("Extra.listToFuns_ext",
     "[| set ?xs = UNIV; distinct ?xs |]
      ==> (?g : set (listToFuns ?f ?xs)) = (ALL x. ?g x : set (?f x))",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2), template_hole 8),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2))),
         template_app (template_hole 2, t_empty)))),
    ("Extraction.disjE_realizer3",
     "[| case ?x of Left => ?P | Right => ?Q; ?P ==> ?R ?f; ?Q ==> ?R ?g |]
      ==> ?R (case ?x of Left => ?f | Right => ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_implication
         ([template_predicate (template_var 4)],
          template_predicate
           (template_app (template_var 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("Extraction.exE_realizer",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q (?f x y) |]
      ==> ?Q (let (x, y) = ?p in ?f x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, t_empty)))
           ))),
    ("Extraction.disjE_realizer2",
     "[| case ?x of None => ?P | Some q => ?Q q; ?P ==> ?R ?f;
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of None => ?f | Some q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5), t_empty),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1), t_empty),
               template_var 3))
           ))),
    ("Extra.listToFun_splice",
     "[| set ?xs = UNIV; distinct ?xs; ?g : set (listToFuns ?f ?xs);
         ?h : set (listToFuns ?f ?xs) |]
      ==> ?g(?x := ?h ?x) : set (listToFuns ?f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 4), template_hole 5),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 4)))
           ))),
    ("Extra.listToFun_futz",
     "[| ?M : set (listToFun ?xs); ?x : fst ` set ?xs |]
      ==> ?M ?x
          : {uu_. EX y ys. uu_ = y & (?x, ys) : set ?xs & y : set ys}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_app (template_hole 9, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_var 2, template_var 0)),
             template_app (template_hole 7, t_empty))
           ))),
    ("Extraction.disjE_realizer",
     "[| case ?x of Inl p => ?P p | Inr q => ?Q q; !!p. ?P p ==> ?R (?f p);
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of Inl p => ?f p | Inr q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), t_empty),
               template_var 3))
           ))),
    ("Extra.listToFun_futz_rev",
     "[| !!x. ?M x
              : (if x : fst ` set ?xs
                 then {uu_.
                       EX y ys. uu_ = y & (x, ys) : set ?xs & y : set ys}
                 else {undefined});
         distinct (map fst ?xs) |]
      ==> ?M : set (listToFun ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 17),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           )))]
