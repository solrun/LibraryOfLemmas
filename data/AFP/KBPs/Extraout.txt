Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.ExtraMoreTemplates" via "Draft.Extra")
Loading theory "HOL-Library.Option_ord" (required by "Draft.ExtraMoreTemplates" via "Draft.Extra")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
### theory "HOL-Library.Product_Lexorder"
### 0.099s elapsed time, 0.419s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.593s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.845s cpu time, 0.131s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.355s elapsed time, 1.416s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Option_ord"
### 0.353s elapsed time, 1.405s cpu time, 0.131s GC time
Loading theory "Draft.Extra" (required by "Draft.ExtraMoreTemplates")
### theory "Draft.Extra"
### 0.183s elapsed time, 0.725s cpu time, 0.072s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.923s elapsed time, 3.020s cpu time, 0.696s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.005s elapsed time, 3.137s cpu time, 0.735s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.854s elapsed time, 4.656s cpu time, 0.874s GC time
Loading theory "Draft.Templates" (required by "Draft.ExtraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExtraMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.463s elapsed time, 0.501s cpu time, 0.044s GC time
Loading theory "Draft.ExtraMoreTemplates"
val templateLemmas =
   [("Extraction.exI_realizer",
     "?P ?y ?x ==> ?P (snd (?x, ?y)) (fst (?x, ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)))
           ))),
    ("Extra.map_id_clunky",
     "set ?xs = UNIV ==> ?x : fst ` set (map (%x. (x, ?f x)) ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))))
           ))),
    ("Extraction.conjI_realizer",
     "[| ?P ?p; ?Q ?q |] ==> ?P (fst (?p, ?q)) & ?Q (snd (?p, ?q))",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_app
              (template_var 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))))
           ))),
    ("Extra.relation_mono",
     "[| ?A <= ?C; ?B <= ?D |] ==> ?A \<times> ?B <= ?C \<times> ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Extra.quotientI2", "[| ?x : ?A; ?X = ?r `` {?x} |] ==> ?X : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Extraction.exE_realizer'",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Extra.distinct_map_fst",
     "[| ?x ~: fst ` set ?xs; distinct (map fst ?xs) |]
      ==> (?x, ?y) ~: set ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app (template_hole 4, template_var 1)))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 5),
                template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))
               )
           ))),
    ("Extra.listToFuns_ext",
     "[| set ?xs = UNIV; distinct ?xs |]
      ==> (?g : set (listToFuns ?f ?xs)) = (ALL x. ?g x : set (?f x))",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2), template_hole 8),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2))),
         template_app (template_hole 2, t_empty)))),
    ("Extraction.disjE_realizer3",
     "[| case ?x of Left => ?P | Right => ?Q; ?P ==> ?R ?f; ?Q ==> ?R ?g |]
      ==> ?R (case ?x of Left => ?f | Right => ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_implication
         ([template_predicate (template_var 4)],
          template_predicate
           (template_app (template_var 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("Extraction.exE_realizer",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q (?f x y) |]
      ==> ?Q (let (x, y) = ?p in ?f x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, t_empty)))
           ))),
    ("Extraction.disjE_realizer2",
     "[| case ?x of None => ?P | Some q => ?Q q; ?P ==> ?R ?f;
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of None => ?f | Some q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5), t_empty),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1), t_empty),
               template_var 3))
           ))),
    ("Extra.listToFun_splice",
     "[| set ?xs = UNIV; distinct ?xs; ?g : set (listToFuns ?f ?xs);
         ?h : set (listToFuns ?f ?xs) |]
      ==> ?g(?x := ?h ?x) : set (listToFuns ?f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 4), template_hole 5),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 4)))
           ))),
    ("Extra.listToFun_futz",
     "[| ?M : set (listToFun ?xs); ?x : fst ` set ?xs |]
      ==> ?M ?x
          : {uu_. EX y ys. uu_ = y & (?x, ys) : set ?xs & y : set ys}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_app (template_hole 9, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_var 2, template_var 0)),
             template_app (template_hole 7, t_empty))
           ))),
    ("Extraction.disjE_realizer",
     "[| case ?x of Inl p => ?P p | Inr q => ?Q q; !!p. ?P p ==> ?R (?f p);
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of Inl p => ?f p | Inr q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), t_empty),
               template_var 3))
           ))),
    ("Extra.listToFun_futz_rev",
     "[| !!x. ?M x
              : (if x : fst ` set ?xs
                 then {uu_.
                       EX y ys. uu_ = y & (x, ys) : set ?xs & y : set ys}
                 else {undefined});
         distinct (map fst ?xs) |]
      ==> ?M : set (listToFun ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 17),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.ExtraMoreTemplates"
### 0.298s elapsed time, 0.433s cpu time, 0.050s GC time
val it = (): unit
