Loading theory "Draft.Kripke" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto" via "Draft.KBPs")
Loading theory "Draft.Traces" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto" via "Draft.KBPs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.557s cpu time, 0.047s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto" via "Draft.Extra")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.395s elapsed time, 1.591s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Option_ord"
### 0.271s elapsed time, 1.062s cpu time, 0.098s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto" via "Draft.Extra")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
### theory "HOL-Library.Product_Lexorder"
### 0.095s elapsed time, 0.376s cpu time, 0.061s GC time
Loading theory "Draft.Extra" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Extra"
### 0.184s elapsed time, 0.729s cpu time, 0.074s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### !!a v va vb. tZip a (v \<leadsto> va) (tInit vb) = undefined
### !!a vb v va. tZip a (tInit vb) (v \<leadsto> va) = undefined
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.371s elapsed time, 1.340s cpu time, 0.546s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Traces"
### 1.118s elapsed time, 4.319s cpu time, 0.826s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.088s elapsed time, 4.165s cpu time, 0.799s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.793s elapsed time, 2.756s cpu time, 0.244s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Kripke"
### 2.104s elapsed time, 7.495s cpu time, 1.146s GC time
Loading theory "Draft.KBPs" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView" via "Draft.KBPsAuto")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
locale PreEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
  assumes "PreEnvironment jkbp"
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in specification of "jkbpTn_rel": 'a, 'aAct, 'eAct
### Additional type variable(s) in specification of "jkbpTn_dom": 'a, 'aAct, 'eAct
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.760s elapsed time, 4.962s cpu time, 0.544s GC time
Loading theory "Draft.Templates" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.ExtrEqs")
### Additional type variable(s) in specification of "jkbpCn_rel": 'a, 's, 'aAct, 'eAct
### Additional type variable(s) in specification of "jkbpCn_dom": 'a, 's, 'aAct, 'eAct
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SPRViewNonDetIndInitMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.KBPs"
### 0.858s elapsed time, 1.835s cpu time, 0.225s GC time
Loading theory "Draft.KBPsAuto" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit" via "Draft.SPRView")
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.124s cpu time, 0.107s GC time
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "jpTracesp"
  Proving monotonicity ...
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
### theory "Draft.KBPsAuto"
### 1.363s elapsed time, 1.905s cpu time, 0.182s GC time
Loading theory "Draft.SPRView" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit")
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
### theory "Draft.SPRView"
### 0.249s elapsed time, 0.275s cpu time, 0.034s GC time
Loading theory "Draft.SPRViewNonDet" (required by "Draft.SPRViewNonDetIndInitMoreTemplates" via "Draft.SPRViewNonDetIndInit")
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
locale FiniteBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
  assumes "FiniteBroadcastEnvironment jkbp"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
### theory "Draft.SPRViewNonDet"
### 1.467s elapsed time, 1.567s cpu time, 0.140s GC time
Loading theory "Draft.SPRViewNonDetIndInit" (required by "Draft.SPRViewNonDetIndInitMoreTemplates")
locale FiniteBroadcastEnvironmentIndependentInit
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
    and agents :: "'a list"
    and envInitBits :: "'es list * ('a => 'ps list)"
  assumes "FiniteBroadcastEnvironmentIndependentInit jkbp agents"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
    and
    "envInit ==
     concat
      (map (%psf. map (%esf. (| es = esf, ps = psf,
                                pubActs = (default, %_. default) |))
                   (fst envInitBits))
        (listToFuns (snd envInitBits) agents))"
locale FiniteBroadcastEnvironmentIndependentInit
  fixes jkbp :: "'a => ('a, 'p, 'pPubAct * 'ps) GC list"
    and envInit :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState list"
    and
    envAction ::
      "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
       => ('ePubAct * 'ePrivAct) list"
    and
    envTrans ::
      "'ePubAct * 'ePrivAct
       => ('a => 'pPubAct * 'ps)
          => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState"
    and envVal :: "('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState => 'p => bool"
    and
    envObs ::
      "'a => ('a, 'ePubAct, 'es, 'pPubAct, 'ps) BEState
             => 'cobs * 'ps * 'ePubAct * ('a => 'pPubAct)"
    and envObsC :: "'es => 'cobs"
    and
    envActionES ::
      "'es => 'ePubAct * ('a => 'pPubAct) => ('ePubAct * 'ePrivAct) list"
    and
    envTransES :: "'ePubAct * 'ePrivAct => ('a => 'pPubAct) => 'es => 'es"
    and agents :: "'a list"
    and envInitBits :: "'es list * ('a => 'ps list)"
  assumes "FiniteBroadcastEnvironmentIndependentInit jkbp agents"
  defines "!!a. envObs a == %s. (envObsC (es s), ps s a, pubActs s)"
    and "!!s. envAction s == envActionES (es s) (pubActs s)"
    and
    "!!eact aact s.
        envTrans eact aact s ==
        (| es = envTransES eact (fst o aact) (es s), ps = snd o aact,
           pubActs = (fst eact, fst o aact) |)"
    and
    "envInit ==
     concat
      (map (%psf. map (%esf. (| es = esf, ps = psf,
                                pubActs = (default, %_. default) |))
                   (fst envInitBits))
        (listToFuns (snd envInitBits) agents))"
### theory "Draft.SPRViewNonDetIndInit"
### 1.002s elapsed time, 1.108s cpu time, 0.148s GC time
Loading theory "Draft.SPRViewNonDetIndInitMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SPRViewNonDetIndInitMoreTemplates"
### 0.655s elapsed time, 1.534s cpu time, 1.040s GC time
val it = (): unit
