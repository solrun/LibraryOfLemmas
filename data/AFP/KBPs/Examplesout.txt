Loading theory "Draft.DFS" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg")
Loading theory "Draft.MapOps" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg")
Loading theory "Draft.Kripke" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.KBPs")
Loading theory "Draft.Traces" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.KBPs")
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
locale DFS
  fixes succs :: "'a => 'a list"
    and isNode :: "'a => bool"
    and invariant :: "'b => bool"
    and ins :: "'a => 'b => 'b"
    and memb :: "'a => 'b => bool"
    and empt :: "'b"
    and nodeAbs :: "'a => 'c"
  assumes "DFS succs isNode invariant ins memb empt nodeAbs"
### theory "Draft.DFS"
### 0.204s elapsed time, 0.833s cpu time, 0.035s GC time
Loading theory "HOL-Library.AList" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Trie2" via "Trie.Trie")
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
### theory "Draft.MapOps"
### 0.306s elapsed time, 1.230s cpu time, 0.101s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList" via "HOL-Library.Multiset")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### Missing patterns in function definition:
### !!a v va vb. tZip a (v \<leadsto> va) (tInit vb) = undefined
### !!a vb v va. tZip a (tInit vb) (v \<leadsto> va) = undefined
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.482s elapsed time, 1.903s cpu time, 0.194s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Traces"
### 0.866s elapsed time, 3.436s cpu time, 0.294s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.286s elapsed time, 0.998s cpu time, 0.512s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.204s elapsed time, 4.625s cpu time, 0.848s GC time
Loading theory "Trie.Trie" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Trie2")
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.387s cpu time, 0.145s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "{}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Kripke"
### 2.177s elapsed time, 8.471s cpu time, 1.198s GC time
Loading theory "Draft.KBPs" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Mapping"
### 1.378s elapsed time, 5.268s cpu time, 1.259s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.AList_Mapping"
### 0.115s elapsed time, 0.457s cpu time, 0.060s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
locale JKBP
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
  assumes "JKBP jkbp"
locale PreEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
  assumes "PreEnvironment jkbp"
### theory "Trie.Trie"
### 1.649s elapsed time, 6.337s cpu time, 1.387s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.Extra")
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
locale PreEnvironmentJView
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tview"
  assumes "PreEnvironmentJView jkbp jview"
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
### Additional type variable(s) in specification of "jkbpTn_rel": 'a, 'aAct, 'eAct
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
### Additional type variable(s) in specification of "jkbpTn_dom": 'a, 'aAct, 'eAct
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### Additional type variable(s) in specification of "jkbpCn_rel": 'a, 's, 'aAct, 'eAct
### Additional type variable(s) in specification of "jkbpCn_dom": 'a, 's, 'aAct, 'eAct
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.Option_ord"
### 0.700s elapsed time, 2.593s cpu time, 1.253s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.KBPs"
### 1.696s elapsed time, 6.358s cpu time, 2.364s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto" via "Draft.Extra")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  stake :: "nat => 'a stream => 'a list"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.Product_Lexorder"
### 0.102s elapsed time, 0.407s cpu time, 0.000s GC time
Loading theory "Draft.Extra" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg" via "Draft.KBPsAuto")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Extra"
### 0.224s elapsed time, 0.876s cpu time, 0.176s GC time
Loading theory "Draft.KBPsAuto" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.KBPsAlg")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.263s elapsed time, 4.810s cpu time, 1.466s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Phantom_Type"
### 0.584s elapsed time, 2.302s cpu time, 0.213s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated" via "HOL-Library.Numeral_Type")
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.858s cpu time, 0.062s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
Proofs for inductive predicate(s) "pw_leq"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
  Proving monotonicity ...
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
Proofs for inductive predicate(s) "jpTracesp"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
  Proving monotonicity ...
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
consts
  left :: "'a tree => 'a tree"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Cardinality"
### 0.771s elapsed time, 3.037s cpu time, 0.308s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated")
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
Proofs for inductive predicate(s) "rel_mset'"
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
  Proving monotonicity ...
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Found termination order: "size <*mlex*> {}"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
### theory "HOL-Library.Multiset"
### 4.591s elapsed time, 17.669s cpu time, 3.828s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList" via "Draft.List_local")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale IncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
  assumes "IncrEnvironment jkbp jview envObs jviewInit jviewIncr"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "{}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
Found termination order: "size <*mlex*> {}"
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
locale SimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
  assumes
    "SimIncrEnvironment jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.While_Combinator"
### 0.444s elapsed time, 1.754s cpu time, 0.158s GC time
Loading theory "Draft.List_local" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Eval" via "Draft.ODList")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Numeral_Type"
### 0.771s elapsed time, 3.050s cpu time, 0.333s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot" via "HOL-Library.Saturated")
Found termination order: "size <*mlex*> {}"
class len0 = type +
  fixes len_of :: "'a itself => nat"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale AlgSimIncrEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tv"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tv"
    and jviewIncr :: "'a => 'obs => 'tv => 'tv"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
  assumes
    "AlgSimIncrEnvironment jkbp envInit envAction envTrans envVal jview
      envObs jviewInit jviewIncr simf simRels simVal simAbs simObs simInit
      simTrans simAction"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Draft.KBPsAuto"
### 2.202s elapsed time, 8.719s cpu time, 0.854s GC time
Loading theory "Draft.KBPsAlg" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.569s elapsed time, 2.255s cpu time, 0.213s GC time
Loading theory "HOL-Library.Saturated" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot")
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
instantiation
  sat :: (len) linorder
  less_eq_sat == less_eq :: 'a sat => 'a sat => bool
  less_sat == less :: 'a sat => 'a sat => bool
instantiation
  sat :: (len) {minus,comm_semiring_1}
  zero_sat == zero_class.zero :: 'a sat
  plus_sat == plus :: 'a sat => 'a sat => 'a sat
  one_sat == one_class.one :: 'a sat
  times_sat == times :: 'a sat => 'a sat => 'a sat
  minus_sat == minus :: 'a sat => 'a sat => 'a sat
instantiation
  sat :: (len) ordered_comm_semiring
instantiation
  sat :: (len) equal
  equal_sat == equal_class.equal :: 'a sat => 'a sat => bool
instantiation
  sat :: (len) {bounded_lattice,distrib_lattice}
  bot_sat == bot :: 'a sat
  sup_sat == sup :: 'a sat => 'a sat => 'a sat
  top_sat == top :: 'a sat
  inf_sat == inf :: 'a sat => 'a sat => 'a sat
### theory "HOL-Library.Tree"
### 2.178s elapsed time, 8.614s cpu time, 0.861s GC time
Loading theory "Draft.SPRView" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.SPRViewDet")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. size_list size (fst p)) <*mlex*> {}"
instantiation
  sat :: (len) {Inf,Sup}
  Sup_sat == Sup :: 'a sat set => 'a sat
  Inf_sat == Inf :: 'a sat set => 'a sat
locale FiniteEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "FiniteEnvironment jkbp"
### theory "Draft.List_local"
### 0.824s elapsed time, 3.272s cpu time, 0.282s GC time
Loading theory "Draft.Templates" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
### theory "HOL-Library.Saturated"
### 0.274s elapsed time, 1.082s cpu time, 0.068s GC time
Loading theory "Draft.ODList" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Draft.Eval")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.114s elapsed time, 0.450s cpu time, 0.121s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
locale Algorithm
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
  assumes
    "Algorithm jkbp envInit envAction envTrans envVal jview envObs jviewInit
      jviewIncr simf simRels simVal simAbs simObs simInit simTrans simAction
      aOps tOps"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.SPRView"
### 0.386s elapsed time, 1.537s cpu time, 0.121s GC time
Loading theory "Transitive-Closure.Transitive_Closure_Impl" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView" via "Transitive-Closure.Transitive_Closure_List_Impl")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale set_access
  fixes un :: "'a list => 'b => 'b"
    and set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
  assumes "set_access un set_of memb empty"
locale set_access_succ
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and succ :: "'a list => 'a list"
    and rel :: "('a * 'a) set"
  assumes "set_access_succ set_of memb empty un succ rel"
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
locale set_access_gen
  fixes set_of :: "'b => 'a set"
    and memb :: "'a => 'b => bool"
    and empty :: "'b"
    and un :: "'a list => 'b => 'b"
    and gen_succ :: "('a * 'a) list => 'a list => 'a list"
  assumes "set_access_gen set_of memb empty un gen_succ"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Transitive-Closure.Transitive_Closure_Impl"
### 0.344s elapsed time, 1.359s cpu time, 0.177s GC time
Loading theory "Transitive-Closure.Transitive_Closure_List_Impl" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView")
### theory "Transitive-Closure.Transitive_Closure_List_Impl"
### 0.080s elapsed time, 0.321s cpu time, 0.000s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
### theory "HOL-Library.BigO"
### 0.841s elapsed time, 3.341s cpu time, 0.298s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExamplesMoreTemplates")
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
Found termination order: "length <*mlex*> {}"
instantiation
  odlist :: (linorder) equal
  equal_odlist == equal_class.equal :: 'a odlist => 'a odlist => bool
instantiation
  odlist :: (linorder) linorder
  less_eq_odlist == less_eq :: 'a odlist => 'a odlist => bool
  less_odlist == less :: 'a odlist => 'a odlist => bool
instantiation
  odlist :: (linorder) linorder
  less_eq_odlist == less_eq :: 'a odlist => 'a odlist => bool
  less_odlist == less :: 'a odlist => 'a odlist => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.651s elapsed time, 2.042s cpu time, 0.205s GC time
### theory "Draft.ODList"
### 1.663s elapsed time, 5.875s cpu time, 0.624s GC time
Loading theory "Draft.Trie2" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView")
Loading theory "Draft.Eval" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren" via "Draft.ClockView")
locale AlgorithmForAgent
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
    and a :: "'a"
  assumes
    "AlgorithmForAgent jkbp envInit envAction envTrans envVal jview envObs
      jviewInit jviewIncr simf simRels simVal simAbs simObs simInit simTrans
      simAction aOps tOps"
### theory "Draft.Trie2"
### 0.393s elapsed time, 1.198s cpu time, 0.108s GC time
locale Algorithm
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and jview :: "'a => 's Trace => 'tobs"
    and envObs :: "'a => 's => 'obs"
    and jviewInit :: "'a => 'obs => 'tobs"
    and jviewIncr :: "'a => 'obs => 'tobs => 'tobs"
    and simf :: "'s Trace => 'ss"
    and simRels :: "'a => ('ss * 'ss) set"
    and simVal :: "'ss => 'p => bool"
    and simAbs :: "'rep => 'ss set"
    and simObs :: "'a => 'rep => 'obs"
    and simInit :: "'a => 'obs => 'rep"
    and simTrans :: "'a => 'rep => 'rep list"
    and simAction :: "'a => 'rep => 'aAct list"
    and aOps :: "('ma, 'rep, 'aAct list) MapOps"
    and tOps :: "('mt, 'rep * 'obs, 'rep) MapOps"
  assumes
    "Algorithm jkbp envInit envAction envTrans envVal jview envObs jviewInit
      jviewIncr simf simRels simVal simAbs simObs simInit KBP.k_succs
      simAction aOps tOps"
### theory "Draft.KBPsAlg"
### 2.458s elapsed time, 8.558s cpu time, 0.800s GC time
Loading theory "Draft.SPRViewSingle" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.Robot")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.Eval"
### 1.068s elapsed time, 2.746s cpu time, 0.336s GC time
Loading theory "Draft.ClockView" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren")
Loading theory "Draft.SPRViewDet" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.MuddyChildren")
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
locale FiniteSingleAgentEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agent :: "'a"
  assumes "FiniteSingleAgentEnvironment jkbp agent"
locale Environment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
  assumes "Environment jkbp"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
instantiation
  BEState_ext :: (linorder, linorder, linorder, linorder) linorder
  less_eq_BEState_ext == less_eq ::
    ('a, 'b, 'c, 'd) BEState_scheme
    => ('a, 'b, 'c, 'd) BEState_scheme => bool
  less_BEState_ext == less ::
    ('a, 'b, 'c, 'd) BEState_scheme
    => ('a, 'b, 'c, 'd) BEState_scheme => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
locale FiniteLinorderEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agents :: "'a odlist"
  assumes "FiniteLinorderEnvironment jkbp agents"
locale FiniteLinorderEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "'s list"
    and envAction :: "'s => 'eAct list"
    and envTrans :: "'eAct => ('a => 'aAct) => 's => 's"
    and envVal :: "'s => 'p => bool"
    and envObs :: "'a => 's => 'obs"
    and agents :: "'a odlist"
  assumes "FiniteLinorderEnvironment jkbp agents"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
locale FiniteDetBroadcastEnvironment
  fixes jkbp :: "'a => ('a, 'p, 'aAct) GC list"
    and envInit :: "('a, 'es, 'as) BEState list"
    and envAction :: "('a, 'es, 'as) BEState => 'eAct list"
    and
    envTrans ::
      "'eAct
       => ('a => 'aAct) => ('a, 'es, 'as) BEState => ('a, 'es, 'as) BEState"
    and envVal :: "('a, 'es, 'as) BEState => 'p => bool"
    and envObs :: "'a => ('a, 'es, 'as) BEState => 'cobs * 'as option"
    and agents :: "'a odlist"
    and envObsC :: "'es => 'cobs"
  assumes
    "FiniteDetBroadcastEnvironment jkbp envInit envAction envTrans envVal
      agents envObsC"
  defines "!!a s. envObs a s == (envObsC (es s), ODList.lookup (ps s) a)"
### theory "Draft.SPRViewSingle"
### 3.158s elapsed time, 9.185s cpu time, 0.879s GC time
### theory "Draft.ClockView"
### 3.702s elapsed time, 10.195s cpu time, 0.885s GC time
Loading theory "Draft.Robot" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
instantiation
  Agent :: linorder
  less_eq_Agent == less_eq :: Agent => Agent => bool
  less_Agent == less :: Agent => Agent => bool
### theory "Draft.SPRViewDet"
### 5.917s elapsed time, 14.789s cpu time, 1.271s GC time
Loading theory "Draft.MuddyChildren" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
instantiation
  Agent :: linorder
  less_eq_Agent == less_eq :: Agent => Agent => bool
  less_Agent == less :: Agent => Agent => bool
Found termination order: "{}"
instantiation
  Agent :: enum
  enum_Agent == enum_class.enum :: Agent list
  enum_all_Agent == enum_class.enum_all :: (Agent => bool) => bool
  enum_ex_Agent == enum_class.enum_ex :: (Agent => bool) => bool
instantiation
  ChildAct :: enum
  enum_ChildAct == enum_class.enum :: ChildAct list
  enum_all_ChildAct == enum_class.enum_all :: (ChildAct => bool) => bool
  enum_ex_ChildAct == enum_class.enum_ex :: (ChildAct => bool) => bool
instantiation
  ChildAct :: linorder
  less_eq_ChildAct == less_eq :: ChildAct => ChildAct => bool
  less_ChildAct == less :: ChildAct => ChildAct => bool
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Robot"
### 3.849s elapsed time, 7.980s cpu time, 0.632s GC time
### theory "Draft.MuddyChildren"
### 4.832s elapsed time, 9.189s cpu time, 3.613s GC time
Loading theory "Draft.Examples" (required by "Draft.ExamplesMoreTemplates")
See theory exports
### theory "Draft.Examples"
### 1.779s elapsed time, 2.180s cpu time, 0.210s GC time
Loading theory "Draft.ExamplesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ExamplesMoreTemplates"
### 0.792s elapsed time, 1.045s cpu time, 0.058s GC time
val it = (): unit
