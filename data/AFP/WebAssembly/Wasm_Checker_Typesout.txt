Loading theory "Draft.Wasm_Type_Abs" (required by "Draft.Wasm_Checker_TypesTemplates" via "Draft.Wasm_Checker_Types" via "Draft.Wasm" via "Draft.Wasm_Base_Defs")
Loading theory "Draft.Wasm_Ast" (required by "Draft.Wasm_Checker_TypesTemplates" via "Draft.Wasm_Checker_Types" via "Draft.Wasm" via "Draft.Wasm_Base_Defs")
Loading theory "Draft.Templates" (required by "Draft.Wasm_Checker_TypesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Wasm_Checker_TypesTemplates")
class wasm_int = wasm_base +
  fixes int_clz :: "'a => 'a"
    and int_ctz :: "'a => 'a"
    and int_popcnt :: "'a => 'a"
    and int_add :: "'a => 'a => 'a"
    and int_sub :: "'a => 'a => 'a"
    and int_mul :: "'a => 'a => 'a"
    and int_div_u :: "'a => 'a => 'a option"
    and int_div_s :: "'a => 'a => 'a option"
    and int_rem_u :: "'a => 'a => 'a option"
    and int_rem_s :: "'a => 'a => 'a option"
    and int_and :: "'a => 'a => 'a"
    and int_or :: "'a => 'a => 'a"
    and int_xor :: "'a => 'a => 'a"
    and int_shl :: "'a => 'a => 'a"
    and int_shr_u :: "'a => 'a => 'a"
    and int_shr_s :: "'a => 'a => 'a"
    and int_rotl :: "'a => 'a => 'a"
    and int_rotr :: "'a => 'a => 'a"
    and int_eqz :: "'a => bool"
    and int_eq :: "'a => 'a => bool"
    and int_lt_u :: "'a => 'a => bool"
    and int_lt_s :: "'a => 'a => bool"
    and int_gt_u :: "'a => 'a => bool"
    and int_gt_s :: "'a => 'a => bool"
    and int_le_u :: "'a => 'a => bool"
    and int_le_s :: "'a => 'a => bool"
    and int_ge_u :: "'a => 'a => bool"
    and int_ge_s :: "'a => 'a => bool"
    and int_of_nat :: "nat => 'a"
    and nat_of_int :: "'a => nat"
class wasm_float = wasm_base +
  fixes float_neg :: "'a => 'a"
    and float_abs :: "'a => 'a"
    and float_ceil :: "'a => 'a"
    and float_floor :: "'a => 'a"
    and float_trunc :: "'a => 'a"
    and float_nearest :: "'a => 'a"
    and float_sqrt :: "'a => 'a"
    and float_add :: "'a => 'a => 'a"
    and float_sub :: "'a => 'a => 'a"
    and float_mul :: "'a => 'a => 'a"
    and float_div :: "'a => 'a => 'a"
    and float_min :: "'a => 'a => 'a"
    and float_max :: "'a => 'a => 'a"
    and float_copysign :: "'a => 'a => 'a"
    and float_eq :: "'a => 'a => bool"
    and float_lt :: "'a => 'a => bool"
    and float_gt :: "'a => 'a => bool"
    and float_le :: "'a => 'a => bool"
    and float_ge :: "'a => 'a => bool"
### theory "Draft.Wasm_Type_Abs"
### 0.172s elapsed time, 0.534s cpu time, 0.035s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.565s elapsed time, 1.269s cpu time, 0.113s GC time
### theory "Draft.Wasm_Ast"
### 9.580s elapsed time, 12.268s cpu time, 2.741s GC time
Loading theory "Draft.Wasm_Base_Defs" (required by "Draft.Wasm_Checker_TypesTemplates" via "Draft.Wasm_Checker_Types" via "Draft.Wasm")
instantiation
  i32 :: wasm_int
  int_clz_i32 == int_clz :: i32 => i32
  int_ctz_i32 == int_ctz :: i32 => i32
  int_popcnt_i32 == int_popcnt :: i32 => i32
  int_add_i32 == int_add :: i32 => i32 => i32
  int_sub_i32 == int_sub :: i32 => i32 => i32
  int_mul_i32 == int_mul :: i32 => i32 => i32
  int_div_u_i32 == int_div_u :: i32 => i32 => i32 option
  int_div_s_i32 == int_div_s :: i32 => i32 => i32 option
  int_rem_u_i32 == int_rem_u :: i32 => i32 => i32 option
  int_rem_s_i32 == int_rem_s :: i32 => i32 => i32 option
  int_and_i32 == int_and :: i32 => i32 => i32
  int_or_i32 == int_or :: i32 => i32 => i32
  int_xor_i32 == int_xor :: i32 => i32 => i32
  int_shl_i32 == int_shl :: i32 => i32 => i32
  int_shr_u_i32 == int_shr_u :: i32 => i32 => i32
  int_shr_s_i32 == int_shr_s :: i32 => i32 => i32
  int_rotl_i32 == int_rotl :: i32 => i32 => i32
  int_rotr_i32 == int_rotr :: i32 => i32 => i32
  int_eqz_i32 == int_eqz :: i32 => bool
  int_eq_i32 == int_eq :: i32 => i32 => bool
  int_lt_u_i32 == int_lt_u :: i32 => i32 => bool
  int_lt_s_i32 == int_lt_s :: i32 => i32 => bool
  int_gt_u_i32 == int_gt_u :: i32 => i32 => bool
  int_gt_s_i32 == int_gt_s :: i32 => i32 => bool
  int_le_u_i32 == int_le_u :: i32 => i32 => bool
  int_le_s_i32 == int_le_s :: i32 => i32 => bool
  int_ge_u_i32 == int_ge_u :: i32 => i32 => bool
  int_ge_s_i32 == int_ge_s :: i32 => i32 => bool
  int_of_nat_i32 == int_of_nat :: nat => i32
  nat_of_int_i32 == nat_of_int :: i32 => nat
  zero_i32 == zero_class.zero :: i32
instantiation
  i64 :: wasm_int
  int_clz_i64 == int_clz :: i64 => i64
  int_ctz_i64 == int_ctz :: i64 => i64
  int_popcnt_i64 == int_popcnt :: i64 => i64
  int_add_i64 == int_add :: i64 => i64 => i64
  int_sub_i64 == int_sub :: i64 => i64 => i64
  int_mul_i64 == int_mul :: i64 => i64 => i64
  int_div_u_i64 == int_div_u :: i64 => i64 => i64 option
  int_div_s_i64 == int_div_s :: i64 => i64 => i64 option
  int_rem_u_i64 == int_rem_u :: i64 => i64 => i64 option
  int_rem_s_i64 == int_rem_s :: i64 => i64 => i64 option
  int_and_i64 == int_and :: i64 => i64 => i64
  int_or_i64 == int_or :: i64 => i64 => i64
  int_xor_i64 == int_xor :: i64 => i64 => i64
  int_shl_i64 == int_shl :: i64 => i64 => i64
  int_shr_u_i64 == int_shr_u :: i64 => i64 => i64
  int_shr_s_i64 == int_shr_s :: i64 => i64 => i64
  int_rotl_i64 == int_rotl :: i64 => i64 => i64
  int_rotr_i64 == int_rotr :: i64 => i64 => i64
  int_eqz_i64 == int_eqz :: i64 => bool
  int_eq_i64 == int_eq :: i64 => i64 => bool
  int_lt_u_i64 == int_lt_u :: i64 => i64 => bool
  int_lt_s_i64 == int_lt_s :: i64 => i64 => bool
  int_gt_u_i64 == int_gt_u :: i64 => i64 => bool
  int_gt_s_i64 == int_gt_s :: i64 => i64 => bool
  int_le_u_i64 == int_le_u :: i64 => i64 => bool
  int_le_s_i64 == int_le_s :: i64 => i64 => bool
  int_ge_u_i64 == int_ge_u :: i64 => i64 => bool
  int_ge_s_i64 == int_ge_s :: i64 => i64 => bool
  int_of_nat_i64 == int_of_nat :: nat => i64
  nat_of_int_i64 == nat_of_int :: i64 => nat
  zero_i64 == zero_class.zero :: i64
instantiation
  f32 :: wasm_float
  float_neg_f32 == float_neg :: f32 => f32
  float_abs_f32 == float_abs :: f32 => f32
  float_ceil_f32 == float_ceil :: f32 => f32
  float_floor_f32 == float_floor :: f32 => f32
  float_trunc_f32 == float_trunc :: f32 => f32
  float_nearest_f32 == float_nearest :: f32 => f32
  float_sqrt_f32 == float_sqrt :: f32 => f32
  float_add_f32 == float_add :: f32 => f32 => f32
  float_sub_f32 == float_sub :: f32 => f32 => f32
  float_mul_f32 == float_mul :: f32 => f32 => f32
  float_div_f32 == float_div :: f32 => f32 => f32
  float_min_f32 == float_min :: f32 => f32 => f32
  float_max_f32 == float_max :: f32 => f32 => f32
  float_copysign_f32 == float_copysign :: f32 => f32 => f32
  float_eq_f32 == float_eq :: f32 => f32 => bool
  float_lt_f32 == float_lt :: f32 => f32 => bool
  float_gt_f32 == float_gt :: f32 => f32 => bool
  float_le_f32 == float_le :: f32 => f32 => bool
  float_ge_f32 == float_ge :: f32 => f32 => bool
  zero_f32 == zero_class.zero :: f32
instantiation
  f64 :: wasm_float
  float_neg_f64 == float_neg :: f64 => f64
  float_abs_f64 == float_abs :: f64 => f64
  float_ceil_f64 == float_ceil :: f64 => f64
  float_floor_f64 == float_floor :: f64 => f64
  float_trunc_f64 == float_trunc :: f64 => f64
  float_nearest_f64 == float_nearest :: f64 => f64
  float_sqrt_f64 == float_sqrt :: f64 => f64
  float_add_f64 == float_add :: f64 => f64 => f64
  float_sub_f64 == float_sub :: f64 => f64 => f64
  float_mul_f64 == float_mul :: f64 => f64 => f64
  float_div_f64 == float_div :: f64 => f64 => f64
  float_min_f64 == float_min :: f64 => f64 => f64
  float_max_f64 == float_max :: f64 => f64 => f64
  float_copysign_f64 == float_copysign :: f64 => f64 => f64
  float_eq_f64 == float_eq :: f64 => f64 => bool
  float_lt_f64 == float_lt :: f64 => f64 => bool
  float_gt_f64 == float_gt :: f64 => f64 => bool
  float_le_f64 == float_le :: f64 => f64 => bool
  float_ge_f64 == float_ge :: f64 => f64 => bool
  zero_f64 == zero_class.zero :: f64
Proofs for inductive predicate(s) "store_extension"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Lfilled"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Lfilled_exact"
  Proving monotonicity ...
### theory "Draft.Wasm_Base_Defs"
### 0.787s elapsed time, 0.861s cpu time, 0.060s GC time
Loading theory "Draft.Wasm" (required by "Draft.Wasm_Checker_TypesTemplates" via "Draft.Wasm_Checker_Types")
Proofs for inductive predicate(s) "b_e_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cl_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "e_typing", "s_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "inst_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "store_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "config_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduce_simple"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduce"
  Proving monotonicity ...
### theory "Draft.Wasm"
### 0.801s elapsed time, 0.931s cpu time, 0.098s GC time
Loading theory "Draft.Wasm_Checker_Types" (required by "Draft.Wasm_Checker_TypesTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Wasm_Checker_Types"
### 1.437s elapsed time, 1.636s cpu time, 0.214s GC time
Loading theory "Draft.Wasm_Checker_TypesTemplates"
val templateLemmas =
   [("Wasm_Checker_Types.ct_list_eq_refl", "ct_list_eq ?xs ?xs",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Wasm_Checker_Types.ct_prefix_nil", "ct_prefix [] ?xs",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Wasm_Checker_Types.ct_suffix_nil", "ct_suffix [] ?ts",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Wasm_Checker_Types.ct_suffix_refl", "ct_suffix ?ts ?ts",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Wasm_Checker_Types.c_types_agree_top1",
     "c_types_agree (TopType []) ?ts",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Wasm_Checker_Types.c_types_agree_id", "c_types_agree (Type ?ts) ?ts",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Wasm_Checker_Types.ct_prefix_code", "ct_prefix [] ?xs = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Wasm_Checker_Types.ct_suffix_cons_it", "ct_suffix ?xs (?xs' @ ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Wasm_Checker_Types.ct_list_eq_exists",
     "EX ys. ct_list_eq ?xs (to_ct_list ys)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Wasm_Checker_Types.ct_suffix_exists",
     "EX ts_c. ct_suffix ?x1.0 (to_ct_list ts_c)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Wasm_Checker_Types.ct_prefix_nil", "~ ct_prefix (?x # ?xs) []",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0)
             )
         )),
    ("Wasm_Checker_Types.produce_nil", "produce ?ts (Type []) = ?ts",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Wasm_Checker_Types.ct_prefix_code", "ct_prefix (?x # ?xs) [] = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Wasm_Checker_Types.ct_suffix_singleton_any", "ct_suffix [TAny] [?t]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))
         )),
    ("Wasm_Checker_Types.ct_eq_commute", "ct_eq ?x ?y ==> ct_eq ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Wasm_Checker_Types.ct_list_eq_commute",
     "ct_list_eq ?xs ?ys ==> ct_list_eq ?ys ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Wasm_Checker_Types.ct_suffix_to_ct_prefix",
     "ct_suffix ?xs ?ys = ct_prefix (rev ?xs) (rev ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Wasm_Checker_Types.ct_list_eq_ts_conv_eq",
     "ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Wasm_Checker_Types.ct_suffix_ts_conv_suffix",
     "ct_suffix (to_ct_list ?ts) (to_ct_list ?ts') = suffix ?ts ?ts'",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Wasm_Checker_Types.type_update_empty",
     "type_update ?ts ?cons (Type []) = consume ?ts ?cons",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Wasm_Checker_Types.ct_list_eq_length",
     "ct_list_eq ?xs ?ys ==> length ?xs = length ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wasm_Checker_Types.ct_suffix_length",
     "ct_suffix ?ts ?ts' ==> length ?ts <= length ?ts'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wasm_Checker_Types.ct_suffix_less",
     "ct_suffix (?xs @ ?xs') ?ys ==> ct_suffix ?xs' ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Wasm_Checker_Types.c_types_agree_not_bot_exists",
     "?ts ~= Bot ==> EX ts_c. c_types_agree ?ts ts_c",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Types.ct_suffix_singleton",
     "0 < length ?cts ==> ct_suffix [TAny] ?cts",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Wasm_Checker_Types.ct_list_eq_take",
     "ct_list_eq ?xs ?ys ==> ct_list_eq (take ?n ?xs) (take ?n ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Wasm_Checker_Types.c_types_agree_top2",
     "ct_list_eq ?ts (to_ct_list ?ts'') ==>
      c_types_agree (TopType ?ts) (?ts' @ ?ts'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Wasm_Checker_Types.type_update_select_top_exists",
     "type_update_select ?xs = TopType ?tm ==> EX tn. ?xs = TopType tn",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Types.ct_suffix_imp_ct_list_eq",
     "ct_suffix ?xs ?ys ==>
      ct_list_eq (drop (length ?ys - length ?xs) ?ys) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 0)),
                     template_app (template_hole 0, template_var 1))),
                 template_var 0)),
             template_var 1)
           ))),
    ("Wasm_Checker_Types.to_ct_list_append",
     "to_ct_list ?ts = ?as @ ?bs ==> EX as'. to_ct_list as' = ?as",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Types.to_ct_list_append",
     "to_ct_list ?ts = ?as @ ?bs ==> EX bs'. to_ct_list bs' = ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Types.consume_type_type",
     "consume ?xs ?cons = Type ?t_int ==> EX tn. ?xs = Type tn",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Types.produce_type_type",
     "produce ?xs ?cons = Type ?tm ==> EX tn. ?xs = Type tn",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Types.ct_eq_common_tsome",
     "ct_eq ?x ?y = (EX t. ct_eq ?x (TSome t) & ct_eq (TSome t) ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Wasm_Checker_Types.ct_list_eq_common_tsome_list",
     "ct_list_eq ?xs ?ys =
      (EX zs.
          ct_list_eq ?xs (to_ct_list zs) & ct_list_eq (to_ct_list zs) ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Wasm_Checker_Types.Cons_ct_prefix_Cons",
     "ct_prefix (?x # ?xs) (?y # ?ys) = (ct_eq ?x ?y & ct_prefix ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Wasm_Checker_Types.ct_list_eq_shared",
     "[| ct_list_eq ?xs (to_ct_list ?as); ct_list_eq ?ys (to_ct_list ?as) |]
      ==> ct_list_eq ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Wasm_Checker_Types.ct_prefixI",
     "[| ?ys = ?as @ ?zs; ct_list_eq ?as ?xs |] ==> ct_prefix ?xs ?ys",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Wasm_Checker_Types.ct_suffixI",
     "[| ?ys = ?as @ ?zs; ct_list_eq ?zs ?xs |] ==> ct_suffix ?xs ?ys",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Wasm_Checker_Types.ct_suffix_ct_list_eq_exists",
     "ct_suffix ?x1.0 ?x2.0 ==>
      EX ts_c.
         ct_suffix ?x1.0 (to_ct_list ts_c) &
         ct_list_eq (to_ct_list ts_c) ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Types.ct_list_eq_concat",
     "[| ct_list_eq ?xs ?ys; ct_list_eq ?xs' ?ys' |]
      ==> ct_list_eq (?xs @ ?xs') (?ys @ ?ys')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Wasm_Checker_Types.ct_suffix_extend_ct_list_eq",
     "[| ct_suffix ?xs ?ys; ct_list_eq ?xs' ?ys' |]
      ==> ct_suffix (?xs @ ?xs') (?ys @ ?ys')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Wasm_Checker_Types.ct_suffix_extend_any1",
     "[| ct_suffix ?xs ?ys; length ?xs < length ?ys |]
      ==> ct_suffix (TAny # ?xs) ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("Wasm_Checker_Types.ct_suffix_cons2",
     "[| ct_suffix ?xs (?ys @ ?zs); length ?xs = length ?zs |]
      ==> ct_list_eq ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Wasm_Checker_Types.ct_suffix_take",
     "ct_suffix ?ts ?ts' ==>
      ct_suffix (take (length ?ts - ?n) ?ts)
       (take (length ?ts' - ?n) ?ts')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0)),
               template_var 1))
           ))),
    ("Wasm_Checker_Types.ct_prefix_snoc",
     "ct_prefix ?xs (?ys @ [?y]) =
      (ct_list_eq ?xs (?ys @ [?y]) | ct_prefix ?xs ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1)))),
    ("Wasm_Checker_Types.ct_suffix_unfold_one",
     "ct_suffix (?xs @ [?x]) (?ys @ [?y]) =
      (ct_eq ?x ?y & ct_suffix ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_var 1)))),
    ("Wasm_Checker_Types.ct_suffix_shared",
     "[| ct_suffix ?cts (to_ct_list ?ts);
         ct_suffix ?cts' (to_ct_list ?ts) |]
      ==> ct_suffix ?cts ?cts' | ct_suffix ?cts' ?cts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2))
           ))),
    ("Wasm_Checker_Types.c_types_agree_imp_ct_list_eq",
     "c_types_agree (TopType ?cts) ?ts ==>
      EX ts' ts''. ?ts = ts' @ ts'' & ct_list_eq ?cts (to_ct_list ts'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Wasm_Checker_Types.consume_weaken_type",
     "consume (Type ?tn) ?cons = Type ?t_int ==>
      consume (Type (?ts @ ?tn)) ?cons = Type (?ts @ ?t_int)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3)),
            template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Wasm_Checker_Types.produce_weaken_type",
     "produce (Type ?tn) ?cons = Type ?tm ==>
      produce (Type (?ts @ ?tn)) ?cons = Type (?ts @ ?tm)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3)),
            template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Wasm_Checker_Types.select_return_top_exists",
     "[| select_return_top ?cts ?c1.0 ?c2.0 = ?ctm; ?ctm ~= Bot |]
      ==> EX xs. ?ctm = TopType xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Types.ct_list_eq_cons_ct_list1",
     "ct_list_eq (to_ct_list ?as) (?xs @ to_ct_list ?ys) ==>
      EX bs. ?as = bs @ ?ys & ct_list_eq (to_ct_list bs) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 5, template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Types.ct_suffix_cons_ct_list1",
     "ct_suffix (?xs @ to_ct_list ?ys) (to_ct_list ?zs) ==>
      EX as. ?zs = as @ ?ys & ct_suffix ?xs (to_ct_list as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Types.type_update_top_top",
     "[| type_update (TopType ?ts) (to_ct_list ?cons) (Type ?prods) =
         TopType ?ts';
         c_types_agree (TopType ?ts') ?t_ag |]
      ==> ct_suffix (to_ct_list ?prods) ?ts'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 4)),
              template_app (template_hole 3, template_var 3)),
            template_app (template_hole 2, template_var 2)),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_var 1)
           ))),
    ("Wasm_Checker_Types.type_update_select_type_length3",
     "type_update_select (Type ?tn) = Type ?tm ==>
      EX t ts'. ?tn = ts' @ [t, t, T_i32]",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)),
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Wasm_Checker_Types.ct_prefixE",
     "[| ct_prefix ?xs ?ys;
         !!as zs. [| ?ys = as @ zs; ct_list_eq as ?xs |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Wasm_Checker_Types.ct_suffixE",
     "[| ct_suffix ?xs ?ys;
         !!as zs. [| ?ys = as @ zs; ct_list_eq zs ?xs |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Wasm_Checker_Types.consume_c_types_agree",
     "[| consume (Type ?ts) ?cts = Type ?ts'; c_types_agree ?ctn ?ts |]
      ==> EX c_t'. consume ?ctn ?cts = c_t' & c_types_agree c_t' ?ts'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Types.type_update_select_length1",
     "[| type_update_select (TopType ?cts) = ?tm; length ?cts = 1;
         ?tm ~= Bot |]
      ==> ?tm = TopType [TAny]",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_var 0),
        template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Wasm_Checker_Types.type_update_select_length1",
     "[| type_update_select (TopType ?cts) = ?tm; length ?cts = 1;
         ?tm ~= Bot |]
      ==> ct_list_eq ?cts [TSome T_i32]",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 1)),
          template_var 0),
        template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_hole 0))
           ))),
    ("Wasm_Checker_Types.type_update_select_length0",
     "[| type_update_select (TopType ?cts) = ?tm; length ?cts = 0;
         ?tm ~= Bot |]
      ==> ?tm = TopType [TAny]",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_var 0),
        template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Wasm_Checker_Types.consume_top_leq",
     "[| consume (TopType ?ts) ?ts' = ?c_t; length ?ts <= length ?ts';
         ?c_t ~= Bot |]
      ==> ?c_t = TopType []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation
        (template_var 0, template_app (template_hole 5, template_hole 0)))),
    ("Wasm_Checker_Types.ct_list_eq_cons_ct_list",
     "ct_list_eq (to_ct_list ?as) (?xs @ ?ys) ==>
      EX bs bs'.
         ?as = bs @ bs' &
         ct_list_eq (to_ct_list bs) ?xs & ct_list_eq (to_ct_list bs') ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Types.ct_suffix_cons_ct_list",
     "ct_suffix (?xs @ ?ys) (to_ct_list ?zs) ==>
      EX as bs.
         ?zs = as @ bs &
         ct_list_eq ?ys (to_ct_list bs) & ct_suffix ?xs (to_ct_list as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Wasm_Checker_Types.consume_type",
     "[| consume (Type ?ts) ?ts' = ?c_t; ?c_t ~= Bot |]
      ==> EX ts''.
             ct_list_eq (to_ct_list ?ts) (to_ct_list ts'' @ ?ts') &
             ?c_t = Type ts''",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Wasm_Checker_Types.type_update_top_top",
     "[| type_update (TopType ?ts) (to_ct_list ?cons) (Type ?prods) =
         TopType ?ts';
         c_types_agree (TopType ?ts') ?t_ag |]
      ==> EX t_ag'.
             ?t_ag = t_ag' @ ?prods &
             c_types_agree (TopType ?ts) (t_ag' @ ?cons)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              template_app (template_hole 6, template_var 3)),
            template_app (template_hole 5, template_var 2)),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Types.type_update_select_conv_select_return_top",
     "[| ct_suffix [TSome T_i32] ?cts; 3 <= length ?cts |]
      ==> type_update_select (TopType ?cts) =
          select_return_top ?cts (?cts ! (length ?cts - 2))
           (?cts ! (length ?cts - 3))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_hole 13)),
                  template_hole 12)),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_hole 10,
                   template_app (template_hole 0, template_hole 8))))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8)))))))),
    ("Wasm_Checker_Types.consume_top_geq",
     "[| consume (TopType ?ts) ?ts' = ?c_t; length ?ts' <= length ?ts;
         ?c_t ~= Bot |]
      ==> EX as bs. ?ts = as @ bs & ct_list_eq bs ?ts' & ?c_t = TopType as",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_var 1),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Wasm_Checker_Types.type_update_select_length3",
     "[| type_update_select (TopType ?cts) = TopType ?ctm;
         3 <= length ?cts |]
      ==> EX cts' ct1 ct2 ct3.
             ?cts = cts' @ [ct1, ct2, ct3] & ct_eq ct3 (TSome T_i32)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 1)),
          template_app (template_hole 15, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_app (template_hole 10, template_var 1))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Wasm_Checker_Types.type_update_select_length2",
     "[| type_update_select (TopType ?cts) = ?tm; length ?cts = 2;
         ?tm ~= Bot |]
      ==> EX t1 t2.
             ?cts = [t1, t2] & ct_eq t2 (TSome T_i32) & ?tm = TopType [t1]",
     template_implication
      ([template_equation
         (template_app
           (template_hole 16,
            template_app (template_hole 15, template_var 1)),
          template_var 0),
        template_equation
         (template_app (template_hole 13, template_var 1),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10))),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Wasm_Checker_Types.type_update_type",
     "[| type_update (Type ?ts) (to_ct_list ?cons) ?prods = ?ts';
         ?ts' ~= Bot |]
      ==> ?ts' = ?prods & (EX ts_c. ?prods = TopType ts_c) |
          (EX ts_a ts_b.
              ?prods = Type ts_a &
              ?ts = ts_b @ ?cons & ?ts' = Type (ts_b @ ts_a))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              template_app (template_hole 9, template_var 2)),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 12, template_var 0),
                     template_var 1)),
                 template_app (template_hole 4, t_empty))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Wasm_Checker_Types.select_return_top_ct_eq",
     "[| select_return_top ?cts ?c1.0 ?c2.0 = TopType ?ctm;
         3 <= length ?cts; c_types_agree (TopType ?ctm) ?cm |]
      ==> EX c' cm'.
             ?cm = cm' @ [c'] &
             ct_suffix (take (length ?cts - 3) ?cts) (to_ct_list cm') &
             ct_eq ?c1.0 (TSome c') & ct_eq ?c2.0 (TSome c')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 20, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 19, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 17,
            template_app (template_hole 16, template_hole 15)),
          template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 19, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Wasm_Checker_TypesTemplates"
### 0.936s elapsed time, 1.121s cpu time, 0.105s GC time
val it = (): unit
