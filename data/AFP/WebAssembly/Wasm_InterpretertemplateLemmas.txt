   [("Wasm_Interpreter.split_vals_const_list",
     "split_vals (map EConst ?vs) = (?vs, [])",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Wasm_Interpreter.split_vals_e_const_list",
     "split_vals_e ($$* ?vs) = (?vs, [])",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Wasm_Interpreter.split_n_conv_take_drop",
     "split_n ?es ?n = (take ?n ?es, drop ?n ?es)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Wasm_Interpreter.mem_grow_impl_correct",
     "mem_grow_impl ?m ?n = Some ?m' ==> mem_grow ?m ?n = ?m'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Wasm_Interpreter.split_n_conv_app",
     "split_n ?es ?n = (?es1.0, ?es2.0) ==> ?es = ?es1.0 @ ?es2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Wasm_Interpreter.app_conv_split_n",
     "?es = ?es1.0 @ ?es2.0 ==>
      split_n ?es (length ?es1.0) = (?es1.0, ?es2.0)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Wasm_Interpreter.split_vals_e_conv_app",
     "split_vals_e ?xs = (?as, ?bs) ==> ?xs = ($$* ?as) @ ?bs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1)),
           template_var 0)))),
    ("Wasm_Interpreter.split_n_length",
     "[| split_n ?es ?n = (?es1.0, ?es2.0); ?n <= length ?es |]
      ==> length ?es1.0 = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 3))],
       template_equation
        (template_app (template_hole 1, template_var 1), template_var 2))),
    ("Wasm_Interpreter.host_apply_impl_correct",
     "host_apply_impl ?s ?tf ?h ?vs = Some ?m' ==>
      EX hs. host_apply ?s ?tf ?h ?vs hs = Some ?m'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty))))]
