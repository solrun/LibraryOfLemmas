Loading theory "Draft.Wasm_Type_Abs" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Checker" via "Draft.Wasm_Checker_Types" via "Draft.Wasm" via "Draft.Wasm_Base_Defs")
Loading theory "Draft.Wasm_Ast" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Checker" via "Draft.Wasm_Checker_Types" via "Draft.Wasm" via "Draft.Wasm_Base_Defs")
Loading theory "Draft.Templates" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Wasm_Checker_PropertiesTemplates")
class wasm_int = wasm_base +
  fixes int_clz :: "'a => 'a"
    and int_ctz :: "'a => 'a"
    and int_popcnt :: "'a => 'a"
    and int_add :: "'a => 'a => 'a"
    and int_sub :: "'a => 'a => 'a"
    and int_mul :: "'a => 'a => 'a"
    and int_div_u :: "'a => 'a => 'a option"
    and int_div_s :: "'a => 'a => 'a option"
    and int_rem_u :: "'a => 'a => 'a option"
    and int_rem_s :: "'a => 'a => 'a option"
    and int_and :: "'a => 'a => 'a"
    and int_or :: "'a => 'a => 'a"
    and int_xor :: "'a => 'a => 'a"
    and int_shl :: "'a => 'a => 'a"
    and int_shr_u :: "'a => 'a => 'a"
    and int_shr_s :: "'a => 'a => 'a"
    and int_rotl :: "'a => 'a => 'a"
    and int_rotr :: "'a => 'a => 'a"
    and int_eqz :: "'a => bool"
    and int_eq :: "'a => 'a => bool"
    and int_lt_u :: "'a => 'a => bool"
    and int_lt_s :: "'a => 'a => bool"
    and int_gt_u :: "'a => 'a => bool"
    and int_gt_s :: "'a => 'a => bool"
    and int_le_u :: "'a => 'a => bool"
    and int_le_s :: "'a => 'a => bool"
    and int_ge_u :: "'a => 'a => bool"
    and int_ge_s :: "'a => 'a => bool"
    and int_of_nat :: "nat => 'a"
    and nat_of_int :: "'a => nat"
class wasm_float = wasm_base +
  fixes float_neg :: "'a => 'a"
    and float_abs :: "'a => 'a"
    and float_ceil :: "'a => 'a"
    and float_floor :: "'a => 'a"
    and float_trunc :: "'a => 'a"
    and float_nearest :: "'a => 'a"
    and float_sqrt :: "'a => 'a"
    and float_add :: "'a => 'a => 'a"
    and float_sub :: "'a => 'a => 'a"
    and float_mul :: "'a => 'a => 'a"
    and float_div :: "'a => 'a => 'a"
    and float_min :: "'a => 'a => 'a"
    and float_max :: "'a => 'a => 'a"
    and float_copysign :: "'a => 'a => 'a"
    and float_eq :: "'a => 'a => bool"
    and float_lt :: "'a => 'a => bool"
    and float_gt :: "'a => 'a => bool"
    and float_le :: "'a => 'a => bool"
    and float_ge :: "'a => 'a => bool"
### theory "Draft.Wasm_Type_Abs"
### 0.172s elapsed time, 0.530s cpu time, 0.031s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.582s elapsed time, 1.292s cpu time, 0.095s GC time
### theory "Draft.Wasm_Ast"
### 9.598s elapsed time, 12.174s cpu time, 2.574s GC time
Loading theory "Draft.Wasm_Base_Defs" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Checker" via "Draft.Wasm_Checker_Types" via "Draft.Wasm")
instantiation
  i32 :: wasm_int
  int_clz_i32 == int_clz :: i32 => i32
  int_ctz_i32 == int_ctz :: i32 => i32
  int_popcnt_i32 == int_popcnt :: i32 => i32
  int_add_i32 == int_add :: i32 => i32 => i32
  int_sub_i32 == int_sub :: i32 => i32 => i32
  int_mul_i32 == int_mul :: i32 => i32 => i32
  int_div_u_i32 == int_div_u :: i32 => i32 => i32 option
  int_div_s_i32 == int_div_s :: i32 => i32 => i32 option
  int_rem_u_i32 == int_rem_u :: i32 => i32 => i32 option
  int_rem_s_i32 == int_rem_s :: i32 => i32 => i32 option
  int_and_i32 == int_and :: i32 => i32 => i32
  int_or_i32 == int_or :: i32 => i32 => i32
  int_xor_i32 == int_xor :: i32 => i32 => i32
  int_shl_i32 == int_shl :: i32 => i32 => i32
  int_shr_u_i32 == int_shr_u :: i32 => i32 => i32
  int_shr_s_i32 == int_shr_s :: i32 => i32 => i32
  int_rotl_i32 == int_rotl :: i32 => i32 => i32
  int_rotr_i32 == int_rotr :: i32 => i32 => i32
  int_eqz_i32 == int_eqz :: i32 => bool
  int_eq_i32 == int_eq :: i32 => i32 => bool
  int_lt_u_i32 == int_lt_u :: i32 => i32 => bool
  int_lt_s_i32 == int_lt_s :: i32 => i32 => bool
  int_gt_u_i32 == int_gt_u :: i32 => i32 => bool
  int_gt_s_i32 == int_gt_s :: i32 => i32 => bool
  int_le_u_i32 == int_le_u :: i32 => i32 => bool
  int_le_s_i32 == int_le_s :: i32 => i32 => bool
  int_ge_u_i32 == int_ge_u :: i32 => i32 => bool
  int_ge_s_i32 == int_ge_s :: i32 => i32 => bool
  int_of_nat_i32 == int_of_nat :: nat => i32
  nat_of_int_i32 == nat_of_int :: i32 => nat
  zero_i32 == zero_class.zero :: i32
instantiation
  i64 :: wasm_int
  int_clz_i64 == int_clz :: i64 => i64
  int_ctz_i64 == int_ctz :: i64 => i64
  int_popcnt_i64 == int_popcnt :: i64 => i64
  int_add_i64 == int_add :: i64 => i64 => i64
  int_sub_i64 == int_sub :: i64 => i64 => i64
  int_mul_i64 == int_mul :: i64 => i64 => i64
  int_div_u_i64 == int_div_u :: i64 => i64 => i64 option
  int_div_s_i64 == int_div_s :: i64 => i64 => i64 option
  int_rem_u_i64 == int_rem_u :: i64 => i64 => i64 option
  int_rem_s_i64 == int_rem_s :: i64 => i64 => i64 option
  int_and_i64 == int_and :: i64 => i64 => i64
  int_or_i64 == int_or :: i64 => i64 => i64
  int_xor_i64 == int_xor :: i64 => i64 => i64
  int_shl_i64 == int_shl :: i64 => i64 => i64
  int_shr_u_i64 == int_shr_u :: i64 => i64 => i64
  int_shr_s_i64 == int_shr_s :: i64 => i64 => i64
  int_rotl_i64 == int_rotl :: i64 => i64 => i64
  int_rotr_i64 == int_rotr :: i64 => i64 => i64
  int_eqz_i64 == int_eqz :: i64 => bool
  int_eq_i64 == int_eq :: i64 => i64 => bool
  int_lt_u_i64 == int_lt_u :: i64 => i64 => bool
  int_lt_s_i64 == int_lt_s :: i64 => i64 => bool
  int_gt_u_i64 == int_gt_u :: i64 => i64 => bool
  int_gt_s_i64 == int_gt_s :: i64 => i64 => bool
  int_le_u_i64 == int_le_u :: i64 => i64 => bool
  int_le_s_i64 == int_le_s :: i64 => i64 => bool
  int_ge_u_i64 == int_ge_u :: i64 => i64 => bool
  int_ge_s_i64 == int_ge_s :: i64 => i64 => bool
  int_of_nat_i64 == int_of_nat :: nat => i64
  nat_of_int_i64 == nat_of_int :: i64 => nat
  zero_i64 == zero_class.zero :: i64
instantiation
  f32 :: wasm_float
  float_neg_f32 == float_neg :: f32 => f32
  float_abs_f32 == float_abs :: f32 => f32
  float_ceil_f32 == float_ceil :: f32 => f32
  float_floor_f32 == float_floor :: f32 => f32
  float_trunc_f32 == float_trunc :: f32 => f32
  float_nearest_f32 == float_nearest :: f32 => f32
  float_sqrt_f32 == float_sqrt :: f32 => f32
  float_add_f32 == float_add :: f32 => f32 => f32
  float_sub_f32 == float_sub :: f32 => f32 => f32
  float_mul_f32 == float_mul :: f32 => f32 => f32
  float_div_f32 == float_div :: f32 => f32 => f32
  float_min_f32 == float_min :: f32 => f32 => f32
  float_max_f32 == float_max :: f32 => f32 => f32
  float_copysign_f32 == float_copysign :: f32 => f32 => f32
  float_eq_f32 == float_eq :: f32 => f32 => bool
  float_lt_f32 == float_lt :: f32 => f32 => bool
  float_gt_f32 == float_gt :: f32 => f32 => bool
  float_le_f32 == float_le :: f32 => f32 => bool
  float_ge_f32 == float_ge :: f32 => f32 => bool
  zero_f32 == zero_class.zero :: f32
instantiation
  f64 :: wasm_float
  float_neg_f64 == float_neg :: f64 => f64
  float_abs_f64 == float_abs :: f64 => f64
  float_ceil_f64 == float_ceil :: f64 => f64
  float_floor_f64 == float_floor :: f64 => f64
  float_trunc_f64 == float_trunc :: f64 => f64
  float_nearest_f64 == float_nearest :: f64 => f64
  float_sqrt_f64 == float_sqrt :: f64 => f64
  float_add_f64 == float_add :: f64 => f64 => f64
  float_sub_f64 == float_sub :: f64 => f64 => f64
  float_mul_f64 == float_mul :: f64 => f64 => f64
  float_div_f64 == float_div :: f64 => f64 => f64
  float_min_f64 == float_min :: f64 => f64 => f64
  float_max_f64 == float_max :: f64 => f64 => f64
  float_copysign_f64 == float_copysign :: f64 => f64 => f64
  float_eq_f64 == float_eq :: f64 => f64 => bool
  float_lt_f64 == float_lt :: f64 => f64 => bool
  float_gt_f64 == float_gt :: f64 => f64 => bool
  float_le_f64 == float_le :: f64 => f64 => bool
  float_ge_f64 == float_ge :: f64 => f64 => bool
  zero_f64 == zero_class.zero :: f64
Proofs for inductive predicate(s) "store_extension"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Lfilled"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Lfilled_exact"
  Proving monotonicity ...
### theory "Draft.Wasm_Base_Defs"
### 0.724s elapsed time, 0.800s cpu time, 0.061s GC time
Loading theory "Draft.Wasm" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Checker" via "Draft.Wasm_Checker_Types")
Proofs for inductive predicate(s) "b_e_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cl_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "e_typing", "s_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "inst_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "store_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "config_typing"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduce_simple"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reduce"
  Proving monotonicity ...
### theory "Draft.Wasm"
### 0.797s elapsed time, 0.930s cpu time, 0.097s GC time
Loading theory "Draft.Wasm_Axioms" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Properties" via "Draft.Wasm_Properties_Aux")
Loading theory "Draft.Wasm_Checker_Types" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Checker")
### theory "Draft.Wasm_Axioms"
### 0.038s elapsed time, 0.079s cpu time, 0.000s GC time
Loading theory "Draft.Wasm_Properties_Aux" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties" via "Draft.Wasm_Properties")
### theory "Draft.Wasm_Properties_Aux"
### 0.310s elapsed time, 0.649s cpu time, 0.081s GC time
Loading theory "Draft.Wasm_Properties" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties")
### theory "Draft.Wasm_Properties"
### 0.438s elapsed time, 0.977s cpu time, 0.241s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Wasm_Checker_Types"
### 1.468s elapsed time, 2.548s cpu time, 0.435s GC time
Loading theory "Draft.Wasm_Checker" (required by "Draft.Wasm_Checker_PropertiesTemplates" via "Draft.Wasm_Checker_Properties")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size_list size (fst (snd p)))
    (case_sum (%p. size_list size (fst (snd p)))
      (%p. size (fst (snd p)))) <*mlex*>
   case_sum (%p. size (snd p))
    (case_sum (%p. size (snd (snd p))) (%p. size (snd (snd p)))) <*mlex*>
   {}"
### theory "Draft.Wasm_Checker"
### 2.526s elapsed time, 3.577s cpu time, 0.249s GC time
Loading theory "Draft.Wasm_Checker_Properties" (required by "Draft.Wasm_Checker_PropertiesTemplates")
### Ambiguous input (line 11 of "$AFP/WebAssembly/Wasm_Checker_Properties.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wasm.b_e_typing"
###     ("\<^const>HOL.Ex_binder" ("_position" tn)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_applC" ("_position" Type) ("_position" x1))
###             ("_position" tn)))
###         ("_position" \<C>)))
###     ("_list" ("_position" e))
###     ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>Wasm.b_e_typing"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_applC" ("_position" Type) ("_position" x1))
###             ("_position" tn)))
###         ("_position" \<C>))
###       ("_list" ("_position" e))
###       ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" c_types_agree)
###         ("_cargs" ("_applC" ("_position" Type) ("_position" x1))
###           ("_position" tn)))
###       ("\<^const>Wasm.b_e_typing" ("_position" \<C>)
###         ("_list" ("_position" e))
###         ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/WebAssembly/Wasm_Checker_Properties.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wasm.b_e_typing"
###     ("\<^const>HOL.Ex_binder" ("_position" tn)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_applC" ("_position" TopType) ("_position" x1))
###             ("_position" tn)))
###         ("_position" \<C>)))
###     ("_list" ("_position" e))
###     ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>Wasm.b_e_typing"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_applC" ("_position" TopType) ("_position" x1))
###             ("_position" tn)))
###         ("_position" \<C>))
###       ("_list" ("_position" e))
###       ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" c_types_agree)
###         ("_cargs" ("_applC" ("_position" TopType) ("_position" x1))
###           ("_position" tn)))
###       ("\<^const>Wasm.b_e_typing" ("_position" \<C>)
###         ("_list" ("_position" e))
###         ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/WebAssembly/Wasm_Checker_Properties.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wasm.b_e_typing"
###     ("\<^const>HOL.Ex_binder" ("_position" tn)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" ts) ("_position" tn)))
###         ("_position" \<C>)))
###     ("_list" ("_position" e))
###     ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>Wasm.b_e_typing"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" ts) ("_position" tn)))
###         ("_position" \<C>))
###       ("_list" ("_position" e))
###       ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" c_types_agree)
###         ("_cargs" ("_position" ts) ("_position" tn)))
###       ("\<^const>Wasm.b_e_typing" ("_position" \<C>)
###         ("_list" ("_position" e))
###         ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/WebAssembly/Wasm_Checker_Properties.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wasm.b_e_typing"
###     ("\<^const>HOL.Ex_binder" ("_position" tn)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" tn') ("_position" tn)))
###         ("_position" \<C>)))
###     ("_list" ("_position" e))
###     ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>Wasm.b_e_typing"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" tn') ("_position" tn)))
###         ("_position" \<C>))
###       ("_list" ("_position" e))
###       ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" c_types_agree)
###         ("_cargs" ("_position" tn') ("_position" tn)))
###       ("\<^const>Wasm.b_e_typing" ("_position" \<C>)
###         ("_list" ("_position" e))
###         ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/WebAssembly/Wasm_Checker_Properties.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wasm.b_e_typing"
###     ("\<^const>HOL.Ex_binder" ("_position" tn)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" tn') ("_position" tn)))
###         ("_position" \<C>)))
###     ("_list" ("_position" e))
###     ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>Wasm.b_e_typing"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" c_types_agree)
###           ("_cargs" ("_position" tn') ("_position" tn)))
###         ("_position" \<C>))
###       ("_list" ("_position" e))
###       ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" tn)
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" c_types_agree)
###         ("_cargs" ("_position" tn') ("_position" tn)))
###       ("\<^const>Wasm.b_e_typing" ("_position" \<C>)
###         ("_list" ("_position" e))
###         ("\<^const>Wasm_Ast.tf.Tf" ("_position" tn) ("_position" tm))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Wasm_Checker_Properties"
### 0.296s elapsed time, 0.383s cpu time, 0.115s GC time
Loading theory "Draft.Wasm_Checker_PropertiesTemplates"
val templateLemmas =
   [("Wasm_Checker_Properties.check_bot", "check ?\<C> ?es Bot = Bot",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Wasm_Checker_Properties.b_e_typing_equiv_b_e_type_checker",
     "?\<C> \<turnstile> ?es : ?tn _> ?tm =
      b_e_type_checker ?\<C> ?es (?tn _> ?tm)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Wasm_Checker_Properties.b_e_type_checker_complete",
     "?\<C> \<turnstile> ?es : ?tn _> ?tm ==>
      b_e_type_checker ?\<C> ?es (?tn _> ?tm)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Wasm_Checker_Properties.b_e_type_checker_sound",
     "b_e_type_checker ?\<C> ?es (?tn _> ?tm) ==>
      ?\<C> \<turnstile> ?es : ?tn _> ?tm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Wasm_Checker_Properties.b_e_check_single_type_type",
     "check_single ?\<C> ?e ?xs = Type ?tm ==> EX tn. ?xs = Type tn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Wasm_Checker_Properties.b_e_type_checker_weaken",
     "b_e_type_checker ?\<C> ?es (?t1s _> ?t2s) ==>
      b_e_type_checker ?\<C> ?es (?ts @ ?t1s _> ?ts @ ?t2s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Wasm_Checker_Properties.b_e_check_weaken_top",
     "check ?\<C> ?es (Type ?tn) = TopType ?tm ==>
      check ?\<C> ?es (Type (?ts @ ?tn)) = TopType ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app (template_hole 2, template_var 2)),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app (template_hole 1, template_var 1)))),
    ("Wasm_Checker_Properties.b_e_check_single_weaken_top",
     "check_single ?\<C> ?e (Type ?tn) = TopType ?tm ==>
      check_single ?\<C> ?e (Type (?ts @ ?tn)) = TopType ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_app (template_hole 2, template_var 2)),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app (template_hole 1, template_var 1)))),
    ("Wasm_Checker_Properties.check_neq_bot_snoc",
     "check ?\<C> (?es @ [?e]) ?ts ~= Bot ==> check ?\<C> ?es ?ts ~= Bot",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_hole 1))),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 0),
             template_hole 0)
           ))),
    ("Wasm_Checker_Properties.b_e_check_weaken_type",
     "check ?\<C> ?es (Type ?tn) = Type ?tm ==>
      check ?\<C> ?es (Type (?ts @ ?tn)) = Type (?ts @ ?tm)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Wasm_Checker_Properties.b_e_check_single_weaken_type",
     "check_single ?\<C> ?e (Type ?tn) = Type ?tm ==>
      check_single ?\<C> ?e (Type (?ts @ ?tn)) = Type (?ts @ ?tm)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Wasm_Checker_Properties.check_equiv_fold",
     "check ?\<C> ?es ?ts =
      foldl (%ts e. case ts of Bot => Bot | _ => check_single ?\<C> e ts)
       ?ts ?es",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_var 1))),
    ("Wasm_Checker_Properties.check_unfold_snoc",
     "check ?\<C> ?es ?ts ~= Bot ==>
      check ?\<C> (?es @ [?e]) ?ts =
      check_single ?\<C> ?e (check ?\<C> ?es ?ts)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1))))),
    ("Wasm_Checker_Properties.b_e_type_checker_compose",
     "[| b_e_type_checker ?\<C> ?es (?t1s _> ?t2s);
         b_e_type_checker ?\<C> [?e] (?t2s _> ?t3s) |]
      ==> b_e_type_checker ?\<C> (?es @ [?e]) (?t1s _> ?t3s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1))),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))
           ))),
    ("Wasm_Checker_Properties.b_e_check_single_top_not_bot_sound",
     "[| type_update ?ts (to_ct_list ?t_in) (TopType []) = ?ts'; ?ts ~= Bot;
         ?ts' ~= Bot |]
      ==> EX tn. c_types_agree ?ts tn & suffix ?t_in tn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 7, template_hole 6)),
          template_var 0),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Wasm_Checker_Properties.check_single_imp_weakening",
     "[| check_single ?\<C> ?e (Type ?t1s) = ?ctm; ?ctm ~= Bot;
         c_types_agree ?ctn ?t1s; c_types_agree ?ctm ?t2s |]
      ==> EX ctm'.
             check_single ?\<C> ?e ?ctn = ctm' & c_types_agree ctm' ?t2s",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_app (template_hole 5, template_var 3)),
          template_var 2),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Properties.check_single_imp",
     "[| check_single ?\<C> ?e ?ctn = ?ctm; ?ctm ~= Bot |]
      ==> check_single ?\<C> ?e = id |
          check_single ?\<C> ?e = type_update_select |
          (EX cons prods.
              check_single ?\<C> ?e = (%ctn. type_update ctn cons prods))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2)),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_var 3),
                       template_var 2)),
                   t_empty)),
               template_app (template_hole 2, t_empty)))
           ))),
    ("Wasm_Checker_Properties.b_e_check_single_top_sound",
     "[| type_update (TopType ?x1.0) (to_ct_list ?t_in) (Type ?t_out) =
         TopType ?x2.0;
         c_types_agree (TopType ?x2.0) ?tm;
         ?\<C> \<turnstile> [?e] : ?t_in _> ?t_out |]
      ==> EX tn.
             c_types_agree (TopType ?x1.0) tn &
             ?\<C> \<turnstile> [?e] : tn _> ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 6)),
              template_app (template_hole 8, template_var 5)),
            template_app (template_hole 7, template_var 4)),
          template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 9, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Properties.b_e_check_single_type_sound",
     "[| type_update (Type ?x1.0) (to_ct_list ?t_in) (Type ?t_out) =
         Type ?x2.0;
         c_types_agree (Type ?x2.0) ?tm;
         ?\<C> \<turnstile> [?e] : ?t_in _> ?t_out |]
      ==> EX tn.
             c_types_agree (Type ?x1.0) tn &
             ?\<C> \<turnstile> [?e] : tn _> ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 6)),
              template_app (template_hole 7, template_var 5)),
            template_app (template_hole 8, template_var 4)),
          template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 8, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Properties.b_e_check_single_type_not_bot_sound",
     "[| type_update ?ts (to_ct_list ?t_in) (Type ?t_out) = ?ts';
         ?ts ~= Bot; ?ts' ~= Bot; c_types_agree ?ts' ?tm;
         ?\<C> \<turnstile> [?e] : ?t_in _> ?t_out |]
      ==> EX tn.
             c_types_agree ?ts tn & ?\<C> \<turnstile> [?e] : tn _> ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 6),
              template_app (template_hole 10, template_var 5)),
            template_app (template_hole 9, template_var 4)),
          template_var 3),
        template_negation
         (template_equation (template_var 6, template_hole 7)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Wasm_Checker_Properties.b_e_check_single_sound_binop_relop",
     "[| check_single ?\<C> ?e ?tn' = ?tm';
         ?e = Binop_i ?t ?iop & is_int_t ?t |
         ?e = Binop_f ?t ?fop & is_float_t ?t |
         ?e = Relop_i ?t ?irop & is_int_t ?t |
         ?e = Relop_f ?t ?frop & is_float_t ?t;
         c_types_agree ?tm' ?tm; ?tn' ~= Bot; ?tm' ~= Bot |]
      ==> EX tn.
             c_types_agree ?tn' tn & ?\<C> \<turnstile> [?e] : tn _> ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 17, template_var 9),
              template_var 8),
            template_var 7),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 8),
                      template_app
                       (template_app (template_hole 13, template_var 5),
                        template_var 4))),
                  template_app (template_hole 12, template_var 5))),
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_var 8),
                        template_app
                         (template_app (template_hole 11, template_var 5),
                          template_var 3))),
                    template_app (template_hole 10, template_var 5))),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 14, template_var 8),
                          template_app
                           (template_app (template_hole 9, template_var 5),
                            template_var 2))),
                      template_app (template_hole 12, template_var 5))),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_var 8),
                        template_app
                         (template_app (template_hole 8, template_var 5),
                          template_var 1))),
                    template_app (template_hole 10, template_var 5)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 7, template_hole 5)),
        template_negation
         (template_equation (template_var 6, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Wasm_Checker_Properties.b_e_check_single_sound_unop_testop_cvtop",
     "[| check_single ?\<C> ?e ?tn' = ?tm';
         (?e = Unop_i ?t ?uu | ?e = Testop ?t ?uv) & is_int_t ?t |
         ?e = Unop_f ?t ?uw & is_float_t ?t |
         ?e = Cvtop ?t1.0 Convert ?t ?sx & convert_cond ?t1.0 ?t ?sx |
         ?e = Cvtop ?t1.0 Reinterpret ?t ?sx &
         ?t1.0 ~= ?t & t_length ?t1.0 = t_length ?t & ?sx = None;
         c_types_agree ?tm' ?tm; ?tn' ~= Bot; ?tm' ~= Bot |]
      ==> EX tn.
             c_types_agree ?tn' tn & ?\<C> \<turnstile> [?e] : tn _> ?tm",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 25, template_var 10),
              template_var 9),
            template_var 8),
          template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_hole 23,
                    template_app
                     (template_app
                       (template_hole 24,
                        template_app
                         (template_app (template_hole 22, template_var 9),
                          template_app
                           (template_app (template_hole 21, template_var 6),
                            template_var 5))),
                      template_app
                       (template_app (template_hole 22, template_var 9),
                        template_app
                         (template_app (template_hole 20, template_var 6),
                          template_var 4)))),
                  template_app (template_hole 19, template_var 6))),
              template_app
               (template_app
                 (template_hole 24,
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app (template_hole 22, template_var 9),
                        template_app
                         (template_app (template_hole 18, template_var 6),
                          template_var 3))),
                    template_app (template_hole 17, template_var 6))),
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app
                       (template_hole 23,
                        template_app
                         (template_app (template_hole 22, template_var 9),
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 16, template_var 2),
                                template_hole 15),
                              template_var 6),
                            template_var 1))),
                      template_app
                       (template_app
                         (template_app (template_hole 14, template_var 2),
                          template_var 6),
                        template_var 1))),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app (template_hole 22, template_var 9),
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 16, template_var 2),
                              template_hole 13),
                            template_var 6),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 23,
                        template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 2),
                            template_var 6))),
                      template_app
                       (template_app
                         (template_hole 23,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_hole 9, template_var 2)),
                            template_app
                             (template_hole 9, template_var 6))),
                        template_app
                         (template_app (template_hole 8, template_var 1),
                          template_hole 7)))))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 8, template_hole 5)),
        template_negation
         (template_equation (template_var 7, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Wasm_Checker_PropertiesTemplates"
### 0.904s elapsed time, 1.108s cpu time, 0.128s GC time
val it = (): unit
