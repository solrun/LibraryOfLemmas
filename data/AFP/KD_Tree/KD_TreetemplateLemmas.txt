   [("KD_Tree.size_ge0", "0 < KD_Tree.size_kdt ?kdt",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("KD_Tree.min_height_le_height",
     "KD_Tree.min_height ?kdt <= KD_Tree.height ?kdt",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("KD_Tree.complete_iff_height",
     "KD_Tree.complete ?kdt =
      (KD_Tree.min_height ?kdt = KD_Tree.height ?kdt)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.size_height",
     "KD_Tree.size_kdt ?kdt <= 2 ^ KD_Tree.height ?kdt",
     template_inequation
      (less_equals, template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.min_height_size",
     "2 ^ KD_Tree.min_height ?kdt <= KD_Tree.size_kdt ?kdt",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("KD_Tree.balanced_subtreeL",
     "balanced (kdt.Node ?k ?v ?l ?r) ==> balanced ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("KD_Tree.balanced_subtreeR",
     "balanced (kdt.Node ?k ?v ?l ?r) ==> balanced ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("KD_Tree.invar_l", "invar (kdt.Node ?k ?v ?l ?r) ==> invar ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("KD_Tree.invar_r", "invar (kdt.Node ?k ?v ?l ?r) ==> invar ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("KD_Tree.eq_1_size",
     "(1 = KD_Tree.size_kdt ?kdt) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.eq_0_height",
     "(0 = KD_Tree.height ?kdt) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.eq_0_min_height",
     "(0 = KD_Tree.min_height ?kdt) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.eq_height_0",
     "(KD_Tree.height ?kdt = 0) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.eq_min_height_0",
     "(KD_Tree.min_height ?kdt = 0) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.eq_size_1",
     "(KD_Tree.size_kdt ?kdt = 1) = (EX p. ?kdt = kdt.Leaf p)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("KD_Tree.min_height_size_log",
     "real (KD_Tree.min_height ?kdt)
      <= log 2 (real (KD_Tree.size_kdt ?kdt))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_hole 6,
           template_app (template_hole 0, template_var 0))))),
    ("KD_Tree.size_height_log",
     "log 2 (real (KD_Tree.size_kdt ?kdt)) <= real (KD_Tree.height ?kdt)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.invar_set",
     "set_kdt (kdt.Node ?k ?v ?l ?r) = set_kdt ?l Un set_kdt ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("KD_Tree.complete_iff_size",
     "KD_Tree.complete ?kdt =
      (KD_Tree.size_kdt ?kdt = 2 ^ KD_Tree.height ?kdt)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("KD_Tree.size_if_complete",
     "KD_Tree.complete ?kdt ==>
      KD_Tree.size_kdt ?kdt = 2 ^ KD_Tree.height ?kdt",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("KD_Tree.complete_if_size_height",
     "KD_Tree.size_kdt ?kdt = 2 ^ KD_Tree.height ?kdt ==>
      KD_Tree.complete ?kdt",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.complete_if_size_min_height",
     "KD_Tree.size_kdt ?kdt = 2 ^ KD_Tree.min_height ?kdt ==>
      KD_Tree.complete ?kdt",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.size_height_if_incomplete",
     "~ KD_Tree.complete ?kdt ==>
      KD_Tree.size_kdt ?kdt < 2 ^ KD_Tree.height ?kdt",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_inequation
        (less_than, template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("KD_Tree.min_height_size_if_incomplete",
     "~ KD_Tree.complete ?kdt ==>
      2 ^ KD_Tree.min_height ?kdt < KD_Tree.size_kdt ?kdt",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.balanced_sym",
     "balanced (kdt.Node ?k ?v ?l ?r) ==>
      balanced (kdt.Node ?k' ?v' ?r ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2),
               template_var 3))
           ))),
    ("KD_Tree.size_log_if_complete",
     "KD_Tree.complete ?kdt ==>
      real (KD_Tree.height ?kdt) = log 2 (real (KD_Tree.size_kdt ?kdt))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 0)))))),
    ("KD_Tree.height_balanced",
     "balanced ?kdt ==>
      KD_Tree.height ?kdt =
      nat \<lceil>log 2 (real (KD_Tree.size_kdt ?kdt))\<rceil>",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))))))),
    ("KD_Tree.min_height_balanced",
     "balanced ?kdt ==>
      KD_Tree.min_height ?kdt =
      nat \<lfloor>log 2 (real (KD_Tree.size_kdt ?kdt))\<rfloor>",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))))))),
    ("KD_Tree.min_height_size_log_if_incomplete",
     "~ KD_Tree.complete ?kdt ==>
      real (KD_Tree.min_height ?kdt)
      < log 2 (real (KD_Tree.size_kdt ?kdt))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 0)))))),
    ("KD_Tree.balanced_optimal",
     "[| balanced ?kdt; KD_Tree.size_kdt ?kdt <= KD_Tree.size_kdt ?kdt' |]
      ==> KD_Tree.height ?kdt <= KD_Tree.height ?kdt'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KD_Tree.invar_l_le_k",
     "invar (kdt.Node ?k ?v ?l ?r) ==> ALL p:set_kdt ?l. p $ ?k <= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("KD_Tree.invar_r_ge_k",
     "invar (kdt.Node ?k ?v ?l ?r) ==> ALL p:set_kdt ?r. ?v < p $ ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("KD_Tree.neq_Leaf_iff",
     "(\<nexists>p. ?kdt = kdt.Leaf p) =
      (EX k v l r. ?kdt = kdt.Node k v l r)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app (template_hole 3, t_empty))),
    ("KD_Tree.balanced_Node_if_wbal1",
     "[| balanced ?l; balanced ?r;
         KD_Tree.size_kdt ?l = KD_Tree.size_kdt ?r + 1 |]
      ==> balanced (kdt.Node ?k ?v ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 3),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 2)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3),
               template_var 2))
           ))),
    ("KD_Tree.balanced_Node_if_wbal2",
     "[| balanced ?l; balanced ?r;
         \<bar>int (KD_Tree.size_kdt ?l) - int (KD_Tree.size_kdt ?r)\<bar>
         <= 1 |]
      ==> balanced (kdt.Node ?k ?v ?l ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3),
               template_var 2))
           )))]
