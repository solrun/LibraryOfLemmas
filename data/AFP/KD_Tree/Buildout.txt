Loading theory "HOL-Library.Cancellation" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Median_Of_Medians_Selection.Median_Of_Medians_Selection" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.477s cpu time, 0.034s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set")
### theory "HOL-Combinatorics.Transposition"
### 0.139s elapsed time, 0.580s cpu time, 0.034s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.276s elapsed time, 1.094s cpu time, 0.068s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.FuncSet"
### 0.421s elapsed time, 1.675s cpu time, 0.176s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.455s elapsed time, 1.817s cpu time, 0.176s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Median_Of_Medians_Selection.Median_Of_Medians_Selection")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.293s cpu time, 0.141s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.283s elapsed time, 1.115s cpu time, 0.102s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.429s elapsed time, 1.696s cpu time, 0.174s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Product_Plus"
### 0.280s elapsed time, 0.964s cpu time, 0.530s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.940s cpu time, 0.069s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Phantom_Type"
### 0.792s elapsed time, 2.976s cpu time, 0.800s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.315s cpu time, 0.902s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Countable_Set")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
consts
  mset :: "'a list => 'a multiset"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.791s elapsed time, 3.117s cpu time, 0.347s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product")
Proofs for inductive predicate(s) "finite_item"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
### theory "HOL-Library.Countable"
### 1.232s elapsed time, 4.840s cpu time, 0.499s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product")
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Numeral_Type"
### 0.795s elapsed time, 3.112s cpu time, 0.368s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.489s elapsed time, 1.912s cpu time, 0.188s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Tree"
### 2.142s elapsed time, 8.392s cpu time, 0.959s GC time
Loading theory "Draft.Templates" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Library.Set_Idioms"
### 0.231s elapsed time, 0.906s cpu time, 0.087s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.675s elapsed time, 2.640s cpu time, 0.285s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "HOL-Analysis.L2_Norm"
### 0.104s elapsed time, 0.404s cpu time, 0.041s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
### theory "HOL-Library.Multiset"
### 3.967s elapsed time, 15.397s cpu time, 2.192s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BuildMoreTemplates" via "Draft.ExtrEqs")
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.143s elapsed time, 4.575s cpu time, 0.535s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.995s elapsed time, 4.012s cpu time, 0.418s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Indicator_Function"
### 0.447s elapsed time, 1.734s cpu time, 0.225s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Finite_Cartesian_Product")
### theory "HOL-Library.BigO"
### 1.301s elapsed time, 5.057s cpu time, 1.778s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BuildMoreTemplates")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.697s elapsed time, 2.718s cpu time, 0.275s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Analysis.Abstract_Topology"
### 3.122s elapsed time, 12.152s cpu time, 2.568s GC time
Loading theory "Median_Of_Medians_Selection.Median_Of_Medians_Selection" (required by "Draft.BuildMoreTemplates" via "Draft.Build")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
instantiation
  dual_ord :: (ord) ord
  less_eq_dual_ord == less_eq :: 'a dual_ord => 'a dual_ord => bool
  less_dual_ord == less :: 'a dual_ord => 'a dual_ord => bool
### theory "HOL-Analysis.Euclidean_Space"
### 2.670s elapsed time, 10.057s cpu time, 3.982s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree")
### theory "HOL-Analysis.Elementary_Topology"
### 2.983s elapsed time, 11.268s cpu time, 4.164s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
Found termination order: "{}"
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 2.463s elapsed time, 9.194s cpu time, 4.400s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
### theory "Median_Of_Medians_Selection.Median_Of_Medians_Selection"
### 2.382s elapsed time, 8.894s cpu time, 4.335s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Linear_Algebra"
### 1.559s elapsed time, 5.915s cpu time, 2.316s GC time
### theory "HOL-Analysis.Norm_Arith"
### 0.307s elapsed time, 1.206s cpu time, 0.143s GC time
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 2.141s elapsed time, 7.370s cpu time, 2.499s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.268s elapsed time, 3.845s cpu time, 0.505s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Connected"
### 0.260s elapsed time, 0.795s cpu time, 0.087s GC time
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### theory "HOL-Analysis.Cartesian_Space"
### 1.304s elapsed time, 3.051s cpu time, 0.438s GC time
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 1.444s elapsed time, 3.074s cpu time, 0.462s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree" via "HOL-Analysis.Topology_Euclidean_Space")
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 0.915s elapsed time, 1.067s cpu time, 0.206s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.BuildMoreTemplates" via "Draft.Build" via "Draft.KD_Tree")
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 1.435s elapsed time, 1.592s cpu time, 0.213s GC time
Loading theory "Draft.KD_Tree" (required by "Draft.BuildMoreTemplates" via "Draft.Build")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.KD_Tree"
### 0.737s elapsed time, 0.788s cpu time, 0.061s GC time
Loading theory "Draft.Build" (required by "Draft.BuildMoreTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Build"
### 0.670s elapsed time, 0.766s cpu time, 0.098s GC time
Loading theory "Draft.BuildMoreTemplates"
val templateLemmas =
   [("Build.calc_spread_spec", "calc_spread ?k ?ps = spread ?k (set ?ps)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Build.build_psimp_1", "?ps = [?p] ==> build ?k ?ps = kdt.Leaf ?p",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Build.widest_spread_spec",
     "(?k, ?s) = widest_spread ?ks ?ps ==>
      widest_spread_axis ?k (set ?ks) (set ?ps)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Build.build_termination",
     "ALL k. distinct (map (%p. p $ k) ?ps) ==> build_dom (?ks, ?ps)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Build.complete_if_balanced_size_2powh",
     "[| balanced ?kdt; KD_Tree.size_kdt ?kdt = 2 ^ ?h |]
      ==> KD_Tree.complete ?kdt",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Build.length_xs_gt_1",
     "1 < length ?xs ==> EX x y ys. ?xs = x # y # ys",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Build.sum_length_partition_by_median",
     "(?l, ?m, ?r) = partition_by_median ?k ?ps ==>
      length ?ps = length ?l + length ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 4)),
           template_app (template_hole 1, template_var 2))))),
    ("Build.set_partition_by_median",
     "(?l, ?m, ?r) = partition_by_median ?k ?ps ==>
      set ?ps = set ?l Un set ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 4)),
           template_app (template_hole 1, template_var 2))))),
    ("Build.filter_partition_by_median",
     "(?l, ?m, ?r) = partition_by_median ?k ?ps ==>
      ALL p:set ?l. p $ ?k <= ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)),
             t_empty)
           ))),
    ("Build.widest_spread_calc_spread",
     "[| ?ks ~= []; (?k, ?s) = widest_spread ?ks ?ps |]
      ==> ?s = calc_spread ?k ?ps",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Build.filter_partition_by_median",
     "(?l, ?m, ?r) = partition_by_median ?k ?ps ==>
      ALL p:set ?r. ~ p $ ?k <= ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             t_empty)
           ))),
    ("Build.balanced_build",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> balanced (build ?ks ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Build.widest_spread_axis_Un",
     "[| widest_spread_axis ?k ?K ?P; spread ?k ?P <= spread ?k' ?P |]
      ==> widest_spread_axis ?k' (?K Un {?k'}) ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_var 1)
           ))),
    ("Build.widest_spread_axis_Un",
     "[| widest_spread_axis ?k ?K ?P; spread ?k' ?P <= spread ?k ?P |]
      ==> widest_spread_axis ?k (?K Un {?k'}) ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_var 1)
           ))),
    ("Build.size_build",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> KD_Tree.size_kdt (build ?ks ?ps) = length ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 7, template_var 1)))),
    ("Build.set_build",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> set ?ps = set_kdt (build ?ks ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Build.complete_build",
     "[| length ?ps = 2 ^ ?h; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> KD_Tree.complete (build ?k ?ps)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Build.length_filter_sort_nth",
     "[| distinct ?xs; ?n < length ?xs |]
      ==> length (filter (%x. x <= sort ?xs ! ?n) ?xs) = ?n + 1",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 5, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Build.height_build",
     "[| length ?ps = 2 ^ ?h; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> ?h = KD_Tree.height (build ?k ?ps)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Build.invar_build",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         set ?ks = UNIV |]
      ==> invar (build ?ks ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Build.length_filter_mset_sorted_nth",
     "[| distinct ?xs; ?n < length ?xs; sorted ?xs |]
      ==> {#x :# mset ?xs. x <= ?xs ! ?n#} = mset (take (?n + 1) ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1))))),
    ("Build.length_partition_by_median",
     "[| 1 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> 0 < length ?r",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 4))],
       template_inequation
        (less_than, template_hole 0,
         template_app (template_hole 9, template_var 1)))),
    ("Build.length_partition_by_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> 0 < length ?l",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 4))],
       template_inequation
        (less_than, template_hole 9,
         template_app (template_hole 8, template_var 3)))),
    ("Build.length_partition_by_median",
     "[| 1 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> length ?l < length ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 4))],
       template_inequation
        (less_than, template_app (template_hole 8, template_var 3),
         template_app (template_hole 8, template_var 4)))),
    ("Build.length_partition_by_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> length ?r < length ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 4))],
       template_inequation
        (less_than, template_app (template_hole 8, template_var 1),
         template_app (template_hole 8, template_var 4)))),
    ("Build.length_partition_by_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> length ?r <= length ?l",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 4))],
       template_inequation
        (less_equals, template_app (template_hole 9, template_var 1),
         template_app (template_hole 9, template_var 3)))),
    ("Build.length_partition_by_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> length ?l - length ?r <= 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 4)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 4))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 11, template_var 3)),
           template_app (template_hole 11, template_var 1)),
         template_hole 0))),
    ("Build.length_filter_le_axis_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps) |]
      ==> length (filter (%p. p $ ?k <= axis_median ?k ?ps) ?ps) =
          (length ?ps - 1) div 2 + 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 16,
          template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 9, t_empty), template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 15, template_var 1)),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_hole 3)))),
    ("Build.length_l_partition_by_median",
     "[| 0 < length ?ps; ALL k. distinct (map (%p. p $ k) ?ps);
         (?l, ?m, ?r) = partition_by_median ?k ?ps |]
      ==> length ?l = (length ?ps - 1) div 2 + 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 17,
          template_app (template_hole 16, template_var 4)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 8, template_var 0),
            template_var 4))],
       template_equation
        (template_app (template_hole 16, template_var 3),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 16, template_var 4)),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_hole 3)))),
    ("Build.build_domintros3",
     "[| (?k, ?s) = widest_spread ?ks (?x # ?y # ?zs);
         (?l, ?m, ?r) = partition_by_median ?k (?x # ?y # ?zs);
         build_dom (?ks, ?l); build_dom (?ks, ?r) |]
      ==> build_dom (?ks, ?x # ?y # ?zs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 8), template_var 7),
          template_app
           (template_app (template_hole 8, template_var 6),
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3)))),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 8),
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 6),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 6),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_var 3))))
           ))),
    ("Build.build_psimp_3",
     "[| 1 < length ?ps; (?k, ?s) = widest_spread ?ks ?ps;
         (?l, ?m, ?r) = partition_by_median ?k ?ps; build_dom (?ks, ?l);
         build_dom (?ks, ?r) |]
      ==> build ?ks ?ps = kdt.Node ?k ?m (build ?ks ?l) (build ?ks ?r)",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 6)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 6)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 6, template_var 5),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 6),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Build.build_psimp_2",
     "[| (?k, ?s) = widest_spread ?ks (?x # ?y # ?zs);
         (?l, ?m, ?r) = partition_by_median ?k (?x # ?y # ?zs);
         build_dom (?ks, ?l); build_dom (?ks, ?r) |]
      ==> build ?ks (?x # ?y # ?zs) =
          kdt.Node ?k ?m (build ?ks ?l) (build ?ks ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 8),
            template_var 7),
          template_app
           (template_app (template_hole 11, template_var 6),
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3)))),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 6, template_var 8),
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 6),
           template_app
            (template_app (template_hole 10, template_var 5),
             template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 8),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_var 6),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 6),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.BuildMoreTemplates"
### 0.596s elapsed time, 0.860s cpu time, 0.097s GC time
val it = (): unit
