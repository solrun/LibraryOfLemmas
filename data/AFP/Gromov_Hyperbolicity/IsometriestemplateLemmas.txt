   [("Isometries.isometry_on_id", "isometry_on ?A id",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Isometries.quasi_isometric_equiv_rel", "quasi_isometric ?X ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Isometries.geodesic_segment_between_x_x", "geodesic_segment {?x}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Isometries.closed_segment_is_geodesic",
     "geodesic_segment (closed_segment ?x ?y)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Isometries.geodesic_subset_singleton", "geodesic_subset {?x}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Isometries.isometry_on_id", "isometry_on ?A (%x. x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)
         )),
    ("Isometries.some_geodesic_bounded", "bounded {?x--?S--?y}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Isometries.isometry_on_minus", "isometry_on ?A uminus",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)
         )),
    ("Isometries.some_geodesic_closed", "closed {?x--?S--?y}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Isometries.some_geodesic_compact", "compact {?x--?S--?y}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Isometries.geodesic_segment_between_x_x",
     "geodesic_segment_between {?x} ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 0),
           template_var 0)
         )),
    ("Isometries.closed_segment_is_geodesic",
     "geodesic_segment_between (closed_segment ?x ?y) ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("Isometries.isometry_on_diff", "isometry_on ?A ((-) ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)
         )),
    ("Isometries.isometry_on_add", "isometry_on ?A (%x. x + ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)
         )),
    ("Isometries.some_geodesic_endpoints", "?x : {?x--?S--?y}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Isometries.some_geodesic_endpoints", "?y : {?x--?S--?y}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))
         )),
    ("Isometries.convex_is_geodesic", "convex ?S ==> geodesic_subset ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> bounded ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> proper ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> path_connected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> closed ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> compact ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> connected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_subset_path_connected",
     "geodesic_subset ?S ==> path_connected ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.some_geodesic_endpoints", "{?x--?S--?y} ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Isometries.geodesic_subsegment_subset",
     "geodesic_subsegment ?G ?x ?s ?t <= ?G",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 3)),
    ("Isometries.isometry_homeomorphism",
     "isometry ?f ==> UNIV homeomorphic UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)
           ))),
    ("Isometries.isometryD", "isometry ?f ==> isometry_on UNIV ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Isometries.isometryD", "isometry ?f ==> continuous_on UNIV ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Isometries.isometryD", "isometry ?f ==> isUCont ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Isometries.some_geodesic_same_endpoints", "{?x--?S--?x} = {?x}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Isometries.geodesic_segment_topology",
     "geodesic_segment ?G ==> ?G ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Isometries.isometry_iterates", "isometry ?f ==> isometry (?f ^^ ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.isometry_inverse", "isometry ?f ==> bij ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Isometries.isometry_inverse", "isometry ?f ==> isometry (inv ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Isometries.isometryD", "isometry ?f ==> 1-lipschitz_on UNIV ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Isometries.isometry_on_injective",
     "isometry_on ?X ?f ==> inj_on ?f ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Isometries.isometry_on_homeomorphism",
     "isometry_on ?X ?f ==> homeomorphism_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Isometries.isometry_on_continuous",
     "isometry_on ?X ?f ==> continuous_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Isometries.isometry_on_uniformly_continuous",
     "isometry_on ?X ?f ==> uniformly_continuous_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Isometries.quasi_isometric_equiv_rel",
     "quasi_isometric ?X ?Y ==> quasi_isometric ?Y ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Isometries.geodesic_segmentI",
     "geodesic_segment_between ?G ?x ?y ==> geodesic_segment ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Isometries.some_geodesic_commute", "{?x--?S--?y} = {?y--?S--?x}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("Isometries.isometryD", "isometry ?f ==> surj ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Isometries.isometry_on_lipschitz",
     "isometry_on ?X ?f ==> 1-lipschitz_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("Isometries.geodesic_segment_endpoints",
     "geodesic_segment_between ?G ?x ?y ==> ?x : ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("Isometries.geodesic_segment_endpoints",
     "geodesic_segment_between ?G ?x ?y ==> ?y : ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Isometries.geodesic_segment_between_x_x",
     "geodesic_segment_between ?G ?x ?x = (?G = {?x})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Isometries.isometry_quasi_isometry_between",
     "isometry ?f ==> 1 0 -quasi_isometry_between UNIV UNIV ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2),
                 template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Isometries.isometry_on_UNIV_iterates",
     "isometry_on UNIV ?f ==> isometry_on UNIV (?f ^^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.isometry_on_homeomorphism",
     "isometry_on ?X ?f ==> ?X homeomorphic ?f ` ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.isometry_quasi_isometry_on",
     "isometry_on ?X ?f ==> 1 0 -quasi_isometry_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("Isometries.geodesic_segment_endpoints",
     "geodesic_segment_between ?G ?x ?y ==> ?G ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("Isometries.geodesic_segment_commute",
     "geodesic_segment_between ?G ?x ?y ==>
      geodesic_segment_between ?G ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Isometries.quasi_isometry_onD",
     "?lambda ?C -quasi_isometry_on ?X ?f ==> 1 <= ?lambda",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_hole 0, template_var 3))),
    ("Isometries.quasi_isometry_onD",
     "?lambda ?C -quasi_isometry_on ?X ?f ==> 0 <= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_hole 0, template_var 2))),
    ("Isometries.isometry_homeomorphism",
     "isometry ?f ==> homeomorphism UNIV UNIV ?f (inv ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 0))
           ))),
    ("Isometries.isometry_on_inverse",
     "isometry_on ?X ?f ==> bij_betw ?f ?X (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.quasi_isometry_betweenD",
     "?lambda ?C -quasi_isometry_between ?X ?Y ?f ==> 1 <= ?lambda",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_hole 0, template_var 4))),
    ("Isometries.quasi_isometry_betweenD",
     "?lambda ?C -quasi_isometry_between ?X ?Y ?f ==> 0 <= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_hole 0, template_var 3))),
    ("Isometries.quasi_isometric_bounded",
     "[| bounded ?X; quasi_isometric ?X ?Y |] ==> bounded ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.isometry_on_inverse",
     "isometry_on ?X ?f ==> isometry_on (?f ` ?X) (inv_into ?X ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Isometries.geodesic_segment_param_in_segment",
     "?G ~= {} ==> geodesic_segment_param ?G ?x ?t : ?G",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Isometries.geodesic_segment_param",
     "geodesic_segment_between ?G ?x ?y ==>
      geodesic_segment_param ?G ?x 0 = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 1))),
    ("Isometries.quasi_isometry_on_euclidean",
     "?lambda ?C -quasi_isometry ?f ==> DIM(?'a) <= DIM(?'b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_hole 0)))),
    ("Isometries.isometryD",
     "isometry ?f ==> dist (?f ?x) (?f ?y) = dist ?x ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Isometries.geodesic_segment_homeo_interval",
     "geodesic_segment_between ?G ?x ?y ==>
      {0..dist ?x ?y} homeomorphic ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 2)
           ))),
    ("Isometries.quasi_isometry_betweenD",
     "?lambda ?C -quasi_isometry_between ?X ?Y ?f ==>
      ?lambda ?C -quasi_isometry_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Isometries.quasi_isometry_betweenD",
     "?lambda ?C -quasi_isometry_between ?X ?Y ?f ==> ?f ` ?X <= ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Isometries.quasi_isometric_empty",
     "[| ?X = {}; quasi_isometric ?X ?Y |] ==> ?Y = {}",
     template_implication
      ([template_equation (template_var 1, template_hole 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Isometries.isometry_on_complete_image",
     "[| isometry_on ?X ?f; uniform_space_class.complete ?X |]
      ==> uniform_space_class.complete (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.isometry_on_subset",
     "[| isometry_on ?X ?f; ?Y <= ?X |] ==> isometry_on ?Y ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Isometries.quasi_isometric_equiv_rel",
     "[| quasi_isometric ?X ?Y; quasi_isometric ?Y ?Z |]
      ==> quasi_isometric ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Isometries.isometry_on_homeomorphism",
     "isometry_on ?X ?f ==> homeomorphism ?X (?f ` ?X) ?f (inv_into ?X ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Isometries.geodesic_segment_param",
     "geodesic_segment_between ?G ?x ?y ==>
      geodesic_segment_param ?G ?x (dist ?x ?y) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Isometries.geodesic_segment_param",
     "geodesic_segment_between ?G ?x ?y ==>
      isometry_on {0..dist ?x ?y} (geodesic_segment_param ?G ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Isometries.quasi_isometry_on_between",
     "?lambda ?C -quasi_isometry_on ?X ?f ==>
      ?lambda ?C -quasi_isometry_between ?X (?f ` ?X) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("Isometries.isometry_on_closure",
     "[| isometry_on ?X ?f; continuous_on (closure ?X) ?f |]
      ==> isometry_on (closure ?X) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Isometries.quasi_isometry_on_empty",
     "[| 0 <= ?C; 1 <= ?lambda |] ==> ?lambda ?C -quasi_isometry_on {} ?f",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_hole 0),
             template_var 0)
           ))),
    ("Isometries.quasi_isometry_on_bounded",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; bounded ?X |]
      ==> bounded (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Isometries.some_geodesic_in_subset",
     "[| ?x : ?S; ?y : ?S |] ==> {?x--?S--?y} <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 1))),
    ("Isometries.geodesic_segment_param",
     "geodesic_segment_between ?G ?x ?y ==>
      geodesic_segment_param ?G ?x ` {0..dist ?x ?y} = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 2))),
    ("Isometries.isometry_preserves_bounded",
     "[| isometry_on ?X ?f; ?A <= ?X |] ==> bounded (?f ` ?A) = bounded ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Isometries.isometry_on_inverse",
     "[| isometry_on ?X ?f; ?x : ?X |] ==> inv_into ?X ?f (?f ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app (template_var 1, template_var 0)),
         template_var 0))),
    ("Isometries.quasi_isometry_on_subset",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?Y <= ?X |]
      ==> ?lambda ?C -quasi_isometry_on ?Y ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Isometries.closed_segment_is_geodesic",
     "isometry_on {0..dist ?x ?y}
       (%t. ?x + (t / dist ?x ?y) *\<^sub>R (?y - ?x))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           t_empty)
         )),
    ("Isometries.isometry_on_compose",
     "[| isometry_on ?X ?f; isometry_on (?f ` ?X) ?g |]
      ==> isometry_on ?X (%x. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), t_empty)
           ))),
    ("Isometries.geodesic_segmentI2",
     "[| isometry_on {?a..?b} ?g; ?a <= ?b |]
      ==> geodesic_segment (?g ` {?a..?b})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)))
           ))),
    ("Isometries.some_geodesic_segment_description",
     "EX G. geodesic_segment_between G ?x ?y & G <= ?S ==>
      geodesic_segment_between {?x--?S--?y} ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 1)),
               template_var 2),
             template_var 1)
           ))),
    ("Isometries.isometry_on_inverse",
     "[| isometry_on ?X ?f; ?y : ?f ` ?X |]
      ==> ?f (inv_into ?X ?f ?y) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Isometries.geodesic_segment_param",
     "[| geodesic_segment_between ?G ?x ?y; ?z : ?G |]
      ==> ?z = geodesic_segment_param ?G ?x (dist ?x ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Isometries.isometry_extend_closure",
     "isometry_on ?X ?f ==>
      EX g. isometry_on (closure ?X) g & (ALL x:?X. g x = ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Isometries.geodesic_segment_param",
     "[| geodesic_segment_between ?G ?x ?y; ?t : {0..dist ?x ?y} |]
      ==> geodesic_segment_param ?G ?x ?t : ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 3)
           ))),
    ("Isometries.geodesic_subsetD",
     "[| geodesic_subset ?S; ?x : ?S; ?y : ?S |]
      ==> geodesic_segment_between {?x--?S--?y} ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2),
                   template_var 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Isometries.closed_segment_as_isometric_image",
     "(%t. ?x + (t / dist ?x ?y) *\<^sub>R (?y - ?x)) ` {0..dist ?x ?y} =
      closed_segment ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Isometries.isometry_on_cong",
     "[| isometry_on ?X ?f; !!x. x : ?X ==> ?g x = ?f x |]
      ==> isometry_on ?X ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 0)
           ))),
    ("Isometries.geodesic_segment_dist",
     "[| geodesic_segment_between ?G ?x ?y; ?a : ?G |]
      ==> dist ?x ?a + dist ?a ?y = dist ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Isometries.geodesic_segmentI2",
     "[| isometry_on {?a..?b} ?g; ?a <= ?b |]
      ==> geodesic_segment_between (?g ` {?a..?b}) (?g ?a) (?g ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1))),
               template_app (template_var 0, template_var 2)),
             template_app (template_var 0, template_var 1))
           ))),
    ("Isometries.quasi_isometry_betweenD",
     "[| ?lambda ?C -quasi_isometry_between ?X ?Y ?f; ?y : ?Y |]
      ==> EX x:?X. dist (?f x) ?y <= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)
           ))),
    ("Isometries.quasi_isometry_on_change_params",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?lambda <= ?mu; ?C <= ?D |]
      ==> ?mu ?D -quasi_isometry_on ?X ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 5, template_var 1),
        template_inequation (less_equals, template_var 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Isometries.some_geodesic_segment_description",
     "\<nexists>G. geodesic_segment_between G ?x ?y & G <= ?S ==>
      {?x--?S--?y} = {?x, ?y}",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Isometries.geodesic_segment_unique_endpoints",
     "[| geodesic_segment_between ?G ?x ?y;
         geodesic_segment_between ?G ?a ?b |]
      ==> {?x, ?y} = {?a, ?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Isometries.geodesic_segment_param",
     "[| geodesic_segment_between ?G ?x ?y; ?t : {0..dist ?x ?y} |]
      ==> dist ?x (geodesic_segment_param ?G ?x ?t) = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)),
         template_var 0))),
    ("Isometries.geodesic_segment_dist_le",
     "[| geodesic_segment_between ?G ?x ?y; ?a : ?G; ?b : ?G |]
      ==> dist ?a ?b <= dist ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("Isometries.proj_set_geodesic_same_basepoint",
     "[| ?p : proj_set ?x ?A; geodesic_segment_between ?G ?p ?x; ?y : ?G |]
      ==> ?p : proj_set ?y ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))
           ))),
    ("Isometries.quasi_isometric_bounded_iff",
     "[| bounded ?X; ?X ~= {}; bounded ?Y; ?Y ~= {} |]
      ==> quasi_isometric ?X ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Isometries.isometryI",
     "[| !!x y. dist (?f x) (?f y) = dist x y; surj ?f |] ==> isometry ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_subsegment_exists",
     "[| geodesic_segment ?G; ?x : ?G; ?y : ?G |]
      ==> EX H<=?G. geodesic_segment_between H ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Isometries.isometry_preserves_geodesic_segment_between",
     "[| isometry_on ?X ?f; ?G <= ?X; geodesic_segment_between ?G ?x ?y |]
      ==> geodesic_segment_between (?f ` ?G) (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app (template_var 3, template_var 1)),
             template_app (template_var 3, template_var 0))
           ))),
    ("Isometries.isometry_onD",
     "[| isometry_on ?X ?f; ?x : ?X; ?y : ?X |]
      ==> dist (?f ?x) (?f ?y) = dist ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Isometries.quasi_isometry_between_change_params",
     "[| ?lambda ?C -quasi_isometry_between ?X ?Y ?f; ?lambda <= ?mu;
         ?C <= ?D |]
      ==> ?mu ?D -quasi_isometry_between ?X ?Y ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 6, template_var 1),
        template_inequation (less_equals, template_var 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Isometries.some_geodesic_subsegment",
     "[| ?H <= {?x--?S--?y}; compact ?H; connected ?H; ?H ~= {} |]
      ==> geodesic_segment ?H",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 1))],
       template_predicate
        (template_app (template_hole 0, template_var 3)))),
    ("Isometries.geodesic_segment_distance",
     "geodesic_segment_between ?G ?x ?y ==>
      dist ?w ?x + dist ?w ?y <= dist ?x ?y + 2 * infdist ?w ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)))))),
    ("Isometries.geodesic_segment_disconnection",
     "[| geodesic_segment_between ?G ?x ?y; ?z : ?G |]
      ==> connected (?G - {?z}) = (?z = ?x | ?z = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))
             )))),
    ("Isometries.isometry_preserves_infdist",
     "[| isometry_on ?X ?f; ?A <= ?X; ?x : ?X |]
      ==> infdist (?f ?x) (?f ` ?A) = infdist ?x ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Isometries.proj_set_subset",
     "[| ?p : proj_set ?x ?A; geodesic_segment_between ?G ?p ?x; ?y : ?G |]
      ==> proj_set ?y ?A <= proj_set ?x ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 2)))),
    ("Isometries.geodesic_segment_subsegment",
     "[| geodesic_segment ?G; ?H <= ?G; compact ?H; connected ?H;
         ?H ~= {} |]
      ==> geodesic_segment ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_predicate
        (template_app (template_hole 6, template_var 0)))),
    ("Isometries.isometry_preserves_hausdorff_distance",
     "[| isometry_on ?X ?f; ?A <= ?X; ?B <= ?X |]
      ==> hausdorff_distance (?f ` ?A) (?f ` ?B) =
          hausdorff_distance ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Isometries.isometry_onI",
     "(!!x y. [| x : ?X; y : ?X |] ==> dist (?f x) (?f y) = dist x y) ==>
      isometry_on ?X ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Isometries.geodesic_subsetI",
     "(!!x y.
          [| x : ?S; y : ?S |]
          ==> EX G. geodesic_segment_between G x y & G <= ?S) ==>
      geodesic_subset ?S",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Isometries.geodesic_segment_reverse_param",
     "[| geodesic_segment_between ?G ?x ?y; ?t : {0..dist ?x ?y} |]
      ==> geodesic_segment_param ?G ?y (dist ?x ?y - ?t) =
          geodesic_segment_param ?G ?x ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Isometries.dist_along_geodesic_wrt_endpoint",
     "[| geodesic_segment_between ?G ?x ?y; ?u : ?G; ?v : ?G |]
      ==> dist ?u ?v = \<bar>dist ?u ?x - dist ?v ?x\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3)))))),
    ("Isometries.geodesic_segment_dist_unique",
     "[| geodesic_segment_between ?G ?x ?y; ?a : ?G; ?b : ?G;
         dist ?x ?a = dist ?x ?b |]
      ==> ?a = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Isometries.quasi_isometry_onD",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?x : ?X; ?y : ?X |]
      ==> dist (?f ?x) (?f ?y) <= ?lambda * dist ?x ?y + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Isometries.quasi_isometry_on_infdist",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?w : ?X; ?S <= ?X |]
      ==> infdist (?f ?w) (?f ` ?S) <= ?lambda * infdist ?w ?S + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 4)))),
    ("Isometries.quasi_isometry_betweenD",
     "[| ?lambda ?C -quasi_isometry_between ?X ?Y ?f; ?x : ?X; ?y : ?X |]
      ==> dist (?f ?x) (?f ?y) <= ?lambda * dist ?x ?y + ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 6),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 5)))),
    ("Isometries.geodesic_segment_union",
     "[| dist ?x ?z = dist ?x ?y + dist ?y ?z;
         geodesic_segment_between ?G ?x ?y;
         geodesic_segment_between ?H ?y ?z |]
      ==> geodesic_segment_between (?G Un ?H) ?x ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2)),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 4),
             template_var 3)
           ))),
    ("Isometries.quasi_isometry_onD",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?x : ?X; ?y : ?X |]
      ==> 1 / ?lambda * dist ?x ?y - ?C <= dist (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 5)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Isometries.geodesic_segment_union",
     "[| dist ?x ?z = dist ?x ?y + dist ?y ?z;
         geodesic_segment_between ?G ?x ?y;
         geodesic_segment_between ?H ?y ?z |]
      ==> ?G Int ?H = {?y}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 2)),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Isometries.quasi_isometry_on_infdist",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?w : ?X; ?S <= ?X |]
      ==> 1 / ?lambda * infdist ?w ?S - ?C <= infdist (?f ?w) (?f ` ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 5)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Isometries.quasi_isometry_betweenD",
     "[| ?lambda ?C -quasi_isometry_between ?X ?Y ?f; ?x : ?X; ?y : ?X |]
      ==> 1 / ?lambda * dist ?x ?y - ?C <= dist (?f ?x) (?f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 4)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 6)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_var 5),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Isometries.quasi_isometry_compose",
     "[| ?lambda ?C -quasi_isometry_between ?X ?Y ?f;
         ?mu ?D -quasi_isometry_between ?Y ?Z ?g |]
      ==> (?lambda * ?mu) (?C * ?mu + 2 * ?D) -quasi_isometry_between ?X ?Z
           (?g o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 8),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 5, template_var 7),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_var 2))),
                 template_var 6),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Isometries.quasi_isometry_subset",
     "[| ?X <= ?Y; !!y. y : ?Y ==> EX x:?X. dist x y <= ?C; 0 <= ?C |]
      ==> 1 ?C -quasi_isometry_between ?X ?Y (%x. x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0),
                 template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Isometries.quasi_isometry_on_compose",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f;
         ?mu ?D -quasi_isometry_on ?Y ?g; ?f ` ?X <= ?Y |]
      ==> (?lambda * ?mu) (?C * ?mu + ?D) -quasi_isometry_on ?X (?g o ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 4), template_var 5),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 3)),
                   template_var 2)),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Isometries.geodesic_segment_subparam",
     "[| geodesic_segment_between ?G ?x ?z;
         geodesic_segment_between ?H ?x ?y; ?H <= ?G;
         ?t : {0..dist ?x ?y} |]
      ==> geodesic_segment_param ?G ?x ?t =
          geodesic_segment_param ?H ?x ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_var 0)))),
    ("Isometries.geodesic_subsegment",
     "[| geodesic_segment_between ?G ?x ?y; 0 <= ?s; ?s <= ?t;
         ?t <= dist ?x ?y |]
      ==> geodesic_subsegment ?G ?x ?s ?t =
          geodesic_segment_param ?G ?x ` {?s..?t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 6, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Isometries.geodesic_subsegment",
     "[| geodesic_segment_between ?G ?x ?y; 0 <= ?s; ?s <= ?t;
         ?t <= dist ?x ?y |]
      ==> geodesic_segment_between (geodesic_subsegment ?G ?x ?s ?t)
           (geodesic_segment_param ?G ?x ?s)
           (geodesic_segment_param ?G ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 0))
           ))),
    ("Isometries.geodesic_segment_param",
     "[| geodesic_segment_between ?G ?x ?y; ?s : {0..dist ?x ?y};
         ?t : {0..dist ?x ?y} |]
      ==> dist (geodesic_segment_param ?G ?x ?s)
           (geodesic_segment_param ?G ?x ?t) =
          \<bar>?s - ?t\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Isometries.quasi_isometry_betweenI",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; ?f ` ?X <= ?Y;
         !!y. y : ?Y ==> EX x:?X. dist (?f x) y <= ?C |]
      ==> ?lambda ?C -quasi_isometry_between ?X ?Y ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_var 0),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Isometries.geodesic_segment_betweenI",
     "[| ?g 0 = ?x; ?g (dist ?x ?y) = ?y; isometry_on {0..dist ?x ?y} ?g;
         ?G = ?g ` {0..dist ?x ?y} |]
      ==> geodesic_segment_between ?G ?x ?y",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_hole 6), template_var 2),
        template_equation
         (template_app
           (template_var 3,
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 6),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_var 3)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 3, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Isometries.quasi_isometry_on_perturb",
     "[| ?lambda ?C -quasi_isometry_on ?X ?f; 0 <= ?D;
         !!x. x : ?X ==> dist (?f x) (?g x) <= ?D |]
      ==> ?lambda (?C + 2 * ?D) -quasi_isometry_on ?X ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 8, template_var 1),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_var 5),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_hole 0))),
                     template_var 1))),
               template_var 3),
             template_var 0)
           ))),
    ("Isometries.proj_set_thickening",
     "[| ?p : proj_set ?x ?Z; 0 <= ?D; ?D <= dist ?p ?x;
         geodesic_segment_between ?G ?p ?x |]
      ==> geodesic_segment_param ?G ?p ?D
          : proj_set ?x (UN z:?Z. cball z ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_inequation (less_equals, template_hole 6, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 8, template_var 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))))
           ))),
    ("Isometries.geodesic_segmentD",
     "geodesic_segment_between ?G ?x ?y ==>
      EX g. g ?t = ?x &
            g (?t + dist ?x ?y) = ?y &
            isometry_on {?t..?t + dist ?x ?y} g &
            ?G = g ` {?t..?t + dist ?x ?y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Isometries.proj_set_thickening'",
     "[| ?p : proj_set ?x ?Z; 0 <= ?D; ?D <= ?E; ?E <= dist ?p ?x;
         geodesic_segment_between ?G ?p ?x |]
      ==> geodesic_segment_param ?G ?p ?D
          : proj_set (geodesic_segment_param ?G ?p ?E)
             (UN z:?Z. cball z ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))
            ),
        template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 5),
                   template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 3))))
           ))),
    ("Isometries.geodesic_subsegment",
     "[| geodesic_segment_between ?G ?x ?y; 0 <= ?s; ?s <= ?t;
         ?t <= dist ?x ?y; ?s <= ?u; ?u <= ?t |]
      ==> geodesic_segment_param (geodesic_subsegment ?G ?x ?s ?t)
           (geodesic_segment_param ?G ?x ?s) (?u - ?s) =
          geodesic_segment_param ?G ?x ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_inequation (less_equals, template_hole 5, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_var 0)))),
    ("Isometries.growth_rate_euclidean_below",
     "0 <= ?R ==>
      EX F<=cball (0::?'a) ?R.
         (ALL x:F. ALL y:F. x = y | ?D <= dist x y) &
         finite F &
         (1 / (max ?D 1 * real DIM(?'a))) ^ DIM(?'a) * ?R ^ DIM(?'a)
         <= real (card F)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 18, template_var 1)],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("Isometries.quasi_isometry_inverse",
     "?lambda ?C -quasi_isometry_between ?X ?Y ?f ==>
      EX g. ?lambda (3 * ?C * ?lambda) -quasi_isometry_between ?Y ?X g &
            (ALL x:?X. dist x (g (?f x)) <= 3 * ?C * ?lambda) &
            (ALL y:?Y. dist y (?f (g y)) <= 3 * ?C * ?lambda)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Isometries.growth_rate_euclidean_above",
     "[| 0 < ?D; ?F <= cball (0::?'a) ?R; 0 <= ?R;
         !!x y. [| x : ?F; y : ?F; x ~= y |] ==> ?D <= dist x y |]
      ==> finite ?F &
          real (card ?F) <= 1 + (6 / ?D) ^ DIM(?'a) * ?R ^ DIM(?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 23, template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_var 0)),
        template_inequation (less_equals, template_hole 23, template_var 0),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app (template_hole 12, template_var 1)),
             template_app
              (template_app
                (template_hole 19,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1))),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_hole 1)))),
                           template_var 2)),
                       template_app (template_hole 10, template_hole 0))),
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app (template_hole 10, template_hole 0))))))
           ))),
    ("Isometries.quasi_isometry_onI",
     "[| !!x y.
            [| x : ?X; y : ?X |]
            ==> dist (?f x) (?f y) <= ?lambda * dist x y + ?C;
         !!x y.
            [| x : ?X; y : ?X |]
            ==> 1 / ?lambda * dist x y - ?C <= dist (?f x) (?f y);
         1 <= ?lambda; 0 <= ?C |]
      ==> ?lambda ?C -quasi_isometry_on ?X ?f",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           )))]
