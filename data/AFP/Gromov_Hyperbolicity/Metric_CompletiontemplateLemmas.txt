   [("Metric_Completion.dist_metric_completion_limit",
     "(%n. dist (rep_metric_completion ?x n) (rep_metric_completion ?y n))
      \<longlonglongrightarrow> dist ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Metric_Completion.convergent_Cauchy_dist",
     "[| Cauchy ?u; Cauchy ?v |] ==> convergent (%n. dist (?u n) (?v n))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Metric_Completion.to_metric_completion_dense",
     "[| open ?U; ?U ~= {} |] ==> EX x. to_metric_completion x : ?U",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Metric_Completion.convergent_add_null",
     "[| convergent ?u;
         (%n. ?v n - ?u n) \<longlonglongrightarrow> (0::?'a) |]
      ==> convergent ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty),
                template_app (template_hole 2, template_hole 1)),
              template_hole 0)
            )],
       template_predicate
        (template_app (template_hole 5, template_var 0)))),
    ("Metric_Completion.dist_metric_completion_limit'",
     "[| Cauchy ?x; Cauchy ?y |]
      ==> (%n. dist (?x n) (?y n))
          \<longlonglongrightarrow> dist (abs_metric_completion ?x)
                                     (abs_metric_completion ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 1, template_var 0)))),
             template_hole 0)
           ))),
    ("Metric_Completion.convergent_add_null",
     "[| convergent ?u;
         (%n. ?v n - ?u n) \<longlonglongrightarrow> (0::?'a) |]
      ==> lim ?v = lim ?u",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 4, template_hole 3)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_hole 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 1)))),
    ("Metric_Completion.lift_to_metric_completion",
     "isUCont ?f ==>
      EX g. isUCont g &
            ?f = g o to_metric_completion &
            (ALL x:range to_metric_completion.
                g x = ?f (inv to_metric_completion x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Metric_Completion.lift_to_metric_completion_isometry",
     "isometry_on UNIV ?f ==>
      EX g. isometry_on UNIV g &
            range g = closure (range ?f) &
            ?f = g o to_metric_completion &
            (ALL x:range to_metric_completion.
                g x = ?f (inv to_metric_completion x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 14, t_empty))))]
