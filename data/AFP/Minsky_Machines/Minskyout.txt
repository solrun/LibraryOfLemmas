Loading theory "Draft.Recursive_Inseparability" (required by "Draft.MinskyTemplates" via "Draft.Minsky")
Loading theory "Draft.Templates" (required by "Draft.MinskyTemplates" via "Draft.ExtrEqs")
### theory "Draft.Recursive_Inseparability"
### 0.059s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "Draft.Minsky" (required by "Draft.MinskyTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.173s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MinskyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.113s cpu time, 0.103s GC time
Proofs for inductive predicate(s) "stepp"
  Proving monotonicity ...
consts
  encode_Op :: "(nat, nat) Op => nat"
### theory "Draft.Minsky"
### 1.052s elapsed time, 1.653s cpu time, 0.150s GC time
Loading theory "Draft.MinskyTemplates"
val templateLemmas =
   [("Minsky.deterministic_singleton", "deterministic {?p}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Minsky.encode_minsky_inv", "decode_minsky (encode_minsky ?M) = ?M",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Minsky.encode_Op_inv", "decode_Op (encode_Op ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Minsky.map_minsky_id", "map_minsky id id ?M = ?M",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Minsky.deterministic_imp_weak_diamond",
     "deterministic ?R ==> w\<diamond> ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Minsky.deterministic_imp_CR", "deterministic ?r ==> CR ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Minsky.deterministic_stepI",
     "deterministic ?M ==> deterministic (step ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Minsky.ce_sets_containing_n_ce",
     "{p. ?n : nat_to_ce_set p} : ce_sets",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_hole 0)
         )),
    ("Minsky.step_mono", "?M <= ?M' ==> step ?M <= step ?M'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Minsky.steps_mono", "?M <= ?M' ==> (step ?M)^* <= (step ?M')^*",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Minsky.NF_stepI", "?s ~: fst ` ?M ==> (?s, ?vs) : NF (step ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Minsky.mk_minsky_zero",
     "mk_minsky (%vs vs'. vs' = (%x. if x = ?v then 0 else vs x))",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Minsky.map_minsky_comp",
     "map_minsky ?f ?g (map_minsky ?f' ?g' ?M) =
      map_minsky (?f o ?f') (?g o ?g') ?M",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_var 0))),
    ("Minsky.inj_shift",
     "?a < ?b ==> inj (%x. if x = 0 then ?a else x + ?b)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty), template_hole 0)
           ))),
    ("Minsky.mk_minsky_PrimRec", "?f : PrimRec1 ==> mk_minsky1 ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Minsky.deterministic_map",
     "[| inj_on ?f (fst ` ?R); deterministic ?R |]
      ==> deterministic (map_prod ?f ?g ` ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Minsky.mk_minsky_inc",
     "mk_minsky
       (%vs vs'. vs' = (%x. if x = ?v then Suc (vs ?v) else vs x))",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Minsky.mk_minsky_dec",
     "mk_minsky (%vs vs'. vs' = (%x. if x = ?v then vs ?v - 1 else vs x))",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Minsky.mk_minsky_PrimRec", "?g : PrimRec2 ==> mk_minsky2 ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Minsky.deterministicD",
     "[| deterministic ?R; (?x, ?y) : ?R; (?x, ?z) : ?R |] ==> ?y = ?z",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Minsky.mk_minsky_sound",
     "[| mk_minsky_wit ?M ?P; ((Suc 0, ?vs), 0, ?vs') : (step ?M)^* |]
      ==> ?P ?vs ?vs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2)),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 4, template_hole 2),
                    template_var 0))),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Minsky.stepp_step_eq",
     "stepp (%x xa. (x, xa) : ?M) =
      (%x xa xb xc. ((x, xa), xb, xc) : step ?M)",
     template_equation (template_app (template_hole 6, t_empty), t_empty)),
    ("Minsky.deterministic_union",
     "[| fst ` ?S Int fst ` ?R = {}; deterministic ?S; deterministic ?R |]
      ==> deterministic (?S Un ?R)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1)),
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)),
          template_hole 2),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Minsky.mk_minsky_PrimRec", "?h : PrimRec3 ==> mk_minsky3 ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Minsky.mk_minsky_mono",
     "[| mk_minsky ?P; !!vs vs'. ?P vs vs' ==> ?Q vs vs' |]
      ==> mk_minsky ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Minsky.mk_minsky_copy1",
     "?v ~= ?w ==>
      mk_minsky
       (%vs vs'.
           vs' =
           (%x. if x = ?v then 0 else if x = ?w then vs ?v else vs x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Minsky.mk_minsky_seq'",
     "[| mk_minsky ?P; mk_minsky ?Q |]
      ==> mk_minsky (%vs vs''. EX vs'. ?P vs vs' & ?Q vs' vs'')",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Minsky.minsky_reaching_s_imp_minsky_reaching_s_not_t",
     "[| ?s : {0, 1}; ?t : {0, 1}; ?s ~= ?t |]
      ==> minsky_reaching_s ?s <= minsky_reaching_s_not_t ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app (template_hole 8, template_hole 6),
                  template_hole 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app (template_hole 8, template_hole 6),
                  template_hole 5)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Minsky.mk_minsky_add1",
     "?v ~= ?w ==>
      mk_minsky
       (%vs vs'.
           vs' =
           (%x. if x = ?v then 0
                else if x = ?w then vs ?v + vs ?w else vs x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Minsky.mk_minsky_map",
     "[| mk_minsky ?P; inj ?f |]
      ==> mk_minsky
           (%vs vs'.
               ?P (vs o ?f) (vs' o ?f) &
               (ALL x. x ~: range ?f --> vs x = vs' x))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Minsky.mk_minsky_copy",
     "[| ?u ~= ?v; ?u ~= ?w; ?v ~= ?w |]
      ==> mk_minsky
           (%vs vs'.
               vs' =
               (%x. if x = ?v then vs ?u else if x = ?w then 0 else vs x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Minsky.mk_minsky_seq",
     "[| mk_minsky ?P; mk_minsky ?Q;
         !!vs vs' vs''. [| ?P vs vs'; ?Q vs' vs'' |] ==> ?R vs vs'' |]
      ==> mk_minsky ?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Minsky.mk_minsky_copy2",
     "[| ?u ~= ?v; ?u ~= ?w; ?v ~= ?w |]
      ==> mk_minsky
           (%vs vs'.
               vs' =
               (%x. if x = ?u then 0
                    else if x = ?v then vs ?u
                         else if x = ?w then vs ?u else vs x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Minsky.deterministic_minsky_UN",
     "[| deterministic ?M; (?x, ?sa, ?vsa) : (step ?M)^*;
         (?x, ?s, ?vs) : (step ?M)^*; ?sa ~: fst ` ?M; ?s ~: fst ` ?M |]
      ==> (?sa, ?vsa) = (?s, ?vs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 5)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 5))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 5))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_var 0)))),
    ("Minsky.map_step",
     "[| inj ?g; ?vs = ?vs' o ?g; ((?s, ?vs), ?t, ?ws) : step ?M |]
      ==> ((?f ?s, ?vs'), ?f ?t,
           %x. if x : range ?g then ?ws (inv ?g x) else ?vs' x)
          : step (map_minsky ?f ?g ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 7),
              template_hole 15)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 13, template_var 5),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2))),
              template_app (template_hole 9, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_var 0, template_var 4)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_var 0, template_var 3)),
                   t_empty))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 7),
                 template_var 1)))
           ))),
    ("Minsky.mk_minsky_add2",
     "[| ?u ~= ?v; ?u ~= ?w; ?v ~= ?w |]
      ==> mk_minsky
           (%vs vs'.
               vs' =
               (%x. if x = ?u then 0
                    else if x = ?v then vs ?u + vs ?v
                         else if x = ?w then vs ?u + vs ?w else vs x))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Minsky.mk_minsky_prim_rec",
     "[| mk_minsky1 ?g; mk_minsky3 ?h |] ==> mk_minsky2 (PrimRecOp ?g ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Minsky.map_steps",
     "[| inj ?g; ?vs = ?ws o ?g; ((?s, ?vs), ?t, ?vs') : (step ?M)^* |]
      ==> ((?f ?s, ?ws), ?f ?t,
           %x. if x : range ?g then ?vs' (inv ?g x) else ?ws x)
          : (step (map_minsky ?f ?g ?M))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7),
              template_hole 17)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 15, template_var 5),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 12, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_var 0, template_var 4)),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 0, template_var 3)),
                   t_empty))),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 7),
                   template_var 1))))
           ))),
    ("Minsky.mk_minsky_seq_map",
     "[| mk_minsky ?P; mk_minsky ?Q; inj ?g;
         !!vs vs' vs''. [| ?P vs vs'; ?Q vs' vs'' |] ==> ?R vs vs'' |]
      ==> mk_minsky
           (%vs vs'.
               ?R (vs o ?g) (vs' o ?g) &
               (ALL x. x ~: range ?g --> vs x = vs' x))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Minsky.mk_minsky_apply3",
     "[| mk_minsky3 ?f; ?t < ?k; ?u < ?k; ?v < ?k; ?w < ?k |]
      ==> mk_minsky
           (%vs vs'.
               ALL x<?k.
                  vs' x =
                  (if x = ?t then ?f (vs ?u) (vs ?v) (vs ?w) else vs x))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3),
        template_inequation (less_than, template_var 1, template_var 3),
        template_inequation (less_than, template_var 0, template_var 3)],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Minsky.mk_minsky_loop",
     "[| mk_minsky ?P; !!vs vs'. ?P vs vs' ==> vs' ?v = vs ?v;
         !!vs. vs ?v = 0 ==> ?Q vs vs;
         !!n vs vs' vs''.
            [| vs ?v = Suc n; ?P (%x. if x = ?v then n else vs x) vs';
               ?Q vs' vs'' |]
            ==> ?Q vs vs'' |]
      ==> mk_minsky ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Minsky.rec_inseparable_fixed_minsky_reaching_0_1",
     "(!!U. [| finite U; deterministic U; 0 ~: fst ` U; 1 ~: fst ` U;
               rec_inseparable
                {uu_.
                 EX x vs'.
                    uu_ = x &
                    ((2, %n. if n = 0 then x else 0), 0, vs') : (step U)^*}
                {uu_.
                 EX x vs'.
                    uu_ = x &
                    ((2, %n. if n = 0 then x else 0), 1, vs')
                    : (step U)^*} |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty))],
       template_predicate (template_var 0))),
    ("Minsky.ce_set_by_minsky",
     "[| ?A : ce_sets;
         !!M. [| finite M; deterministic M; 0 ~: fst ` M;
                 !!x vs.
                    [| vs 0 = x; vs 1 = 0; x : ?A |]
                    ==> EX vs'. ((Suc 0, vs), 0, vs') : (step M)^*;
                 !!x vs vs'.
                    [| vs 0 = x; vs 1 = 0;
                       ((Suc 0, vs), 0, vs') : (step M)^* |]
                    ==> x : ?A |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 1),
              template_hole 19)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0))),
    ("Minsky.mk_minsky_comp3_3",
     "[| mk_minsky3 ?f; mk_minsky3 ?g; mk_minsky3 ?h; mk_minsky3 ?k |]
      ==> mk_minsky
           (%vs vs'.
               vs' 0 =
               ?f (?g (vs 1) (vs 2) (vs 3)) (?h (vs 1) (vs 2) (vs 3))
                (?k (vs 1) (vs 2) (vs 3)))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Minsky.ce_set_pair_by_minsky",
     "[| ?A : ce_sets; ?B : ce_sets;
         !!M. [| finite M; deterministic M; 0 ~: fst ` M; Suc 0 ~: fst ` M;
                 !!x vs.
                    [| vs 0 = x; vs 1 = 0; x : ?A Un ?B |]
                    ==> EX vs'.
                           ((2, vs), 0, vs') : (step M)^* |
                           ((2, vs), Suc 0, vs') : (step M)^*;
                 !!x vs vs'.
                    [| vs 0 = x; vs 1 = 0; ((2, vs), 0, vs') : (step M)^* |]
                    ==> x : ?A;
                 !!x vs vs'.
                    [| vs 0 = x; vs 1 = 0;
                       ((2, vs), Suc 0, vs') : (step M)^* |]
                    ==> x : ?B |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 2),
              template_hole 24)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 1),
              template_hole 24)
            ),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MinskyTemplates"
### 0.384s elapsed time, 0.549s cpu time, 0.078s GC time
val it = (): unit
