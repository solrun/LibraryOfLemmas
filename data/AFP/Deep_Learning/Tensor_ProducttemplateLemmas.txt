   [("Tensor_Product.smult_1", "?A = (1::?'a) \<cdot> ?A",
     template_equation
      (template_var 0,
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Tensor_Product.dims_tensor_prod",
     "dims (?A \<otimes> ?B) = dims ?A @ dims ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tensor_Product.tensor0_prod_right",
     "?A \<otimes> tensor0 ?ds = tensor0 (dims ?A @ ?ds)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Tensor_Product.tensor0_prod_left",
     "tensor0 ?ds \<otimes> ?A = tensor0 (?ds @ dims ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Tensor_Product.smult_prod_extract2",
     "?a \<cdot> (?A \<otimes> ?B) = ?A \<otimes> (?a \<cdot> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Tensor_Product.smult_prod_extract1",
     "?a \<cdot> (?A \<otimes> ?B) = ?a \<cdot> ?A \<otimes> ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Tensor_Product.vec_tensor_prod",
     "vec (?A \<otimes> ?B) =
      concat (map (%a. vec_smult a (vec ?B)) (vec ?A))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 4, template_var 1))))),
    ("Tensor_Product.tensorprod_subtensor_base",
     "concat (map ?f (concat ?xss)) =
      concat (map (%xs. concat (map ?f xs)) ?xss)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Tensor_Product.tensor_prod_distr_right",
     "dims ?A = dims ?B ==>
      ?C \<otimes> (?A + ?B) = ?C \<otimes> ?A + ?C \<otimes> ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Tensor_Product.tensor_prod_distr_left",
     "dims ?A = dims ?B ==>
      (?A + ?B) \<otimes> ?C = ?A \<otimes> ?C + ?B \<otimes> ?C",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Tensor_Product.order_0_multiple_of_one",
     "[| order ?A = 0; !!a. ?A = a \<cdot> 1 ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Tensor_Product.subtensor_tensor_prod",
     "[| dims ?A ~= []; ?i < hd (dims ?A) |]
      ==> subtensor (?A \<otimes> ?B) ?i = subtensor ?A ?i \<otimes> ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 6, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Tensor_Product.lookup_tensor_prod",
     "[| ?is1.0 \<lhd> dims ?A; ?is2.0 \<lhd> dims ?B |]
      ==> lookup (?A \<otimes> ?B) (?is1.0 @ ?is2.0) =
          lookup ?A ?is1.0 * lookup ?B ?is2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("Tensor_Product.subtensor_prod_with_vec",
     "[| order ?A = 1; ?i < hd (dims ?A) |]
      ==> subtensor (?A \<otimes> ?B) ?i = lookup ?A [?i] \<cdot> ?B",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 2)),
          template_hole 9),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app (template_hole 10, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_var 0)))),
    ("Tensor_Product.subtensor_combine_tensor_prod",
     "(!!A. A : set ?As ==> dims A = ?ds) ==>
      subtensor_combine ?ds ?As \<otimes> ?B =
      subtensor_combine (?ds @ dims ?B) (map (%A. A \<otimes> ?B) ?As)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Tensor_Product.valid_index_split",
     "[| ?is \<lhd> ?ds1.0 @ ?ds2.0;
         !!is1 is2.
            [| is1 @ is2 = ?is; is1 \<lhd> ?ds1.0; is2 \<lhd> ?ds2.0 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]
