Loading theory "Draft.DL_Missing_Finite_Set" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Draft.DL_Deep_Model")
Loading theory "Draft.Tensor" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank" via "Draft.Tensor_Unit_Vec" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus" via "Draft.Tensor_Subtensor")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
### theory "Draft.DL_Missing_Finite_Set"
### 0.039s elapsed time, 0.186s cpu time, 0.000s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
Proofs for inductive predicate(s) "valid_index"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.129s elapsed time, 0.534s cpu time, 0.028s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
### theory "HOL-Library.Fun_Lexorder"
### 0.048s elapsed time, 0.199s cpu time, 0.000s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Tensor"
### 0.383s elapsed time, 1.539s cpu time, 0.069s GC time
Loading theory "Draft.Tensor_Subtensor" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank" via "Draft.Tensor_Unit_Vec" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "Draft.Tensor_Subtensor"
### 0.099s elapsed time, 0.387s cpu time, 0.072s GC time
Loading theory "Draft.Tensor_Plus" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank" via "Draft.Tensor_Unit_Vec" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.486s elapsed time, 1.911s cpu time, 0.141s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  tensor :: (semigroup_add) plus
  plus_tensor == plus :: 'a tensor => 'a tensor => 'a tensor
### theory "HOL-Library.FuncSet"
### 0.423s elapsed time, 1.649s cpu time, 0.207s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "Draft.Tensor_Plus"
### 0.161s elapsed time, 0.621s cpu time, 0.094s GC time
Loading theory "Draft.Tensor_Scalar_Mult" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank" via "Draft.Tensor_Unit_Vec" via "Draft.Tensor_Product")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
### theory "Draft.Tensor_Scalar_Mult"
### 0.104s elapsed time, 0.394s cpu time, 0.102s GC time
Loading theory "Draft.Tensor_Product" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank" via "Draft.Tensor_Unit_Vec")
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  tensor :: (ring) semigroup_mult
  times_tensor == times :: 'a tensor => 'a tensor => 'a tensor
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  tensor :: (ring_1) monoid_mult
  one_tensor == one_class.one :: 'a tensor
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "Draft.Tensor_Product"
### 0.103s elapsed time, 0.415s cpu time, 0.000s GC time
Loading theory "Draft.Tensor_Unit_Vec" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Rank")
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.065s elapsed time, 4.037s cpu time, 0.856s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
### theory "Draft.Tensor_Unit_Vec"
### 0.228s elapsed time, 0.722s cpu time, 0.519s GC time
Loading theory "Draft.Tensor_Rank" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank")
Proofs for inductive predicate(s) "cprank_max1"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cprank_max"
  Proving monotonicity ...
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "Draft.Tensor_Rank"
### 0.126s elapsed time, 0.490s cpu time, 0.054s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.573s cpu time, 0.097s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.337s elapsed time, 1.327s cpu time, 0.151s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Congruence"
### 0.954s elapsed time, 3.589s cpu time, 0.864s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Cannot skip proof of schematic goal statement
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Groups_Big_Fun"
### 0.285s elapsed time, 1.119s cpu time, 0.173s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Infinite_Set"
### 0.328s elapsed time, 1.292s cpu time, 0.173s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.More_List"
### 0.193s elapsed time, 0.761s cpu time, 0.096s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size_list size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.Nat_Bijection"
### 0.594s elapsed time, 2.168s cpu time, 0.934s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs")
class zero = type +
  fixes zero :: "'a"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  mset :: "'a list => 'a multiset"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.227s elapsed time, 4.674s cpu time, 1.309s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  snth :: "'a stream => nat => 'a"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.340s elapsed time, 5.078s cpu time, 1.643s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
### theory "HOL-Library.Poly_Mapping"
### 2.060s elapsed time, 7.757s cpu time, 2.575s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Polynomials.More_MPoly_Type")
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.291s elapsed time, 4.891s cpu time, 1.542s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.450s elapsed time, 1.785s cpu time, 0.279s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Polynomials.MPoly_Type"
### 0.593s elapsed time, 2.347s cpu time, 0.370s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Phantom_Type"
### 0.588s elapsed time, 2.338s cpu time, 0.306s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### theory "HOL-Algebra.Complete_Lattice"
### 0.773s elapsed time, 3.062s cpu time, 0.528s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
### theory "Polynomials.More_MPoly_Type"
### 0.361s elapsed time, 1.425s cpu time, 0.256s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.098s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Ordered_Euclidean_Space")
### Additional type variable(s) in locale specification "card2": 'a
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
Proofs for inductive predicate(s) "pred_mset"
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
Proofs for inductive predicate(s) "rel_mset'"
### theory "HOL-Library.Product_Order"
### 0.228s elapsed time, 0.910s cpu time, 0.115s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
  Proving monotonicity ...
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
### theory "HOL-Library.Multiset"
### 4.769s elapsed time, 18.288s cpu time, 4.483s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 0.989s cpu time, 0.125s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "HOL-Library.Cardinality"
### 0.820s elapsed time, 3.257s cpu time, 0.514s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.798s elapsed time, 3.167s cpu time, 0.465s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Combinatorics.Permutations"
### 1.062s elapsed time, 4.211s cpu time, 0.601s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.127s elapsed time, 0.500s cpu time, 0.116s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
### theory "HOL-Algebra.Group"
### 1.841s elapsed time, 7.304s cpu time, 1.096s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.210s elapsed time, 4.810s cpu time, 0.568s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.Coset"
### 1.343s elapsed time, 5.327s cpu time, 0.663s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
Found termination order: "size <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Algebra.FiniteProduct"
### 0.538s elapsed time, 2.133s cpu time, 0.326s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "HOL-Library.Tree"
### 2.136s elapsed time, 8.477s cpu time, 1.147s GC time
Loading theory "Draft.Templates" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.282s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
### theory "HOL-Library.Countable_Set"
### 0.482s elapsed time, 1.913s cpu time, 0.231s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.652s elapsed time, 2.583s cpu time, 0.278s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "HOL-Library.Set_Idioms"
### 0.229s elapsed time, 0.916s cpu time, 0.088s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.222s elapsed time, 8.812s cpu time, 0.882s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.819s elapsed time, 11.191s cpu time, 1.076s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.056s elapsed time, 4.188s cpu time, 0.475s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
### theory "HOL-Analysis.Abstract_Topology"
### 2.603s elapsed time, 10.319s cpu time, 1.120s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
### theory "HOL-Analysis.Abstract_Limits"
### 0.240s elapsed time, 0.956s cpu time, 0.108s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.055s elapsed time, 28.002s cpu time, 3.425s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
### theory "HOL-Analysis.L2_Norm"
### 0.111s elapsed time, 0.431s cpu time, 0.081s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
### theory "HOL-Algebra.Module"
### 1.545s elapsed time, 6.145s cpu time, 0.773s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
### theory "HOL-Analysis.Operator_Norm"
### 0.097s elapsed time, 0.382s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.283s elapsed time, 5.099s cpu time, 0.682s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.988s elapsed time, 3.921s cpu time, 0.501s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.900s elapsed time, 15.467s cpu time, 1.975s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
### theory "HOL-Analysis.Elementary_Topology"
### 2.998s elapsed time, 11.546s cpu time, 4.449s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.845s elapsed time, 3.323s cpu time, 0.387s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.685s elapsed time, 10.278s cpu time, 4.152s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.677s elapsed time, 2.672s cpu time, 0.188s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
bundle vec_syntax
bundle no_vec_syntax
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.007s elapsed time, 3.952s cpu time, 0.461s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Analysis.Affine"
### 0.523s elapsed time, 2.038s cpu time, 0.359s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.714s elapsed time, 6.725s cpu time, 0.820s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 7.309s elapsed time, 28.455s cpu time, 6.566s GC time
Loading theory "Polynomials.MPoly_Type_Univariate" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set")
### theory "HOL-Analysis.Convex"
### 1.019s elapsed time, 3.968s cpu time, 0.619s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.081s elapsed time, 0.309s cpu time, 0.076s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
### theory "Polynomials.MPoly_Type_Univariate"
### 0.643s elapsed time, 2.513s cpu time, 0.333s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Analysis.Cartesian_Space"
### 1.734s elapsed time, 6.756s cpu time, 1.050s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
### theory "HOL-Library.Discrete"
### 0.178s elapsed time, 0.679s cpu time, 0.098s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
### theory "HOL-Library.Indicator_Function"
### 0.438s elapsed time, 1.698s cpu time, 0.215s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
### theory "HOL-Library.Liminf_Limsup"
### 0.534s elapsed time, 2.054s cpu time, 0.268s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
### theory "HOL-Library.Order_Continuity"
### 0.576s elapsed time, 2.267s cpu time, 0.152s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 11.923s elapsed time, 46.266s cpu time, 12.596s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
locale fract_as_normalized_quot
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.505s elapsed time, 1.975s cpu time, 0.183s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
### theory "HOL-Analysis.Abstract_Topology_2"
### 2.515s elapsed time, 9.550s cpu time, 4.885s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.740s elapsed time, 2.904s cpu time, 0.249s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Connected"
### 0.324s elapsed time, 1.261s cpu time, 0.142s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### Cannot skip proof of schematic goal statement
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 4.353s elapsed time, 16.707s cpu time, 5.717s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
### theory "HOL-Analysis.Function_Topology"
### 0.723s elapsed time, 2.817s cpu time, 0.389s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.188s elapsed time, 4.640s cpu time, 0.612s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_List" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.DL_Missing_List"
### 0.120s elapsed time, 0.469s cpu time, 0.053s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_Sublist" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Draft.Tensor_Matricization")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### theory "Jordan_Normal_Form.DL_Missing_Sublist"
### 0.356s elapsed time, 1.370s cpu time, 0.248s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.016s elapsed time, 7.833s cpu time, 1.119s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.476s elapsed time, 5.691s cpu time, 0.863s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "HOL-Analysis.Norm_Arith"
### 0.354s elapsed time, 1.356s cpu time, 0.188s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
### theory "VectorSpace.FunctionLemmas"
### 0.033s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
### theory "VectorSpace.RingModuleFacts"
### 18.434s elapsed time, 61.926s cpu time, 59.306s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 19.196s elapsed time, 64.857s cpu time, 59.703s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Library.Extended_Real"
### 20.876s elapsed time, 71.403s cpu time, 60.534s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.381s elapsed time, 1.498s cpu time, 0.147s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "Polynomial_Interpolation.Ring_Hom"
### 21.148s elapsed time, 72.539s cpu time, 60.452s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect")
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.652s elapsed time, 6.518s cpu time, 0.694s GC time
Loading theory "HOL-Analysis.Sigma_Algebra" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable")
locale subset_class
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "subset_class \<Omega> M"
locale semiring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "semiring_of_sets \<Omega> M"
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
locale ring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "ring_of_sets \<Omega> M"
locale algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "algebra \<Omega> M"
locale sigma_algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "sigma_algebra \<Omega> M"
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.242s elapsed time, 8.867s cpu time, 0.854s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
Proofs for inductive predicate(s) "sigma_setsp"
  Proving monotonicity ...
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Proofs for inductive predicate(s) "smallest_ccdi_setsp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
locale Dynkin_system
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "Dynkin_system \<Omega> M"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.165s elapsed time, 4.594s cpu time, 0.637s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
### theory "HOL-Analysis.Sigma_Algebra"
### 1.695s elapsed time, 6.701s cpu time, 0.796s GC time
Loading theory "HOL-Analysis.Measurable" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space")
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
signature MEASURABLE =
  sig
    val add_del_cong_thm: bool -> thm -> Context.generic -> Context.generic
    val add_local_cong: thm -> Proof.context -> Proof.context
    val add_preprocessor:
       string -> preprocessor -> Context.generic -> Context.generic
    val cong_thm_attr: attribute context_parser
    val del_preprocessor: string -> Context.generic -> Context.generic
    val dest_thm_attr: attribute context_parser
    val get_all: Context.generic -> thm list
    val get_cong: Context.generic -> thm list
    val get_dest: Context.generic -> thm list
    datatype level = Concrete | Generic
    val measurable_tac: Proof.context -> thm list -> tactic
    val measurable_thm_attr: bool * (bool * level) -> attribute
    val prepare_facts: Proof.context -> thm list -> thm list * Proof.context
    type preprocessor = thm -> Proof.context -> thm list * Proof.context
    val simproc: Proof.context -> cterm -> thm option
  end
structure Measurable: MEASURABLE
### theory "VectorSpace.LinearCombinations"
### 3.789s elapsed time, 14.977s cpu time, 1.542s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### theory "HOL-Analysis.Measurable"
### 0.556s elapsed time, 2.188s cpu time, 0.198s GC time
Loading theory "HOL-Analysis.Measure_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
locale sigma_finite_measure
  fixes M :: "'a measure"
  assumes "sigma_finite_measure M"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.110s elapsed time, 4.384s cpu time, 0.525s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
locale finite_measure
  fixes M :: "'a measure"
  assumes "finite_measure M"
### theory "Jordan_Normal_Form.Matrix"
### 3.989s elapsed time, 15.729s cpu time, 1.882s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  measure :: (type) order_bot
  bot_measure == bot :: 'a measure
  less_eq_measure == less_eq :: 'a measure => 'a measure => bool
  less_measure == less :: 'a measure => 'a measure => bool
Proofs for inductive predicate(s) "less_eq_measure"
  Proving monotonicity ...
instantiation
  measure :: (type) semilattice_sup
  sup_measure == sup :: 'a measure => 'a measure => 'a measure
instantiation
  measure :: (type) complete_lattice
  Inf_measure == Inf :: 'a measure set => 'a measure
  Sup_measure == Sup :: 'a measure set => 'a measure
  top_measure == top :: 'a measure
  inf_measure == inf :: 'a measure => 'a measure => 'a measure
### theory "HOL-Analysis.Summation_Tests"
### 0.929s elapsed time, 3.653s cpu time, 0.553s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Measure_Space"
### 2.038s elapsed time, 8.031s cpu time, 1.079s GC time
Loading theory "HOL-Analysis.Caratheodory" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Line_Segment"
### 0.981s elapsed time, 3.868s cpu time, 0.522s GC time
Loading theory "Draft.DL_Concrete_Matrices" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Draft.DL_Deep_Model")
### theory "Draft.DL_Concrete_Matrices"
### 0.119s elapsed time, 0.468s cpu time, 0.091s GC time
Loading theory "Draft.DL_Flatten_Matrix" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
### theory "Draft.DL_Flatten_Matrix"
### 0.072s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "Draft.DL_Network" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly" via "Draft.DL_Deep_Model")
### theory "HOL-Analysis.Caratheodory"
### 0.423s elapsed time, 1.656s cpu time, 0.304s GC time
Loading theory "Draft.Tensor_Matricization" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank")
### theory "HOL-Analysis.Uniform_Limit"
### 0.663s elapsed time, 2.591s cpu time, 0.397s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 3.826s elapsed time, 15.072s cpu time, 1.836s GC time
Loading theory "Jordan_Normal_Form.DL_Submatrix" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank")
### theory "Jordan_Normal_Form.DL_Submatrix"
### 0.297s elapsed time, 1.175s cpu time, 0.074s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
### Missing patterns in function definition:
### !!v va. digit_decode (v # va) [] = undefined
### !!v va. digit_decode [] (v # va) = undefined
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Tensor_Matricization"
### 1.204s elapsed time, 4.733s cpu time, 0.514s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "VectorSpace.SumSpaces"
### 0.455s elapsed time, 1.789s cpu time, 0.206s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
Found termination order: "size <*mlex*> {}"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.300s elapsed time, 5.076s cpu time, 0.751s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_net"
  Proving monotonicity ...
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.068s elapsed time, 8.100s cpu time, 1.055s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.476s elapsed time, 1.851s cpu time, 0.286s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
consts
  extract_weights :: "bool => real mat convnet => nat => real"
Proofs for inductive predicate(s) "balanced_net"
  Proving monotonicity ...
Proofs for inductive predicate(s) "shared_weight_net"
  Proving monotonicity ...
### theory "Draft.DL_Network"
### 3.107s elapsed time, 12.145s cpu time, 1.676s GC time
Loading theory "Draft.DL_Shallow_Model" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity")
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.DL_Shallow_Model"
### 0.445s elapsed time, 1.733s cpu time, 0.228s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
"- \<infinity>"
  :: "ereal"
### theory "Jordan_Normal_Form.Determinant"
### 3.451s elapsed time, 13.103s cpu time, 7.443s GC time
Loading theory "Draft.DL_Deep_Model" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Deep_Model_Poly")
### theory "HOL-Analysis.Derivative"
### 3.859s elapsed time, 14.690s cpu time, 7.661s GC time
Loading theory "HOL-Analysis.Borel_Space" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
"\<infinity>"
  :: "ereal"
"ereal (13 / 4)"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
### theory "VectorSpace.VectorSpace"
### 6.128s elapsed time, 23.242s cpu time, 8.897s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
Found termination order:
  "case_sum (%p. size_list size (snd (snd p)))
    (%p. size_list size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### theory "HOL-Analysis.Borel_Space"
### 2.045s elapsed time, 7.325s cpu time, 1.014s GC time
Loading theory "HOL-Analysis.Nonnegative_Lebesgue_Integration" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure")
Loading theory "HOL-Analysis.Regularity" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure")
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
Found termination order:
  "case_sum (%p. size_list size (snd (snd p)))
    (%p. size_list size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
### Ambiguous input (line 289 of "$AFP/Deep_Learning/DL_Deep_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor_Product.tensor_prod_otimes"
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j)))
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j))))
###     ("_applC" ("_position" tensor_from_lookup)
###       ("_cargs" ("_list" ("_args" ("_position" M) ("_position" M)))
###         ("_lambda" ("_position" is)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" is)
###               ("_list" ("_args" ("_position" j) ("_position" j))))
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j)))
###       ("_indexdefault")
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j))))
###     ("_applC" ("_position" tensor_from_lookup)
###       ("_cargs" ("_list" ("_args" ("_position" M) ("_position" M)))
###         ("_lambda" ("_position" is)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" is)
###               ("_list" ("_args" ("_position" j) ("_position" j))))
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 308 of "$AFP/Deep_Learning/DL_Deep_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.vec_index"
###       ("_applC" ("_position" tensors_from_net)
###         ("_applC" ("_position" witness')
###           ("_cargs" ("_position" r0) ("_list" ("_position" M)))))
###       ("_position" j))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" j) ("_position" M))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j)))
###         ("_indexdefault")
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j))))
###       ("_applC" ("_position" tensor0)
###         ("_list" ("_args" ("_position" M) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.vec_index"
###       ("_applC" ("_position" tensors_from_net)
###         ("_applC" ("_position" witness')
###           ("_cargs" ("_position" r0) ("_list" ("_position" M)))))
###       ("_position" j))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" j) ("_position" M))
###       ("\<^const>Tensor_Product.tensor_prod_otimes"
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j)))
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j))))
###       ("_applC" ("_position" tensor0)
###         ("_list" ("_args" ("_position" M) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale deep_model_correct_params
  fixes shared_weights :: "bool"
    and rs :: "nat list"
  assumes "deep_model_correct_params rs"
locale deep_model_correct_params_y
  fixes shared_weights :: "bool"
    and rs :: "nat list"
    and y :: "nat"
  assumes "deep_model_correct_params_y rs y"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Draft.DL_Deep_Model"
### 2.806s elapsed time, 10.301s cpu time, 1.543s GC time
Loading theory "Draft.DL_Deep_Model_Poly" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity")
### theory "HOL-Analysis.Regularity"
### 0.740s elapsed time, 2.908s cpu time, 0.439s GC time
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
locale deep_model_correct_params_y
  fixes shared_weights :: "bool"
    and rs :: "nat list"
    and y :: "nat"
  assumes "deep_model_correct_params_y rs y"
### theory "Draft.DL_Deep_Model_Poly"
### 2.481s elapsed time, 8.919s cpu time, 7.279s GC time
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "HOL-Analysis.Nonnegative_Lebesgue_Integration"
### 3.561s elapsed time, 12.453s cpu time, 7.864s GC time
Loading theory "HOL-Analysis.Binary_Product_Measure" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 4.191s elapsed time, 14.295s cpu time, 8.224s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank" via "Jordan_Normal_Form.DL_Rank")
locale pair_sigma_finite
  fixes M1 :: "'a measure"
    and M2 :: "'b measure"
  assumes "pair_sigma_finite M1 M2"
### theory "HOL-Analysis.Binary_Product_Measure"
### 0.463s elapsed time, 1.000s cpu time, 0.167s GC time
Loading theory "HOL-Analysis.Finite_Product_Measure" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure")
### Cannot skip proof of schematic goal statement
locale product_sigma_finite
  fixes M :: "'i => 'a measure"
  assumes "product_sigma_finite M"
locale finite_product_sigma_finite
  fixes M :: "'i => 'a measure"
    and I :: "'i set"
  assumes "finite_product_sigma_finite M I"
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Finite_Product_Measure"
### 0.718s elapsed time, 1.531s cpu time, 0.217s GC time
Loading theory "HOL-Analysis.Bochner_Integration" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Complete_Measure")
Proofs for inductive predicate(s) "simple_bochner_integrable"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_bochner_integral"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
Proofs for inductive predicate(s) "integrable"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### theory "HOL-Analysis.Bochner_Integration"
### 1.210s elapsed time, 2.631s cpu time, 0.472s GC time
Loading theory "HOL-Analysis.Complete_Measure" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional" via "HOL-Analysis.Lebesgue_Measure")
### Cannot skip proof of schematic goal statement
locale complete_measure
  fixes M :: "'a measure"
  assumes "complete_measure M"
locale semifinite_measure
  fixes M :: "'a measure"
  assumes "semifinite_measure M"
locale locally_determined_measure
  fixes M :: "'a measure"
  assumes "locally_determined_measure M"
locale cld_measure
  fixes M :: "'a measure"
  assumes "cld_measure M"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "HOL-Analysis.Complete_Measure"
### 0.416s elapsed time, 0.888s cpu time, 0.129s GC time
Loading theory "HOL-Analysis.Lebesgue_Measure" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set" via "Draft.Lebesgue_Functional")
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
Proofs for inductive predicate(s) "fsigma"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gdelta"
  Proving monotonicity ...
### theory "HOL-Analysis.Lebesgue_Measure"
### 1.264s elapsed time, 2.696s cpu time, 0.402s GC time
Loading theory "Draft.Lebesgue_Functional" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.Lebesgue_Zero_Set")
### theory "Draft.Lebesgue_Functional"
### 0.072s elapsed time, 0.151s cpu time, 0.000s GC time
Loading theory "Draft.Lebesgue_Zero_Set" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity")
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.Lebesgue_Zero_Set"
### 0.511s elapsed time, 1.089s cpu time, 0.164s GC time
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 6.576s elapsed time, 12.194s cpu time, 1.953s GC time
Loading theory "Jordan_Normal_Form.DL_Rank" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity" via "Draft.DL_Rank_CP_Rank")
### theory "Jordan_Normal_Form.DL_Rank"
### 3.619s elapsed time, 4.179s cpu time, 0.604s GC time
Loading theory "Draft.DL_Rank_CP_Rank" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity")
Loading theory "Jordan_Normal_Form.DL_Rank_Submatrix" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates" via "Draft.DL_Fundamental_Theorem_Network_Capacity")
### theory "Jordan_Normal_Form.DL_Rank_Submatrix"
### 0.615s elapsed time, 1.303s cpu time, 0.181s GC time
### theory "Draft.DL_Rank_CP_Rank"
### 1.250s elapsed time, 2.021s cpu time, 0.295s GC time
Loading theory "Draft.DL_Fundamental_Theorem_Network_Capacity" (required by "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates")
locale deep_model_correct_params_y
  fixes shared_weights :: "bool"
    and rs :: "nat list"
    and y :: "nat"
  assumes "deep_model_correct_params_y rs y"
### theory "Draft.DL_Fundamental_Theorem_Network_Capacity"
### 1.740s elapsed time, 1.920s cpu time, 0.252s GC time
Loading theory "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.DL_Fundamental_Theorem_Network_CapacityMoreTemplates"
### 3.597s elapsed time, 9.641s cpu time, 7.826s GC time
val it = (): unit
