Loading theory "Draft.DL_Missing_Finite_Set" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
Loading theory "Draft.Tensor" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus" via "Draft.Tensor_Subtensor")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
### theory "Draft.DL_Missing_Finite_Set"
### 0.038s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
Proofs for inductive predicate(s) "valid_index"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.138s elapsed time, 0.574s cpu time, 0.029s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Tensor"
### 0.386s elapsed time, 1.551s cpu time, 0.068s GC time
Loading theory "Draft.Tensor_Subtensor" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "Draft.Tensor_Subtensor"
### 0.085s elapsed time, 0.328s cpu time, 0.055s GC time
Loading theory "Draft.Tensor_Plus" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Draft.Tensor_Product" via "Draft.Tensor_Scalar_Mult")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
instantiation
  tensor :: (semigroup_add) plus
  plus_tensor == plus :: 'a tensor => 'a tensor => 'a tensor
### theory "HOL-Library.Cancellation"
### 0.473s elapsed time, 1.862s cpu time, 0.122s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
### theory "HOL-Library.FuncSet"
### 0.369s elapsed time, 1.457s cpu time, 0.093s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "Draft.Tensor_Plus"
### 0.139s elapsed time, 0.535s cpu time, 0.073s GC time
Loading theory "Draft.Tensor_Scalar_Mult" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Draft.Tensor_Product")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
### theory "Draft.Tensor_Scalar_Mult"
### 0.098s elapsed time, 0.379s cpu time, 0.086s GC time
Loading theory "Draft.Tensor_Product" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
instantiation
  tensor :: (ring) semigroup_mult
  times_tensor == times :: 'a tensor => 'a tensor => 'a tensor
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
instantiation
  tensor :: (ring_1) monoid_mult
  one_tensor == one_class.one :: 'a tensor
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.814s elapsed time, 3.231s cpu time, 0.281s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
### theory "Draft.Tensor_Product"
### 0.103s elapsed time, 0.416s cpu time, 0.000s GC time
Loading theory "Draft.Tensor_Unit_Vec" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
### theory "Draft.Tensor_Unit_Vec"
### 0.242s elapsed time, 0.768s cpu time, 0.566s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.476s cpu time, 0.045s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Disjoint_Sets"
### 0.528s elapsed time, 1.885s cpu time, 0.727s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Algebra.Congruence"
### 0.976s elapsed time, 3.655s cpu time, 0.973s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Infinite_Set"
### 0.339s elapsed time, 1.337s cpu time, 0.204s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.195s elapsed time, 0.773s cpu time, 0.088s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
### theory "HOL-Library.Set_Algebras"
### 0.268s elapsed time, 1.048s cpu time, 0.189s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.365s elapsed time, 1.432s cpu time, 0.189s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Algebra.Order"
### 1.259s elapsed time, 4.752s cpu time, 1.411s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.309s elapsed time, 4.944s cpu time, 1.472s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.197s elapsed time, 4.521s cpu time, 1.554s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.193s elapsed time, 4.510s cpu time, 1.532s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.081s elapsed time, 0.325s cpu time, 0.065s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.781s elapsed time, 10.578s cpu time, 3.069s GC time
Loading theory "Draft.Templates" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.ExtrEqs")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.109s elapsed time, 0.426s cpu time, 0.151s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DL_Deep_ModelMoreTemplates")
Proofs for inductive predicate(s) "pw_leq"
### theory "HOL-Algebra.Complete_Lattice"
### 0.761s elapsed time, 3.010s cpu time, 0.444s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
  Proving monotonicity ...
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.752s elapsed time, 18.152s cpu time, 4.618s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.770s elapsed time, 3.048s cpu time, 0.418s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Algebra.Group"
### 1.670s elapsed time, 6.617s cpu time, 0.942s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Permutations"
### 1.039s elapsed time, 4.126s cpu time, 0.618s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.098s elapsed time, 0.396s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_List" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.DL_Missing_List"
### 0.136s elapsed time, 0.538s cpu time, 0.106s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_Sublist" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.Tensor_Matricization")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.FiniteProduct"
### 0.524s elapsed time, 2.080s cpu time, 0.296s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "Jordan_Normal_Form.DL_Missing_Sublist"
### 0.305s elapsed time, 1.203s cpu time, 0.219s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "Jordan_Normal_Form.Conjugate"
### 3.241s elapsed time, 12.422s cpu time, 1.692s GC time
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.338s elapsed time, 5.936s cpu time, 0.640s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix")
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.263s elapsed time, 3.857s cpu time, 0.325s GC time
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.004s elapsed time, 17.845s cpu time, 1.989s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
consts
  Poly :: "'a list => 'a poly"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.263s elapsed time, 10.452s cpu time, 0.929s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network" via "Jordan_Normal_Form.Matrix")
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.291s elapsed time, 5.264s cpu time, 0.511s GC time
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.930s elapsed time, 9.073s cpu time, 0.943s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "HOL-Computational_Algebra.Polynomial"
### 5.616s elapsed time, 18.509s cpu time, 1.963s GC time
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 3.167s elapsed time, 8.183s cpu time, 1.012s GC time
Loading theory "Draft.DL_Concrete_Matrices" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
Loading theory "Draft.DL_Flatten_Matrix" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Draft.DL_Network")
Loading theory "Draft.Tensor_Matricization" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
### theory "Draft.DL_Concrete_Matrices"
### 0.079s elapsed time, 0.308s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.DL_Submatrix" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
### theory "Draft.DL_Flatten_Matrix"
### 0.091s elapsed time, 0.354s cpu time, 0.000s GC time
Loading theory "Draft.DL_Network" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
### theory "Jordan_Normal_Form.DL_Submatrix"
### 0.322s elapsed time, 1.274s cpu time, 0.203s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. digit_decode (v # va) [] = undefined
### !!v va. digit_decode [] (v # va) = undefined
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Tensor_Matricization"
### 1.153s elapsed time, 4.586s cpu time, 0.563s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.620s elapsed time, 27.303s cpu time, 3.111s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.190s elapsed time, 4.387s cpu time, 0.619s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.470s elapsed time, 1.479s cpu time, 0.178s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model" via "Jordan_Normal_Form.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.400s elapsed time, 1.312s cpu time, 0.137s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "valid_net"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.937s elapsed time, 2.316s cpu time, 0.251s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.DL_Deep_ModelMoreTemplates" via "Draft.DL_Deep_Model")
consts
  extract_weights :: "bool => real mat convnet => nat => real"
Proofs for inductive predicate(s) "balanced_net"
  Proving monotonicity ...
Proofs for inductive predicate(s) "shared_weight_net"
  Proving monotonicity ...
### theory "Draft.DL_Network"
### 2.725s elapsed time, 8.784s cpu time, 1.233s GC time
### theory "Jordan_Normal_Form.Determinant"
### 1.067s elapsed time, 1.329s cpu time, 0.244s GC time
Loading theory "Draft.DL_Deep_Model" (required by "Draft.DL_Deep_ModelMoreTemplates")
Found termination order:
  "case_sum (%p. size_list size (snd (snd p)))
    (%p. size_list size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
Found termination order:
  "case_sum (%p. size_list size (snd (snd p)))
    (%p. size_list size (snd p)) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
### Ambiguous input (line 289 of "$AFP/Deep_Learning/DL_Deep_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tensor_Product.tensor_prod_otimes"
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j)))
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j))))
###     ("_applC" ("_position" tensor_from_lookup)
###       ("_cargs" ("_list" ("_args" ("_position" M) ("_position" M)))
###         ("_lambda" ("_position" is)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" is)
###               ("_list" ("_args" ("_position" j) ("_position" j))))
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Group.monoid.mult_indexed"
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j)))
###       ("_indexdefault")
###       ("_applC" ("_position" unit_vec)
###         ("_cargs" ("_position" M) ("_position" j))))
###     ("_applC" ("_position" tensor_from_lookup)
###       ("_cargs" ("_list" ("_args" ("_position" M) ("_position" M)))
###         ("_lambda" ("_position" is)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" is)
###               ("_list" ("_args" ("_position" j) ("_position" j))))
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 308 of "$AFP/Deep_Learning/DL_Deep_Model.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.vec_index"
###       ("_applC" ("_position" tensors_from_net)
###         ("_applC" ("_position" witness')
###           ("_cargs" ("_position" r0) ("_list" ("_position" M)))))
###       ("_position" j))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" j) ("_position" M))
###       ("\<^const>Group.monoid.mult_indexed"
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j)))
###         ("_indexdefault")
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j))))
###       ("_applC" ("_position" tensor0)
###         ("_list" ("_args" ("_position" M) ("_position" M)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Matrix.vec_index"
###       ("_applC" ("_position" tensors_from_net)
###         ("_applC" ("_position" witness')
###           ("_cargs" ("_position" r0) ("_list" ("_position" M)))))
###       ("_position" j))
###     ("\<^const>HOL.If"
###       ("\<^const>Orderings.ord_class.less" ("_position" j) ("_position" M))
###       ("\<^const>Tensor_Product.tensor_prod_otimes"
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j)))
###         ("_applC" ("_position" unit_vec)
###           ("_cargs" ("_position" M) ("_position" j))))
###       ("_applC" ("_position" tensor0)
###         ("_list" ("_args" ("_position" M) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale deep_model_correct_params
  fixes shared_weights :: "bool"
    and rs :: "nat list"
  assumes "deep_model_correct_params rs"
locale deep_model_correct_params_y
  fixes shared_weights :: "bool"
    and rs :: "nat list"
    and y :: "nat"
  assumes "deep_model_correct_params_y rs y"
### theory "Draft.DL_Deep_Model"
### 2.876s elapsed time, 5.699s cpu time, 3.873s GC time
Loading theory "Draft.DL_Deep_ModelMoreTemplates"
val templateLemmas =
   [("DL_Deep_Model.valid_deep_model'", "valid_net (deep_model' ?r ?rs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("DL_Deep_Model.shared_weight_net_witness",
     "shared_weight_net (witness ?Y ?r ?rs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("DL_Deep_Model.valid_deep_model", "valid_net (deep_model ?Y ?r ?rs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("DL_Deep_Model.witness'_valid", "valid_net' (witness' ?Y ?rs)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("DL_Deep_Model.witness_valid", "valid_net' (witness ?Y ?r ?rs)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("DL_Deep_Model.witness'_is_deep_model",
     "remove_weights (witness' ?Y ?rs) = deep_model' ?Y ?rs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("DL_Deep_Model.witness_is_deep_model",
     "remove_weights (witness ?Y ?r ?rs) = deep_model ?Y ?r ?rs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("DL_Deep_Model.length_output_witness'",
     "dim_vec (tensors_from_net (witness'_l ?rs)) = ?rs ! 0",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 1))),
    ("DL_Deep_Model.length_output_witness",
     "dim_vec (tensors_from_net (witness_l ?rs)) = ?rs ! 0",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)),
             template_app
              (template_hole 0,
               template_app (template_hole 0, template_var 0))))),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 2))),
    ("DL_Deep_Model.witness_l1",
     "witness ?Y ?r0.0 [?M] =
      Conv (all1_matrix ?Y ?r0.0) (witness' ?r0.0 [?M])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("DL_Deep_Model.length_output_deep_model'",
     "remove_weights ?m = deep_model'_l ?rs ==>
      dim_vec (tensors_from_net ?m) = ?rs ! 0",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4)),
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)))),
    ("DL_Deep_Model.witness_l0'",
     "witness' ?Y [?M] =
      Pool (Conv (id_matrix ?Y ?M) (Input ?M))
       (Conv (id_matrix ?Y ?M) (Input ?M))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("DL_Deep_Model.length_output_deep_model",
     "remove_weights ?m = deep_model_l ?rs ==>
      dim_vec (tensors_from_net ?m) = ?rs ! 0",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 4)),
            template_app
             (template_hole 3,
              template_app (template_hole 3, template_var 0))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)))),
    ("DL_Deep_Model.tensor_prod_unit_vec",
     "unit_vec ?M ?j \<otimes> unit_vec ?M ?j =
      tensor_from_lookup [?M, ?M]
       (%is. if is = [?j, ?j] then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4))),
         t_empty))),
    ("DL_Deep_Model.input_sizes_deep_model'",
     "1 <= length ?rs ==>
      input_sizes (deep_model'_l ?rs) =
      replicate (2 ^ (length ?rs - 1)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 14,
          template_app (template_hole 13, template_var 0))],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_hole 8)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 13, template_var 0)),
                 template_hole 14))),
           template_app (template_hole 0, template_var 0))))),
    ("DL_Deep_Model.tensors_ht_l0",
     "?j < ?r0.0 ==>
      tensors_from_net (Conv (id_matrix ?r0.0 ?M) (Input ?M)) $ ?j =
      (if ?j < ?M then unit_vec ?M ?j else tensor0 [?M])",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)),
                 template_app (template_hole 5, template_var 0)))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("DL_Deep_Model.tensors_from_net_Conv_all1",
     "[| valid_net' ?m; ?i < ?nr |]
      ==> tensors_from_net (Conv (all1_matrix ?nr (output_size' ?m)) ?m) $
          ?i =
          listsum (input_sizes ?m) (list_of_vec (tensors_from_net ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 10, template_var 2)))),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_hole 0,
             template_app (template_hole 6, template_var 2)))))),
    ("DL_Deep_Model.tensors_ht_l0'",
     "?j < ?r0.0 ==>
      tensors_from_net (witness' ?r0.0 [?M]) $ ?j =
      (if ?j < ?M then unit_vec ?M ?j \<otimes> unit_vec ?M ?j
       else tensor0 [?M, ?M])",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))))))),
    ("DL_Deep_Model.tensors_from_net_Conv_copy_first",
     "[| valid_net' ?m; ?i < ?nr; 0 < output_size' ?m |]
      ==> tensors_from_net
           (Conv (copy_first_matrix ?nr (output_size' ?m)) ?m) $
          ?i =
          tensors_from_net ?m $ 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_hole 5,
            template_app (template_hole 8, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 8, template_var 2)))),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_hole 6)))),
    ("DL_Deep_Model.input_sizes_deep_model",
     "2 <= length ?rs ==>
      input_sizes (deep_model_l ?rs) =
      replicate (2 ^ (length ?rs - 2)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 5)),
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 11, template_var 0)),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app (template_hole 0, template_var 0))))),
    ("DL_Deep_Model.tensors_from_net_Conv_id",
     "[| valid_net' ?m; ?i < ?nr |]
      ==> tensors_from_net (Conv (id_matrix ?nr (output_size' ?m)) ?m) $
          ?i =
          (if ?i < output_size' ?m then tensors_from_net ?m $ ?i
           else tensor0 (input_sizes ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 10, template_var 2)))),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 10, template_var 2)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 2)),
               template_var 1)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("DL_Deep_Model.lookup_tensors_ht_l0'",
     "[| ?j < ?r0.0; ?is \<lhd> [?M, ?M] |]
      ==> lookup (tensors_from_net (witness' ?r0.0 [?M]) $ ?j) ?is =
          (if ?is = [?j, ?j] then 1 else 0)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_hole 9)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_app
                           (template_app (template_hole 10, template_var 0),
                            template_hole 9)))),
                    template_var 3)),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 10, template_var 3),
                       template_app
                        (template_app (template_hole 10, template_var 3),
                         template_hole 9)))),
                 template_hole 1),
               template_hole 0)
             )))),
    ("DL_Deep_Model.evaluate_net_Conv_all1",
     "[| valid_net' ?m; input_sizes ?m = map dim_vec ?input; ?i < ?nr |]
      ==> evaluate_net (Conv (all1_matrix ?nr (output_size' ?m)) ?m)
           ?input $
          ?i =
          sum_list (list_of_vec (evaluate_net ?m ?input))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3))
            ),
        template_equation
         (template_app (template_hole 11, template_var 3),
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 13, template_var 3)))),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)))))),
    ("DL_Deep_Model.lookup_tensors_ht_l1",
     "[| ?j < ?r1.0; ?is \<lhd> [?M, ?M] |]
      ==> lookup (tensors_from_net (witness ?r1.0 ?r0.0 [?M]) $ ?j) ?is =
          (if ?is ! 0 = ?is ! 1 & ?is ! 0 < ?r0.0 then 1 else 0)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_hole 13)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 0),
                          template_app
                           (template_app (template_hole 14, template_var 1),
                            template_hole 13)))),
                    template_var 4)),
                template_var 2)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 2),
                             template_hole 3)),
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_hole 3)),
                       template_var 0))),
                 template_hole 1),
               template_hole 0)
             )))),
    ("DL_Deep_Model.evaluate_net_Conv_id",
     "[| valid_net' ?m; input_sizes ?m = map dim_vec ?input; ?j < ?nr |]
      ==> evaluate_net (Conv (id_matrix ?nr (output_size' ?m)) ?m) ?input $
          ?j =
          (if ?j < output_size' ?m then evaluate_net ?m ?input $ ?j
           else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3))
            ),
        template_equation
         (template_app (template_hole 11, template_var 3),
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 13, template_var 3)))),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 13, template_var 3)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_hole 0)))),
    ("DL_Deep_Model.evaluate_net_Conv_copy_first",
     "[| valid_net' ?m; input_sizes ?m = map dim_vec ?input; ?j < ?nr;
         0 < output_size' ?m |]
      ==> evaluate_net (Conv (copy_first_matrix ?nr (output_size' ?m)) ?m)
           ?input $
          ?j =
          evaluate_net ?m ?input $ 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 3))
            ),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_hole 5,
            template_app (template_hole 12, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_hole 5,
                         template_app (template_hole 12, template_var 3)))),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_hole 6)))),
    ("DL_Deep_Model.dims_output_witness'",
     "[| 1 <= length ?rs; !!r. r : set ?rs ==> 0 < r; ?j < ?rs ! 0 |]
      ==> dims (tensors_from_net (witness'_l ?rs) $ ?j) =
          replicate (2 ^ (length ?rs - 1)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 20,
          template_app (template_hole 19, template_var 1)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 13, template_var 1),
            template_hole 14))],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 13, template_var 1),
                       template_hole 14)),
                   template_app (template_hole 7, template_var 1)))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 19, template_var 1)),
                 template_hole 20))),
           template_app (template_hole 0, template_var 1))))),
    ("DL_Deep_Model.dims_output_deep_model'",
     "[| 1 <= length ?rs; !!r. r : set ?rs ==> 0 < r; ?j < ?rs ! 0;
         remove_weights ?m = deep_model'_l ?rs |]
      ==> dims (tensors_from_net ?m $ ?j) =
          replicate (2 ^ (length ?rs - 1)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 22,
          template_app (template_hole 21, template_var 2)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 15, template_var 2),
            template_hole 16)),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 15, template_var 2),
                template_hole 16)),
            template_app (template_hole 11, template_var 2)))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 21, template_var 2)),
                 template_hole 22))),
           template_app (template_hole 0, template_var 2))))),
    ("DL_Deep_Model.dims_output_witness",
     "[| 2 <= length ?rs; !!r. r : set ?rs ==> 0 < r; ?j < ?rs ! 0 |]
      ==> dims (tensors_from_net (witness_l ?rs) $ ?j) =
          replicate (2 ^ (length ?rs - 2)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 20,
            template_app (template_hole 19, template_hole 18)),
          template_app (template_hole 17, template_var 1)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 11, template_var 1),
            template_hole 12))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 11, template_var 1),
                         template_hole 12)),
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_hole 5)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_var 1))))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 20,
                   template_app (template_hole 19, template_hole 18))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 17, template_var 1)),
                 template_app
                  (template_hole 20,
                   template_app (template_hole 19, template_hole 18))))),
           template_app (template_hole 0, template_var 1))))),
    ("DL_Deep_Model.dims_output_deep_model",
     "[| 2 <= length ?rs; !!r. r : set ?rs ==> 0 < r; ?j < ?rs ! 0;
         remove_weights ?m = deep_model_l ?rs |]
      ==> dims (tensors_from_net ?m $ ?j) =
          replicate (2 ^ (length ?rs - 2)) (last ?rs)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 22,
            template_app (template_hole 21, template_hole 20)),
          template_app (template_hole 19, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 13, template_var 2),
            template_hole 14)),
        template_equation
         (template_app (template_hole 11, template_var 0),
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_hole 14)),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_hole 9)),
            template_app
             (template_hole 8,
              template_app (template_hole 8, template_var 2))))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 22,
                   template_app (template_hole 21, template_hole 20))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 19, template_var 2)),
                 template_app
                  (template_hole 22,
                   template_app (template_hole 21, template_hole 20))))),
           template_app (template_hole 0, template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.DL_Deep_ModelMoreTemplates"
### 0.705s elapsed time, 0.948s cpu time, 0.084s GC time
val it = (): unit
