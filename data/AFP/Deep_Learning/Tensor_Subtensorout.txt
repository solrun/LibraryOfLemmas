Loading theory "Draft.Tensor" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.Tensor_Subtensor")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Proofs for inductive predicate(s) "valid_index"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.626s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.273s elapsed time, 1.105s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.350s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Tensor"
### 0.371s elapsed time, 1.489s cpu time, 0.144s GC time
Loading theory "Draft.Tensor_Subtensor" (required by "Draft.Tensor_SubtensorMoreTemplates")
### theory "Draft.Tensor_Subtensor"
### 0.074s elapsed time, 0.302s cpu time, 0.000s GC time
consts
  left :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.762s elapsed time, 2.472s cpu time, 0.260s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.008s elapsed time, 3.109s cpu time, 0.821s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.910s elapsed time, 4.630s cpu time, 1.006s GC time
Loading theory "Draft.Templates" (required by "Draft.Tensor_SubtensorMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Tensor_SubtensorMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.492s cpu time, 0.056s GC time
Loading theory "Draft.Tensor_SubtensorMoreTemplates"
val templateLemmas =
   [("Tensor_Subtensor.length_fixed_length_sublist",
     "Suc ?i * ?l <= length ?xs ==>
      length (fixed_length_sublist ?xs ?l ?i) = ?l",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)),
         template_var 1))),
    ("Tensor_Subtensor.lookup_subtensor1",
     "?i # ?is \<lhd> dims ?A ==>
      lookup (subtensor ?A ?i) ?is = lookup ?A (?i # ?is)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("Tensor_Subtensor.lookup_subtensor",
     "?is \<lhd> dims ?A ==>
      lookup ?A ?is = hd (vec (fold (%i A. subtensor A i) ?is ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, t_empty), template_var 1),
               template_var 0)))))),
    ("Tensor_Subtensor.subtensor_combine_subtensor",
     "dims ?A ~= [] ==>
      subtensor_combine (tl (dims ?A))
       (map (subtensor ?A) [0..<hd (dims ?A)]) =
      ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 9, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 9, template_var 0))))),
         template_var 0))),
    ("Tensor_Subtensor.dims_subtensor",
     "[| dims ?A ~= []; ?i < hd (dims ?A) |]
      ==> dims (subtensor ?A ?i) = tl (dims ?A)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 2,
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 1))))),
    ("Tensor_Subtensor.subtensor_combine_vec",
     "(!!A. A : set ?As ==> dims A = ?ds) ==>
      vec (subtensor_combine ?ds ?As) = concat (map vec ?As)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1))))),
    ("Tensor_Subtensor.subtensor_combine_dims",
     "(!!A. A : set ?As ==> dims A = ?ds) ==>
      dims (subtensor_combine ?ds ?As) = length ?As # ?ds",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Tensor_Subtensor.vec_subtensor",
     "[| dims ?A ~= []; ?i < hd (dims ?A) |]
      ==> vec (subtensor ?A ?i) =
          fixed_length_sublist (vec ?A) (prod_list (tl (dims ?A))) ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 9, template_var 1)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 9, template_var 1)))),
           template_var 0)))),
    ("Tensor_Subtensor.subtensor_subtensor_combine",
     "[| !!A. A : set ?As ==> dims A = ?ds; ?i < length ?As |]
      ==> subtensor (subtensor_combine ?ds ?As) ?i = ?As ! ?i",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Tensor_Subtensor.subtensor_eqI",
     "[| dims ?A ~= []; dims ?A = dims ?B;
         !!i. i < hd (dims ?A) ==> subtensor ?A i = subtensor ?B i |]
      ==> ?A = ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Tensor_Subtensor.subtensor_induct",
     "[| !!A. dims A = [] ==> ?P A;
         !!A. [| dims A ~= [];
                 !!i. i < hd (dims A) ==> ?P (subtensor A i) |]
              ==> ?P A |]
      ==> ?P ?B",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Tensor_Subtensor.subtensor_combine_induct",
     "[| !!A. dims A = [] ==> ?P A;
         !!As ds.
            [| !!A. A : set As ==> ?P A; !!A. A : set As ==> dims A = ds |]
            ==> ?P (subtensor_combine ds As) |]
      ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Tensor_SubtensorMoreTemplates"
### 0.287s elapsed time, 0.376s cpu time, 0.000s GC time
val it = (): unit
