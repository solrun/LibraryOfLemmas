Loading theory "Draft.Tensor" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.Tensor_Plus" via "Draft.Tensor_Subtensor")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Proofs for inductive predicate(s) "valid_index"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.563s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.022s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.294s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Tensor"
### 0.369s elapsed time, 1.474s cpu time, 0.121s GC time
Loading theory "Draft.Tensor_Subtensor" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.Tensor_Plus")
### theory "Draft.Tensor_Subtensor"
### 0.076s elapsed time, 0.304s cpu time, 0.000s GC time
Loading theory "Draft.Tensor_Plus" (required by "Draft.Tensor_PlusMoreTemplates")
instantiation
  tensor :: (semigroup_add) plus
  plus_tensor == plus :: 'a tensor => 'a tensor => 'a tensor
### theory "Draft.Tensor_Plus"
### 0.151s elapsed time, 0.594s cpu time, 0.091s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.984s elapsed time, 3.305s cpu time, 0.826s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.019s elapsed time, 3.260s cpu time, 0.748s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.898s elapsed time, 4.773s cpu time, 0.916s GC time
Loading theory "Draft.Templates" (required by "Draft.Tensor_PlusMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.069s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Tensor_PlusMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.478s elapsed time, 0.515s cpu time, 0.042s GC time
Loading theory "Draft.Tensor_PlusMoreTemplates"
val templateLemmas =
   [("Tensor_Plus.dims_tensor0", "dims (tensor0 ?d) = ?d",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Tensor_Plus.listsum_Nil", "listsum ?ds [] = tensor0 ?ds",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Tensor_Plus.vec_tensor0", "vec (tensor0 ?d) = vec0 (prod_list ?d)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Tensor_Plus.tensor_add_0_right", "?A + tensor0 (dims ?A) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Tensor_Plus.tensor_add_0_left", "tensor0 (dims ?A) + ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0),
       template_var 0)),
    ("Tensor_Plus.tensor_comm", "?A + ?B = ?B + ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Tensor_Plus.listsum_one", "listsum (dims ?A) [?A] = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Tensor_Plus.listsum_Cons",
     "listsum ?ds (?A # ?As) = ?A + listsum ?ds ?As",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Tensor_Plus.lookup_tensor0",
     "?is \<lhd> ?ds ==> lookup (tensor0 ?ds) ?is = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Tensor_Plus.lookup_is_in_vec",
     "?is \<lhd> dims ?A ==> lookup ?A ?is : set (vec ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Tensor_Plus.plus_dim1",
     "dims ?A = dims ?B ==> dims (?A + ?B) = dims ?A",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Tensor_Plus.plus_dim2",
     "dims ?A = dims ?B ==> dims (?A + ?B) = dims ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Tensor_Plus.plus_base",
     "dims ?A = dims ?B ==> ?A + ?B = plus_base ?A ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Tensor_Plus.vec_plus",
     "dims ?A = dims ?B ==> vec (?A + ?B) = vec_plus (vec ?A) (vec ?B)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Tensor_Plus.listsum_dims",
     "(!!A. A : set ?As ==> dims A = ?ds) ==> dims (listsum ?ds ?As) = ?ds",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Tensor_Plus.listsum0",
     "(!!A. A : set ?As ==> A = tensor0 ?ds) ==>
      listsum ?ds ?As = tensor0 ?ds",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Tensor_Plus.subtensor0",
     "[| ?ds ~= []; ?i < hd ?ds |]
      ==> subtensor (tensor0 ?ds) ?i = tensor0 (tl ?ds)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Tensor_Plus.lookup_plus",
     "[| dims ?A = dims ?B; ?is \<lhd> dims ?A |]
      ==> lookup (?A + ?B) ?is = lookup ?A ?is + lookup ?B ?is",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Tensor_Plus.plus_assoc",
     "[| dims ?A = ?ds; dims ?B = ?ds; dims ?C = ?ds |]
      ==> ?A + ?B + ?C = ?A + (?B + ?C)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 2),
        template_equation
         (template_app (template_hole 2, template_var 0), template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Tensor_Plus.lookup_listsum",
     "[| ?is \<lhd> ?ds; !!A. A : set ?As ==> dims A = ?ds |]
      ==> lookup (listsum ?ds ?As) ?is = (SUM A<-?As. lookup A ?is)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Tensor_Plus.subtensor_plus",
     "[| ?i < hd (dims ?A); dims ?A = dims ?B; dims ?A ~= [] |]
      ==> subtensor (?A + ?B) ?i = subtensor ?A ?i + subtensor ?B ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1))),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Tensor_Plus.fixed_length_sublist_plus",
     "[| length ?xs1.0 = ?c * ?l; length ?xs2.0 = ?c * ?l; ?i < ?c |]
      ==> fixed_length_sublist (vec_plus ?xs1.0 ?xs2.0) ?l ?i =
          vec_plus (fixed_length_sublist ?xs1.0 ?l ?i)
           (fixed_length_sublist ?xs2.0 ?l ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_inequation (less_than, template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0))))),
    ("Tensor_Plus.subtensor_listsum",
     "[| !!A. A : set ?As ==> dims A = ?ds; ?ds ~= []; ?i < hd ?ds |]
      ==> subtensor (listsum ?ds ?As) ?i =
          listsum (tl ?ds) (map (%A. subtensor A ?i) ?As)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Tensor_Plus.listsum_all_0_but_one",
     "[| !!i. [| i ~= ?j; i < length ?As |] ==> ?As ! i = tensor0 ?ds;
         dims (?As ! ?j) = ?ds; ?j < length ?As |]
      ==> listsum ?ds ?As = ?As ! ?j",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)),
          template_var 0),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Tensor_PlusMoreTemplates"
### 0.326s elapsed time, 0.456s cpu time, 0.071s GC time
val it = (): unit
