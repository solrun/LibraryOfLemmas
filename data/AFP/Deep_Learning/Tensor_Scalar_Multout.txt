Loading theory "Draft.Tensor" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus" via "Draft.Tensor_Subtensor")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Proofs for inductive predicate(s) "valid_index"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.554s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.836s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.383s elapsed time, 1.535s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Tensor"
### 0.418s elapsed time, 1.682s cpu time, 0.142s GC time
Loading theory "Draft.Tensor_Subtensor" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.Tensor_Scalar_Mult" via "Draft.Tensor_Plus")
### theory "Draft.Tensor_Subtensor"
### 0.098s elapsed time, 0.376s cpu time, 0.100s GC time
Loading theory "Draft.Tensor_Plus" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.Tensor_Scalar_Mult")
instantiation
  tensor :: (semigroup_add) plus
  plus_tensor == plus :: 'a tensor => 'a tensor => 'a tensor
### theory "Draft.Tensor_Plus"
### 0.121s elapsed time, 0.493s cpu time, 0.000s GC time
Loading theory "Draft.Tensor_Scalar_Mult" (required by "Draft.Tensor_Scalar_MultMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Tensor_Scalar_Mult"
### 0.093s elapsed time, 0.361s cpu time, 0.074s GC time
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.783s elapsed time, 2.855s cpu time, 0.336s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.026s elapsed time, 3.204s cpu time, 0.804s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.897s elapsed time, 4.882s cpu time, 0.956s GC time
Loading theory "Draft.Templates" (required by "Draft.Tensor_Scalar_MultMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.106s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Tensor_Scalar_MultMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.463s cpu time, 0.000s GC time
Loading theory "Draft.Tensor_Scalar_MultMoreTemplates"
val templateLemmas =
   [("Tensor_Scalar_Mult.length_vec_smult",
     "length (vec_smult ?\<alpha> ?v) = length ?v",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tensor_Scalar_Mult.vec_smult0",
     "vec_smult (0::?'a) ?as = vec0 (length ?as)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Tensor_Scalar_Mult.dims_smult",
     "dims (?\<alpha> \<cdot> ?A) = dims ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Tensor_Scalar_Mult.tensor_smult0",
     "(0::?'a) \<cdot> ?A = tensor0 (dims ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Tensor_Scalar_Mult.vec_smult",
     "vec (?\<alpha> \<cdot> ?A) = map ((*) ?\<alpha>) (vec ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Tensor_Scalar_Mult.tensor_smult_assoc",
     "?\<alpha> \<cdot> (?\<beta> \<cdot> ?A) =
      ?\<alpha> * ?\<beta> \<cdot> ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Tensor_Scalar_Mult.vec_smult_Cons",
     "vec_smult ?\<alpha> (?a # ?as) =
      ?\<alpha> * ?a # vec_smult ?\<alpha> ?as",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Tensor_Scalar_Mult.vec_smult_distr_right",
     "vec_smult (?\<alpha> + ?\<beta>) ?as =
      vec_plus (vec_smult ?\<alpha> ?as) (vec_smult ?\<beta> ?as)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Tensor_Scalar_Mult.tensor_smult_distr_right",
     "(?\<alpha> + ?\<beta>) \<cdot> ?A =
      ?\<alpha> \<cdot> ?A + ?\<beta> \<cdot> ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Tensor_Scalar_Mult.vec_plus_Cons",
     "vec_plus (?a # ?as) (?b # ?bs) = (?a + ?b) # vec_plus ?as ?bs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Tensor_Scalar_Mult.lookup_smult",
     "?is \<lhd> dims ?A ==>
      lookup (?\<alpha> \<cdot> ?A) ?is = ?\<alpha> * lookup ?A ?is",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Tensor_Scalar_Mult.vec_smult_distr_left",
     "length ?as = length ?bs ==>
      vec_smult ?\<alpha> (vec_plus ?as ?bs) =
      vec_plus (vec_smult ?\<alpha> ?as) (vec_smult ?\<alpha> ?bs)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Tensor_Scalar_Mult.tensor_smult_distr_left",
     "dims ?A = dims ?B ==>
      ?\<alpha> \<cdot> (?A + ?B) =
      ?\<alpha> \<cdot> ?A + ?\<alpha> \<cdot> ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Tensor_Scalar_Mult.smult_subtensor",
     "[| dims ?A ~= []; ?i < hd (dims ?A) |]
      ==> ?\<alpha> \<cdot> subtensor ?A ?i =
          subtensor (?\<alpha> \<cdot> ?A) ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 6, template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Tensor_Scalar_Mult.smult_fixed_length_sublist",
     "[| length ?xs = ?l * ?c; ?i < ?c |]
      ==> fixed_length_sublist (vec_smult ?\<alpha> ?xs) ?l ?i =
          vec_smult ?\<alpha> (fixed_length_sublist ?xs ?l ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_var 3),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.Tensor_Scalar_MultMoreTemplates"
### 0.320s elapsed time, 0.443s cpu time, 0.056s GC time
val it = (): unit
