Loading theory "HOL-Library.Cancellation" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Card_Partitions.Set_Partition" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.564s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.277s cpu time, 0.104s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.821s cpu time, 0.066s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.406s elapsed time, 1.623s cpu time, 0.104s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Card_Partitions.Set_Partition")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.445s elapsed time, 1.778s cpu time, 0.189s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  prefixes :: "'a list => 'a list list"
### theory "HOL-Library.Disjoint_Sets"
### 0.293s elapsed time, 1.155s cpu time, 0.189s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Card_Partitions.Set_Partition"
### 0.333s elapsed time, 1.167s cpu time, 0.640s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Proofs for inductive predicate(s) "list_emb"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.154s elapsed time, 4.385s cpu time, 1.224s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "HOL-Library.Sublist"
### 1.716s elapsed time, 6.605s cpu time, 1.530s GC time
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.854s elapsed time, 3.151s cpu time, 0.473s GC time
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.942s elapsed time, 6.196s cpu time, 0.977s GC time
Loading theory "Draft.Templates" (required by "Draft.BIBDMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BIBDMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.133s cpu time, 0.126s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.427s elapsed time, 9.981s cpu time, 1.971s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.183s elapsed time, 0.299s cpu time, 0.073s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.852s elapsed time, 1.666s cpu time, 1.064s GC time
Loading theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
### theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset"
### 0.097s elapsed time, 0.136s cpu time, 0.055s GC time
Loading theory "Draft.Multisets_Extras" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics")
class ordered_semiring = ordered_comm_monoid_add + semiring +
  assumes
    "mult_left_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> c * a <= c * b"
  assumes
    "mult_right_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> a * c <= b * c"
### theory "Draft.Multisets_Extras"
### 0.509s elapsed time, 0.559s cpu time, 0.068s GC time
Loading theory "Draft.Design_Basics" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs" via "Draft.Design_Operations")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale simple_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_incidence_system \<V> \<B>"
locale simple_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
### theory "Draft.Design_Basics"
### 0.491s elapsed time, 0.567s cpu time, 0.106s GC time
Loading theory "Draft.Design_Operations" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD" via "Draft.Block_Designs")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale two_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_set_systems \<V> \<B> \<V>' \<B>'"
locale two_fin_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_fin_set_systems \<V> \<B> \<V>' \<B>'"
locale two_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs \<V> \<B> \<V>' \<B>'"
locale two_designs_proper
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs_proper \<V> \<B> \<V>' \<B>'"
### theory "Draft.Design_Operations"
### 0.919s elapsed time, 1.797s cpu time, 1.231s GC time
Loading theory "Draft.Block_Designs" (required by "Draft.BIBDMoreTemplates" via "Draft.BIBD")
locale K_block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "K_block_design \<V> \<B> \<K>"
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale pairwise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "pairwise_balance \<V> \<B> \<Lambda>"
locale tBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "tBD \<V> \<B> \<t> \<Lambda>\<^sub>t \<K>"
locale \<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "\<Lambda>_PBD \<V> \<B> \<Lambda> \<K>"
locale PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "PBD \<V> \<B> \<K>"
locale k_\<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_\<Lambda>_PBD \<V> \<B> \<Lambda> \<k>"
locale k_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_PBD \<V> \<B> \<k>"
locale t_covering_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_covering_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale t_packing_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_packing_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale constant_rep_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and design_rep_number :: "nat"  (\<open>\<r>\<close>)
  assumes "constant_rep_design \<V> \<B> \<r>"
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale steiner_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
  assumes "steiner_system \<V> \<B> \<k> \<t>"
locale two_t_wise_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<B>' :: "'a set multiset"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_wise_eq_points \<V> \<B> \<t> \<Lambda>\<^sub>t \<B>'
      \<Lambda>\<^sub>t'"
locale two_k_block_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_k_block_designs \<V> \<B> \<k> \<V>' \<B>'"
locale two_rep_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<r> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<r>' :: "nat"
  assumes "two_rep_designs_eq_points \<V> \<B> \<r> \<B>' \<r>'"
locale two_incomplete_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_incomplete_designs \<V> \<B> \<k> \<V>' \<B>'"
locale two_t_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_designs_eq_points \<V> \<B> \<k> \<B>' \<t> \<Lambda>\<^sub>t
      \<Lambda>\<^sub>t'"
### theory "Draft.Block_Designs"
### 1.248s elapsed time, 1.391s cpu time, 0.197s GC time
Loading theory "Draft.BIBD" (required by "Draft.BIBDMoreTemplates")
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale two_bibd_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<Lambda> :: "nat"
    and \<Lambda>' :: "nat"
  assumes "two_bibd_eq_points \<V> \<B> \<k> \<B>' \<Lambda> \<Lambda>'"
locale bibd_block_transformations
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and block :: "'a set"  (\<open>bl\<close>)
  assumes "bibd_block_transformations \<V> \<B> \<k> \<Lambda> bl"
locale symmetric_bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "symmetric_bibd \<V> \<B> \<k> \<Lambda>"
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale symmetric_bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "symmetric_bibd \<V> \<B> \<k> \<Lambda>"
locale symmetric_bibd_block_transformations
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and block :: "'a set"  (\<open>bl\<close>)
  assumes "symmetric_bibd_block_transformations \<V> \<B> \<k> \<Lambda> bl"
locale incomplete_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "incomplete_PBD \<V> \<B> \<k> \<Lambda>"
### theory "Draft.BIBD"
### 0.742s elapsed time, 0.825s cpu time, 0.115s GC time
Loading theory "Draft.BIBDMoreTemplates"
val templateLemmas =
   [("BIBD.incomplete_PBD_is_bibd",
     "[| ?k < card ?V; k_\<Lambda>_PBD ?V ?B ?\<Lambda> ?k |]
      ==> bibd ?V ?B ?k ?\<Lambda>",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.BIBDMoreTemplates"
### 0.422s elapsed time, 0.680s cpu time, 0.069s GC time
val it = (): unit
