Loading theory "Graph_Theory.Rtrancl_On" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Card_Partitions.Set_Partition" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "HOL-Library.Multiset")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph_Component" via "Graph_Theory.Pair_Digraph" via "Graph_Theory.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
Proofs for inductive predicate(s) "rtrancl_onp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.139s elapsed time, 0.570s cpu time, 0.025s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Graph_Theory.Rtrancl_On"
### 0.157s elapsed time, 0.640s cpu time, 0.025s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.434s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.FuncSet"
### 0.427s elapsed time, 1.684s cpu time, 0.176s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Card_Partitions.Set_Partition")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.463s elapsed time, 1.830s cpu time, 0.176s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
### theory "HOL-Library.Infinite_Set"
### 0.324s elapsed time, 1.267s cpu time, 0.151s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Nat_Bijection"
### 0.374s elapsed time, 1.451s cpu time, 0.265s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.296s elapsed time, 1.167s cpu time, 0.114s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
### theory "Card_Partitions.Set_Partition"
### 0.354s elapsed time, 1.214s cpu time, 0.686s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.641s elapsed time, 2.350s cpu time, 0.800s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.264s elapsed time, 1.032s cpu time, 0.149s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  prefixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.Stream"
### 1.172s elapsed time, 4.431s cpu time, 1.125s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  left :: "'a tree => 'a tree"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  right :: "'a tree => 'a tree"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "list_emb"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Sublist"
### 1.579s elapsed time, 6.196s cpu time, 0.914s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Countable"
### 1.230s elapsed time, 4.832s cpu time, 0.579s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.823s elapsed time, 3.077s cpu time, 1.378s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.Tree"
### 2.506s elapsed time, 9.677s cpu time, 2.247s GC time
Loading theory "Draft.Templates" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.262s cpu time, 0.028s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
### theory "HOL-Library.BigO"
### 1.206s elapsed time, 4.559s cpu time, 1.509s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Designs_And_GraphsMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "HOL-Library.Liminf_Limsup"
### 0.513s elapsed time, 2.005s cpu time, 0.234s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.053s elapsed time, 3.796s cpu time, 1.501s GC time
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.667s elapsed time, 17.331s cpu time, 4.748s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph_Component" via "Graph_Theory.Pair_Digraph" via "Graph_Theory.Bidirected_Digraph")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.226s elapsed time, 0.772s cpu time, 0.055s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.650s elapsed time, 1.984s cpu time, 0.226s GC time
Loading theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics" via "Draft.Multisets_Extras")
### theory "HOL-Combinatorics.Permutations"
### 0.891s elapsed time, 2.795s cpu time, 0.281s GC time
### theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset"
### 0.112s elapsed time, 0.350s cpu time, 0.075s GC time
Loading theory "Draft.Multisets_Extras" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations" via "Draft.Design_Basics")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.473s elapsed time, 7.959s cpu time, 1.908s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
class ordered_semiring = ordered_comm_monoid_add + semiring +
  assumes
    "mult_left_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> c * a <= c * b"
  assumes
    "mult_right_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> a * c <= b * c"
### theory "Draft.Multisets_Extras"
### 0.580s elapsed time, 1.189s cpu time, 0.067s GC time
Loading theory "Draft.Design_Basics" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs" via "Draft.Design_Operations")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
### theory "HOL-Library.Order_Continuity"
### 0.482s elapsed time, 1.031s cpu time, 0.134s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff" via "HOL-Library.Extended_Real")
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
class infinity = type +
  fixes infinity :: "'a"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
locale simple_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_incidence_system \<V> \<B>"
locale simple_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
### theory "Draft.Design_Basics"
### 0.607s elapsed time, 1.268s cpu time, 0.123s GC time
Loading theory "Draft.Design_Operations" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Draft.Block_Designs")
### theory "HOL-Library.Extended_Nat"
### 0.568s elapsed time, 1.191s cpu time, 0.123s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph" via "Graph_Theory.Stuff")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale two_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_set_systems \<V> \<B> \<V>' \<B>'"
locale two_fin_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_fin_set_systems \<V> \<B> \<V>' \<B>'"
locale two_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs \<V> \<B> \<V>' \<B>'"
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
locale two_designs_proper
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs_proper \<V> \<B> \<V>' \<B>'"
### theory "Draft.Design_Operations"
### 0.651s elapsed time, 1.358s cpu time, 0.135s GC time
Loading theory "Draft.Block_Designs" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs")
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
locale K_block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "K_block_design \<V> \<B> \<K>"
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale pairwise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "pairwise_balance \<V> \<B> \<Lambda>"
locale tBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "tBD \<V> \<B> \<t> \<Lambda>\<^sub>t \<K>"
locale \<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "\<Lambda>_PBD \<V> \<B> \<Lambda> \<K>"
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
locale PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "PBD \<V> \<B> \<K>"
locale k_\<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_\<Lambda>_PBD \<V> \<B> \<Lambda> \<k>"
locale k_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_PBD \<V> \<B> \<k>"
locale t_covering_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_covering_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale t_packing_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_packing_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
locale constant_rep_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and design_rep_number :: "nat"  (\<open>\<r>\<close>)
  assumes "constant_rep_design \<V> \<B> \<r>"
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
locale steiner_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
  assumes "steiner_system \<V> \<B> \<k> \<t>"
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
locale two_t_wise_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<B>' :: "'a set multiset"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_wise_eq_points \<V> \<B> \<t> \<Lambda>\<^sub>t \<B>'
      \<Lambda>\<^sub>t'"
locale two_k_block_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_k_block_designs \<V> \<B> \<k> \<V>' \<B>'"
locale two_rep_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<r> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<r>' :: "nat"
  assumes "two_rep_designs_eq_points \<V> \<B> \<r> \<B>' \<r>'"
locale two_incomplete_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_incomplete_designs \<V> \<B> \<k> \<V>' \<B>'"
locale two_t_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_designs_eq_points \<V> \<B> \<k> \<B>' \<t> \<Lambda>\<^sub>t
      \<Lambda>\<^sub>t'"
### theory "Draft.Block_Designs"
### 1.452s elapsed time, 3.036s cpu time, 0.294s GC time
### theory "HOL-Library.Extended_Real"
### 2.225s elapsed time, 4.600s cpu time, 0.515s GC time
Loading theory "Graph_Theory.Stuff" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph")
### theory "Graph_Theory.Stuff"
### 0.085s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Graph_Theory.Digraph" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Graph_Theory.Digraph"
### 0.952s elapsed time, 1.447s cpu time, 0.120s GC time
Loading theory "Graph_Theory.Arc_Walk" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph_Component")
Loading theory "Graph_Theory.Bidirected_Digraph" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph_Component" via "Graph_Theory.Pair_Digraph")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
### theory "Graph_Theory.Bidirected_Digraph"
### 0.334s elapsed time, 0.712s cpu time, 0.096s GC time
Found termination order: "{}"
### theory "Graph_Theory.Arc_Walk"
### 0.891s elapsed time, 1.331s cpu time, 0.181s GC time
Loading theory "Graph_Theory.Pair_Digraph" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs" via "Graph_Theory.Digraph_Component")
consts
  pawalk_verts :: "'a => ('a * 'a) list => 'a list"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_wf_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_wf_digraph G"
locale pair_fin_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_fin_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_loopfree_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_loopfree_digraph G"
locale pair_bidirected_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_bidirected_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
locale pair_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
consts
  rev_path :: "('a * 'a) list => ('a * 'a) list"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
### theory "Graph_Theory.Pair_Digraph"
### 2.910s elapsed time, 3.107s cpu time, 0.263s GC time
Loading theory "Graph_Theory.Digraph_Component" (required by "Draft.Designs_And_GraphsMoreTemplates" via "Draft.Designs_And_Graphs")
### Ambiguous input (line 336 of "$AFP/Graph_Theory/Digraph_Component.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Digraph.dominates_indexed" ("_position" u) ("_indexdefault")
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" u) ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale max_reachable_set
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and S :: "'a set"
  assumes "max_reachable_set G S"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
"LEAST x. P x"
  :: "'a"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
### theory "Graph_Theory.Digraph_Component"
### 1.594s elapsed time, 1.691s cpu time, 0.132s GC time
Loading theory "Draft.Designs_And_Graphs" (required by "Draft.Designs_And_GraphsMoreTemplates")
locale non_empty_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "non_empty_digraph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale non_empty_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "Designs_And_Graphs.non_empty_graph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale regular_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and \<r> :: "nat"
  assumes "regular_digraph G \<r>"
locale regular_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and \<r> :: "nat"
  assumes "regular_graph G \<r>"
locale non_empty_regular_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
    and \<r> :: "nat"
  assumes "non_empty_regular_graph G \<r>"
### theory "Draft.Designs_And_Graphs"
### 1.352s elapsed time, 1.468s cpu time, 0.158s GC time
Loading theory "Draft.Designs_And_GraphsMoreTemplates"
val templateLemmas =
   [("Designs_And_Graphs.graph_in_degree_r_imp_reg",
     "[| graph ?G; !!v. v : verts ?G ==> in_degree ?G v = ?\<r> |]
      ==> regular_graph ?G ?\<r>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Designs_And_Graphs.graph_out_degree_r_imp_reg",
     "[| graph ?G; !!v. v : verts ?G ==> out_degree ?G v = ?\<r> |]
      ==> regular_graph ?G ?\<r>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Designs_And_GraphsMoreTemplates"
### 0.519s elapsed time, 0.744s cpu time, 0.083s GC time
val it = (): unit
