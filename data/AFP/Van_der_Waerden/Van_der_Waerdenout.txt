Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.Van_der_Waerden")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.500s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.811s cpu time, 0.043s GC time
Loading theory "Draft.Digits" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.Van_der_Waerden")
Found termination order: "size_list size <*mlex*> {}"
locale digits
  fixes base :: "nat"
  assumes "digits base"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.355s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Digits"
### 0.216s elapsed time, 0.842s cpu time, 0.162s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.430s elapsed time, 1.702s cpu time, 0.206s GC time
Loading theory "Draft.Van_der_Waerden" (required by "Draft.Van_der_WaerdenMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Van_der_Waerden"
### 0.479s elapsed time, 1.896s cpu time, 0.168s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.920s elapsed time, 3.341s cpu time, 0.789s GC time
### theory "HOL-Library.BigO"
### 0.844s elapsed time, 3.054s cpu time, 0.715s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.742s elapsed time, 4.884s cpu time, 0.939s GC time
Loading theory "Draft.Templates" (required by "Draft.Van_der_WaerdenMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.103s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Van_der_WaerdenMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.451s elapsed time, 0.457s cpu time, 0.000s GC time
Loading theory "Draft.Van_der_WaerdenMoreTemplates"
val templateLemmas =
   [("Van_der_Waerden.vdw_1_right", "vdw ?k 1 1",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_hole 0)
         )),
    ("Van_der_Waerden.vdw_2_right", "vdw ?k 2 (?k + 1)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Van_der_Waerden.vdw_1_left", "0 < ?l ==> vdw 1 ?l ?l",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0),
             template_var 0)
           ))),
    ("Van_der_Waerden.vdw_0_left", "0 < ?n ==> vdw 0 ?l ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 0),
             template_var 1)
           ))),
    ("Van_der_Waerden.arith_prog_to_multi",
     "arith_prog ?start ?step ?c =
      multi_arith_prog 1 ?start (%_. ?step) (%_. ?c)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           t_empty),
         t_empty))),
    ("Van_der_Waerden.multi_to_arith_prog",
     "multi_arith_prog 1 ?start ?steps ?c =
      arith_prog ?start (?steps 0) (?c 0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_var 1, template_hole 0)),
         template_app (template_var 0, template_hole 0)))),
    ("Van_der_Waerden.vdw_lemma_imp_vdw",
     "vdw_lemma ?k ?k ?l ?N ==> vdw ?k (Suc ?l) ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Van_der_Waerden.arith_prog_mono",
     "?c <= ?c' ==>
      arith_prog ?start ?step ?c <= arith_prog ?start ?step ?c'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Van_der_Waerden.vdw_imp_pos", "[| vdw ?k ?l ?n; 0 < ?l |] ==> 0 < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 0, template_var 1)],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("Van_der_Waerden.van_der_Waerden",
     "[| 0 < ?l; 0 < ?k |] ==> EX n. vdw ?k ?l n",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Van_der_Waerden.sum_mod_poly",
     "0 < ?k ==> (?k - 1) * sum ((^) ?k) {..<?q} < ?k ^ ?q",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Van_der_Waerden.is_arith_prog_onD",
     "[| is_arith_prog_on ?l ?start ?step ?a ?b; ?c : {0..<?l} |]
      ==> arith_prog ?start ?step ?c : {?a..?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Van_der_Waerden.multi_arith_prog_mono",
     "(!!i. i < ?m ==> ?c i <= ?c' i) ==>
      multi_arith_prog ?m ?start ?steps ?c
      <= multi_arith_prog ?m ?start ?steps ?c'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 2)))),
    ("Van_der_Waerden.is_multi_arith_prog_onD",
     "[| is_multi_arith_prog_on ?l ?m ?start ?steps ?a ?b;
         ?c : {0..<?m} \<rightarrow> {0..<?l} |]
      ==> multi_arith_prog ?m ?start ?steps ?c : {?a..?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 5)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Van_der_Waerden.vdw_imp_vdw_lemma",
     "[| !!k'. 0 < k' ==> EX n_k'. vdw k' ?l n_k'; 2 <= ?l; 0 < ?m;
         0 < ?k |]
      ==> EX N. vdw_lemma ?k ?m ?l N",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_hole 1)),
          template_var 2),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Van_der_Waerden.vdwE",
     "[| vdw ?k ?l ?n; ?a + int ?n <= ?b + 1;
         ?col : {?a..?b} \<rightarrow> {..<?k};
         !!j start step.
            [| j < ?k; 0 < step; is_arith_prog_on ?l start step ?a ?b;
               arith_prog start step ` {..<?l}
               <= ?col -` {j} Int {?a..?b} |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 18, template_var 3),
            template_app (template_hole 17, template_var 4)),
          template_app
           (template_app (template_hole 18, template_var 2),
            template_hole 16)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Van_der_Waerden.vdw_lemmaE",
     "[| vdw_lemma ?k ?m ?l ?n; ?a + int ?n <= ?b + 1;
         ?col : {?a..?b} \<rightarrow> {..<?k};
         !!start steps.
            [| !!i. i < ?m ==> 0 < steps i;
               is_multi_arith_prog_on (?l + 1) ?m start steps ?a ?b;
               let f = multi_arith_prog ?m start steps
               in ALL c:{0..<?m} \<rightarrow> {0..?l}.
                     ALL s<?m.
                        (ALL j<=s. c j < ?l) -->
                        ?col (f c) =
                        ?col (f (%i. if i <= s then 0 else c i)) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 27, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 25, template_var 3),
            template_app (template_hole 24, template_var 4)),
          template_app
           (template_app (template_hole 25, template_var 2),
            template_hole 23)),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 20, template_var 3),
                    template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Van_der_WaerdenMoreTemplates"
### 0.321s elapsed time, 0.432s cpu time, 0.052s GC time
val it = (): unit
