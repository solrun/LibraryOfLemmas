Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.Splay_Tree")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.048s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Sorted_Less"
### 0.076s elapsed time, 0.292s cpu time, 0.034s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs")
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.624s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Cmp"
### 0.321s elapsed time, 1.292s cpu time, 0.099s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.300s cpu time, 0.099s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.870s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.254s elapsed time, 1.005s cpu time, 0.065s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.Splay_Tree")
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Data_Structures.Set_Specs"
### 0.117s elapsed time, 0.454s cpu time, 0.079s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.911s elapsed time, 2.873s cpu time, 0.710s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.011s elapsed time, 3.167s cpu time, 0.710s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.812s elapsed time, 4.082s cpu time, 0.800s GC time
Loading theory "Draft.Splay_Tree" (required by "Draft.Splay_TreeMoreTemplates")
Loading theory "Draft.Templates" (required by "Draft.Splay_TreeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.160s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Splay_TreeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.085s cpu time, 0.061s GC time
### Ambiguous input (line 50 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" a) ("_position" r))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x) ("_position" a)))
###             ("_case2"
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a) ("_position" r))))))))
###                 ("_case1" ("_position" GT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs"
###                       ("_applC" ("_position" Node)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" a) ("_position" Leaf))))
###                       ("_cargs" ("_position" x) ("_position" r)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))))
###           ("_case2"
###             ("_case1" ("_position" LT)
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" l)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" Node)
###                       ("_cargs" ("_position" Leaf)
###                         ("_cargs" ("_position" a) ("_position" r))))))))
###             ("_case1" ("_position" GT)
###               ("_applC" ("_position" Node)
###                 ("_cargs"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" Leaf))))
###                   ("_cargs" ("_position" x) ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case2"
###                 ("_case1" ("_position" EQ)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" r)))))
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a)
###                               ("_position" r)))))))))))
###           ("_case1" ("_position" GT)
###             ("_applC" ("_position" Node)
###               ("_cargs"
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" Leaf))))
###                 ("_cargs" ("_position" x) ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Splay_Tree"
### 0.974s elapsed time, 1.656s cpu time, 0.135s GC time
Loading theory "Draft.Splay_TreeMoreTemplates"
val templateLemmas =
   [("Splay_Tree.size_splay_max", "size (splay_max ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Splay_Tree.size_splay", "size (splay ?a ?t) = size ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Splay_Tree.inorder_splay", "inorder (splay ?x ?t) = inorder ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Splay_Tree.splay_max_Leaf_iff",
     "(splay_max ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Splay_Tree.splay_Leaf_iff",
     "(splay ?a ?t = \<langle>\<rangle>) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Splay_Tree.bst_delete", "bst ?t ==> bst (delete ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Tree.bst_insert", "bst ?t ==> bst (Splay_Tree.insert ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Tree.bst_splay", "bst ?t ==> bst (splay ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Tree.isin_set",
     "Sorted_Less.sorted (inorder ?t) ==>
      isin ?t ?x = (?x : set (inorder ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)))))),
    ("Splay_Tree.inorder_delete",
     "Sorted_Less.sorted (inorder ?t) ==>
      inorder (delete ?x ?t) = del_list ?x (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 1))))),
    ("Splay_Tree.inorder_insert",
     "Sorted_Less.sorted (inorder ?t) ==>
      inorder (Splay_Tree.insert ?x ?t) = ins_list ?x (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 1))))),
    ("Splay_Tree.size_if_splay_max",
     "splay_max ?t = \<langle>?l, ?u, ?r\<rangle> ==>
      size ?t = size ?l + size ?r + 1",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 2, template_var 0))),
           template_hole 0)))),
    ("Splay_Tree.splay_not_Leaf",
     "?t ~= \<langle>\<rangle> ==>
      EX l x r. splay ?a ?t = \<langle>l, x, r\<rangle>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Splay_Tree.size_if_splay",
     "splay ?a ?t = \<langle>?l, ?u, ?r\<rangle> ==>
      size ?t = size ?l + size ?r + 1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 2, template_var 0))),
           template_hole 0)))),
    ("Splay_Tree.splay_bstL",
     "[| bst ?t; splay ?a ?t = \<langle>?l, ?e, ?r\<rangle>;
         ?x : set_tree ?l |]
      ==> ?x < ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 5),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 3))
            )],
       template_inequation (less_than, template_var 0, template_var 4))),
    ("Splay_Tree.splay_bstR",
     "[| bst ?t; splay ?a ?t = \<langle>?l, ?e, ?r\<rangle>;
         ?x : set_tree ?r |]
      ==> ?a < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 5),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_inequation (less_than, template_var 4, template_var 0))),
    ("Splay_Tree.sorted_splay",
     "[| Sorted_Less.sorted (inorder ?t);
         splay ?x ?t = \<langle>?l, ?a, ?r\<rangle> |]
      ==> Sorted_Less.sorted (inorder ?l @ ?x # inorder ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 4),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 5, template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app (template_hole 5, template_var 0))))
           ))),
    ("Splay_Tree.splay_elemsD",
     "[| splay ?x ?t = \<langle>?l, ?a, ?r\<rangle>;
         Sorted_Less.sorted (inorder ?t) |]
      ==> (?x : set (inorder ?t)) = (?x = ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 3))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_hole 1,
                  template_app (template_hole 4, template_var 3)))
              )],
         template_equation (template_var 4, template_var 1)))),
    ("Splay_Tree.inorder_splay_maxD",
     "[| splay_max ?t = \<langle>?l, ?a, ?r\<rangle>;
         Sorted_Less.sorted (inorder ?t) |]
      ==> inorder ?l @ [?a] = inorder ?t & ?r = \<langle>\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app (template_hole 6, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 6, template_var 2)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 1))),
                 template_app (template_hole 6, template_var 3))),
             template_app
              (template_app (template_hole 11, template_var 0),
               template_hole 0))
           ))),
    ("Splay_Tree.splay_max_code",
     "splay_max ?t =
      (case ?t of \<langle>\<rangle> => ?t
       | \<langle>la, a, \<langle>\<rangle>\<rangle> => ?t
       | \<langle>la, a, \<langle>lb, b, rb\<rangle>\<rangle> =>
           if rb = \<langle>\<rangle>
           then \<langle>\<langle>la, a, lb\<rangle>, b, rb\<rangle>
           else case splay_max rb of
                \<langle>lc, c, rc\<rangle> =>
                  \<langle>\<langle>\<langle>la, a, lb\<rangle>, b,
                            lc\<rangle>,
                   c, rc\<rangle>)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 0), t_empty),
         template_var 0))),
    ("Splay_Tree.splay_code",
     "splay ?x \<langle>?AB, ?b, ?CD\<rangle> =
      (case cmp ?x ?b of
       LT =>
         case ?AB of \<langle>\<rangle> => \<langle>?AB, ?b, ?CD\<rangle>
         | \<langle>A, a, B\<rangle> =>
             case cmp ?x a of
             LT =>
               if A = \<langle>\<rangle>
               then \<langle>A, a, \<langle>B, ?b, ?CD\<rangle>\<rangle>
               else case splay ?x A of
                    \<langle>A\<^sub>1, a', A\<^sub>2\<rangle> =>
                      \<langle>A\<^sub>1, a',
                       \<langle>A\<^sub>2, a,
                        \<langle>B, ?b, ?CD\<rangle>\<rangle>\<rangle>
             | EQ => \<langle>A, a, \<langle>B, ?b, ?CD\<rangle>\<rangle>
             | GT =>
                 if B = \<langle>\<rangle>
                 then \<langle>A, a, \<langle>B, ?b, ?CD\<rangle>\<rangle>
                 else case splay ?x B of
                      \<langle>B\<^sub>1, b', B\<^sub>2\<rangle> =>
                        \<langle>\<langle>A, a, B\<^sub>1\<rangle>, b',
                         \<langle>B\<^sub>2, ?b, ?CD\<rangle>\<rangle>
       | EQ => \<langle>?AB, ?b, ?CD\<rangle>
       | GT =>
           case ?CD of \<langle>\<rangle> => \<langle>?AB, ?b, ?CD\<rangle>
           | \<langle>C, c, D\<rangle> =>
               case cmp ?x c of
               LT =>
                 if C = \<langle>\<rangle>
                 then \<langle>\<langle>?AB, ?b, C\<rangle>, c, D\<rangle>
                 else case splay ?x C of
                      \<langle>C\<^sub>1, c', C\<^sub>2\<rangle> =>
                        \<langle>\<langle>?AB, ?b, C\<^sub>1\<rangle>, c',
                         \<langle>C\<^sub>2, c, D\<rangle>\<rangle>
               | EQ => \<langle>\<langle>?AB, ?b, C\<rangle>, c, D\<rangle>
               | GT =>
                   if D = \<langle>\<rangle>
                   then \<langle>\<langle>?AB, ?b, C\<rangle>, c, D\<rangle>
                   else case splay ?x D of
                        \<langle>D\<^sub>1, d, D\<^sub>2\<rangle> =>
                          \<langle>\<langle>\<langle>?AB, ?b, C\<rangle>, c,
                                    D\<^sub>1\<rangle>,
                           d, D\<^sub>2\<rangle>)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1),
                       template_var 0)),
                   t_empty),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0)),
               t_empty),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Splay_TreeMoreTemplates"
### 0.297s elapsed time, 0.437s cpu time, 0.045s GC time
val it = (): unit
