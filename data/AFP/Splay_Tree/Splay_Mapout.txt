Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "Draft.Splay_Tree")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.042s elapsed time, 0.195s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Data_Structures.Sorted_Less"
### 0.051s elapsed time, 0.203s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.AList_Upd_Del" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "HOL-Data_Structures.Map_Specs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.611s cpu time, 0.035s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "Draft.Splay_Tree" via "HOL-Data_Structures.Set_Specs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Data_Structures.Cmp"
### 0.314s elapsed time, 1.252s cpu time, 0.110s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.471s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.243s elapsed time, 0.963s cpu time, 0.075s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map" via "Draft.Splay_Tree")
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
### theory "HOL-Data_Structures.AList_Upd_Del"
### 0.410s elapsed time, 1.609s cpu time, 0.199s GC time
Loading theory "HOL-Data_Structures.Map_Specs" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map")
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Data_Structures.Set_Specs"
### 0.125s elapsed time, 0.492s cpu time, 0.089s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.817s cpu time, 0.089s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs")
locale Map
  fixes empty :: "'m"
    and update :: "'a => 'b => 'm => 'm"
    and delete :: "'a => 'm => 'm"
    and lookup :: "'m => 'a => 'b option"
    and invar :: "'m => bool"
  assumes "Map empty update delete lookup invar"
locale Map_by_Ordered
  fixes empty :: "'t"
    and update :: "'a => 'b => 't => 't"
    and delete :: "'a => 't => 't"
    and lookup :: "'t => 'a => 'b option"
    and inorder :: "'t => ('a * 'b) list"
    and inv :: "'t => bool"
  assumes "Map_by_Ordered empty update delete lookup inorder inv"
### theory "HOL-Data_Structures.Map_Specs"
### 0.082s elapsed time, 0.321s cpu time, 0.000s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.035s elapsed time, 3.374s cpu time, 0.821s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.940s elapsed time, 2.897s cpu time, 0.733s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.757s elapsed time, 3.826s cpu time, 0.854s GC time
Loading theory "Draft.Splay_Tree" (required by "Draft.Splay_MapMoreTemplates" via "Draft.Splay_Map")
Loading theory "Draft.Templates" (required by "Draft.Splay_MapMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Splay_MapMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 1.054s cpu time, 0.112s GC time
### Ambiguous input (line 50 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" C)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs"
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" AB)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" C))))
###                               ("_cargs" ("_position" c) ("_position" D))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" C)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" D)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
### ("_cargs" ("_position" c) ("_position" D))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" D)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" D\<^sub>1)
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" C))))
###         ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###     ("_cargs" ("_position" d) ("_position" D\<^sub>2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case1" ("_position" LT)
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.eq" ("_position" A)
###                             ("_position" Leaf))
###                           ("_applC" ("_position" Node)
###                             ("_cargs" ("_position" A)
###                               ("_cargs" ("_position" a)
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B)
###                                     ("_cargs" ("_position" b)
### ("_position" CD)))))))
###                           ("_case_syntax"
###                             ("_applC" ("_position" splay)
###                               ("_cargs" ("_position" x) ("_position" A)))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" B)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" A)
### ("_cargs" ("_position" a)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" B)
###       ("_cargs" ("_position" b) ("_position" CD)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" B)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>1)
###     ("_cargs" ("_position" b') ("_position" B\<^sub>2))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###     ("_cargs" ("_position" b')
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B\<^sub>2)
###           ("_cargs" ("_position" b) ("_position" CD)))))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" AB)
###             ("_cargs" ("_position" b) ("_position" CD))))))
###     ("_case_syntax"
###       ("_applC" ("_position" cmp)
###         ("_cargs" ("_position" x) ("_position" b)))
###       ("_case2"
###         ("_case1" ("_position" EQ)
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" AB)
###               ("_cargs" ("_position" b) ("_position" CD)))))
###         ("_case2"
###           ("_case1" ("_position" LT)
###             ("_case_syntax" ("_position" AB)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" A)
###                       ("_cargs" ("_position" a) ("_position" B))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" a)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" A)
###                             ("_cargs" ("_position" a)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" B)
###                                   ("_cargs" ("_position" b)
###                                     ("_position" CD))))))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" A)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" A)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_position" A\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" A\<^sub>1)
###                                     ("_cargs" ("_position" a')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" A\<^sub>2)
###     ("_cargs" ("_position" a)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" B)
###           ("_cargs" ("_position" b) ("_position" CD))))))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" B)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" A)
###                                 ("_cargs" ("_position" a)
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" B)
### ("_cargs" ("_position" b) ("_position" CD)))))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" B)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" B\<^sub>1)
###                                     ("_cargs" ("_position" b')
### ("_position" B\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" A)
###   ("_cargs" ("_position" a) ("_position" B\<^sub>1))))
###                                     ("_cargs" ("_position" b')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" B\<^sub>2)
###     ("_cargs" ("_position" b) ("_position" CD))))))))))))))))))
###           ("_case1" ("_position" GT)
###             ("_case_syntax" ("_position" CD)
###               ("_case2"
###                 ("_case1" ("_position" Leaf)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" AB)
###                       ("_cargs" ("_position" b) ("_position" CD)))))
###                 ("_case1"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" c) ("_position" D))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" cmp)
###                       ("_cargs" ("_position" x) ("_position" c)))
###                     ("_case2"
###                       ("_case1" ("_position" EQ)
###                         ("_applC" ("_position" Node)
###                           ("_cargs"
###                             ("_applC" ("_position" Node)
###                               ("_cargs" ("_position" AB)
###                                 ("_cargs" ("_position" b) ("_position" C))))
###                             ("_cargs" ("_position" c) ("_position" D)))))
###                       ("_case2"
###                         ("_case1" ("_position" LT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" C)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" C)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" C\<^sub>1)
###                                     ("_cargs" ("_position" c')
### ("_position" C\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" AB)
###   ("_cargs" ("_position" b) ("_position" C\<^sub>1))))
###                                     ("_cargs" ("_position" c')
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" C\<^sub>2)
###     ("_cargs" ("_position" c) ("_position" D)))))))))))
###                         ("_case1" ("_position" GT)
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.eq" ("_position" D)
###                               ("_position" Leaf))
###                             ("_applC" ("_position" Node)
###                               ("_cargs"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" AB)
###                                     ("_cargs" ("_position" b)
### ("_position" C))))
###                                 ("_cargs" ("_position" c) ("_position" D))))
###                             ("_case_syntax"
###                               ("_applC" ("_position" splay)
###                                 ("_cargs" ("_position" x) ("_position" D)))
###                               ("_case1"
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" D\<^sub>1)
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs"
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" AB) ("_cargs" ("_position" b) ("_position" C))))
###   ("_cargs" ("_position" c) ("_position" D\<^sub>1))))
###                                     ("_cargs" ("_position" d)
### ("_position" D\<^sub>2))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Splay_Tree/Splay_Tree.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" l)
###               ("_cargs" ("_position" a) ("_position" r))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x) ("_position" a)))
###             ("_case2"
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a) ("_position" r))))))))
###                 ("_case1" ("_position" GT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs"
###                       ("_applC" ("_position" Node)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" a) ("_position" Leaf))))
###                       ("_cargs" ("_position" x) ("_position" r)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case1" ("_position" EQ)
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" r)))))))
###           ("_case2"
###             ("_case1" ("_position" LT)
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" l)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" Node)
###                       ("_cargs" ("_position" Leaf)
###                         ("_cargs" ("_position" a) ("_position" r))))))))
###             ("_case1" ("_position" GT)
###               ("_applC" ("_position" Node)
###                 ("_cargs"
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" Leaf))))
###                   ("_cargs" ("_position" x) ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" x) ("_position" t)))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.eq" ("_position" t) ("_position" Leaf))
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" Leaf)
###           ("_cargs" ("_position" x) ("_position" Leaf))))
###       ("_case_syntax"
###         ("_applC" ("_position" splay)
###           ("_cargs" ("_position" x) ("_position" t)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" l)
###                 ("_cargs" ("_position" a) ("_position" r))))
###             ("_case_syntax"
###               ("_applC" ("_position" cmp)
###                 ("_cargs" ("_position" x) ("_position" a)))
###               ("_case2"
###                 ("_case1" ("_position" EQ)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" a) ("_position" r)))))
###                 ("_case1" ("_position" LT)
###                   ("_applC" ("_position" Node)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" Leaf)
###                             ("_cargs" ("_position" a)
###                               ("_position" r)))))))))))
###           ("_case1" ("_position" GT)
###             ("_applC" ("_position" Node)
###               ("_cargs"
###                 ("_applC" ("_position" Node)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" a) ("_position" Leaf))))
###                 ("_cargs" ("_position" x) ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Splay_Tree"
### 0.928s elapsed time, 1.575s cpu time, 0.151s GC time
Loading theory "Draft.Splay_Map" (required by "Draft.Splay_MapMoreTemplates")
### Ambiguous input (line 45 of "$AFP/Splay_Tree/Splay_Map.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs"
###         ("_constrain" ("_position" x)
###           ("_dummy_ofsort" ("_class_name" linorder)))
###         ("_position" t)))
###     ("_case_syntax" ("_position" t)
###       ("_case2" ("_case1" ("_position" Leaf) ("_position" Leaf))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" al)
###               ("_cargs" ("_position" a) ("_position" ar))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" fst) ("_position" a))))
###             ("_case2" ("_case1" ("_position" EQ) ("_position" t))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_case_syntax" ("_position" al)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" bl)
###                                   ("_cargs" ("_position" b)
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" br) ("_cargs" ("_position" a) ("_position" ar))))))))
###                             ("_case2"
###                               ("_case1" ("_position" LT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" bl)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" bl)
### ("_cargs" ("_position" b)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" br)
###       ("_cargs" ("_position" a) ("_position" ar)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" bl)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll)
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" br)
###                 ("_cargs" ("_position" a) ("_position" ar))))))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" br)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" bl)
### ("_cargs" ("_position" b)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" br)
###       ("_cargs" ("_position" a) ("_position" ar)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" br)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" brl) ("_cargs" ("_position" y) ("_position" brr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" bl)
###         ("_cargs" ("_position" b) ("_position" brl))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" brr)
###           ("_cargs" ("_position" a) ("_position" ar))))))))))))))))))
###                 ("_case1" ("_position" GT)
###                   ("_case_syntax" ("_position" ar)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" al)
### ("_cargs" ("_position" a) ("_position" bl))))
###                                   ("_cargs" ("_position" b)
###                                     ("_position" br)))))
###                             ("_case2"
###                               ("_case1" ("_position" LT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" bl)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
### ("_cargs" ("_position" b) ("_position" br))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" bl)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" al)
###         ("_cargs" ("_position" a) ("_position" bll))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b) ("_position" br)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" br)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
### ("_cargs" ("_position" b) ("_position" br))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" br)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" al)
###             ("_cargs" ("_position" a) ("_position" bl))))
###         ("_cargs" ("_position" b) ("_position" bll))))
###     ("_cargs" ("_position" y) ("_position" blr)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs"
###         ("_constrain" ("_position" x)
###           ("_dummy_ofsort" ("_class_name" linorder)))
###         ("_position" t)))
###     ("_case_syntax" ("_position" t)
###       ("_case2" ("_case1" ("_position" Leaf) ("_position" Leaf))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" al)
###               ("_cargs" ("_position" a) ("_position" ar))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" fst) ("_position" a))))
###             ("_case2" ("_case1" ("_position" EQ) ("_position" t))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_case_syntax" ("_position" al)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" bl)
###                                   ("_cargs" ("_position" b)
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" br) ("_cargs" ("_position" a) ("_position" ar))))))))
###                             ("_case1" ("_position" LT)
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq" ("_position" bl)
###                                   ("_position" Leaf))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" bl)
###                                     ("_cargs" ("_position" b)
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" br)
###     ("_cargs" ("_position" a) ("_position" ar)))))))
###                                 ("_case_syntax"
###                                   ("_applC" ("_position" splay)
###                                     ("_cargs" ("_position" x)
### ("_position" bl)))
###                                   ("_case2"
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll)
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" br)
###                 ("_cargs" ("_position" a) ("_position" ar)))))))))))
###                                     ("_case1" ("_position" GT)
### ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" br) ("_position" Leaf))
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" bl)
###       ("_cargs" ("_position" b)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" br)
###             ("_cargs" ("_position" a) ("_position" ar)))))))
###   ("_case_syntax"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x) ("_position" br)))
###     ("_case1"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" brl)
###           ("_cargs" ("_position" y) ("_position" brr))))
###       ("_applC" ("_position" Node)
###         ("_cargs"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" bl)
###               ("_cargs" ("_position" b) ("_position" brl))))
###           ("_cargs" ("_position" y)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" brr)
###                 ("_cargs" ("_position" a)
###                   ("_position" ar)))))))))))))))))))))
###                 ("_case1" ("_position" GT)
###                   ("_case_syntax" ("_position" ar)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" al)
### ("_cargs" ("_position" a) ("_position" bl))))
###                                   ("_cargs" ("_position" b)
###                                     ("_position" br)))))
###                             ("_case2"
###                               ("_case1" ("_position" LT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" bl)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
### ("_cargs" ("_position" b) ("_position" br))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" bl)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" al)
###         ("_cargs" ("_position" a) ("_position" bll))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b) ("_position" br)))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" br)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
### ("_cargs" ("_position" b) ("_position" br))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" br)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs"
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" al)
###             ("_cargs" ("_position" a) ("_position" bl))))
###         ("_cargs" ("_position" b) ("_position" bll))))
###     ("_cargs" ("_position" y) ("_position" blr)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs"
###         ("_constrain" ("_position" x)
###           ("_dummy_ofsort" ("_class_name" linorder)))
###         ("_position" t)))
###     ("_case_syntax" ("_position" t)
###       ("_case2" ("_case1" ("_position" Leaf) ("_position" Leaf))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" al)
###               ("_cargs" ("_position" a) ("_position" ar))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" fst) ("_position" a))))
###             ("_case2" ("_case1" ("_position" EQ) ("_position" t))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_case_syntax" ("_position" al)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" bl)
###                                   ("_cargs" ("_position" b)
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" br) ("_cargs" ("_position" a) ("_position" ar))))))))
###                             ("_case2"
###                               ("_case1" ("_position" LT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" bl)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" bl)
### ("_cargs" ("_position" b)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" br)
###       ("_cargs" ("_position" a) ("_position" ar)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" bl)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll)
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" br)
###                 ("_cargs" ("_position" a) ("_position" ar))))))))))))))
###                               ("_case1" ("_position" GT)
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.eq" ("_position" br)
###                                     ("_position" Leaf))
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" bl)
### ("_cargs" ("_position" b)
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" br)
###       ("_cargs" ("_position" a) ("_position" ar)))))))
###                                   ("_case_syntax"
###                                     ("_applC" ("_position" splay)
### ("_cargs" ("_position" x) ("_position" br)))
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" brl) ("_cargs" ("_position" y) ("_position" brr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" bl)
###         ("_cargs" ("_position" b) ("_position" brl))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" brr)
###           ("_cargs" ("_position" a) ("_position" ar))))))))))))))))))
###                 ("_case1" ("_position" GT)
###                   ("_case_syntax" ("_position" ar)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" al)
### ("_cargs" ("_position" a) ("_position" bl))))
###                                   ("_cargs" ("_position" b)
###                                     ("_position" br)))))
###                             ("_case1" ("_position" LT)
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq" ("_position" bl)
###                                   ("_position" Leaf))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
###                                     ("_cargs" ("_position" b)
### ("_position" br))))
###                                 ("_case_syntax"
###                                   ("_applC" ("_position" splay)
###                                     ("_cargs" ("_position" x)
### ("_position" bl)))
###                                   ("_case2"
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" al)
###         ("_cargs" ("_position" a) ("_position" bll))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b) ("_position" br))))))))
###                                     ("_case1" ("_position" GT)
### ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" br) ("_position" Leaf))
###   ("_applC" ("_position" Node)
###     ("_cargs"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" al)
###           ("_cargs" ("_position" a) ("_position" bl))))
###       ("_cargs" ("_position" b) ("_position" br))))
###   ("_case_syntax"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x) ("_position" br)))
###     ("_case1"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" bll)
###           ("_cargs" ("_position" y) ("_position" blr))))
###       ("_applC" ("_position" Node)
###         ("_cargs"
###           ("_applC" ("_position" Node)
###             ("_cargs"
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" al)
###                   ("_cargs" ("_position" a) ("_position" bl))))
###               ("_cargs" ("_position" b) ("_position" bll))))
###           ("_cargs" ("_position" y)
###             ("_position" blr))))))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" splay)
###       ("_cargs"
###         ("_constrain" ("_position" x)
###           ("_dummy_ofsort" ("_class_name" linorder)))
###         ("_position" t)))
###     ("_case_syntax" ("_position" t)
###       ("_case2" ("_case1" ("_position" Leaf) ("_position" Leaf))
###         ("_case1"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" al)
###               ("_cargs" ("_position" a) ("_position" ar))))
###           ("_case_syntax"
###             ("_applC" ("_position" cmp)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" fst) ("_position" a))))
###             ("_case2" ("_case1" ("_position" EQ) ("_position" t))
###               ("_case2"
###                 ("_case1" ("_position" LT)
###                   ("_case_syntax" ("_position" al)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs" ("_position" bl)
###                                   ("_cargs" ("_position" b)
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" br) ("_cargs" ("_position" a) ("_position" ar))))))))
###                             ("_case1" ("_position" LT)
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq" ("_position" bl)
###                                   ("_position" Leaf))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs" ("_position" bl)
###                                     ("_cargs" ("_position" b)
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" br)
###     ("_cargs" ("_position" a) ("_position" ar)))))))
###                                 ("_case_syntax"
###                                   ("_applC" ("_position" splay)
###                                     ("_cargs" ("_position" x)
### ("_position" bl)))
###                                   ("_case2"
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll)
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" br)
###                 ("_cargs" ("_position" a) ("_position" ar)))))))))))
###                                     ("_case1" ("_position" GT)
### ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" br) ("_position" Leaf))
###   ("_applC" ("_position" Node)
###     ("_cargs" ("_position" bl)
###       ("_cargs" ("_position" b)
###         ("_applC" ("_position" Node)
###           ("_cargs" ("_position" br)
###             ("_cargs" ("_position" a) ("_position" ar)))))))
###   ("_case_syntax"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x) ("_position" br)))
###     ("_case1"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" brl)
###           ("_cargs" ("_position" y) ("_position" brr))))
###       ("_applC" ("_position" Node)
###         ("_cargs"
###           ("_applC" ("_position" Node)
###             ("_cargs" ("_position" bl)
###               ("_cargs" ("_position" b) ("_position" brl))))
###           ("_cargs" ("_position" y)
###             ("_applC" ("_position" Node)
###               ("_cargs" ("_position" brr)
###                 ("_cargs" ("_position" a)
###                   ("_position" ar)))))))))))))))))))))
###                 ("_case1" ("_position" GT)
###                   ("_case_syntax" ("_position" ar)
###                     ("_case2" ("_case1" ("_position" Leaf) ("_position" t))
###                       ("_case1"
###                         ("_applC" ("_position" Node)
###                           ("_cargs" ("_position" bl)
###                             ("_cargs" ("_position" b) ("_position" br))))
###                         ("_case_syntax"
###                           ("_applC" ("_position" cmp)
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" fst) ("_position" b))))
###                           ("_case2"
###                             ("_case1" ("_position" EQ)
###                               ("_applC" ("_position" Node)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Node)
###                                     ("_cargs" ("_position" al)
### ("_cargs" ("_position" a) ("_position" bl))))
###                                   ("_cargs" ("_position" b)
###                                     ("_position" br)))))
###                             ("_case1" ("_position" LT)
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.eq" ("_position" bl)
###                                   ("_position" Leaf))
###                                 ("_applC" ("_position" Node)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Node)
### ("_cargs" ("_position" al) ("_cargs" ("_position" a) ("_position" bl))))
###                                     ("_cargs" ("_position" b)
### ("_position" br))))
###                                 ("_case_syntax"
###                                   ("_applC" ("_position" splay)
###                                     ("_cargs" ("_position" x)
### ("_position" bl)))
###                                   ("_case2"
###                                     ("_case1"
### ("_applC" ("_position" Node)
###   ("_cargs" ("_position" bll) ("_cargs" ("_position" y) ("_position" blr))))
### ("_applC" ("_position" Node)
###   ("_cargs"
###     ("_applC" ("_position" Node)
###       ("_cargs" ("_position" al)
###         ("_cargs" ("_position" a) ("_position" bll))))
###     ("_cargs" ("_position" y)
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" blr)
###           ("_cargs" ("_position" b) ("_position" br))))))))
###                                     ("_case1" ("_position" GT)
### ("\<^const>HOL.If" ("\<^const>HOL.eq" ("_position" br) ("_position" Leaf))
###   ("_applC" ("_position" Node)
###     ("_cargs"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" al)
###           ("_cargs" ("_position" a) ("_position" bl))))
###       ("_cargs" ("_position" b) ("_position" br))))
###   ("_case_syntax"
###     ("_applC" ("_position" splay)
###       ("_cargs" ("_position" x) ("_position" br)))
###     ("_case1"
###       ("_applC" ("_position" Node)
###         ("_cargs" ("_position" bll)
###           ("_cargs" ("_position" y) ("_position" blr))))
###       ("_applC" ("_position" Node)
###         ("_cargs"
###           ("_applC" ("_position" Node)
###             ("_cargs"
###               ("_applC" ("_position" Node)
###                 ("_cargs" ("_position" al)
###                   ("_cargs" ("_position" a) ("_position" bl))))
###               ("_cargs" ("_position" b) ("_position" bll))))
###           ("_cargs" ("_position" y)
###             ("_position" blr))))))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Splay_Map"
### 0.799s elapsed time, 0.875s cpu time, 0.092s GC time
Loading theory "Draft.Splay_MapMoreTemplates"
val templateLemmas =
   [("Splay_Map.inorder_splay",
     "inorder (Splay_Map.splay ?x ?t) = inorder ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Splay_Map.splay_Leaf_iff",
     "(Splay_Map.splay ?x ?t = \<langle>\<rangle>) =
      (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Splay_Map.inorder_inv_delete", "True & sorted1 (inorder ?t) ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app (template_hole 0, template_var 0))))
            )],
       template_predicate (template_hole 5))),
    ("Splay_Map.invar_delete",
     "invar ?m ==> invar (Splay_Map.delete ?a ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2), t_empty),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2), t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Splay_Map.invar_update", "invar ?m ==> invar (update ?a ?b ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2), t_empty),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2), t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Splay_Map.lookup_eq",
     "sorted1 (inorder ?t) ==>
      lookup ?t ?x = AList_Upd_Del.map_of (inorder ?t) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Splay_Map.map_delete",
     "invar ?m ==>
      lookup (Splay_Map.delete ?a ?m) = (lookup ?m)(?a := None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6), t_empty),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_var 0),
           template_hole 0)))),
    ("Splay_Map.inorder_delete_splay",
     "sorted1 (inorder ?t) ==>
      inorder (Splay_Map.delete ?x ?t) =
      AList_Upd_Del.del_list ?x (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 1))))),
    ("Splay_Map.inorder_lookup",
     "True & sorted1 (inorder ?t) ==>
      lookup ?t ?a = AList_Upd_Del.map_of (inorder ?t) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Splay_Map.map_update",
     "invar ?m ==> lookup (update ?a ?b ?m) = lookup ?m(?a |-> ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6), t_empty),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Splay_Map.inorder_update_splay",
     "sorted1 (inorder ?t) ==>
      inorder (update ?x ?y ?t) = upd_list ?x ?y (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app (template_hole 3, template_var 2))))),
    ("Splay_Map.inorder_delete",
     "True & sorted1 (inorder ?t) ==>
      inorder (Splay_Map.delete ?a ?t) =
      AList_Upd_Del.del_list ?a (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1))))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 1))))),
    ("Splay_Map.inorder_update",
     "True & sorted1 (inorder ?t) ==>
      inorder (update ?a ?b ?t) = upd_list ?a ?b (inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 2))))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app (template_hole 3, template_var 2))))),
    ("Splay_Map.inorder_splay_maxD",
     "[| splay_max ?t = \<langle>?l, ?a, ?r\<rangle>;
         sorted1 (inorder ?t) |]
      ==> inorder ?l @ [?a] = inorder ?t & ?r = \<langle>\<rangle>",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app (template_hole 6, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 6, template_var 2)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 1))),
                 template_app (template_hole 6, template_var 3))),
             template_app
              (template_app (template_hole 13, template_var 0),
               template_hole 0))
           ))),
    ("Splay_Map.sorted_splay",
     "[| sorted1 (inorder ?t);
         Splay_Map.splay ?x ?t = \<langle>?l, ?a, ?r\<rangle> |]
      ==> Sorted_Less.sorted
           (map fst (inorder ?l) @ ?x # map fst (inorder ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app (template_hole 5, template_var 4)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 4),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 0)))))
           ))),
    ("Splay_Map.splay_map_of_inorder",
     "[| Splay_Map.splay ?x ?t = \<langle>?l, ?a, ?r\<rangle>;
         sorted1 (inorder ?t) |]
      ==> AList_Upd_Del.map_of (inorder ?t) ?x =
          (if ?x = fst ?a then Some (snd ?a) else None)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_app (template_hole 7, template_var 3)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 7, template_var 3)),
                template_var 4)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app (template_hole 8, template_var 1))),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1))),
               template_hole 0)
             )))),
    ("Splay_Map.splay_code",
     "Splay_Map.splay ?x ?t =
      (case ?t of \<langle>\<rangle> => \<langle>\<rangle>
       | \<langle>al, a, ar\<rangle> =>
           case cmp ?x (fst a) of
           LT =>
             case al of \<langle>\<rangle> => ?t
             | \<langle>bl, b, br\<rangle> =>
                 case cmp ?x (fst b) of
                 LT =>
                   if bl = \<langle>\<rangle>
                   then \<langle>bl, b, \<langle>br, a, ar\<rangle>\<rangle>
                   else case Splay_Map.splay ?x bl of
                        \<langle>bll, y, blr\<rangle> =>
                          \<langle>bll, y,
                           \<langle>blr, b,
                            \<langle>br, a, ar\<rangle>\<rangle>\<rangle>
                 | EQ =>
                     \<langle>bl, b, \<langle>br, a, ar\<rangle>\<rangle>
                 | GT =>
                     if br = \<langle>\<rangle>
                     then \<langle>bl, b,
                           \<langle>br, a, ar\<rangle>\<rangle>
                     else case Splay_Map.splay ?x br of
                          \<langle>brl, y, brr\<rangle> =>
                            \<langle>\<langle>bl, b, brl\<rangle>, y,
                             \<langle>brr, a, ar\<rangle>\<rangle>
           | EQ => ?t
           | GT =>
               case ar of \<langle>\<rangle> => ?t
               | \<langle>bl, b, br\<rangle> =>
                   case cmp ?x (fst b) of
                   LT =>
                     if bl = \<langle>\<rangle>
                     then \<langle>\<langle>al, a, bl\<rangle>, b,
                           br\<rangle>
                     else case Splay_Map.splay ?x bl of
                          \<langle>bll, y, blr\<rangle> =>
                            \<langle>\<langle>al, a, bll\<rangle>, y,
                             \<langle>blr, b, br\<rangle>\<rangle>
                   | EQ =>
                       \<langle>\<langle>al, a, bl\<rangle>, b, br\<rangle>
                   | GT =>
                       if br = \<langle>\<rangle>
                       then \<langle>\<langle>al, a, bl\<rangle>, b,
                             br\<rangle>
                       else case Splay_Map.splay ?x br of
                            \<langle>bll, y, blr\<rangle> =>
                              \<langle>\<langle>\<langle>al, a, bl\<rangle>,
  b, bll\<rangle>,
                               y, blr\<rangle>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), t_empty),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Splay_MapMoreTemplates"
### 0.305s elapsed time, 0.449s cpu time, 0.052s GC time
val it = (): unit
