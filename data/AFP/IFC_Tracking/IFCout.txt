Loading theory "Draft.IFC" (required by "Draft.IFCMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.584s cpu time, 0.105s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.836s cpu time, 0.105s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.334s cpu time, 0.232s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs")
locale IFC_def
  fixes prob :: "('n, 'var, 'val, 'obs) ifc_problem"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale IFC
  fixes prob :: "('n, 'var, 'val, 'out) ifc_problem"
  assumes "IFC prob"
locale IFC_def
  fixes prob :: "('n, 'var, 'val, 'obs) ifc_problem"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.023s elapsed time, 3.863s cpu time, 0.983s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "cs_less"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "cpp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.099s elapsed time, 3.993s cpu time, 0.920s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "copp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "scpp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "scopp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "contradicts"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 6.230s cpu time, 1.157s GC time
Loading theory "Draft.Templates" (required by "Draft.IFCMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.177s cpu time, 0.064s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IFCMoreTemplates")
locale IFC
  fixes prob :: "('n, 'var, 'val, 'out) ifc_problem"
  assumes "IFC prob"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.526s elapsed time, 1.084s cpu time, 0.075s GC time
### theory "Draft.IFC"
### 2.836s elapsed time, 7.819s cpu time, 1.324s GC time
Loading theory "Draft.IFCMoreTemplates"
val templateLemmas =
   [("IFC.mono_ge_id", "ALL i. ?f i < ?f (Suc i) ==> ?i <= ?f ?i",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_var 1, template_var 0)))),
    ("IFC.LeastBI_ex", "EX k<=?n. ?P k ==> ?P (LEAST k. ?P k)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("IFC.LeastBI_ex", "EX k<=?n. ?P k ==> (LEAST k. ?P k) <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 1))),
    ("IFC.unbounded_nat_set_infinite",
     "ALL i. EX j>=i. j : ?A ==> infinite ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("IFC.filter_sorted_list_of_set",
     "finite ?xs ==>
      filter ?P (sorted_list_of_set ?xs) =
      sorted_list_of_set {x: ?xs. ?P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("IFC.GreatestBI", "EX k<=?n. ?P k ==> ?P (GREATEST k. k <= ?n & ?P k)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, t_empty))
           ))),
    ("IFC.GreatestB_le",
     "[| ?x <= ?n; ?P ?x |] ==> ?x <= (GREATEST k. k <= ?n & ?P k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, t_empty)))),
    ("IFC.insort_greater",
     "ALL x:set ?ls. x < ?y ==> insort ?y ?ls = ?ls @ [?y]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("IFC.GreatestB",
     "EX k<=?n. ?P k ==> (GREATEST k. k <= ?n & ?P k) <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, t_empty),
         template_var 1))),
    ("IFC.allB_atLeastLessThan_lower",
     "[| ?i <= ?j; ALL x:{?i..<?n}. ?P x |] ==> ALL x:{?j..<?n}. ?P x",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("IFC.mod_bound_instance",
     "[| ?j < ?i; !!j'. [| ?k < j'; j' mod ?i = ?j |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("IFC.insort_append_first",
     "ALL y:set ?ys. ?x <= y ==>
      insort ?x (?xs @ ?ys) = insort ?x ?xs @ ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, t_empty), template_var 1),
               template_var 0)),
           template_var 2)))),
    ("IFC.filter_insort",
     "sorted ?xs ==>
      filter ?P (insort ?x ?xs) =
      (if ?P ?x then insort ?x (filter ?P ?xs) else filter ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, t_empty), template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("IFC.three_cases",
     "[| ?A | ?B | ?C; ?A ==> ?thesis; ?B ==> ?thesis; ?C ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate (template_var 3)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("IFC.infinite_ascending",
     "[| infinite ?A;
         !!f. [| range f = ?A; ALL i. f i < f (Suc i) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("IFC.sorted_list_of_set_map_mono",
     "[| ALL n m. n < m --> ?f n < ?f m; finite ?A |]
      ==> map ?f (sorted_list_of_set ?A) = sorted_list_of_set (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IFC.sorted_list_of_set_append",
     "[| finite ?xs; finite ?ys; ALL x:?xs. ALL y:?ys. x < y |]
      ==> sorted_list_of_set (?xs Un ?ys) =
          sorted_list_of_set ?xs @ sorted_list_of_set ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("IFC.insort_map_mono",
     "ALL n m. n < m --> ?f n < ?f m ==>
      map ?f (insort ?n ?ns) = insort (?f ?n) (map ?f ?ns)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, t_empty),
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("IFC.nat_sym_cases",
     "[| !!a b. a < b ==> ?P a b; !!a. ?P a a; !!a b. ?P b a ==> ?P a b |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("IFC.option_neq_cases",
     "[| ?x ~= ?y; !!a. [| ?x = None; ?y = Some a |] ==> ?thesis;
         !!a. [| ?x = Some a; ?y = None |] ==> ?thesis;
         !!a b. [| ?x = Some a; ?y = Some b; a ~= b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("IFC.list_neq_prefix_cases",
     "[| ?ls ~= ?ls'; ?ls ~= []; ?ls' ~= [];
         !!xs x x' ys ys'.
            [| ?ls = xs @ [x] @ ys; ?ls' = xs @ [x'] @ ys'; x ~= x' |]
            ==> ?thesis;
         !!xs. [| ?ls = ?ls' @ xs; xs ~= [] |] ==> ?thesis;
         !!xs. [| ?ls @ xs = ?ls'; xs ~= [] |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.IFCMoreTemplates"
### 0.280s elapsed time, 0.412s cpu time, 0.000s GC time
val it = (): unit
