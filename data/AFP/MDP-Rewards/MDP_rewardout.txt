Loading theory "Draft.Bounded_Functions" (required by "Draft.MDP_rewardTemplates" via "Draft.MDP_reward")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MDP_rewardTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MDP_rewardTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MDP_cont" (required by "Draft.MDP_rewardTemplates" via "Draft.MDP_reward" via "Draft.MDP_disc")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.100s elapsed time, 0.432s cpu time, 0.000s GC time
locale discrete_MDP
  fixes Ms :: "'s measure"
    and Ma :: "'a measure"
    and A :: "'s => 'a set"
    and K :: "'s * 'a => 's measure"
  assumes "discrete_MDP Ms Ma A K"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.514s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MDP_rewardTemplates" via "Draft.ExtrEqs")
instantiation
  bfun :: (type, metric_space) metric_space
  dist_bfun == dist ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => real
  uniformity_bfun == uniformity ::
    ('a \<Rightarrow>\<^sub>b 'b * 'a \<Rightarrow>\<^sub>b 'b) filter
  open_bfun == open :: ('a \<Rightarrow>\<^sub>b 'b) set => bool
instantiation
  bfun :: (type, real_normed_vector) real_vector
  uminus_bfun == uminus ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  zero_bfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>b 'b
  minus_bfun == minus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  plus_bfun == plus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  scaleR_bfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
instantiation
  bfun :: (type, real_normed_vector) real_normed_vector
  sgn_bfun == sgn ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  norm_bfun == norm :: 'a \<Rightarrow>\<^sub>b 'b => real
### theory "Draft.MDP_cont"
### 0.558s elapsed time, 1.779s cpu time, 0.089s GC time
Loading theory "Draft.MDP_disc" (required by "Draft.MDP_rewardTemplates" via "Draft.MDP_reward")
### theory "HOL-Library.BigO"
### 0.676s elapsed time, 2.024s cpu time, 0.145s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MDP_rewardTemplates")
### Ambiguous input (line 16 of "$AFP/MDP-Rewards/MDP_disc.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_lebesgue_integral" ("_position" X)
###       ("_applC" ("_position" f) ("_position" X))
###       ("_applC" ("_position" stream_space) ("_position" M)))
###     ("_lebesgue_integral" ("_position" x)
###       ("_lebesgue_integral" ("_position" X)
###         ("_applC" ("_position" f)
###           ("\<^const>Omega_Words_Fun.build" ("_position" x)
###             ("_position" X)))
###         ("_applC" ("_position" stream_space) ("_position" M)))
###       ("_position" M))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_lebesgue_integral" ("_position" X)
###       ("_applC" ("_position" f) ("_position" X))
###       ("_applC" ("_position" stream_space) ("_position" M)))
###     ("_lebesgue_integral" ("_position" x)
###       ("_lebesgue_integral" ("_position" X)
###         ("_applC" ("_position" f)
###           ("\<^const>Stream.stream.SCons" ("_position" x) ("_position" X)))
###         ("_applC" ("_position" stream_space) ("_position" M)))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  bfun :: (type, ordered_real_normed_vector) ordered_real_normed_vector
  less_eq_bfun == less_eq ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
  less_bfun == less ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
instantiation
  bfun :: (type, one) one
  one_bfun == one_class.one :: 'a \<Rightarrow>\<^sub>b 'b
### theory "Draft.Bounded_Functions"
### 1.258s elapsed time, 3.876s cpu time, 0.280s GC time
Loading theory "Draft.Blinfun_Util" (required by "Draft.MDP_rewardTemplates" via "Draft.MDP_reward" via "Draft.MDP_reward_Util")
overloading
  blinfunpow \<equiv> compow ::
    nat => 'a \<Rightarrow>\<^sub>L 'a => 'a \<Rightarrow>\<^sub>L 'a
locale MDP_disc.discrete_MDP
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
  assumes "MDP_disc.discrete_MDP A"
consts
  blinfunpow ::
    "nat => 'a \<Rightarrow>\<^sub>L 'a => 'a \<Rightarrow>\<^sub>L 'a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.691s elapsed time, 2.094s cpu time, 0.478s GC time
### theory "Draft.Blinfun_Util"
### 0.428s elapsed time, 1.149s cpu time, 0.408s GC time
Loading theory "Draft.MDP_reward_Util" (required by "Draft.MDP_rewardTemplates" via "Draft.MDP_reward")
consts
  Pn :: "(('s * 'a) list => 's => 'a pmf) => 's pmf => nat => ('s * 'a) pmf"
### theory "Draft.MDP_reward_Util"
### 0.267s elapsed time, 0.548s cpu time, 0.049s GC time
### theory "Draft.MDP_disc"
### 1.574s elapsed time, 3.923s cpu time, 0.603s GC time
Loading theory "Draft.MDP_reward" (required by "Draft.MDP_rewardTemplates")
locale MDP_reward
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
  assumes "MDP_reward A r l"
locale MDP_att_\<L>
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
  assumes "MDP_att_\<L> A K r l"
locale MDP_act
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
    and arb_act :: "'a set => 'a"
  assumes "MDP_act A K r l arb_act"
locale MDP_finite_type
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
  assumes "MDP_finite_type A r l"
locale MDP_reward
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
  assumes "MDP_reward A r l"
locale MDP_att_\<L>
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
    and r :: "'s * 'a => real"
    and l :: "real"
  assumes "MDP_att_\<L> A K r l"
### theory "Draft.MDP_reward"
### 1.626s elapsed time, 1.723s cpu time, 0.154s GC time
Loading theory "Draft.MDP_rewardTemplates"
val templateLemmas =
   [("MDP_reward_Util.push_exp_bounded_linear",
     "bounded_linear (push_exp ?d)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("MDP_reward_Util.onorm_push_exp", "onorm (push_exp ?d) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("MDP_reward_Util.norm_push_exp_le_norm",
     "norm (push_exp ?d ?x) <= norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MDP_reward_Util.integrable_bfun_prob_space",
     "integrable (measure_pmf ?P) (%t. apply_bfun ?f (?F t))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty)
         )),
    ("MDP_reward_Util.bounded_abs", "bounded ?X' ==> bounded (abs ` ?X')",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("MDP_reward_Util.is_arg_max_linorderD",
     "is_arg_max ?f ?P ?x ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("MDP_reward_Util.banach'", "is_contraction ?C ==> EX! v. ?C v = v",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("MDP_reward_Util.has_arg_max_arg_max",
     "has_arg_max ?f ?X ==> (ARG_MAX ?f x. x : ?X) : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1), t_empty)),
             template_var 0)
           ))),
    ("MDP_reward_Util.bounded_abs_range",
     "bounded (range ?f) ==> bounded (range (%x. \<bar>?f x\<bar>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_hole 1))
           ))),
    ("MDP_reward_Util.summable_powser_const",
     "\<bar>?c\<bar> < 1 ==> summable (%n. ?c ^ n * ?x)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MDP_reward_Util.app_arg_max_eq_SUP",
     "has_arg_max ?f ?X ==> ?f (arg_max_on ?f ?X) = \<Squnion> (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("MDP_reward_Util.suminf_split_head'",
     "summable ?f ==> suminf ?f = ?f 0 + (\<Sum>n. ?f (Suc n))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_hole 1)),
           template_app (template_hole 3, t_empty))))),
    ("MDP_reward_Util.arg_max_on_in",
     "[| finite ?X; ?X ~= {} |] ==> arg_max_on ?f ?X : ?X",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 1)
           ))),
    ("MDP_reward_Util.is_arg_max_linorderD",
     "[| is_arg_max ?f ?P ?x; ?P ?y |] ==> ?f ?y <= ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app (template_var 3, template_var 1)))),
    ("MDP_reward_Util.arg_max_SUP",
     "is_arg_max ?f (%x. x : ?X) ?m ==> ?f ?m = \<Squnion> (?f ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2), t_empty),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("MDP_reward_Util.sum_apply_bfun",
     "apply_bfun (sum ?f {..<?n}) ?x = (SUM i<?n. apply_bfun (?f i) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty),
         template_app (template_hole 1, template_var 1)))),
    ("MDP_reward_Util.suminf_apply_bfun",
     "summable ?f ==>
      apply_bfun (\<Sum>i. ?f i) ?x = (\<Sum>i. apply_bfun (?f i) ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_app (template_hole 0, t_empty)))),
    ("MDP_reward_Util.has_arg_max_is_arg_max",
     "has_arg_max ?f ?X ==>
      is_arg_max ?f (%x. x : ?X) (ARG_MAX ?f x. x : ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1), t_empty),
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("MDP_reward_Util.app_arg_max_ge",
     "[| has_arg_max ?f ?X; ?x : ?X |] ==> ?f ?x <= ?f (arg_max_on ?f ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 0),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("MDP_reward_Util.banach'",
     "is_contraction ?C ==>
      (%n. (?C ^^ n) ?v) \<longlonglongrightarrow> (THE v. ?C v = v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))),
             template_hole 0)
           ))),
    ("MDP_reward_Util.bounded_integrable",
     "[| bounded (range ?v); measure_pmf.random_variable ?p borel ?v |]
      ==> integrable (measure_pmf ?p) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 1)
           ))),
    ("MDP_reward_Util.sum_disc_lim",
     "\<bar>?c\<bar> < 1 ==> (\<Sum>x. ?c ^ x * ?B) = ?B / (1 - ?c)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_hole 6)],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_hole 6),
             template_var 1))))),
    ("MDP_reward_Util.finite_is_arg_max",
     "[| finite ?X; ?X ~= {} |] ==> EX x. is_arg_max ?f (%x. x : ?X) x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MDP_reward_Util.finite_arg_max_eq_Max",
     "[| finite ?X; ?X ~= {} |] ==> ?f (arg_max_on ?f ?X) = Max (?f ` ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_var 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MDP_reward_Util.is_arg_max_linorderI",
     "[| ?P ?x; !!y. ?P y ==> ?f y <= ?f ?x |] ==> is_arg_max ?f ?P ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("MDP_reward_Util.is_arg_max_cong",
     "(!!x. ?P x ==> ?f x = ?g x) ==>
      is_arg_max ?f ?P ?x = is_arg_max ?g ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0)))),
    ("MDP_reward_Util.finite_arg_max_le",
     "[| finite ?X; ?X ~= {}; ?s : ?X |]
      ==> ?f ?s <= ?f (arg_max_on ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_var 0, template_var 1),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("MDP_reward_Util.is_arg_max_congI",
     "[| is_arg_max ?f ?P ?x; !!x. ?P x ==> ?f x = ?g x |]
      ==> is_arg_max ?g ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("MDP_reward_Util.abs_cSUP_le",
     "[| ?X ~= {}; bounded (?F ` ?X) |]
      ==> \<bar>\<Squnion> (?F ` ?X)\<bar>
          <= (\<Squnion>x\<in>?X. \<bar>?F x\<bar>)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, t_empty), template_var 1))))),
    ("MDP_reward_Util.SUP_is_arg_max",
     "[| ?x : ?X; bdd_above (?f ` ?X); ?f ?x = \<Squnion> (?f ` ?X) |]
      ==> is_arg_max ?f (%x. x : ?X) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            ),
        template_equation
         (template_app (template_var 0, template_var 2),
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0), t_empty),
             template_var 2)
           ))),
    ("MDP_reward_Util.lemma_4_3_1",
     "[| set_pmf ?p <= ?W; integrable (measure_pmf ?p) ?w;
         bounded (?w ` ?W) |]
      ==> measure_pmf.expectation ?p ?w <= \<Squnion> (?w ` ?W)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 2)),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("MDP_reward_Util.integral_measure_pmf_bind",
     "(!!x. \<bar>?f x\<bar> <= ?B) ==>
      integral\<^sup>L (measure_pmf ?M >>= (%x. measure_pmf (?N x))) ?f =
      measure_pmf.expectation ?M (%x. measure_pmf.expectation (?N x) ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               t_empty)),
           t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("MDP_reward_Util.bounded_SUP_mul",
     "[| ?X ~= {}; 0 <= ?l; bounded (?f ` ?X) |]
      ==> (\<Squnion>x\<in>?X. ?l * ?f x) = ?l * \<Squnion> (?f ` ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_inequation (less_equals, template_hole 5, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, t_empty),
               template_var 2)))))),
    ("MDP_reward_Util.tendsto_bfun_sandwich",
     "[| ?f \<longlonglongrightarrow> ?x; ?g \<longlonglongrightarrow> ?x;
         \<forall>\<^sub>F n in sequentially. ?f n <= ?h n;
         \<forall>\<^sub>F n in sequentially. ?h n <= ?g n |]
      ==> ?h \<longlonglongrightarrow> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2)),
             template_hole 2)
           ))),
    ("MDP_reward_Util.SUP_add_le",
     "[| ?X ~= {}; bounded (?B ` ?X); bounded (?A' ` ?X) |]
      ==> (\<Squnion>c\<in>?X. ?B c + ?A' c)
          <= \<Squnion> (?B ` ?X) + \<Squnion> (?A' ` ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, t_empty), template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, t_empty),
               template_var 2)))))),
    ("MDP_reward_Util.contraction_dist",
     "[| !!v u. dist (?C v) (?C u) <= ?c * dist v u; 0 <= ?c; ?c < 1 |]
      ==> (1 - ?c) * dist ?v (THE v. ?C v = v) <= dist ?v (?C ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_than, template_var 1, template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 2, template_hole 3),
               template_var 1)),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app (template_hole 1, t_empty))),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_var 2, template_var 0))))),
    ("MDP_reward_Util.le_SUP_diff",
     "[| ?X ~= {}; bounded (?B ` ?X); bounded (?A' ` ?X);
         \<Squnion> (?A' ` ?X) <= \<Squnion> (?B ` ?X) |]
      ==> 0 <= (\<Squnion>c\<in>?X. ?B c - ?A' c)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)))],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, t_empty), template_var 2))))),
    ("MDP_reward_Util.lemma_4_3_1'",
     "[| set_pmf ?p <= ?W; bounded (?w ` ?W); ?W ~= {};
         measure_pmf.expectation ?p ?w =
         (\<Squnion>p\<in>{p. set_pmf p <= ?W}.
             measure_pmf.expectation p ?w) |]
      ==> EX x:?W. measure_pmf.expectation ?p ?w = ?w x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_var 0),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, t_empty),
              template_app (template_hole 1, t_empty))))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), t_empty)
           ))),
    ("MDP_reward_Util.le_SUP_diff'",
     "[| ?X ~= {}; bounded (?B ` ?X); bounded (?A' ` ?X);
         \<Squnion> (?A' ` ?X) <= \<Squnion> (?B ` ?X) |]
      ==> \<Squnion> (?B ` ?X) - \<Squnion> (?A' ` ?X)
          <= (\<Squnion>c\<in>?X. ?B c - ?A' c)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)),
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 3, t_empty), template_var 2)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, t_empty), template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, t_empty), template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.MDP_rewardTemplates"
### 1.420s elapsed time, 2.121s cpu time, 0.737s GC time
val it = (): unit
