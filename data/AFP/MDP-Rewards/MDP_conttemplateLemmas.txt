   [("MDP_cont.distr_cong_simp",
     "[| ?M = ?K; sets ?N = sets ?L;
         !!x. x : space ?M =simp=> ?f x = ?g x |]
      ==> distr ?M ?N ?f = distr ?K ?L ?g",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("MDP_cont.Ionescu_Tulcea_CI_eq",
     "[| !!i h. h : space (Pi\<^sub>M {0..<i} ?N) ==> ?P i h = ?P' i h;
         Ionescu_Tulcea ?P ?N; Ionescu_Tulcea ?P' ?N |]
      ==> Ionescu_Tulcea.CI ?P ?N = Ionescu_Tulcea.CI ?P' ?N",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("MDP_cont.Ionescu_Tulcea_C_eq",
     "[| !!i h. h : space (Pi\<^sub>M {0..<i} ?N) ==> ?P i h = ?P' i h;
         Ionescu_Tulcea ?P ?N; Ionescu_Tulcea ?P' ?N |]
      ==> Ionescu_Tulcea.C ?P ?N 0 ?n (%x. undefined) =
          Ionescu_Tulcea.C ?P' ?N 0 ?n (%x. undefined)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_hole 5),
             template_var 0),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_hole 5),
             template_var 0),
           t_empty)))),
    ("MDP_cont.measure_eqI_PiM_sequence",
     "[| sets ?P = sets (Pi\<^sub>M UNIV ?M);
         sets ?Q = sets (Pi\<^sub>M UNIV ?M);
         !!A n.
            (!!i. A i : sets (?M i)) ==>
            emeasure ?P (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A)) =
            emeasure ?Q (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A));
         finite_measure ?P |]
      ==> ?P = ?Q",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation (template_var 2, template_var 0)))]
