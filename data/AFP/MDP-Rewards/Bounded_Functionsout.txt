Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bounded_FunctionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Bounded_Functions" (required by "Draft.Bounded_FunctionsTemplates")
Loading theory "Draft.Templates" (required by "Draft.Bounded_FunctionsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.295s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.336s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bounded_FunctionsTemplates" via "Draft.ExtrEqs")
instantiation
  bfun :: (type, metric_space) metric_space
  dist_bfun == dist ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => real
  uniformity_bfun == uniformity ::
    ('a \<Rightarrow>\<^sub>b 'b * 'a \<Rightarrow>\<^sub>b 'b) filter
  open_bfun == open :: ('a \<Rightarrow>\<^sub>b 'b) set => bool
instantiation
  bfun :: (type, real_normed_vector) real_vector
  uminus_bfun == uminus ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  zero_bfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>b 'b
  minus_bfun == minus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  plus_bfun == plus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  scaleR_bfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
instantiation
  bfun :: (type, real_normed_vector) real_normed_vector
  sgn_bfun == sgn ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  norm_bfun == norm :: 'a \<Rightarrow>\<^sub>b 'b => real
### theory "HOL-Library.BigO"
### 0.678s elapsed time, 1.389s cpu time, 0.090s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bounded_FunctionsTemplates")
instantiation
  bfun :: (type, ordered_real_normed_vector) ordered_real_normed_vector
  less_eq_bfun == less_eq ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
  less_bfun == less ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
instantiation
  bfun :: (type, one) one
  one_bfun == one_class.one :: 'a \<Rightarrow>\<^sub>b 'b
### theory "Draft.Bounded_Functions"
### 1.200s elapsed time, 2.567s cpu time, 0.136s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.011s cpu time, 0.103s GC time
Loading theory "Draft.Bounded_FunctionsTemplates"
val templateLemmas =
   [("Bounded_Functions.const_bfun", "(%x. ?b) : bfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)
         )),
    ("Bounded_Functions.apply_bfun_bfun", "apply_bfun ?f : bfun",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bounded_Functions.vec_bfun", "($) ?x : bfun",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bounded_Functions.bounded_apply_bfun",
     "bounded (range (apply_bfun ?x))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))
         )),
    ("Bounded_Functions.apply_bfun_one", "apply_bfun 1 ?x = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Bounded_Functions.finite_bfun", "?f : bfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)
         )),
    ("Bounded_Functions.le_norm_bfun", "apply_bfun ?f ?x <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.complete_bfun", "Cauchy ?f ==> convergent ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Bounded_Functions.abs_le_norm_bfun",
     "\<bar>apply_bfun ?f ?x\<bar> <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.norm_le_norm_bfun",
     "norm (apply_bfun ?f ?x) <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.norm_bfun_le_norm_vec",
     "norm (bfun.Bfun (($) ?x)) <= norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Bounded_Functions.bfun_bounded_norm_range",
     "bounded (range (%s. norm (apply_bfun ?v s)))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))
         )),
    ("Bounded_Functions.range_bfunI", "bounded (range ?f) ==> ?f : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Bounded_Functions.bounded_linear_bfun_nth",
     "bounded_linear ?f ==> bounded_linear (%v. bfun.Bfun (($) (?f v)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Bounded_Functions.norm_vec_le_norm_bfun",
     "norm (vec_lambda (apply_bfun ?x)) <= norm ?x * real CARD(?'d)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bounded_Functions.dist_bounded",
     "dist (apply_bfun ?f ?x) (apply_bfun ?g ?x) <= dist ?f ?g",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Bounded_Functions.bfun_spec", "?f : bfun ==> (%x. ?f (?g x)) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.uminus_cont", "?f : bfun ==> (%x. - ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.mem_PiC_iff",
     "(?x : Bounded_Functions.PiC ?I ?X) = (apply_bfun ?x : Pi ?I ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.bfun_eqD",
     "?f = ?g ==> apply_bfun ?f ?x = apply_bfun ?g ?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.less_eq_bfunD",
     "?f <= ?g ==> apply_bfun ?f ?x <= apply_bfun ?g ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.scaleR_cont",
     "?f : bfun ==> (%x. ?a *\<^sub>R ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.scaleR_cont'",
     "?f : bfun ==> (%x. ?a * ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.scale_bfun", "?f : bfun ==> (%x. ?k * ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.bfun_normI",
     "(!!x. norm (?f x) <= ?b) ==> ?f : bfun",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Bounded_Functions.mem_PiCD",
     "?x : Bounded_Functions.PiC ?I ?X ==> apply_bfun ?x : Pi ?I ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bounded_Functions.mem_PiCI",
     "apply_bfun ?x : Pi ?I ?X ==> ?x : Bounded_Functions.PiC ?I ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bounded_Functions.bfun_integral_bound",
     "?v : bfun ==> (%S. measure_pmf.expectation S ?v) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.bounded_apply_bfun'",
     "bounded (?F ` ?S) ==> bounded ((%b. apply_bfun (?F b) ?x) ` ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Bounded_Functions.norm_bound",
     "(!!x. norm (apply_bfun ?f x) <= ?b) ==> norm ?f <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Bounded_Functions.bfun_eqI",
     "(!!x. apply_bfun ?f x = apply_bfun ?g x) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Bounded_Functions.less_eq_bfunI",
     "(!!x. apply_bfun ?f x <= apply_bfun ?g x) ==> ?f <= ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Bounded_Functions.bfun_integral_bound'",
     "?v : bfun ==> (%S. measure_pmf.expectation (?F S) ?v) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.bfun_norm_le_SUP_norm",
     "?f : bfun ==> norm (?f ?x) <= (\<Squnion>x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_var 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("Bounded_Functions.dist_fun_lt_imp_dist_val_lt",
     "dist ?f ?g < ?e ==> dist (apply_bfun ?f ?x) (apply_bfun ?g ?x) < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Bounded_Functions.lim_add",
     "convergent ?P ==> lim (%n. ?P n + ?c) = lim ?P + ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)))),
    ("Bounded_Functions.tendsto_bfun_uniform_limit",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      uniform_limit UNIV (%x. apply_bfun (?f x)) (apply_bfun ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 2, template_var 1))),
             template_var 0)
           ))),
    ("Bounded_Functions.uniform_limit_tendsto_bfun",
     "uniform_limit UNIV (%x. apply_bfun (?f x)) (apply_bfun ?l) ?F ==>
      (?f \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 4, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Bounded_Functions.bfunE",
     "[| ?f : bfun; !!g. ?f = apply_bfun g ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Bounded_Functions.tendsto_add",
     "?P \<longlonglongrightarrow> ?L ==>
      (%n. ?P n + ?c) \<longlonglongrightarrow> ?L + ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_hole 1)
           ))),
    ("Bounded_Functions.bfun_tendsto_apply_bfun",
     "?F \<longlonglongrightarrow> ?y ==>
      (%n. apply_bfun (?F n) ?x)
      \<longlonglongrightarrow> apply_bfun ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 3)
           ))),
    ("Bounded_Functions.dist_bound",
     "(!!x. dist (apply_bfun ?f x) (apply_bfun ?g x) <= ?b) ==>
      dist ?f ?g <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Bounded_Functions.minus_cont",
     "[| ?f : bfun; ?g : bfun |] ==> (%x. ?f x - ?g x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.plus_cont",
     "[| ?f : bfun; ?g : bfun |] ==> (%x. ?f x + ?g x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.bfun_prob_space_integrable",
     "[| prob_space ?S; ?v : borel_measurable ?S; ?v : bfun |]
      ==> integrable ?S ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Bounded_Functions.bounded_dist_le_SUP_dist",
     "[| bounded (range ?f); bounded (range ?g) |]
      ==> dist (?f ?x) (?g ?x) <= (\<Squnion>x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app (template_var 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 4)))))]:
   (string * thm * template) list
### theory "Draft.Bounded_FunctionsTemplates"
### 1.396s elapsed time, 2.023s cpu time, 0.555s GC time
val it = (): unit
