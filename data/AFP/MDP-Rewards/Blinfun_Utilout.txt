Loading theory "Draft.Bounded_Functions" (required by "Draft.Blinfun_UtilTemplates" via "Draft.Blinfun_Util")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Blinfun_UtilTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Blinfun_UtilTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.091s elapsed time, 0.303s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.368s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Blinfun_UtilTemplates" via "Draft.ExtrEqs")
instantiation
  bfun :: (type, metric_space) metric_space
  dist_bfun == dist ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => real
  uniformity_bfun == uniformity ::
    ('a \<Rightarrow>\<^sub>b 'b * 'a \<Rightarrow>\<^sub>b 'b) filter
  open_bfun == open :: ('a \<Rightarrow>\<^sub>b 'b) set => bool
instantiation
  bfun :: (type, real_normed_vector) real_vector
  uminus_bfun == uminus ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  zero_bfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>b 'b
  minus_bfun == minus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  plus_bfun == plus ::
    'a \<Rightarrow>\<^sub>b 'b
    => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  scaleR_bfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
instantiation
  bfun :: (type, real_normed_vector) real_normed_vector
  sgn_bfun == sgn ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b
  norm_bfun == norm :: 'a \<Rightarrow>\<^sub>b 'b => real
### theory "HOL-Library.BigO"
### 0.589s elapsed time, 1.198s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Blinfun_UtilTemplates")
instantiation
  bfun :: (type, ordered_real_normed_vector) ordered_real_normed_vector
  less_eq_bfun == less_eq ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
  less_bfun == less ::
    'a \<Rightarrow>\<^sub>b 'b => 'a \<Rightarrow>\<^sub>b 'b => bool
instantiation
  bfun :: (type, one) one
  one_bfun == one_class.one :: 'a \<Rightarrow>\<^sub>b 'b
### theory "Draft.Bounded_Functions"
### 1.088s elapsed time, 2.353s cpu time, 0.159s GC time
Loading theory "Draft.Blinfun_Util" (required by "Draft.Blinfun_UtilTemplates")
overloading
  blinfunpow \<equiv> compow ::
    nat => 'a \<Rightarrow>\<^sub>L 'a => 'a \<Rightarrow>\<^sub>L 'a
consts
  blinfunpow ::
    "nat => 'a \<Rightarrow>\<^sub>L 'a => 'a \<Rightarrow>\<^sub>L 'a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.510s elapsed time, 1.062s cpu time, 0.120s GC time
### theory "Draft.Blinfun_Util"
### 0.252s elapsed time, 0.449s cpu time, 0.065s GC time
Loading theory "Draft.Blinfun_UtilTemplates"
val templateLemmas =
   [("Blinfun_Util.bfun_nonneg", "0 <= bfun_nonneg ?f",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Blinfun_Util.bounded_const", "bounded ((%_. ?x) ` ?X)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))
         )),
    ("Blinfun_Util.blinfun_compose_id", "?f o\<^sub>L id_blinfun = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Blinfun_Util.blinfun_compose_id", "id_blinfun o\<^sub>L ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Blinfun_Util.bounded_linear_apply_bfun",
     "bounded_linear (%x. apply_bfun x ?i)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Blinfun_Util.norm_bfun_pos", "norm (bfun_pos ?f) = norm ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Blinfun_Util.is_inverse\<^sub>L_comm",
     "is_inverse\<^sub>L ?X ?Y = is_inverse\<^sub>L ?Y ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Blinfun_Util.bfun_pos_zero", "(bfun_pos ?f = 0) = (?f = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Blinfun_Util.bfun_nonneg_split",
     "bfun_nonneg ?x - bfun_nonneg (- ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Blinfun_Util.bfun_pos_eq_nonneg",
     "bfun_pos ?n = bfun_nonneg ?n + bfun_nonneg (- ?n)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Blinfun_Util.bfun_nonneg_pos",
     "bfun_nonneg ?x + bfun_nonneg (- ?x) = bfun_pos ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Blinfun_Util.norm_blinfunpow_le", "norm (?f ^^ ?n) <= norm ?f ^ ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Blinfun_Util.inv\<^sub>L_eq",
     "is_inverse\<^sub>L ?f ?g ==> inv\<^sub>L ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Blinfun_Util.blinfunpow_assoc",
     "?F ^^ Suc ?n = ?F ^^ ?n o\<^sub>L ?F",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Blinfun_Util.norm_blinfun_normalized_le",
     "norm (blinfun_apply ?f ?v) / norm ?v <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Blinfun_Util.is_inverse\<^sub>L_D",
     "is_inverse\<^sub>L ?X ?Y ==> ?Y o\<^sub>L ?X = id_blinfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Blinfun_Util.is_inverse\<^sub>L_D",
     "is_inverse\<^sub>L ?X ?Y ==> ?X o\<^sub>L ?Y = id_blinfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Blinfun_Util.is_inverse\<^sub>L_ex1",
     "is_inverse\<^sub>L ?f ?g ==> EX! h. is_inverse\<^sub>L ?f h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Blinfun_Util.bounded_range_subset",
     "bounded (range ?f) ==> bounded (?f ` ?X')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Blinfun_Util.blinfun_compose_assoc",
     "?F o\<^sub>L ?G o\<^sub>L ?H = ?F o\<^sub>L (?G o\<^sub>L ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Blinfun_Util.is_inverse\<^sub>L_ex1'",
     "invertible\<^sub>L ?f ==> EX! x. is_inverse\<^sub>L ?f x",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Blinfun_Util.blincomp_scaleR_right",
     "(?a *\<^sub>R ?F) ^^ ?t = ?a ^ ?t *\<^sub>R ?F ^^ ?t",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Blinfun_Util.blinfun_compose_diff_right",
     "?f o\<^sub>L ?g - ?h = (?f o\<^sub>L ?g) - (?f o\<^sub>L ?h)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Blinfun_Util.invertible\<^sub>L_inf_sum",
     "norm ?X < 1 ==> invertible\<^sub>L (id_blinfun - ?X)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Blinfun_Util.banach_blinfun",
     "norm ?C < 1 ==> EX! v. blinfun_apply ?C v = v",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Blinfun_Util.inv_app2",
     "invertible\<^sub>L ?X ==> ?X o\<^sub>L inv\<^sub>L ?X = id_blinfun",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Blinfun_Util.inv_app1",
     "invertible\<^sub>L ?X ==> inv\<^sub>L ?X o\<^sub>L ?X = id_blinfun",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Blinfun_Util.is_inverse\<^sub>L_unique",
     "[| is_inverse\<^sub>L ?f ?g; is_inverse\<^sub>L ?f ?h |] ==> ?g = ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Blinfun_Util.blinfun_split",
     "blinfun_apply ?f ?x =
      blinfun_apply ?f (bfun_nonneg ?x) -
      blinfun_apply ?f (bfun_nonneg (- ?x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Blinfun_Util.bounded_apply_blinfun",
     "bounded (?F ` ?S) ==> bounded ((%b. blinfun_apply (?F b) ?x) ` ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Blinfun_Util.bounded_pow_blinfun",
     "bounded (range ?F) ==> bounded (range (%t. ?F t ^^ Suc ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 2))
           ))),
    ("Blinfun_Util.inv_app2'",
     "invertible\<^sub>L ?X ==>
      blinfun_apply ?X (blinfun_apply (inv\<^sub>L ?X) ?v) = ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Blinfun_Util.inv_app1'",
     "invertible\<^sub>L ?X ==>
      blinfun_apply (inv\<^sub>L ?X) (blinfun_apply ?X ?v) = ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Blinfun_Util.summable_inv_Q",
     "norm (id_blinfun - ?Q) < 1 ==> summable ((^^) (id_blinfun - ?Q))",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)),
          template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Blinfun_Util.inv\<^sub>L_inf_sum",
     "norm ?X < 1 ==> inv\<^sub>L (id_blinfun - ?X) = (\<Sum>i. ?X ^^ i)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app (template_hole 1, t_empty)))),
    ("Blinfun_Util.lim_blinfun_apply",
     "convergent ?X ==>
      (%n. blinfun_apply (?X n) ?u)
      \<longlonglongrightarrow> blinfun_apply (lim ?X) ?u",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Blinfun_Util.inv_norm_le",
     "norm ?Q < 1 ==>
      id_blinfun - ?Q o\<^sub>L (\<Sum>i. ?Q ^^ i) = id_blinfun",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app (template_hole 1, t_empty)),
         template_hole 2))),
    ("Blinfun_Util.inv_norm_le",
     "norm ?Q < 1 ==>
      (\<Sum>i. ?Q ^^ i) o\<^sub>L id_blinfun - ?Q = id_blinfun",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 0))),
    ("Blinfun_Util.is_inverse\<^sub>L_I",
     "[| ?X o\<^sub>L ?Y = id_blinfun; ?Y o\<^sub>L ?X = id_blinfun |]
      ==> is_inverse\<^sub>L ?X ?Y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Blinfun_Util.inv\<^sub>L_I",
     "[| ?f o\<^sub>L ?g = id_blinfun; ?g o\<^sub>L ?f = id_blinfun |]
      ==> ?g = inv\<^sub>L ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Blinfun_Util.inv_norm_le'",
     "norm ?Q < 1 ==>
      blinfun_apply (id_blinfun - ?Q)
       (blinfun_apply (\<Sum>i. ?Q ^^ i) ?x) =
      ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 1, t_empty)),
             template_var 0)),
         template_var 0))),
    ("Blinfun_Util.inv_norm_le'",
     "norm ?Q < 1 ==>
      blinfun_apply (\<Sum>i. ?Q ^^ i)
       (blinfun_apply (id_blinfun - ?Q) ?x) =
      ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Blinfun_Util.inv\<^sub>L_cancel_iff",
     "invertible\<^sub>L ?f ==>
      (blinfun_apply ?f ?x = ?y) =
      (?x = blinfun_apply (inv\<^sub>L ?f) ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Blinfun_Util.inv_one_sub_Q",
     "norm (id_blinfun - ?Q) < 1 ==>
      ?Q o\<^sub>L (\<Sum>i. (id_blinfun - ?Q) ^^ i) = id_blinfun",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, t_empty)),
         template_hole 5))),
    ("Blinfun_Util.inv_one_sub_Q",
     "norm (id_blinfun - ?Q) < 1 ==>
      (\<Sum>i. (id_blinfun - ?Q) ^^ i) o\<^sub>L ?Q = id_blinfun",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_hole 5))),
    ("Blinfun_Util.invertible\<^sub>L_I",
     "[| ?f o\<^sub>L ?g = id_blinfun; ?g o\<^sub>L ?f = id_blinfun |]
      ==> invertible\<^sub>L ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Blinfun_Util.norm_blinfun_mono_eq_one",
     "(!!v. 0 <= v ==> 0 <= blinfun_apply ?f v) ==>
      norm ?f = norm (blinfun_apply ?f 1)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 0))))),
    ("Blinfun_Util.invertible\<^sub>L_compose",
     "[| invertible\<^sub>L ?f; invertible\<^sub>L ?g |]
      ==> invertible\<^sub>L (?f o\<^sub>L ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Blinfun_Util.banach_blinfun",
     "norm ?C < 1 ==>
      (%n. blinfun_apply (?C ^^ n) ?v)
      \<longlonglongrightarrow> (THE v. blinfun_apply ?C v = v)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 1),
          template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))),
             template_hole 0)
           ))),
    ("Blinfun_Util.is_inverse\<^sub>L_compose",
     "[| invertible\<^sub>L ?f; invertible\<^sub>L ?g |]
      ==> is_inverse\<^sub>L (?f o\<^sub>L ?g)
           (inv\<^sub>L ?g o\<^sub>L inv\<^sub>L ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Blinfun_Util.blinfun_mono_norm_pos",
     "(!!v. 0 <= v ==> 0 <= blinfun_apply ?f v) ==>
      norm (blinfun_apply ?f ?n) <= norm (blinfun_apply ?f (bfun_pos ?n))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Blinfun_Util.inv\<^sub>L_compose",
     "[| invertible\<^sub>L ?f; invertible\<^sub>L ?g |]
      ==> inv\<^sub>L (?f o\<^sub>L ?g) =
          inv\<^sub>L ?g o\<^sub>L inv\<^sub>L ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Blinfun_Util.blinfunpow_nonneg",
     "[| !!v. (0::?'b) <= v ==> (0::?'b) <= blinfun_apply ?f v;
         (0::?'b) <= ?v |]
      ==> (0::?'b) <= blinfun_apply (?f ^^ ?n) ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Blinfun_Util.invertible\<^sub>L_D",
     "[| invertible\<^sub>L ?f;
         !!g. [| ?f o\<^sub>L g = id_blinfun; g o\<^sub>L ?f = id_blinfun |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Blinfun_Util.norm_blinfun_mono_eq_nonneg",
     "(!!v. 0 <= v ==> 0 <= blinfun_apply ?f v) ==>
      norm ?f =
      (\<Squnion>v\<in>{v. 0 <= v}. norm (blinfun_apply ?f v) / norm v)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 0, t_empty)))))),
    ("Blinfun_Util.norm_blinfun_mono_eq_nonneg'",
     "(!!v. 0 <= v ==> 0 <= blinfun_apply ?f v) ==>
      norm ?f =
      (\<Squnion>x\<in>{x. norm x = 1 & 0 <= x}.
          norm (blinfun_apply ?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Blinfun_Util.blinfunpow_mono",
     "[| !!u v. u <= v ==> blinfun_apply ?f u <= blinfun_apply ?f v;
         ?u <= ?v |]
      ==> blinfun_apply (?f ^^ ?n) ?u <= blinfun_apply (?f ^^ ?n) ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1)))),
    ("Blinfun_Util.norm_blinfun_mono_le_norm_one",
     "[| !!v. 0 <= v ==> 0 <= blinfun_apply ?f v; norm ?x = 1; 0 <= ?x |]
      ==> norm (blinfun_apply ?f ?x) <= norm (blinfun_apply ?f 1)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3),
        template_inequation (less_equals, template_hole 9, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_hole 0)))))]:
   (string * thm * template) list
### theory "Draft.Blinfun_UtilTemplates"
### 1.378s elapsed time, 2.051s cpu time, 0.632s GC time
val it = (): unit
