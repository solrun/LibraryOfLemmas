Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MDP_contTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MDP_contTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MDP_cont" (required by "Draft.MDP_contTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.092s elapsed time, 0.307s cpu time, 0.000s GC time
locale discrete_MDP
  fixes Ms :: "'s measure"
    and Ma :: "'a measure"
    and A :: "'s => 'a set"
    and K :: "'s * 'a => 's measure"
  assumes "discrete_MDP Ms Ma A K"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.416s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MDP_contTemplates" via "Draft.ExtrEqs")
### theory "Draft.MDP_cont"
### 0.519s elapsed time, 1.166s cpu time, 0.076s GC time
### theory "HOL-Library.BigO"
### 0.564s elapsed time, 0.965s cpu time, 0.035s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MDP_contTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.450s elapsed time, 0.500s cpu time, 0.072s GC time
Loading theory "Draft.MDP_contTemplates"
val templateLemmas =
   [("MDP_cont.distr_cong_simp",
     "[| ?M = ?K; sets ?N = sets ?L;
         !!x. x : space ?M =simp=> ?f x = ?g x |]
      ==> distr ?M ?N ?f = distr ?K ?L ?g",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("MDP_cont.Ionescu_Tulcea_CI_eq",
     "[| !!i h. h : space (Pi\<^sub>M {0..<i} ?N) ==> ?P i h = ?P' i h;
         Ionescu_Tulcea ?P ?N; Ionescu_Tulcea ?P' ?N |]
      ==> Ionescu_Tulcea.CI ?P ?N = Ionescu_Tulcea.CI ?P' ?N",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("MDP_cont.Ionescu_Tulcea_C_eq",
     "[| !!i h. h : space (Pi\<^sub>M {0..<i} ?N) ==> ?P i h = ?P' i h;
         Ionescu_Tulcea ?P ?N; Ionescu_Tulcea ?P' ?N |]
      ==> Ionescu_Tulcea.C ?P ?N 0 ?n (%x. undefined) =
          Ionescu_Tulcea.C ?P' ?N 0 ?n (%x. undefined)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_hole 5),
             template_var 0),
           t_empty),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_hole 5),
             template_var 0),
           t_empty)))),
    ("MDP_cont.measure_eqI_PiM_sequence",
     "[| sets ?P = sets (Pi\<^sub>M UNIV ?M);
         sets ?Q = sets (Pi\<^sub>M UNIV ?M);
         !!A n.
            (!!i. A i : sets (?M i)) ==>
            emeasure ?P (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A)) =
            emeasure ?Q (prod_emb UNIV ?M {..n} (Pi\<^sub>E {..n} A));
         finite_measure ?P |]
      ==> ?P = ?Q",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 1))),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_equation (template_var 2, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MDP_contTemplates"
### 1.143s elapsed time, 1.451s cpu time, 0.162s GC time
val it = (): unit
