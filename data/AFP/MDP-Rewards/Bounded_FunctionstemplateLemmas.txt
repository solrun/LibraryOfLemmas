   [("Bounded_Functions.const_bfun", "(%x. ?b) : bfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)
         )),
    ("Bounded_Functions.apply_bfun_bfun", "apply_bfun ?f : bfun",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bounded_Functions.vec_bfun", "($) ?x : bfun",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Bounded_Functions.bounded_apply_bfun",
     "bounded (range (apply_bfun ?x))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))
         )),
    ("Bounded_Functions.apply_bfun_one", "apply_bfun 1 ?x = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Bounded_Functions.finite_bfun", "?f : bfun",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)
         )),
    ("Bounded_Functions.le_norm_bfun", "apply_bfun ?f ?x <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.complete_bfun", "Cauchy ?f ==> convergent ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Bounded_Functions.abs_le_norm_bfun",
     "\<bar>apply_bfun ?f ?x\<bar> <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.norm_le_norm_bfun",
     "norm (apply_bfun ?f ?x) <= norm ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Bounded_Functions.norm_bfun_le_norm_vec",
     "norm (bfun.Bfun (($) ?x)) <= norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Bounded_Functions.bfun_bounded_norm_range",
     "bounded (range (%s. norm (apply_bfun ?v s)))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))
         )),
    ("Bounded_Functions.range_bfunI", "bounded (range ?f) ==> ?f : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Bounded_Functions.bounded_linear_bfun_nth",
     "bounded_linear ?f ==> bounded_linear (%v. bfun.Bfun (($) (?f v)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Bounded_Functions.norm_vec_le_norm_bfun",
     "norm (vec_lambda (apply_bfun ?x)) <= norm ?x * real CARD(?'d)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bounded_Functions.dist_bounded",
     "dist (apply_bfun ?f ?x) (apply_bfun ?g ?x) <= dist ?f ?g",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Bounded_Functions.bfun_spec", "?f : bfun ==> (%x. ?f (?g x)) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.uminus_cont", "?f : bfun ==> (%x. - ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.mem_PiC_iff",
     "(?x : Bounded_Functions.PiC ?I ?X) = (apply_bfun ?x : Pi ?I ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.bfun_eqD",
     "?f = ?g ==> apply_bfun ?f ?x = apply_bfun ?g ?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.less_eq_bfunD",
     "?f <= ?g ==> apply_bfun ?f ?x <= apply_bfun ?g ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bounded_Functions.scaleR_cont",
     "?f : bfun ==> (%x. ?a *\<^sub>R ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.scaleR_cont'",
     "?f : bfun ==> (%x. ?a * ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.scale_bfun", "?f : bfun ==> (%x. ?k * ?f x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.bfun_normI",
     "(!!x. norm (?f x) <= ?b) ==> ?f : bfun",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Bounded_Functions.mem_PiCD",
     "?x : Bounded_Functions.PiC ?I ?X ==> apply_bfun ?x : Pi ?I ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bounded_Functions.mem_PiCI",
     "apply_bfun ?x : Pi ?I ?X ==> ?x : Bounded_Functions.PiC ?I ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bounded_Functions.bfun_integral_bound",
     "?v : bfun ==> (%S. measure_pmf.expectation S ?v) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.bounded_apply_bfun'",
     "bounded (?F ` ?S) ==> bounded ((%b. apply_bfun (?F b) ?x) ` ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Bounded_Functions.norm_bound",
     "(!!x. norm (apply_bfun ?f x) <= ?b) ==> norm ?f <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Bounded_Functions.bfun_eqI",
     "(!!x. apply_bfun ?f x = apply_bfun ?g x) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Bounded_Functions.less_eq_bfunI",
     "(!!x. apply_bfun ?f x <= apply_bfun ?g x) ==> ?f <= ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Bounded_Functions.bfun_integral_bound'",
     "?v : bfun ==> (%S. measure_pmf.expectation (?F S) ?v) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0)
           ))),
    ("Bounded_Functions.bfun_norm_le_SUP_norm",
     "?f : bfun ==> norm (?f ?x) <= (\<Squnion>x. norm (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_var 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("Bounded_Functions.dist_fun_lt_imp_dist_val_lt",
     "dist ?f ?g < ?e ==> dist (apply_bfun ?f ?x) (apply_bfun ?g ?x) < ?e",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Bounded_Functions.lim_add",
     "convergent ?P ==> lim (%n. ?P n + ?c) = lim ?P + ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)))),
    ("Bounded_Functions.tendsto_bfun_uniform_limit",
     "(?f \<longlongrightarrow> ?l) ?F ==>
      uniform_limit UNIV (%x. apply_bfun (?f x)) (apply_bfun ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 2, template_var 1))),
             template_var 0)
           ))),
    ("Bounded_Functions.uniform_limit_tendsto_bfun",
     "uniform_limit UNIV (%x. apply_bfun (?f x)) (apply_bfun ?l) ?F ==>
      (?f \<longlongrightarrow> ?l) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 4, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Bounded_Functions.bfunE",
     "[| ?f : bfun; !!g. ?f = apply_bfun g ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Bounded_Functions.tendsto_add",
     "?P \<longlonglongrightarrow> ?L ==>
      (%n. ?P n + ?c) \<longlonglongrightarrow> ?L + ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_hole 1)
           ))),
    ("Bounded_Functions.bfun_tendsto_apply_bfun",
     "?F \<longlonglongrightarrow> ?y ==>
      (%n. apply_bfun (?F n) ?x)
      \<longlonglongrightarrow> apply_bfun ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 3)
           ))),
    ("Bounded_Functions.dist_bound",
     "(!!x. dist (apply_bfun ?f x) (apply_bfun ?g x) <= ?b) ==>
      dist ?f ?g <= ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Bounded_Functions.minus_cont",
     "[| ?f : bfun; ?g : bfun |] ==> (%x. ?f x - ?g x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.plus_cont",
     "[| ?f : bfun; ?g : bfun |] ==> (%x. ?f x + ?g x) : bfun",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 1)
           ))),
    ("Bounded_Functions.bfun_prob_space_integrable",
     "[| prob_space ?S; ?v : borel_measurable ?S; ?v : bfun |]
      ==> integrable ?S ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Bounded_Functions.bounded_dist_le_SUP_dist",
     "[| bounded (range ?f); bounded (range ?g) |]
      ==> dist (?f ?x) (?g ?x) <= (\<Squnion>x. dist (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app (template_var 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 4)))))]
