Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MDP_discTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MDP_discTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MDP_cont" (required by "Draft.MDP_discTemplates" via "Draft.MDP_disc")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.265s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.105s elapsed time, 0.325s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MDP_discTemplates" via "Draft.ExtrEqs")
locale discrete_MDP
  fixes Ms :: "'s measure"
    and Ma :: "'a measure"
    and A :: "'s => 'a set"
    and K :: "'s * 'a => 's measure"
  assumes "discrete_MDP Ms Ma A K"
### theory "Draft.MDP_cont"
### 0.524s elapsed time, 1.168s cpu time, 0.092s GC time
Loading theory "Draft.MDP_disc" (required by "Draft.MDP_discTemplates")
### theory "HOL-Library.BigO"
### 0.590s elapsed time, 1.194s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MDP_discTemplates")
### Ambiguous input (line 16 of "$AFP/MDP-Rewards/MDP_disc.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_lebesgue_integral" ("_position" X)
###       ("_applC" ("_position" f) ("_position" X))
###       ("_applC" ("_position" stream_space) ("_position" M)))
###     ("_lebesgue_integral" ("_position" x)
###       ("_lebesgue_integral" ("_position" X)
###         ("_applC" ("_position" f)
###           ("\<^const>Omega_Words_Fun.build" ("_position" x)
###             ("_position" X)))
###         ("_applC" ("_position" stream_space) ("_position" M)))
###       ("_position" M))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_lebesgue_integral" ("_position" X)
###       ("_applC" ("_position" f) ("_position" X))
###       ("_applC" ("_position" stream_space) ("_position" M)))
###     ("_lebesgue_integral" ("_position" x)
###       ("_lebesgue_integral" ("_position" X)
###         ("_applC" ("_position" f)
###           ("\<^const>Stream.stream.SCons" ("_position" x) ("_position" X)))
###         ("_applC" ("_position" stream_space) ("_position" M)))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale MDP_disc.discrete_MDP
  fixes A :: "'s => 'a set"
    and K :: "'s * 'a => 's pmf"
  assumes "MDP_disc.discrete_MDP A"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 1.118s cpu time, 0.167s GC time
consts
  Pn :: "(('s * 'a) list => 's => 'a pmf) => 's pmf => nat => ('s * 'a) pmf"
### theory "Draft.MDP_disc"
### 1.389s elapsed time, 2.414s cpu time, 0.534s GC time
Loading theory "Draft.MDP_discTemplates"
val templateLemmas =
   [("MDP_disc.prefix_restrict",
     "Omega_Words_Fun.prefix ?i (restrict ?y {0..<?i}) =
      Omega_Words_Fun.prefix ?i ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))),
           template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 0),
         template_var 0))),
    ("MDP_disc.prefix_cons",
     "Omega_Words_Fun.prefix (Suc ?n) ?seq =
      ?seq 0 # Omega_Words_Fun.prefix ?n (%n. ?seq (Suc n))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_hole 2)),
         template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_hole 2),
           template_var 0)))),
    ("MDP_disc.prefix_measurable",
     "Omega_Words_Fun.prefix ?i
      : Pi\<^sub>M {0..<?i} (%_. count_space UNIV) \<rightarrow>\<^sub>M
        count_space UNIV",
     template_predicate
      (
         template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 7),
                     template_var 0)),
                 t_empty)),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("MDP_disc.restrict_Suc",
     "restrict ?y {0..<Suc ?i} (Suc ?n) =
      (\<lambda>n\<in>{0..<?i}. ?y (Suc n)) ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MDP_discTemplates"
### 1.233s elapsed time, 1.576s cpu time, 0.158s GC time
val it = (): unit
