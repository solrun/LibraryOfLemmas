Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "Pure-ex.Guess" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library" via "Draft.Misc_Polynomial")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 99 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
### ML warning (line 150 of "~~/src/Pure/ex/Guess.thy"):
### Matches are not exhaustive.
### ML warning (line 157 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
signature GUESS =
  sig
    val guess:
       (binding * typ option * mixfix) list ->
         bool -> Proof.state -> Proof.state
    val guess_cmd:
       (binding * string option * mixfix) list ->
         bool -> Proof.state -> Proof.state
  end
structure Guess: GUESS
### theory "Pure-ex.Guess"
### 0.063s elapsed time, 0.248s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.507s cpu time, 0.032s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.More_List"
### 0.170s elapsed time, 0.672s cpu time, 0.049s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Infinite_Set"
### 0.266s elapsed time, 1.065s cpu time, 0.081s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.453s elapsed time, 1.812s cpu time, 0.149s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.885s cpu time, 0.146s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.258s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.871s elapsed time, 3.458s cpu time, 0.301s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.241s cpu time, 0.855s GC time
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.850s elapsed time, 3.200s cpu time, 0.331s GC time
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.037s elapsed time, 6.447s cpu time, 1.103s GC time
Loading theory "Draft.Templates" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.156s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sturm_MethodMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.079s cpu time, 0.074s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.244s elapsed time, 8.604s cpu time, 1.408s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.103s elapsed time, 6.654s cpu time, 2.092s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.251s elapsed time, 8.931s cpu time, 0.874s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.426s elapsed time, 11.318s cpu time, 1.007s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.363s elapsed time, 0.785s cpu time, 0.053s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library" via "Draft.Misc_Polynomial")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
### Cannot skip proof of schematic goal statement
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 0.899s elapsed time, 1.959s cpu time, 0.163s GC time
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.787s elapsed time, 1.418s cpu time, 0.110s GC time
Loading theory "Draft.Misc_Polynomial" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem" via "Draft.Sturm_Library")
### theory "Draft.Misc_Polynomial"
### 0.349s elapsed time, 0.448s cpu time, 0.133s GC time
Loading theory "Draft.Sturm_Library" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method" via "Draft.Sturm_Theorem")
### theory "Draft.Sturm_Library"
### 0.035s elapsed time, 0.035s cpu time, 0.000s GC time
Loading theory "Draft.Sturm_Theorem" (required by "Draft.Sturm_MethodMoreTemplates" via "Draft.Sturm_Method")
locale quasi_sturm_seq
  fixes ps :: "real poly list"
  assumes "quasi_sturm_seq ps"
locale sturm_seq
  fixes ps :: "real poly list"
    and p :: "real poly"
  assumes "sturm_seq ps p"
### Missing patterns in function definition:
### !!b. split_sign_changes [] b = undefined
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Sturm_Theorem"
### 0.678s elapsed time, 0.687s cpu time, 0.000s GC time
Loading theory "Draft.Sturm_Method" (required by "Draft.Sturm_MethodMoreTemplates")
### ML warning (line 98 of "$AFP/Sturm_Sequences/sturm.ML"):
### Matches are not exhaustive.
signature STURM =
  sig
    val sturm_conv: Proof.context -> conv
    val sturm_tac: Proof.context -> bool -> int -> tactic
  end
structure Sturm: STURM
### theory "Draft.Sturm_Method"
### 0.341s elapsed time, 0.497s cpu time, 0.212s GC time
Loading theory "Draft.Sturm_MethodMoreTemplates"
val templateLemmas =
   [("Sturm_Method.sturm_meta_spec", "(!!x. ?P x) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. 1 / ?b) = (%x. inverse ?b)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?a / ?b) = (%x. ?a / ?b)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio0", "PR_TAG (%x. ?a) = poly [:?a:]",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio0", "PR_TAG (poly ?p) = poly ?p",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Sturm_Method.sturm_id_PR_prio0", "{x. ?P x} = {x. PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Sturm_Method.poly_card_roots",
     "card {x. poly ?p x = 0} = count_roots ?p",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG (%x. x ^ ?n) = poly (monom 1 ?n)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?a * x ^ ?n) = poly (monom ?a ?n)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. x ^ ?n * ?a) = poly (monom ?a ?n)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Sturm_Method.sturm_id_PR_prio0",
     "(ALL x. ?P x) = (ALL x. ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "PR_TAG ?P = ?P' ==> PR_TAG (%x. ~ ~ ?P x) = ?P'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. x ^ ?n / ?a) = poly (monom (inverse ?a) ?n)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Sturm_Method.poly_card_roots_greater",
     "card {x. ?a < x & poly ?p x = 0} = count_roots_above ?p ?a",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Sturm_Method.poly_card_roots_leq",
     "card {x. x <= ?a & poly ?p x = 0} = count_roots_below ?p ?a",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?a / ?b * x ^ ?n) = poly (monom (?a / ?b) ?n)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. x ^ ?n * ?a / ?b) = poly (monom (?a / ?b) ?n)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Sturm_Method.sturm_id_PR_prio1",
     "{x. x < ?a & ?P x} = {x. x < ?a & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "{x. ?b < x & ?P x} = {x. ?b < x & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "{x. x <= ?a & ?P x} = {x. x <= ?a & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "{x. ?b <= x & ?P x} = {x. ?b <= x & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio0",
     "(ALL x. ?f x < ?g x) = (ALL x. PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Sturm_Method.poly_no_roots",
     "(ALL x. poly ?p x ~= 0) = (?p ~= 0 & count_roots ?p = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Sturm_Method.sturm_imp_conv",
     "(?a < ?x --> ?x < ?b --> ?c) = (?a < ?x & ?x < ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?a < ?x --> ?x <= ?b --> ?c) = (?a < ?x & ?x <= ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?x < ?b --> ?a < ?x --> ?c) = (?a < ?x & ?x < ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?x < ?b --> ?a <= ?x --> ?c) = (?a <= ?x & ?x < ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?a <= ?x --> ?x < ?b --> ?c) = (?a <= ?x & ?x < ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?a <= ?x --> ?x <= ?b --> ?c) = (?a <= ?x & ?x <= ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?x <= ?b --> ?a < ?x --> ?c) = (?a < ?x & ?x <= ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))),
         template_var 0))),
    ("Sturm_Method.sturm_imp_conv",
     "(?x <= ?b --> ?a <= ?x --> ?c) = (?a <= ?x & ?x <= ?b --> ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))),
         template_var 0))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. - ?f x) = poly (- ?p)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.poly_card_roots_less_leq",
     "card {x. ?a < x & x <= ?b & poly ?p x = 0} =
      count_roots_between ?p ?a ?b",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, t_empty)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Sturm_Method.poly_pos",
     "(ALL x. 0 < poly ?p x) =
      (?p ~= 0 & poly_inf ?p = 1 & count_roots ?p = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)))
           ))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x<?a. ?P x) = (ALL x<?a. ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x>?a. ?P x) = (ALL x>?a. ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x<=?a. ?P x) = (ALL x<=?a. ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x>=?a. ?P x) = (ALL x>=?a. ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. 0 = ?f x) = (%x. poly ?p x = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. ?f x = 0) = (%x. poly ?p x = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. 0 < ?f x) = (%x. 0 < poly ?p x)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. 0 <= ?f x) = (%x. 0 <= poly ?p x)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. ?a * ?f x) = poly (smult ?a ?p)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. ?f x * ?a) = poly (smult ?a ?p)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "PR_TAG ?f = poly ?p ==> PR_TAG (%x. ?f x ^ ?n) = poly (?p ^ ?n)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.poly_no_roots_greater",
     "(ALL x>?a. poly ?p x ~= 0) = (?p ~= 0 & count_roots_above ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Sturm_Method.poly_no_roots_leq",
     "(ALL x<=?a. poly ?p x ~= 0) =
      (?p ~= 0 & count_roots_below ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. 0 < ?f x) = (%x. poly (- ?p) x < 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. ?f x < 0) = (%x. 0 < poly (- ?p) x)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. 0 <= ?f x) = (%x. poly (- ?p) x <= 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. ?f x <= 0) = (%x. 0 <= poly (- ?p) x)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. ?f x / ?a) = poly (smult (inverse ?a) ?p)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), t_empty)],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. 0 ~= ?f x) = (%x. poly ?p x ~= 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio1",
     "PR_TAG ?f = poly ?p ==>
      PR_TAG (%x. ?f x ~= 0) = (%x. poly ?p x ~= 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "{x. ?a < x & x < ?b & ?P x} = {x. ?a < x & x < ?b & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "{x. ?a < x & x <= ?b & ?P x} = {x. ?a < x & x <= ?b & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "{x. ?a <= x & x < ?b & ?P x} = {x. ?a <= x & x < ?b & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "{x. ?a <= x & x <= ?b & ?P x} = {x. ?a <= x & x <= ?b & PR_TAG ?P x}",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x<?a. ?f x < ?g x) = (ALL x<?a. PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x>?a. ?f x < ?g x) = (ALL x>?a. PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x<=?a. ?f x < ?g x) = (ALL x<=?a. PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio1",
     "(ALL x>=?a. ?f x < ?g x) = (ALL x>=?a. PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Method.poly_pos_greater",
     "(ALL x>?a. 0 < poly ?p x) =
      (?p ~= 0 & poly_inf ?p = 1 & count_roots_above ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_hole 0)))
           ))),
    ("Sturm_Method.poly_pos_leq",
     "(ALL x<=?a. 0 < poly ?p x) =
      (?p ~= 0 & poly_neg_inf ?p = 1 & count_roots_below ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_hole 0)))
           ))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?f x ^ Suc (Suc 0)) = poly ?p ==>
      PR_TAG (%x. ?f x * ?f x) = poly ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, t_empty), t_empty)],
       template_equation
        (template_app (template_hole 5, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?f x ^ Suc ?n) = poly ?p ==>
      PR_TAG (%x. ?f x * ?f x ^ ?n) = poly ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, t_empty), t_empty)],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?f x ^ Suc ?n) = poly ?p ==>
      PR_TAG (%x. ?f x ^ ?n * ?f x) = poly ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, t_empty), t_empty)],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("Sturm_Method.poly_card_roots_less",
     "card {x. x < ?a & poly ?p x = 0} =
      count_roots_below ?p ?a -
      (if poly ?p ?a = 0 & ?p ~= 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14, template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 0),
                             template_var 1)),
                         template_hole 8)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)))),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Sturm_Method.poly_card_roots_geq",
     "card {x. ?a <= x & poly ?p x = 0} =
      count_roots_above ?p ?a +
      (if poly ?p ?a = 0 & ?p ~= 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14, template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 0),
                             template_var 1)),
                         template_hole 8)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)))),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Sturm_Method.poly_no_roots_less",
     "(ALL x<?a. poly ?p x ~= 0) =
      (?p ~= 0 &
       count_roots_below ?p ?a = (if poly ?p ?a = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 0),
                           template_var 1)),
                       template_hole 8)),
                   template_hole 1),
                 template_hole 0)))
           ))),
    ("Sturm_Method.poly_no_roots_geq",
     "(ALL x>=?a. poly ?p x ~= 0) =
      (?p ~= 0 & poly ?p ?a ~= 0 & count_roots_above ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_var 1)),
                     template_hole 6))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_hole 0)))
           ))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a < x & x < ?b --> ?P x) =
      (ALL x. ?a < x & x < ?b --> ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 5, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a < x & x <= ?b --> ?P x) =
      (ALL x. ?a < x & x <= ?b --> ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 6, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a <= x & x < ?b --> ?P x) =
      (ALL x. ?a <= x & x < ?b --> ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 6, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a <= x & x <= ?b --> ?P x) =
      (ALL x. ?a <= x & x <= ?b --> ~ PR_TAG (%x. ~ ?P x) x)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 5, t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio2",
     "PR_TAG (%x. ?f x ^ (?m + ?n)) = poly ?p ==>
      PR_TAG (%x. ?f x ^ ?m * ?f x ^ ?n) = poly ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, t_empty), t_empty)],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("Sturm_Method.poly_no_roots_less_leq",
     "(ALL x. ?a < x & x <= ?b --> poly ?p x ~= 0) =
      (?b <= ?a | ?p ~= 0 & count_roots_between ?p ?a ?b = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2),
                     template_var 1)),
                 template_hole 0)))
           ))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x - ?g x) = poly (?p - ?q)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 3, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x + ?g x) = poly (?p + ?q)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 3, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x * ?g x) = poly (?p * ?q)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 3, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.poly_pos_less",
     "(ALL x<?a. 0 < poly ?p x) =
      (?p ~= 0 &
       poly_neg_inf ?p = 1 &
       count_roots_below ?p ?a = (if poly ?p ?a = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_hole 8))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 12, template_var 0),
                             template_var 1)),
                         template_hole 13)),
                     template_hole 1),
                   template_hole 0))))
           ))),
    ("Sturm_Method.poly_pos_geq",
     "(ALL x>=?a. 0 < poly ?p x) =
      (?p ~= 0 &
       poly_inf ?p = 1 & poly ?p ?a ~= 0 & count_roots_above ?p ?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 10, template_var 0),
                           template_var 1)),
                       template_hole 11))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)),
                   template_hole 0))))
           ))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a < x & x < ?b --> ?f x < ?g x) =
      (ALL x. ?a < x & x < ?b --> PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 5, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a < x & x <= ?b --> ?f x < ?g x) =
      (ALL x. ?a < x & x <= ?b --> PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 6, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a <= x & x < ?b --> ?f x < ?g x) =
      (ALL x. ?a <= x & x < ?b --> PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app (template_hole 6, t_empty))),
    ("Sturm_Method.sturm_id_PR_prio2",
     "(ALL x. ?a <= x & x <= ?b --> ?f x < ?g x) =
      (ALL x. ?a <= x & x <= ?b --> PR_TAG (%x. ?f x < ?g x) x)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 5, t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x = ?g x) = (%x. poly (?p - ?q) x = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x < ?g x) = (%x. 0 < poly (?q - ?p) x)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x <= ?g x) = (%x. 0 <= poly (?q - ?p) x)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 6, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?f = poly ?p; PR_TAG ?g = poly ?q |]
      ==> PR_TAG (%x. ?f x ~= ?g x) = (%x. poly (?p - ?q) x ~= 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 7, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 4, t_empty), t_empty))),
    ("Sturm_Method.poly_pos_between_less_leq",
     "(ALL x. ?a < x & x <= ?b --> 0 < poly ?p x) =
      (?b <= ?a |
       ?p ~= 0 & 0 < poly ?p ?b & count_roots_between ?p ?a ?b = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 8),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 0))))
           ))),
    ("Sturm_Method.poly_pos_between_leq_leq",
     "(ALL x. ?a <= x & x <= ?b --> 0 < poly ?p x) =
      (?b < ?a |
       ?p ~= 0 & 0 < poly ?p ?a & count_roots_between ?p ?a ?b = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 0))))
           ))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?P = (%x. poly ?p x = 0); PR_TAG ?Q = (%x. poly ?q x = 0) |]
      ==> PR_TAG (%x. ?P x & ?Q x) = (%x. poly (gcd ?p ?q) x = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 5, t_empty), t_empty))),
    ("Sturm_Method.PR_TAG_intro_prio0",
     "[| PR_TAG ?P = (%x. poly ?p x = 0); PR_TAG ?Q = (%x. poly ?q x = 0) |]
      ==> PR_TAG (%x. ?P x | ?Q x) = (%x. poly (?p * ?q) x = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3), t_empty),
        template_equation
         (template_app (template_hole 5, template_var 1), t_empty)],
       template_equation
        (template_app (template_hole 5, t_empty), t_empty))),
    ("Sturm_Method.poly_card_roots_less_less",
     "card {x. ?a < x & x < ?b & poly ?p x = 0} =
      count_roots_between ?p ?a ?b -
      (if poly ?p ?b = 0 & ?a < ?b & ?p ~= 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14, template_app (template_hole 13, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 0),
                             template_var 1)),
                         template_hole 8)),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 11, template_var 2),
                           template_var 1)),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2))))),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Sturm_Method.poly_no_roots_less_less",
     "(ALL x. ?a < x & x < ?b --> poly ?p x ~= 0) =
      (?b <= ?a |
       ?p ~= 0 &
       count_roots_between ?p ?a ?b = (if poly ?p ?b = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_var 0),
                             template_var 1)),
                         template_hole 9)),
                     template_hole 1),
                   template_hole 0))))
           ))),
    ("Sturm_Method.poly_no_roots_leq_leq",
     "(ALL x. ?a <= x & x <= ?b --> poly ?p x ~= 0) =
      (?b < ?a |
       ?p ~= 0 & poly ?p ?a ~= 0 & count_roots_between ?p ?a ?b = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 0),
                           template_var 2)),
                       template_hole 7))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 0))))
           ))),
    ("Sturm_Method.poly_card_roots_leq_leq",
     "card {x. ?a <= x & x <= ?b & poly ?p x = 0} =
      count_roots_between ?p ?a ?b +
      (if ?a <= ?b & poly ?p ?a = 0 & ?p ~= 0 | ?a = ?b & ?p = 0 then 1
       else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15, template_app (template_hole 14, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 12, template_var 2),
                             template_var 1)),
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_app
                                    (template_hole 10, template_var 0),
                                   template_var 2)),
                               template_hole 9)),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_var 0),
                               template_hole 2))))),
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app
                          (template_app (template_hole 11, template_var 2),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)))),
                 template_hole 1),
               template_hole 0))
           ))),
    ("Sturm_Method.poly_pos_between_leq_less",
     "(ALL x. ?a <= x & x < ?b --> 0 < poly ?p x) =
      (?b <= ?a |
       ?p ~= 0 &
       0 < poly ?p ?a &
       count_roots_between ?p ?a ?b =
       (if ?a < ?b & poly ?p ?b = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 12, template_hole 11),
                     template_app
                      (template_app (template_hole 10, template_var 0),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 12, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 10, template_var 0),
                                 template_var 1)),
                             template_hole 11))),
                       template_hole 1),
                     template_hole 0)))))
           ))),
    ("Sturm_Method.poly_pos_between_less_less",
     "(ALL x. ?a < x & x < ?b --> 0 < poly ?p x) =
      (?b <= ?a |
       ?p ~= 0 &
       0 < poly ?p ((?a + ?b) / 2) &
       count_roots_between ?p ?a ?b = (if poly ?p ?b = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 19,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 0),
                     template_hole 11))),
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_app (template_hole 18, template_hole 17),
                     template_app
                      (template_app (template_hole 16, template_var 0),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 2),
                             template_var 1)),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6)))))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 16, template_var 0),
                               template_var 1)),
                           template_hole 17)),
                       template_hole 1),
                     template_hole 0)))))
           ))),
    ("Sturm_Method.poly_no_roots_leq_less",
     "(ALL x. ?a <= x & x < ?b --> poly ?p x ~= 0) =
      (?b <= ?a |
       ?p ~= 0 &
       poly ?p ?a ~= 0 &
       count_roots_between ?p ?a ?b =
       (if ?a < ?b & poly ?p ?b = 0 then 1 else 0))",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 0),
                           template_var 2)),
                       template_hole 8))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 12, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_hole 9, template_var 0),
                                 template_var 1)),
                             template_hole 8))),
                       template_hole 1),
                     template_hole 0)))))
           ))),
    ("Sturm_Method.poly_card_roots_leq_less",
     "card {x. ?a <= x & x < ?b & poly ?p x = 0} =
      count_roots_between ?p ?a ?b +
      (if ?p ~= 0 & ?a < ?b & poly ?p ?a = 0 then 1 else 0) -
      (if ?p ~= 0 & ?a < ?b & poly ?p ?b = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16, template_app (template_hole 15, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_var 0),
                               template_hole 2))),
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 12, template_var 2),
                               template_var 1)),
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_app
                                  (template_hole 10, template_var 0),
                                 template_var 2)),
                             template_hole 9)))),
                     template_hole 1),
                   template_hole 0))),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_app (template_hole 12, template_var 2),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_var 0),
                             template_var 1)),
                         template_hole 9)))),
                 template_hole 1),
               template_hole 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Sturm_MethodMoreTemplates"
### 0.529s elapsed time, 0.711s cpu time, 0.066s GC time
val it = (): unit
