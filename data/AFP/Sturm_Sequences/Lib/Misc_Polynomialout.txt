Loading theory "Pure-ex.Guess" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 99 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
### ML warning (line 150 of "~~/src/Pure/ex/Guess.thy"):
### Matches are not exhaustive.
### ML warning (line 157 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
signature GUESS =
  sig
    val guess:
       (binding * typ option * mixfix) list ->
         bool -> Proof.state -> Proof.state
    val guess_cmd:
       (binding * string option * mixfix) list ->
         bool -> Proof.state -> Proof.state
  end
structure Guess: GUESS
### theory "Pure-ex.Guess"
### 0.083s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.659s cpu time, 0.035s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.More_List"
### 0.175s elapsed time, 0.685s cpu time, 0.062s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.294s elapsed time, 1.179s cpu time, 0.097s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.436s elapsed time, 1.744s cpu time, 0.166s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.926s cpu time, 0.164s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.262s cpu time, 0.164s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.866s elapsed time, 3.443s cpu time, 0.325s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.135s elapsed time, 4.304s cpu time, 0.898s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.052s elapsed time, 3.874s cpu time, 0.955s GC time
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.328s elapsed time, 7.275s cpu time, 1.926s GC time
Loading theory "Draft.Templates" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Misc_PolynomialMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.116s cpu time, 0.112s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.537s elapsed time, 9.638s cpu time, 2.209s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.256s elapsed time, 4.666s cpu time, 0.502s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 5.039s elapsed time, 11.325s cpu time, 2.851s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.223s elapsed time, 13.730s cpu time, 3.007s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.322s elapsed time, 0.368s cpu time, 0.035s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Misc_PolynomialMoreTemplates" via "Draft.Misc_Polynomial")
### Cannot skip proof of schematic goal statement
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.721s elapsed time, 0.836s cpu time, 0.116s GC time
Loading theory "Draft.Misc_Polynomial" (required by "Draft.Misc_PolynomialMoreTemplates")
### theory "Draft.Misc_Polynomial"
### 0.326s elapsed time, 0.355s cpu time, 0.043s GC time
Loading theory "Draft.Misc_PolynomialMoreTemplates"
val templateLemmas =
   [("Misc_Polynomial.unit_factor_field", "unit_factor ?x = ?x",
     template_equation
      (template_app (template_hole 0, template_var 0), template_var 0)),
    ("Misc_Polynomial.poly_inf_0_iff",
     "(poly_inf ?p = (0::?'a)) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Misc_Polynomial.poly_inf_0_iff",
     "(poly_neg_inf ?p = (0::?'a)) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Misc_Polynomial.normalize_field",
     "normalize ?x = (if ?x = (0::?'a) then 0::?'a else (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Misc_Polynomial.poly_lim_inf",
     "\<forall>\<^sub>F x in at_top. sgn (poly ?p x) = poly_inf ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Misc_Polynomial.poly_lim_neg_inf",
     "\<forall>\<^sub>F x in at_bot. sgn (poly ?p x) = poly_neg_inf ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Misc_Polynomial.poly_inf_mult",
     "poly_inf (?p * ?q) = poly_inf ?p * poly_inf ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Misc_Polynomial.poly_inf_mult",
     "poly_neg_inf (?p * ?q) = poly_neg_inf ?p * poly_neg_inf ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Misc_Polynomial.normalize_field_eq_1",
     "?x ~= (0::?'a) ==> normalize ?x = (1::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Misc_Polynomial.poly_neq_0_at_infinity",
     "?p ~= 0 ==> \<forall>\<^sub>F x in at_infinity. poly ?p x ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_hole 0)
           ))),
    ("Misc_Polynomial.poly_limit_aux",
     "((%x. poly ?p x / x ^ degree ?p) \<longlongrightarrow> lead_coeff ?p)
       at_infinity",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 3, template_var 0)))),
           template_hole 0)
         )),
    ("Misc_Polynomial.coprime_imp_no_common_roots",
     "coprime ?p ?q ==> ~ (poly ?p ?x = (0::?'a) & poly ?q ?x = (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 0)),
                     template_hole 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 0))
               )
           ))),
    ("Misc_Polynomial.poly_neighbourhood_without_roots",
     "?p ~= 0 ==> \<forall>\<^sub>F x in at ?x\<^sub>0. poly ?p x ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Misc_Polynomial.poly_different_sign_imp_root'",
     "sgn (poly ?p ?a) ~= sgn (poly ?p ?b) ==> EX x. poly ?p x = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Misc_Polynomial.poly_div_gcd_squarefree",
     "?p ~= 0 ==>
      coprime (?p div gcd ?p (pderiv ?p))
       (pderiv (?p div gcd ?p (pderiv ?p)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("Misc_Polynomial.poly_pos",
     "(ALL x. 0 < poly ?p x) = (poly_inf ?p = 1 & (ALL x. poly ?p x ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 8, t_empty))
           ))),
    ("Misc_Polynomial.poly_div_gcd_squarefree_aux",
     "pderiv ?p ~= 0 ==>
      coprime (?p div gcd ?p (pderiv ?p))
       (pderiv (?p div gcd ?p (pderiv ?p)))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 4, template_var 0)))))
           ))),
    ("Misc_Polynomial.poly_at_top_at_top",
     "[| 1 <= degree ?p; 0 < lead_coeff ?p |]
      ==> filterlim (poly ?p) at_top at_top",
     template_implication
      ([template_inequation
         (less_equals, template_hole 7,
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 6, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_hole 0)
           ))),
    ("Misc_Polynomial.poly_at_bot_at_top",
     "[| 1 <= degree ?p; lead_coeff ?p < 0 |]
      ==> filterlim (poly ?p) at_bot at_top",
     template_implication
      ([template_inequation
         (less_equals, template_hole 8,
          template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 7, template_var 0)),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_hole 1),
             template_hole 0)
           ))),
    ("Misc_Polynomial.poly_div_gcd_squarefree",
     "?p ~= 0 ==>
      (poly (?p div gcd ?p (pderiv ?p)) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 1)))),
             template_var 0),
           template_hole 0),
         template_equation
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Misc_Polynomial.poly_neighbourhood_same_sign",
     "poly ?p ?x\<^sub>0 ~= 0 ==>
      \<forall>\<^sub>F x in at ?x\<^sub>0.
         sgn (poly ?p x) = sgn (poly ?p ?x\<^sub>0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Misc_Polynomial.poly_div_gcd_squarefree_aux",
     "pderiv ?p ~= 0 ==>
      (poly (?p div gcd ?p (pderiv ?p)) ?x = (0::?'a)) =
      (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 7, template_var 1)))),
             template_var 0),
           template_hole 0),
         template_equation
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Misc_Polynomial.pderiv_div",
     "[| ?q dvd ?p; ?q ~= 0 |]
      ==> ?q * ?q dvd ?q * pderiv ?p - ?p * pderiv ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Misc_Polynomial.poly_div",
     "[| poly ?q ?x ~= (0::?'a); ?q dvd ?p |]
      ==> poly (?p div ?q) ?x = poly ?p ?x / poly ?q ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("Misc_Polynomial.poly_pos_less",
     "(ALL x<?a. 0 < poly ?p x) =
      (poly_neg_inf ?p = 1 & (ALL x<?a. poly ?p x ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 9, t_empty))
           ))),
    ("Misc_Polynomial.poly_pos_greater",
     "(ALL x>?a. 0 < poly ?p x) =
      (poly_inf ?p = 1 & (ALL x>?a. poly ?p x ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 9, t_empty))
           ))),
    ("Misc_Polynomial.poly_pos_leq",
     "(ALL x<=?a. 0 < poly ?p x) =
      (poly_neg_inf ?p = 1 & (ALL x<=?a. poly ?p x ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 10, t_empty))
           ))),
    ("Misc_Polynomial.poly_pos_geq",
     "(ALL x>=?a. 0 < poly ?p x) =
      (poly_inf ?p = 1 & (ALL x>=?a. poly ?p x ~= 0))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 10, t_empty))
           ))),
    ("Misc_Polynomial.pderiv_div",
     "[| ?q dvd ?p; ?q ~= 0 |]
      ==> pderiv (?p div ?q) =
          (?q * pderiv ?p - ?p * pderiv ?q) div (?q * ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1))))),
    ("Misc_Polynomial.poly_at_top_or_bot_at_bot",
     "[| 1 <= degree ?p; 0 < lead_coeff ?p |]
      ==> filterlim (poly ?p) (if even (degree ?p) then at_top else at_bot)
           at_bot",
     template_implication
      ([template_inequation
         (less_equals, template_hole 13,
          template_app (template_hole 12, template_var 0)),
        template_inequation
         (less_than, template_hole 10,
          template_app
           (template_app (template_hole 9, template_var 0),
            template_app (template_hole 12, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))),
                       template_app (template_hole 12, template_var 0))),
                   template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Misc_Polynomial.poly_at_bot_or_top_at_bot",
     "[| 1 <= degree ?p; lead_coeff ?p < 0 |]
      ==> filterlim (poly ?p) (if even (degree ?p) then at_bot else at_top)
           at_bot",
     template_implication
      ([template_inequation
         (less_equals, template_hole 13,
          template_app (template_hole 12, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 10, template_var 0),
            template_app (template_hole 12, template_var 0)),
          template_hole 9)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))),
                       template_app (template_hole 12, template_var 0))),
                   template_hole 1),
                 template_hole 0)),
             template_hole 1)
           ))),
    ("Misc_Polynomial.poly_different_sign_imp_root",
     "[| ?a < ?b; sgn (poly ?p ?a) ~= sgn (poly ?p ?b) |]
      ==> EX x>=?a. x <= ?b & poly ?p x = 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Misc_Polynomial.no_roots_inbetween_imp_same_sign",
     "[| ?a < ?b; ALL x. ?a <= x & x <= ?b --> poly ?p x ~= 0 |]
      ==> sgn (poly ?p ?a) = sgn (poly ?p ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Misc_Polynomial.fun_eq_in_ivl",
     "[| ?a <= ?b;
         ALL x.
            ?a <= x & x <= ?b -->
            (\<forall>\<^sub>F \<xi> in at x. ?f \<xi> = ?f x) |]
      ==> ?f ?a = ?f ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_var 0, template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Misc_Polynomial.poly_pos_between_less_leq",
     "(ALL x. ?a < x & x <= ?b --> 0 < poly ?p x) =
      ((?b <= ?a | 0 < poly ?p ?b) &
       (ALL x. ?a < x & x <= ?b --> poly ?p x ~= 0))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))),
         template_app (template_hole 9, t_empty)))),
    ("Misc_Polynomial.poly_pos_between_leq_less",
     "(ALL x. ?a <= x & x < ?b --> 0 < poly ?p x) =
      ((?b <= ?a | 0 < poly ?p ?a) &
       (ALL x. ?a <= x & x < ?b --> poly ?p x ~= 0))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)))),
         template_app (template_hole 9, t_empty)))),
    ("Misc_Polynomial.poly_pos_between_leq_leq",
     "(ALL x. ?a <= x & x <= ?b --> 0 < poly ?p x) =
      ((?b < ?a | 0 < poly ?p ?a) &
       (ALL x. ?a <= x & x <= ?b --> poly ?p x ~= 0))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)))),
         template_app (template_hole 9, t_empty)))),
    ("Misc_Polynomial.poly_pos_between_less_less",
     "(ALL x. ?a < x & x < ?b --> 0 < poly ?p x) =
      ((?b <= ?a | 0 < poly ?p ((?a + ?b) / 2)) &
       (ALL x. ?a < x & x < ?b --> poly ?p x ~= 0))",
     template_equation
      (template_app (template_hole 14, t_empty),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))))),
         template_app (template_hole 14, t_empty)))),
    ("Misc_Polynomial.poly_lhopital",
     "[| poly ?p ?x = 0; poly ?q ?x = 0; ?q ~= 0;
         (%x. poly (pderiv ?p) x / poly (pderiv ?q) x) \<midarrow>?x
         \<rightarrow> ?y |]
      ==> (%x. poly ?p x / poly ?q x) \<midarrow>?x\<rightarrow> ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_hole 9),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 1),
            template_var 2),
          template_hole 9),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 2, template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Misc_Polynomial.poly_roots_bounds",
     "[| ?p ~= 0;
         !!l u.
            [| l <= u; poly ?p l ~= 0; poly ?p u ~= 0;
               {x. l < x & x <= u & poly ?p x = 0} = {x. poly ?p x = 0};
               !!x. x <= l ==> sgn (poly ?p x) = sgn (poly ?p l);
               !!x. u <= x ==> sgn (poly ?p x) = sgn (poly ?p u) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Misc_Polynomial.polys_inf_sign_thresholds",
     "[| finite ?ps;
         !!l u.
            [| l <= u;
               !!p. [| p : ?ps; p ~= 0 |]
                    ==> {x. l < x & x <= u & poly p x = 0} =
                        {x. poly p x = 0};
               !!p x. [| p : ?ps; u <= x |] ==> sgn (poly p x) = poly_inf p;
               !!p x.
                  [| p : ?ps; x <= l |]
                  ==> sgn (poly p x) = poly_neg_inf p |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Misc_PolynomialMoreTemplates"
### 0.488s elapsed time, 0.694s cpu time, 0.110s GC time
val it = (): unit
