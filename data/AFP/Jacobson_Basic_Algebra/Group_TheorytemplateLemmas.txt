   [("Group_Theory.subgroup_transitive",
     "[| subgroup ?K ?H ?composition ?unit;
         subgroup ?H ?G ?composition ?unit |]
      ==> subgroup ?K ?G ?composition ?unit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Group_Theory.submonoid_transitive",
     "[| submonoid ?K ?N ?composition ?unit;
         submonoid ?N ?M ?composition ?unit |]
      ==> submonoid ?K ?M ?composition ?unit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Group_Theory.isomorphic_as_groups_symmetric",
     "(?G, ?composition, ?unit) \<cong>\<^sub>G
      (?G', ?composition', ?unit') ==>
      (?G', ?composition', ?unit') \<cong>\<^sub>G
      (?G, ?composition, ?unit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)))
           ))),
    ("Group_Theory.isomorphic_as_monoids_symmetric",
     "(?M, ?composition, ?unit) \<cong>\<^sub>M
      (?M', ?composition', ?unit') ==>
      (?M', ?composition', ?unit') \<cong>\<^sub>M
      (?M, ?composition, ?unit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)))
           )))]
