Loading theory "Draft.MessageGA" (required by "Draft.EventGAMoreTemplates" via "Draft.EventGA")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
specification
  invKey: invKey (invKey ?K) = ?K
  invKey_symmetric: all_symmetric --> invKey = id
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.617s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.081s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.288s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "partsp"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.980s elapsed time, 3.703s cpu time, 0.812s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.031s elapsed time, 3.817s cpu time, 0.737s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### Key ?K1 : synth ?H1 == Key ?K1 : ?H1
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "keyfreep"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
val impOfSubs = fn: thm -> thm
val Fake_insert_tac = fn: Proof.context -> int -> tactic
val Fake_insert_simp_tac = fn: Proof.context -> int -> tactic
val atomic_spy_analz_tac = fn: Proof.context -> int -> tactic
val spy_analz_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.MessageGA"
### 1.809s elapsed time, 6.084s cpu time, 1.000s GC time
Loading theory "Draft.EventGA" (required by "Draft.EventGAMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.004s elapsed time, 6.234s cpu time, 1.070s GC time
Loading theory "Draft.Templates" (required by "Draft.EventGAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EventGAMoreTemplates")
consts
  knows :: "agent => event list => msg set"
consts
  used :: "event list => msg set"
val analz_mono_contra_tac = fn: Proof.context -> int -> tactic
val synth_analz_mono_contra_tac = fn: Proof.context -> int -> tactic
### theory "Draft.EventGA"
### 0.466s elapsed time, 0.991s cpu time, 0.115s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.491s elapsed time, 0.643s cpu time, 0.054s GC time
Loading theory "Draft.EventGAMoreTemplates"
val templateLemmas =
   [("EventGA.used_nil_subset", "used [] <= used ?evs",
     template_inequation
      (less_equals, template_app (template_hole 1, template_hole 0),
       template_app (template_hole 1, template_var 0))),
    ("EventGA.initState_subset_knows", "initState ?A <= knows ?A ?evs",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("EventGA.parts_knows_subset_used",
     "parts (knows ?A ?evs) <= used ?evs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("EventGA.used_Gets", "used (Gets ?A ?X # ?evs) = used ?evs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("EventGA.knows_subset_knows_Cons",
     "knows ?A ?evs <= knows ?A (?e # ?evs)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("EventGA.knows_Gets", "knows ?A (Gets ?A' ?X # ?evs) = knows ?A ?evs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3), template_var 0))),
    ("EventGA.knows_subset_knows_Gets",
     "knows ?A ?evs <= knows ?A (Gets ?A' ?X # ?evs)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 3), template_var 2),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("EventGA.knows_subset_knows_Notes",
     "knows ?A ?evs <= knows ?A (Notes ?A' ?X # ?evs)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 3), template_var 2),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("EventGA.initState_into_used",
     "?X : parts (initState ?B) ==> ?X : used ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EventGA.knows_subset_knows_Says",
     "knows ?A ?evs <= knows ?A (Says ?A' ?B ?X # ?evs)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 4), template_var 3),
       template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("EventGA.Notes_imp_used", "Notes ?A ?X : set ?evs ==> ?X : used ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EventGA.usedI", "?c : parts (knows ?A ?evs) ==> ?c : used ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EventGA.Notes_imp_knows",
     "Notes ?A' ?X : set ?evs ==> ?X : knows ?A' ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("EventGA.Says_imp_used", "Says ?A ?B ?X : set ?evs ==> ?X : used ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EventGA.used_Notes",
     "used (Notes ?A ?X # ?evs) = parts {?X} Un used ?evs",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 6, template_var 0)))),
    ("EventGA.knows_Says",
     "knows ?A (Says ?A' ?B ?X # ?evs) = insert ?X (knows ?A ?evs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_var 0)))),
    ("EventGA.Says_imp_knows",
     "Says ?A' ?B ?X : set ?evs ==> ?X : knows ?A ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("EventGA.used_Says",
     "used (Says ?A ?B ?X # ?evs) = parts {?X} Un used ?evs",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 6, template_var 0)))),
    ("EventGA.Says_imp_analz",
     "Says ?A' ?B ?X : set ?evs ==> ?X : analz (knows ?A ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("EventGA.parts_insert_knows_A",
     "parts (insert ?X (knows ?A ?evs)) =
      parts {?X} Un parts (knows ?A ?evs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("EventGA.knows_partsEs",
     "[| Crypt ?K ?X : parts ?H; ?X : parts ?H ==> PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("EventGA.Says_imp_parts_knows",
     "[| Says ?A' ?B ?X : set ?evs;
         ?X : parts (knows ?A ?evs) ==> PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app (template_hole 3, template_var 2))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("EventGA.knows_Notes",
     "knows ?A (Notes ?A' ?X # ?evs) =
      (if ?A = ?A' then insert ?X (knows ?A ?evs) else knows ?A ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 0))),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 0))
           ))),
    ("EventGA.analz_mono_contra",
     "?c ~: analz (knows ?A (Gets ?A' ?X # ?evs)) ==>
      ?c ~: analz (knows ?A ?evs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app (template_hole 0, template_var 2),
                            template_var 1)),
                        template_var 0))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0)))
               )
           ))),
    ("EventGA.analz_mono_contra",
     "?c ~: analz (knows ?A (Notes ?A' ?X # ?evs)) ==>
      ?c ~: analz (knows ?A ?evs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app (template_hole 0, template_var 2),
                            template_var 1)),
                        template_var 0))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0)))
               )
           ))),
    ("EventGA.analz_impI",
     "(?Y ~: analz (knows ?A ?evs) ==> ?Q) ==>
      ?Y ~: analz (knows ?A ?evs) --> ?Q",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1))))),
             template_var 0)
           ))),
    ("EventGA.analz_mono_contra",
     "?c ~: analz (knows ?A (Says ?A' ?B ?X # ?evs)) ==>
      ?c ~: analz (knows ?A ?evs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 3),
                              template_var 2),
                            template_var 1)),
                        template_var 0))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 0)))
               )
           ))),
    ("EventGA.syan_impI",
     "(?Y ~: synth (analz (knows ?A ?evs)) ==> ?Q) ==>
      ?Y ~: synth (analz (knows ?A ?evs)) --> ?Q",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 1))))
                   )
               )],
          template_predicate (template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))))),
             template_var 0)
           ))),
    ("EventGA.knows_imp_Says_Gets_Notes_initState",
     "?X : knows ?A ?evs ==>
      EX A' B.
         Says A' B ?X : set ?evs |
         Notes ?A ?X : set ?evs | ?X : initState ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("EventGA.keysFor_parts_insert",
     "[| ?K : keysFor (parts (insert ?X ?G)); ?X : synth (analz ?H) |]
      ==> ?K : keysFor (parts (?G Un ?H)) | Key (invKey ?K) : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3))),
               template_app (template_hole 8, template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.EventGAMoreTemplates"
### 0.341s elapsed time, 0.470s cpu time, 0.063s GC time
val it = (): unit
