Loading theory "Draft.MessageGA" (required by "Draft.PublicGAMoreTemplates" via "Draft.PublicGA" via "Draft.EventGA")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
specification
  invKey: invKey (invKey ?K) = ?K
  invKey_symmetric: all_symmetric --> invKey = id
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.564s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.930s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.273s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.968s elapsed time, 3.668s cpu time, 0.848s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.034s elapsed time, 3.806s cpu time, 0.772s GC time
Proofs for inductive predicate(s) "analzp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "synthp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### Key ?K1 : synth ?H1 == Key ?K1 : ?H1
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "keyfreep"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val impOfSubs = fn: thm -> thm
val Fake_insert_tac = fn: Proof.context -> int -> tactic
val Fake_insert_simp_tac = fn: Proof.context -> int -> tactic
val atomic_spy_analz_tac = fn: Proof.context -> int -> tactic
val spy_analz_tac = fn: Proof.context -> int -> tactic
### theory "Draft.MessageGA"
### 1.794s elapsed time, 6.015s cpu time, 1.005s GC time
Loading theory "Draft.EventGA" (required by "Draft.PublicGAMoreTemplates" via "Draft.PublicGA")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.950s elapsed time, 6.095s cpu time, 1.061s GC time
Loading theory "Draft.Templates" (required by "Draft.PublicGAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PublicGAMoreTemplates")
consts
  knows :: "agent => event list => msg set"
consts
  used :: "event list => msg set"
val analz_mono_contra_tac = fn: Proof.context -> int -> tactic
val synth_analz_mono_contra_tac = fn: Proof.context -> int -> tactic
### theory "Draft.EventGA"
### 0.456s elapsed time, 0.959s cpu time, 0.101s GC time
Loading theory "Draft.PublicGA" (required by "Draft.PublicGAMoreTemplates")
specification
  injective_publicKey: publicKey ?b ?A = publicKey ?c ?A' ==> ?b = ?c & ?A = ?A'
specification
  inj_shrK: inj shrK
overloading
  initState \<equiv> initState :: agent => msg set
consts
  initState :: "agent => msg set"
### Rewrite rule not in simpset:
### ?f1 ` (?A1 Un ?B1) == ?f1 ` ?A1 Un ?f1 ` ?B1
### Ignoring duplicate rewrite rule:
### ~ ~ ?y == ?y
### Ignoring duplicate rewrite rule:
### (~ ?P1) = (~ ?Q1) == ?P1 = ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 ~= ?Q1 == ?P1 = (~ ?Q1)
### Ignoring duplicate rewrite rule:
### ?P1 | ~ ?P1 == True
### Ignoring duplicate rewrite rule:
### ~ ?P1 | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?x1 = ?x1 == True
### Ignoring duplicate rewrite rule:
### ~ True == False
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### (~ ?P1) = ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 = (~ ?P1) == False
### Ignoring duplicate rewrite rule:
### True = ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y = True == ?y
### Ignoring duplicate rewrite rule:
### False = ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 = False == ~ ?P1
### Ignoring duplicate rewrite rule:
### True --> ?y == ?y
### Ignoring duplicate rewrite rule:
### False --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> True == True
### Ignoring duplicate rewrite rule:
### ?P1 --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> False == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 --> ~ ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?y & True == ?y
### Ignoring duplicate rewrite rule:
### True & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & False == False
### Ignoring duplicate rewrite rule:
### False & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & ?P1 & ?Q1 == ?P1 & ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 & ~ ?P1 == False
### Ignoring duplicate rewrite rule:
### ~ ?P1 & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 | True == True
### Ignoring duplicate rewrite rule:
### True | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?y | False == ?y
### Ignoring duplicate rewrite rule:
### False | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 | ?P1 | ?Q1 == ?P1 | ?Q1
### Ignoring duplicate rewrite rule:
### ALL x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 == True
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x == True
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x = ?t1 --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 = x --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x ~= ?t1 == False
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 ~= x == False
### Ignoring duplicate rewrite rule:
### ?a1 : insert ?b1 ?A1 == ?a1 = ?b1 | ?a1 : ?A1
### Ignoring duplicate rewrite rule:
### ?c1 : {} == False
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 Un ?B1 == ?c1 : ?A1 | ?c1 : ?B1
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 Int ?B1 == ?c1 : ?A1 & ?c1 : ?B1
### Ignoring duplicate rewrite rule:
### ?c1 : - ?A1 == ?c1 ~: ?A1
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 - ?B1 == ?c1 : ?A1 & ?c1 ~: ?B1
### Ignoring duplicate rewrite rule:
### ?a1 : Collect ?P1 == ?P1 ?a1
### Ignoring duplicate rewrite rule:
### ?b1 : \<Union> (?B1 ` ?A1) == EX x:?A1. ?b1 : ?B1 x
### Ignoring duplicate rewrite rule:
### ?A1 : \<Union> ?C1 == EX X:?C1. ?A1 : X
### Ignoring duplicate rewrite rule:
### ?b1 : \<Inter> (?B1 ` ?A1) == ALL x:?A1. ?b1 : ?B1 x
### Ignoring duplicate rewrite rule:
### ?A1 : \<Inter> ?C1 == ALL X:?C1. ?A1 : X
### Ignoring duplicate rewrite rule:
### {} <= ?A1 == True
### Ignoring duplicate rewrite rule:
### insert ?x1 ?A1 <= ?B1 == ?x1 : ?B1 & ?A1 <= ?B1
### Ignoring duplicate rewrite rule:
### Key ?K1 ~: used ?evs1 ==> ?K1 : range shrK == False
structure Public:
  sig
    val analz_image_freshK_ss: simpset
    val basic_possibility_tac: Proof.context -> tactic
    val possibility_tac: Proof.context -> tactic
  end
### theory "Draft.PublicGA"
### 0.381s elapsed time, 0.803s cpu time, 0.101s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.115s cpu time, 0.101s GC time
Loading theory "Draft.PublicGAMoreTemplates"
val templateLemmas =
   [("PublicGA.analz_image_freshK_simps", "{} <= ?A",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("PublicGA.sym_shrK", "shrK ?X : symKeys",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("PublicGA.analz_image_freshK_simps", "EX x. x = ?t",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("PublicGA.analz_image_freshK_simps", "EX x. ?t = x",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("PublicGA.analz_image_freshK_simps", "?P ~= (~ ?P)",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 1, template_var 0))
         )),
    ("PublicGA.analz_image_freshK_simps", "(~ ?P) ~= ?P",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_var 0)
         )),
    ("PublicGA.analz_image_freshK_simps", "(ALL x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(EX x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(~ ~ ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(False & ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(True & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P & False) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P & True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(False | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(True | ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P | False) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P | True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?x = ?x) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(True = ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P = True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(False --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(True --> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P --> True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?c : {}) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("PublicGA.not_symKeys_pubK", "publicKey ?b ?A ~: symKeys",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0)
             )
         )),
    ("PublicGA.Nonce_notin_used_empty", "Nonce ?N ~: used []",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 1, template_hole 0))
             )
         )),
    ("PublicGA.invKey_shrK", "invKey (shrK ?A) = shrK ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PublicGA.keysFor_parts_initState",
     "keysFor (parts (initState ?C)) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(False = ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "(?P = False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "(?P --> False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "(?P & ~ ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(~ ?P & ?P) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(?P | ~ ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(~ ?P | ?P) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("PublicGA.shrK_in_initState", "Key (shrK ?A) : initState ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.shrK_in_used", "Key (shrK ?A) : used ?evs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.pubK_neq_shrK", "shrK ?A ~= publicKey ?b ?C",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PublicGA.shrK_neq_pubK", "publicKey ?b ?C ~= shrK ?A",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.not_symKeys_priK", "privateKey ?b ?A ~: symKeys",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_hole 0)
             )
         )),
    ("PublicGA.Nonce_notin_initState", "Nonce ?N ~: parts (initState ?B)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("PublicGA.Crypt_notin_used_empty", "Crypt ?K ?X ~: used []",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_hole 0))
             )
         )),
    ("PublicGA.analz_image_freshK_simps", "(?P | ?Q) = (?Q | ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("PublicGA.analz_image_freshK_simps", "(?P --> ~ ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "(?a : Collect ?P) = ?P ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 0, template_var 1))),
    ("PublicGA.shrK_in_knows", "Key (shrK ?A) : knows ?A ?evs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PublicGA.publicKey_in_initState",
     "Key (publicKey ?b ?A) : initState ?B",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.publicKey_into_used", "Key (publicKey ?b ?A) : used ?evs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.Nonce_supply1", "EX N. Nonce N ~: used ?evs",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("PublicGA.priK_neq_shrK", "shrK ?A ~= privateKey ?b ?C",
     template_negation
      (
         template_equation
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("PublicGA.priEK_noteq_shrK", "priEK ?A ~= shrK ?B",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.shrK_neq_priK", "privateKey ?b ?C ~= shrK ?A",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.shrK_notin_image_publicKey", "shrK ?x ~: publicKey ?b ` ?AA",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))
             )
         )),
    ("PublicGA.publicKey_notin_image_shrK", "publicKey ?b ?x ~: shrK ` ?AA",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("PublicGA.Crypt_notin_initState",
     "Crypt ?K ?X ~: parts (initState ?B)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("PublicGA.symKeys_invKey_iff",
     "(invKey ?K : symKeys) = (?K : symKeys)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("PublicGA.analz_image_freshK_simps", "(ALL x. x ~= ?t) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("PublicGA.analz_image_freshK_simps", "(ALL x. ?t ~= x) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("PublicGA.spies_pubK", "Key (publicKey ?b ?A) : knows ?B ?evs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PublicGA.priK_in_initState", "Key (privateKey ?b ?A) : initState ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.privateKey_into_used", "Key (privateKey ?b ?A) : used ?evs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PublicGA.publicKey_neq_privateKey",
     "publicKey ?c ?A' ~= privateKey ?b ?A",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))
         )),
    ("PublicGA.privateKey_neq_publicKey",
     "privateKey ?b ?A ~= publicKey ?c ?A'",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PublicGA.privateKey_notin_image_shrK",
     "privateKey ?b ?x ~: shrK ` ?AA",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("PublicGA.analz_image_freshK_simps", "(?P ~= ?Q) = (?P = (~ ?Q))",
     template_bimplication
      (template_negation
        (template_equation (template_var 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("PublicGA.analz_image_freshK_simps", "(?c : - ?A) = (?c ~: ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("PublicGA.analz_image_freshK_simps", "(?P & ?P & ?Q) = (?P & ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "(?P | ?P | ?Q) = (?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PublicGA.shrK_injective", "(shrK ?x = shrK ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("PublicGA.analz_image_freshK_simps", "((~ ?P) = (~ ?Q)) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("PublicGA.analz_spies_pubK",
     "Key (publicKey ?b ?A) : analz (knows ?B ?evs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("PublicGA.invKey_K", "?K : symKeys ==> invKey ?K = ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("PublicGA.not_SignatureE", "?b ~= Signature ==> ?b = Encryption",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_equation (template_var 0, template_hole 0))),
    ("PublicGA.shrK_notin_image_privateKey",
     "shrK ?x ~: invKey ` publicKey ?b ` ?AA",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0)))
             )
         )),
    ("PublicGA.privateKey_notin_image_publicKey",
     "privateKey ?b ?x ~: publicKey ?c ` ?AA",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0))
             )
         )),
    ("PublicGA.invKey_image_eq", "(invKey ?x : invKey ` ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("PublicGA.shrK_image_eq", "(shrK ?x : shrK ` ?AA) = (?x : ?AA)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PublicGA.publicKey_notin_image_privateKey",
     "publicKey ?b ?A ~: invKey ` publicKey ?c ` ?AS",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)))
             )
         )),
    ("PublicGA.analz_image_freshK_simps",
     "?A Un (?B Un ?C) = ?A Un ?B Un ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("PublicGA.analz_image_freshK_simps",
     "(?A : \<Inter> ?C) = (ALL X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("PublicGA.analz_image_freshK_simps",
     "(?A : \<Union> ?C) = (EX X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("PublicGA.analz_image_freshK_simps", "(?P | ?Q | ?R) = (?Q | ?P | ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("PublicGA.analz_image_freshK_simps",
     "(ALL x. x = ?t --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("PublicGA.analz_image_freshK_simps",
     "(ALL x. ?t = x --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("PublicGA.analz_image_freshK_simps", "(EX x. x = ?t & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("PublicGA.analz_image_freshK_simps", "(EX x. ?t = x & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("PublicGA.analz_image_freshK_simps",
     "insert (?f ?a) (?f ` ?B) = ?f ` insert ?a ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PublicGA.insert_Key_singleton",
     "insert (Key ?K) ?H = Key ` {?K} Un ?H",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 4),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("PublicGA.symKey_neq_priEK", "?K : symKeys ==> ?K ~= priEK ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_negation
        (
           template_equation
            (template_var 1,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("PublicGA.analz_image_freshK_simps",
     "?c : analz ?G ==> ?c : analz (?A Un ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PublicGA.Nonce_supply",
     "Nonce (SOME N. Nonce N ~: used ?evs) ~: used ?evs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, t_empty))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("PublicGA.analz_image_freshK_simps",
     "?f ` ?A Un ?f ` ?B = ?f ` (?A Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PublicGA.analz_image_freshK_simps",
     "(insert ?x ?A <= ?B) = (?x : ?B & ?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("PublicGA.analz_image_freshK_simps",
     "(?a : insert ?b ?A) = (?a = ?b | ?a : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("PublicGA.analz_image_freshK_simps",
     "(?c : ?A Int ?B) = (?c : ?A & ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("PublicGA.analz_image_freshK_simps",
     "(?c : ?A Un ?B) = (?c : ?A | ?c : ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("PublicGA.used_parts_subset_parts",
     "?X : used ?evs ==> parts {?X} <= used ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 4, template_var 0)))),
    ("PublicGA.analz_image_freshK_simps",
     "?X : analz ?H ==> analz (insert ?X ?H) = analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("PublicGA.shrK_neq", "Key ?K ~: used ?evs ==> shrK ?B ~= ?K",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("PublicGA.neq_shrK", "Key ?s ~: used ?evs ==> ?s ~= shrK ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_var 2, template_app (template_hole 0, template_var 0))
           ))),
    ("PublicGA.Nonce_supply_lemma", "EX N. ALL n>=N. Nonce n ~: used ?evs",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("PublicGA.analz_image_freshK_simps",
     "(?c : ?A - ?B) = (?c : ?A & ?c ~: ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("PublicGA.Key_not_used", "Key ?K ~: used ?evs ==> ?K ~: range shrK",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))
               )
           ))),
    ("PublicGA.symKeys_neq_imp_neq",
     "(?K : symKeys) ~= (?K' : symKeys) ==> ?K ~= ?K'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("PublicGA.publicKey_inject",
     "(publicKey ?b ?A = publicKey ?c ?A') = (?b = ?c & ?A = ?A')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PublicGA.insert_Key_image",
     "insert (Key ?K) (Key ` ?KK Un ?C) = Key ` insert ?K ?KK Un ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("PublicGA.analz_image_freshK_simps",
     "(?b : \<Inter> (?B ` ?A)) = (ALL x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("PublicGA.analz_image_freshK_simps",
     "(?b : \<Union> (?B ` ?A)) = (EX x:?A. ?b : ?B x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("PublicGA.publicKey_image_eq",
     "(publicKey ?b ?x : publicKey ?c ` ?AA) = (?b = ?c & ?x : ?AA)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PublicGA.injective_publicKey",
     "publicKey ?b ?A = publicKey ?c ?A' ==> ?b = ?c & ?A = ?A'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PublicGA.Crypt_imp_keysFor",
     "[| Crypt ?K ?X : ?H; ?K : symKeys |] ==> ?K : keysFor ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PublicGA.MPair_used_D",
     "\<lbrace>?X, ?Y\<rbrace> : used ?H ==> ?X : used ?H & ?Y : used ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("PublicGA.Crypt_analz_bad",
     "Crypt (shrK ?A) ?X : analz (knows ?A ?evs) ==>
      ?X : analz (knows ?A ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("PublicGA.privateKey_image_eq",
     "(privateKey ?b ?A : invKey ` publicKey ?c ` ?AS) =
      (?b = ?c & ?A : ?AS)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 4, template_hole 6),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 5, template_var 1)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PublicGA.analz_shrK_Decrypt",
     "[| Crypt (shrK ?A) ?X : analz ?H; Key (shrK ?A) : analz ?H |]
      ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 0,
                  template_app (template_hole 2, template_var 2))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("PublicGA.MPair_used",
     "[| \<lbrace>?X, ?Y\<rbrace> : used ?H;
         [| ?X : used ?H; ?Y : used ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("PublicGA.analz_Decrypt'",
     "[| Crypt ?K ?X : analz ?H; ?K : symKeys; Key ?K : analz ?H |]
      ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 0, template_var 2)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 3, template_var 0))
           ))),
    ("PublicGA.analz_image_freshK_lemma",
     "Key ?K : analz (Key ` ?nE Un ?H) --> ?K : ?nE | Key ?K : analz ?H ==>
      (Key ?K : analz (Key ` ?nE Un ?H)) = (?K : ?nE | Key ?K : analz ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_hole 6),
                          template_var 1)),
                      template_var 0)))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)),
                  template_app (template_hole 5, template_var 0))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 6),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app (template_hole 5, template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.PublicGAMoreTemplates"
### 0.374s elapsed time, 0.505s cpu time, 0.041s GC time
val it = (): unit
