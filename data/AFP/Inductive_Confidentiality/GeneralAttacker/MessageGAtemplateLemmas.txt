   [("MessageGA.analz_increasing", "?H <= analz ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.parts_increasing", "?H <= parts ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.synth_increasing", "?H <= synth ?H",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.invKey", "invKey (invKey ?K) = ?K",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("MessageGA.analz_subset_parts", "analz ?H <= parts ?H",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.Agent_synth", "Agent ?A : synth ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("MessageGA.Number_synth", "Number ?n : synth ?H",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("MessageGA.keysFor_image_Key", "keysFor (Key ` ?E) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("MessageGA.analz_idem", "analz (analz ?H) = analz ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.analz_parts", "analz (parts ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.parts_analz", "parts (analz ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("MessageGA.parts_idem", "parts (parts ?H) = parts ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.synth_idem", "synth (synth ?H) = synth ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MessageGA.Agent_neq_HPair", "Agent ?A ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Hash_neq_HPair", "Hash ?Z ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Key_neq_HPair", "Key ?K ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Nonce_neq_HPair", "Nonce ?N ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Number_neq_HPair", "Number ?N ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Hash_notin_image_Key", "Hash ?X ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("MessageGA.Nonce_Key_image_eq", "Nonce ?x ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("MessageGA.parts_emptyE", "?X : parts {} ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate (template_var 0))),
    ("MessageGA.keyfree_KeyE", "Key ?K : keyfree ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("MessageGA.Crypt_neq_HPair", "Crypt ?K ?X' ~= Hash[?X] ?Y",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MessageGA.Crypt_notin_image_Key", "Crypt ?K ?X ~: Key ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("MessageGA.keysFor_insert_Agent",
     "keysFor (insert (Agent ?A) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.keysFor_insert_Hash",
     "keysFor (insert (Hash ?X) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.keysFor_insert_Key",
     "keysFor (insert (Key ?K) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.keysFor_insert_Nonce",
     "keysFor (insert (Nonce ?N) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.keysFor_insert_Number",
     "keysFor (insert (Number ?N) ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.analz_image_Key", "analz (Key ` ?N) = Key ` ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("MessageGA.parts_image_Key", "parts (Key ` ?N) = Key ` ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("MessageGA.keysFor_insert_HPair",
     "keysFor (insert Hash[?X] ?Y ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.keysFor_insert_MPair",
     "keysFor (insert \<lbrace>?X, ?Y\<rbrace> ?H) = keysFor ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("MessageGA.analz_synth", "analz (synth ?H) = analz ?H Un synth ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("MessageGA.parts_synth", "parts (synth ?H) = parts ?H Un synth ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("MessageGA.invKey_eq", "(invKey ?K = invKey ?K') = (?K = ?K')",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("MessageGA.analz_insert",
     "insert ?X (analz ?H) <= analz (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.parts_insert_subset",
     "insert ?X (parts ?H) <= parts (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.synth_insert",
     "insert ?X (synth ?H) <= synth (insert ?X ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.keysFor_Un",
     "keysFor (?H Un ?H') = keysFor ?H Un keysFor ?H'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_Un", "parts (?G Un ?H) = parts ?G Un parts ?H",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("MessageGA.analz_analz_Un",
     "analz (analz ?G Un ?H) = analz (?G Un ?H)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MessageGA.analz_subset_iff",
     "(analz ?G <= analz ?H) = (?G <= analz ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.parts_subset_iff",
     "(parts ?G <= parts ?H) = (?G <= parts ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.synth_subset_iff",
     "(synth ?G <= synth ?H) = (?G <= synth ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.Key_synth_eq", "(Key ?K : synth ?H) = (Key ?K : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("MessageGA.Nonce_synth_eq", "(Nonce ?N : synth ?H) = (Nonce ?N : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("MessageGA.synth_simps", "(Nonce ?n : synth ?H) = (Nonce ?n : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("MessageGA.Key_image_eq", "(Key ?x : Key ` ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("MessageGA.Friend_image_eq", "(Friend ?x : Friend ` ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("MessageGA.parts_Un_subset2",
     "parts (?G Un ?H) <= parts ?G Un parts ?H",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("MessageGA.analz_Un", "analz ?G Un analz ?H <= analz (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.parts_Un_subset1",
     "parts ?G Un parts ?H <= parts (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.synth_Un", "synth ?G Un synth ?H <= synth (?G Un ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MessageGA.keysFor_mono", "?G <= ?H ==> keysFor ?G <= keysFor ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.analz_mono", "?G <= ?H ==> analz ?G <= analz ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.parts_mono", "?G <= ?H ==> parts ?G <= parts ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.synth_mono", "?G <= ?H ==> synth ?G <= synth ?H",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.analz_into_parts", "?c : analz ?H ==> ?c : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MessageGA.analzp_analz_eq",
     "analzp (%x. x : ?H) = (%x. x : analz ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("MessageGA.partsp_parts_eq",
     "partsp (%x. x : ?H) = (%x. x : parts ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("MessageGA.synthp_synth_eq",
     "synthp (%x. x : ?H) = (%x. x : synth ?H)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("MessageGA.analz_insert_Agent",
     "analz (insert (Agent ?agt) ?H) = insert (Agent ?agt) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.analz_insert_Hash",
     "analz (insert (Hash ?X) ?H) = insert (Hash ?X) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.analz_insert_Nonce",
     "analz (insert (Nonce ?N) ?H) = insert (Nonce ?N) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.analz_insert_Number",
     "analz (insert (Number ?N) ?H) = insert (Number ?N) (analz ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_insert_Agent",
     "parts (insert (Agent ?agt) ?H) = insert (Agent ?agt) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_insert_Hash",
     "parts (insert (Hash ?X) ?H) = insert (Hash ?X) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_insert_Key",
     "parts (insert (Key ?K) ?H) = insert (Key ?K) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_insert_Nonce",
     "parts (insert (Nonce ?N) ?H) = insert (Nonce ?N) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_insert_Number",
     "parts (insert (Number ?N) ?H) = insert (Number ?N) (parts ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.analz_analzD", "?X : analz (analz ?H) ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MessageGA.parts_partsD", "?X : parts (parts ?H) ==> ?X : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MessageGA.synth_synthD", "?X : synth (synth ?H) ==> ?X : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_hole 0,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MessageGA.keysFor_insert_Crypt",
     "keysFor (insert (Crypt ?K ?X) ?H) = insert (invKey ?K) (keysFor ?H)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 0)))),
    ("MessageGA.parts_insert",
     "parts (insert ?X ?H) = parts {?X} Un parts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app (template_hole 3, template_var 0)))),
    ("MessageGA.synth_analz_mono",
     "?G <= ?H ==> synth (analz ?G) <= synth (analz ?H)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("MessageGA.analz_insertI",
     "?c : analz ?G ==> ?c : analz (insert ?a ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("MessageGA.parts_insertI",
     "?c : parts ?G ==> ?c : parts (insert ?a ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("MessageGA.not_parts_not_analz", "?c ~: parts ?H ==> ?c ~: analz ?H",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("MessageGA.Crypt_imp_invKey_keysFor",
     "Crypt ?K ?X : ?H ==> invKey ?K : keysFor ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MessageGA.analz_synth_Un",
     "analz (synth ?G Un ?H) = analz (?G Un ?H) Un synth ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("MessageGA.analz_insert_eq",
     "?X : analz ?H ==> analz (insert ?X ?H) = analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.parts_cut_eq",
     "?X : parts ?H ==> parts (insert ?X ?H) = parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("MessageGA.analz_conj_parts",
     "(?X : analz ?H & ?X : parts ?H) = (?X : analz ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("MessageGA.analz_disj_parts",
     "(?X : analz ?H | ?X : parts ?H) = (?X : parts ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("MessageGA.keysFor_synth",
     "keysFor (synth ?H) = keysFor ?H Un invKey ` {K. Key K : ?H}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 7, template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, t_empty))))),
    ("MessageGA.keysFor_UN",
     "keysFor (\<Union> (?H ` ?A)) = (UN i:?A. keysFor (?H i))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("MessageGA.parts_insert_Crypt",
     "parts (insert (Crypt ?K ?X) ?H) =
      insert (Crypt ?K ?X) (parts (insert ?X ?H))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("MessageGA.parts_UN",
     "parts (\<Union> (?H ` ?A)) = (UN x:?A. parts (?H x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert (Agent ?C) ?A) =
      insert (Agent ?C) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert (Hash ?X) ?A) =
      insert (Hash ?X) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert (Nonce ?N) ?A) =
      insert (Nonce ?N) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert (Number ?N) ?A) =
      insert (Number ?N) (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0)))),
    ("MessageGA.synth_simps",
     "(Hash ?X : synth ?H) = (Hash ?X : ?H | ?X : synth ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("MessageGA.HPair_eq",
     "(Hash[?X'] ?Y' = Hash[?X] ?Y) = (?X' = ?X & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("MessageGA.analz_insert_Crypt_subset",
     "analz (insert (Crypt ?K ?X) ?H)
      <= insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("MessageGA.parts_UN_subset1",
     "(UN x:?A. parts (?H x)) <= parts (\<Union> (?H ` ?A))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("MessageGA.parts_UN_subset2",
     "parts (\<Union> (?H ` ?A)) <= (UN x:?A. parts (?H x))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("MessageGA.parts_insert_subset_Un",
     "?X : ?G ==> parts (insert ?X ?H) <= parts ?G Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("MessageGA.parts_singleton",
     "?X : parts ?H ==> EX Y:?H. ?X : parts {Y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("MessageGA.msg_Nonce_supply",
     "EX N. ALL n>=N. Nonce n ~: parts {?msg}",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("MessageGA.analz_UN_analz",
     "analz (UN i:?A. analz (?H i)) = analz (\<Union> (?H ` ?A))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("MessageGA.analz_insert_cong",
     "analz ?H = analz ?H' ==>
      analz (insert ?X ?H) = analz (insert ?X ?H')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MessageGA.Fake_analz_eq",
     "?X : synth (analz ?H) ==>
      synth (analz (insert ?X ?H)) = synth (analz ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("MessageGA.analz_trans",
     "[| ?X : analz ?G; ?G <= analz ?H |] ==> ?X : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MessageGA.parts_trans",
     "[| ?X : parts ?G; ?G <= parts ?H |] ==> ?X : parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MessageGA.synth_trans",
     "[| ?X : synth ?G; ?G <= synth ?H |] ==> ?X : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MessageGA.keyfree_CryptE",
     "[| Crypt ?K ?X : keyfree; ?X : keyfree ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("MessageGA.analz_insert_MPair",
     "analz (insert \<lbrace>?X, ?Y\<rbrace> ?H) =
      insert \<lbrace>?X, ?Y\<rbrace> (analz (insert ?X (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("MessageGA.parts_insert_MPair",
     "parts (insert \<lbrace>?X, ?Y\<rbrace> ?H) =
      insert \<lbrace>?X, ?Y\<rbrace> (parts (insert ?X (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert (Crypt ?X ?K') ?A) =
      insert (Crypt ?X ?K') (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Key ?K) (insert \<lbrace>?X, ?Y\<rbrace> ?A) =
      insert \<lbrace>?X, ?Y\<rbrace> (insert (Key ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Crypt ?X ?K) (insert (Agent ?C) ?A) =
      insert (Agent ?C) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Crypt ?X ?K) (insert (Hash ?X') ?A) =
      insert (Hash ?X') (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Crypt ?X ?K) (insert (Nonce ?N) ?A) =
      insert (Nonce ?N) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("MessageGA.pushes",
     "insert (Crypt ?X ?K) (insert (Number ?N) ?A) =
      insert (Number ?N) (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("MessageGA.HPair_eq_MPair",
     "(Hash[?X] ?Y = \<lbrace>?X', ?Y'\<rbrace>) =
      (?X' = Hash \<lbrace>?X, ?Y\<rbrace> & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2))
           ))),
    ("MessageGA.MPair_eq_HPair",
     "(\<lbrace>?X', ?Y'\<rbrace> = Hash[?X] ?Y) =
      (?X' = Hash \<lbrace>?X, ?Y\<rbrace> & ?Y' = ?Y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("MessageGA.Fake_parts_insert",
     "?X : synth (analz ?H) ==>
      parts (insert ?X ?H) <= synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app (template_hole 2, template_var 0))))),
    ("MessageGA.Fake_parts_sing",
     "?X : synth (analz ?H) ==> parts {?X} <= synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_app (template_hole 3, template_var 0))))),
    ("MessageGA.gen_analz_insert_eq",
     "[| ?X : analz ?H; ?H <= ?G |] ==> analz (insert ?X ?G) = analz ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("MessageGA.analz_cut",
     "[| ?Y : analz (insert ?X ?H); ?X : analz ?H |] ==> ?Y : analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MessageGA.synth_cut",
     "[| ?Y : synth (insert ?X ?H); ?X : synth ?H |] ==> ?Y : synth ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MessageGA.parts_insert2",
     "parts (insert ?X (insert ?Y ?H)) =
      parts {?X} Un parts {?Y} Un parts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 0))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))),
         template_app (template_hole 3, template_var 0)))),
    ("MessageGA.pushes",
     "insert (Crypt ?X ?K) (insert \<lbrace>?X', ?Y\<rbrace> ?A) =
      insert \<lbrace>?X', ?Y\<rbrace> (insert (Crypt ?X ?K) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 0)))),
    ("MessageGA.MPair_synth_analz",
     "(\<lbrace>?X, ?Y\<rbrace> : synth (analz ?H)) =
      (?X : synth (analz ?H) & ?Y : synth (analz ?H))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("MessageGA.Crypt_synth_eq",
     "Key ?K ~: ?H ==> (Crypt ?K ?X : synth ?H) = (Crypt ?K ?X : ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("MessageGA.analz_insert_Key",
     "?K ~: keysFor (analz ?H) ==>
      analz (insert (Key ?K) ?H) = insert (Key ?K) (analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("MessageGA.analz_insert_HPair",
     "analz (insert Hash[?X] ?Y ?H) =
      insert Hash[?X] ?Y
       (insert (Hash \<lbrace>?X, ?Y\<rbrace>) (analz (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("MessageGA.parts_insert_HPair",
     "parts (insert Hash[?X] ?Y ?H) =
      insert Hash[?X] ?Y
       (insert (Hash \<lbrace>?X, ?Y\<rbrace>) (parts (insert ?Y ?H)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("MessageGA.Fake_analz_insert",
     "?X : synth (analz ?G) ==>
      analz (insert ?X ?H) <= synth (analz ?G) Un analz (?G Un ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("MessageGA.analz_keyfree_into_Un",
     "[| ?X : analz (?G Un ?H); ?G <= keyfree |]
      ==> ?X : parts ?G Un analz ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_inequation (less_equals, template_var 1, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 4, template_var 0)))
           ))),
    ("MessageGA.parts_cut",
     "[| ?Y : parts (insert ?X ?G); ?X : parts ?H |]
      ==> ?Y : parts (?G Un ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("MessageGA.analz_UN_analz_lemma",
     "?X : analz (UN i:?A. analz (?H i)) ==>
      ?X : analz (\<Union> (?H ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, t_empty),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 0))))
           ))),
    ("MessageGA.keyfree_MPairE",
     "[| \<lbrace>?X, ?Y\<rbrace> : keyfree;
         [| ?X : keyfree; ?Y : keyfree |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 0)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("MessageGA.synth_simps",
     "(Crypt ?K ?X : synth ?H) =
      (Crypt ?K ?X : ?H | ?X : synth ?H & Key ?K : ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("MessageGA.synth_simps",
     "(\<lbrace>?X, ?Y\<rbrace> : synth ?H) =
      (\<lbrace>?X, ?Y\<rbrace> : ?H | ?X : synth ?H & ?Y : synth ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 2, template_var 0)))))),
    ("MessageGA.analz_insert_Crypt",
     "Key (invKey ?K) ~: analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H) = insert (Crypt ?K ?X) (analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 2))),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("MessageGA.analz_insert_Decrypt",
     "Key (invKey ?K) : analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H) =
      insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("MessageGA.lemma1",
     "Key (invKey ?K) : analz ?H ==>
      analz (insert (Crypt ?K ?X) ?H)
      <= insert (Crypt ?K ?X) (analz (insert ?X ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("MessageGA.lemma2",
     "Key (invKey ?K) : analz ?H ==>
      insert (Crypt ?K ?X) (analz (insert ?X ?H))
      <= analz (insert (Crypt ?K ?X) ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("MessageGA.analz_cong",
     "[| analz ?G = analz ?G'; analz ?H = analz ?H' |]
      ==> analz (?G Un ?H) = analz (?G' Un ?H')",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("MessageGA.analz_subset_cong",
     "[| analz ?G <= analz ?G'; analz ?H <= analz ?H' |]
      ==> analz (?G Un ?H) <= analz (?G' Un ?H')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("MessageGA.Fake_parts_insert_in_Un",
     "[| ?Z : parts (insert ?X ?H); ?X : synth (analz ?H) |]
      ==> ?Z : synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 4, template_var 0)))
           ))),
    ("MessageGA.Fake_parts_sing_imp_Un",
     "[| ?c : parts {?X}; ?X : synth (analz ?H) |]
      ==> ?c : synth (analz ?H) Un parts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("MessageGA.Hash_synth_analz",
     "?X ~: synth (analz ?H) ==>
      (Hash \<lbrace>?X, ?Y\<rbrace> : synth (analz ?H)) =
      (Hash \<lbrace>?X, ?Y\<rbrace> : analz ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app (template_hole 3, template_var 1))))),
    ("MessageGA.MPair_analz",
     "[| \<lbrace>?X, ?Y\<rbrace> : analz ?H;
         [| ?X : analz ?H; ?Y : analz ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("MessageGA.MPair_parts",
     "[| \<lbrace>?X, ?Y\<rbrace> : parts ?H;
         [| ?X : parts ?H; ?Y : parts ?H |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("MessageGA.synth_analz_insert_eq",
     "[| ?X : synth (analz ?H); ?H <= ?G |]
      ==> (Key ?K : analz (insert ?X ?G)) = (Key ?K : analz ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 4, template_var 1))))),
    ("MessageGA.analz_insert_eq_I",
     "(!!x. x : analz (insert ?X ?H) ==> x : insert ?X (analz ?H)) ==>
      analz (insert ?X ?H) = insert ?X (analz ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("MessageGA.parts_insert_eq_I",
     "(!!x. x : parts (insert ?X ?H) ==> x : insert ?X (parts ?H)) ==>
      parts (insert ?X ?H) = insert ?X (parts ?H)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("MessageGA.in_parts_UnE",
     "[| ?c : parts (?G Un ?H); ?c : parts ?G ==> ?P;
         ?c : parts ?H ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 2))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app (template_hole 1, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("MessageGA.analz_Crypt_if",
     "analz (insert (Crypt ?K ?X) ?H) =
      (if Key (invKey ?K) : analz ?H
       then insert (Crypt ?K ?X) (analz (insert ?X ?H))
       else insert (Crypt ?K ?X) (analz ?H))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2))),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app (template_hole 6, template_var 0))))),
    ("MessageGA.Crypt_synth_analz",
     "[| Key ?K : analz ?H; Key (invKey ?K) : analz ?H |]
      ==> (Crypt ?K ?X : synth (analz ?H)) = (?X : synth (analz ?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 3, template_var 2))),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)))))),
    ("MessageGA.analz_trivial",
     "[| ALL X Y. \<lbrace>X, Y\<rbrace> ~: ?H; ALL X K. Crypt K X ~: ?H |]
      ==> analz ?H = ?H",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("MessageGA.HPair_synth_analz",
     "?X ~: synth (analz ?H) ==>
      (Hash[?X] ?Y : synth (analz ?H)) =
      (Hash \<lbrace>?X, ?Y\<rbrace> : analz ?H & ?Y : synth (analz ?H))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0))),
               template_app (template_hole 5, template_var 1))),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)))))))]
