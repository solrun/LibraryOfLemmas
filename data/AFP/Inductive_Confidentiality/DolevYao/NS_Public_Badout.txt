Loading theory "Draft.Message" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.NS_Public_Bad" via "Draft.Public" via "Draft.Event")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
specification
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
  invKey: invKey (invKey ?K) = ?K
  invKey_symmetric: all_symmetric --> invKey = id
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.580s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.825s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.361s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.000s elapsed time, 3.795s cpu time, 0.852s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "analzp"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.933s cpu time, 0.835s GC time
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "synthp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### Key ?K1 : synth ?H1 == Key ?K1 : ?H1
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "keyfreep"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val impOfSubs = fn: thm -> thm
val Fake_insert_tac = fn: Proof.context -> int -> tactic
val Fake_insert_simp_tac = fn: Proof.context -> int -> tactic
val atomic_spy_analz_tac = fn: Proof.context -> int -> tactic
val spy_analz_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Message"
### 1.829s elapsed time, 6.131s cpu time, 1.005s GC time
Loading theory "Draft.Event" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.NS_Public_Bad" via "Draft.Public")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.979s elapsed time, 6.199s cpu time, 1.059s GC time
Loading theory "Draft.Templates" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NS_Public_BadMoreTemplates")
specification
  Spy_in_bad: Spy : bad
  Server_not_bad: Server ~: bad
consts
  knows :: "agent => event list => msg set"
consts
  used :: "event list => msg set"
val analz_mono_contra_tac = fn: Proof.context -> int -> tactic
val synth_analz_mono_contra_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Event"
### 0.486s elapsed time, 1.044s cpu time, 0.153s GC time
Loading theory "Draft.Public" (required by "Draft.NS_Public_BadMoreTemplates" via "Draft.NS_Public_Bad")
specification
  injective_publicKey: publicKey ?b ?A = publicKey ?c ?A' ==> ?b = ?c & ?A = ?A'
specification
  inj_shrK: inj shrK
overloading
  initState \<equiv> initState :: agent => msg set
consts
  initState :: "agent => msg set"
### Rewrite rule not in simpset:
### ?f1 ` (?A1 Un ?B1) == ?f1 ` ?A1 Un ?f1 ` ?B1
### Ignoring duplicate rewrite rule:
### ~ ~ ?y == ?y
### Ignoring duplicate rewrite rule:
### (~ ?P1) = (~ ?Q1) == ?P1 = ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 ~= ?Q1 == ?P1 = (~ ?Q1)
### Ignoring duplicate rewrite rule:
### ?P1 | ~ ?P1 == True
### Ignoring duplicate rewrite rule:
### ~ ?P1 | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?x1 = ?x1 == True
### Ignoring duplicate rewrite rule:
### ~ True == False
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### (~ ?P1) = ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 = (~ ?P1) == False
### Ignoring duplicate rewrite rule:
### True = ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y = True == ?y
### Ignoring duplicate rewrite rule:
### False = ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 = False == ~ ?P1
### Ignoring duplicate rewrite rule:
### True --> ?y == ?y
### Ignoring duplicate rewrite rule:
### False --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> True == True
### Ignoring duplicate rewrite rule:
### ?P1 --> ?P1 == True
### Ignoring duplicate rewrite rule:
### ?P1 --> False == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?P1 --> ~ ?P1 == ~ ?P1
### Ignoring duplicate rewrite rule:
### ?y & True == ?y
### Ignoring duplicate rewrite rule:
### True & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & False == False
### Ignoring duplicate rewrite rule:
### False & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 & ?P1 & ?Q1 == ?P1 & ?Q1
### Ignoring duplicate rewrite rule:
### ?P1 & ~ ?P1 == False
### Ignoring duplicate rewrite rule:
### ~ ?P1 & ?P1 == False
### Ignoring duplicate rewrite rule:
### ?P1 | True == True
### Ignoring duplicate rewrite rule:
### True | ?P1 == True
### Ignoring duplicate rewrite rule:
### ?y | False == ?y
### Ignoring duplicate rewrite rule:
### False | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?y | ?y == ?y
### Ignoring duplicate rewrite rule:
### ?P1 | ?P1 | ?Q1 == ?P1 | ?Q1
### Ignoring duplicate rewrite rule:
### ALL x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. ?y == ?y
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 == True
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x == True
### Ignoring duplicate rewrite rule:
### EX x. x = ?t1 & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### EX x. ?t1 = x & ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x = ?t1 --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 = x --> ?P1 x == ?P1 ?t1
### Ignoring duplicate rewrite rule:
### ALL x. x ~= ?t1 == False
### Ignoring duplicate rewrite rule:
### ALL x. ?t1 ~= x == False
### Ignoring duplicate rewrite rule:
### ?a1 : insert ?b1 ?A1 == ?a1 = ?b1 | ?a1 : ?A1
### Ignoring duplicate rewrite rule:
### ?c1 : {} == False
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 Un ?B1 == ?c1 : ?A1 | ?c1 : ?B1
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 Int ?B1 == ?c1 : ?A1 & ?c1 : ?B1
### Ignoring duplicate rewrite rule:
### ?c1 : - ?A1 == ?c1 ~: ?A1
### Ignoring duplicate rewrite rule:
### ?c1 : ?A1 - ?B1 == ?c1 : ?A1 & ?c1 ~: ?B1
### Ignoring duplicate rewrite rule:
### ?a1 : Collect ?P1 == ?P1 ?a1
### Ignoring duplicate rewrite rule:
### ?b1 : \<Union> (?B1 ` ?A1) == EX x:?A1. ?b1 : ?B1 x
### Ignoring duplicate rewrite rule:
### ?A1 : \<Union> ?C1 == EX X:?C1. ?A1 : X
### Ignoring duplicate rewrite rule:
### ?b1 : \<Inter> (?B1 ` ?A1) == ALL x:?A1. ?b1 : ?B1 x
### Ignoring duplicate rewrite rule:
### ?A1 : \<Inter> ?C1 == ALL X:?C1. ?A1 : X
### Ignoring duplicate rewrite rule:
### {} <= ?A1 == True
### Ignoring duplicate rewrite rule:
### insert ?x1 ?A1 <= ?B1 == ?x1 : ?B1 & ?A1 <= ?B1
### Ignoring duplicate rewrite rule:
### Key ?K1 ~: used ?evs1 ==> ?K1 : range shrK == False
structure Public:
  sig
    val analz_image_freshK_ss: simpset
    val basic_possibility_tac: Proof.context -> tactic
    val possibility_tac: Proof.context -> tactic
  end
### theory "Draft.Public"
### 0.376s elapsed time, 0.777s cpu time, 0.059s GC time
Loading theory "Draft.NS_Public_Bad" (required by "Draft.NS_Public_BadMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.138s cpu time, 0.114s GC time
Proofs for inductive predicate(s) "ns_publicp"
  Proving monotonicity ...
[| Says ?A ?B ?X : set ?evs; ?X : parts (knows Spy ?evs) ==> PROP ?W |]
==> PROP ?W
[| Crypt ?K ?X : parts ?H; ?X : parts ?H ==> PROP ?W |] ==> PROP ?W
### theory "Draft.NS_Public_Bad"
### 0.185s elapsed time, 0.200s cpu time, 0.000s GC time
Loading theory "Draft.NS_Public_BadMoreTemplates"
val templateLemmas =
   [("NS_Public_Bad.Gets_imp_knows_Spy",
     "[| Gets ?B ?X : set ?evs; ?evs : ns_public |]
      ==> ?X : knows Spy ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("NS_Public_Bad.Spy_analz_priEK",
     "?evs : ns_public ==>
      (Key (priEK ?A) : analz (knows Spy ?evs)) = (?A : bad)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_hole 11)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("NS_Public_Bad.Spy_see_priEK",
     "?evs : ns_public ==>
      (Key (priEK ?A) : parts (knows Spy ?evs)) = (?A : bad)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_hole 11)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("NS_Public_Bad.Gets_imp_knows_Spy_parts",
     "[| Gets ?B ?X : set ?evs; ?evs : ns_public |]
      ==> ?X : parts (knows Spy ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("NS_Public_Bad.Gets_imp_Says",
     "[| Gets ?B ?X : set ?evs; ?evs : ns_public |]
      ==> EX A. Says A ?B ?X : set ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("NS_Public_Bad.Spy_not_see_NA",
     "[| Says ?A ?B (Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>)
         : set ?evs;
         ?A ~: bad; ?B ~: bad; ?evs : ns_public |]
      ==> Nonce ?NA ~: analz (knows Spy ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 3),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_hole 13),
                        template_var 2)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 1)),
                      template_app (template_hole 10, template_var 3))))),
              template_app (template_hole 9, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 11, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)))
               )
           ))),
    ("NS_Public_Bad.no_nonce_NS1_NS2",
     "[| ?evs : ns_public;
         Crypt (pubK ?C) \<lbrace>?NA', Nonce ?NA\<rbrace>
         : parts (knows Spy ?evs);
         Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>
         : parts (knows Spy ?evs) |]
      ==> Nonce ?NA : analz (knows Spy ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app (template_hole 5, template_var 2)))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_app (template_hole 1, template_var 0)))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 5, template_var 2)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 5)))
           ))),
    ("NS_Public_Bad.B_trusts_NS1",
     "[| ?evs : ns_public;
         Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>
         : parts (knows Spy ?evs);
         Nonce ?NA ~: analz (knows Spy ?evs) |]
      ==> Says ?A ?B (Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>)
          : set ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_hole 15)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_var 1)),
                    template_app (template_hole 8, template_var 0)))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 3)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 9, template_var 1)),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 3)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app (template_hole 9, template_var 1)),
                     template_app (template_hole 8, template_var 0))))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("NS_Public_Bad.unique_NB",
     "[| Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>
         : parts (knows Spy ?evs);
         Crypt (pubK ?A') \<lbrace>Nonce ?NA', Nonce ?NB\<rbrace>
         : parts (knows Spy ?evs);
         Nonce ?NB ~: analz (knows Spy ?evs); ?evs : ns_public |]
      ==> ?A = ?A' & ?NA = ?NA'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 4)),
                    template_app (template_hole 10, template_var 3)))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 0)),
                    template_app (template_hole 10, template_var 3)))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 10, template_var 3)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 2)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("NS_Public_Bad.unique_NA",
     "[| Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>
         : parts (knows Spy ?evs);
         Crypt (pubK ?B') \<lbrace>Nonce ?NA, Agent ?A'\<rbrace>
         : parts (knows Spy ?evs);
         Nonce ?NA ~: analz (knows Spy ?evs); ?evs : ns_public |]
      ==> ?A = ?A' & ?B = ?B'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 4)),
                    template_app (template_hole 9, template_var 3)))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_var 4)),
                    template_app (template_hole 9, template_var 0)))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 10, template_var 4)),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 2)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 1))
           ))),
    ("NS_Public_Bad.Spy_not_see_NB",
     "[| Says ?B ?A (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
         : set ?evs;
         ALL C. Says ?A C (Crypt (pubK C) (Nonce ?NB)) ~: set ?evs;
         ?A ~: bad; ?B ~: bad; ?evs : ns_public |]
      ==> Nonce ?NB ~: analz (knows Spy ?evs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_hole 13),
                        template_var 3)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_var 2)),
                      template_app (template_hole 11, template_var 1))))),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_hole 6)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 11, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)))
               )
           ))),
    ("NS_Public_Bad.B_trusts_NS3_lemma",
     "[| ?A ~: bad; ?B ~: bad; ?evs : ns_public;
         Crypt (pubK ?B) (Nonce ?NB) : parts (knows Spy ?evs);
         Says ?B ?A (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
         : set ?evs |]
      ==> EX C. Says ?A C (Crypt (pubK C) (Nonce ?NB)) : set ?evs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_hole 15)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_hole 15)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 3)),
                  template_app (template_hole 8, template_var 1))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 4),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_hole 9),
                        template_var 4)),
                    template_app
                     (template_app
                       (template_hole 2,
                        template_app (template_hole 8, template_var 0)),
                      template_app (template_hole 8, template_var 1))))),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("NS_Public_Bad.B_trusts_NS3",
     "[| Says ?B ?A (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
         : set ?evs;
         Gets ?B (Crypt (pubK ?B) (Nonce ?NB)) : set ?evs; ?A ~: bad;
         ?B ~: bad; ?evs : ns_public |]
      ==> EX C. Says ?A C (Crypt (pubK C) (Nonce ?NB)) : set ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_var 3)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 2)),
                      template_app (template_hole 8, template_var 1))))),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_var 4)),
                    template_app (template_hole 8, template_var 1)))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_hole 3)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_hole 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("NS_Public_Bad.A_trusts_NS2_lemma",
     "[| ?A ~: bad; ?B ~: bad; ?evs : ns_public;
         Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>
         : parts (knows Spy ?evs);
         Says ?A ?B (Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>)
         : set ?evs |]
      ==> Says ?B ?A
           (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
          : set ?evs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_hole 15)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_hole 15)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 4)),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 1)),
                    template_app (template_hole 7, template_var 0)))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_hole 9),
                        template_var 3)),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 1)),
                      template_app (template_hole 1, template_var 4))))),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 1)),
                     template_app (template_hole 7, template_var 0))))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("NS_Public_Bad.A_trusts_NS2",
     "[| Says ?A ?B (Crypt (pubK ?B) \<lbrace>Nonce ?NA, Agent ?A\<rbrace>)
         : set ?evs;
         Gets ?A (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
         : set ?evs;
         ?A ~: bad; ?B ~: bad; ?evs : ns_public |]
      ==> Says ?B ?A
           (Crypt (pubK ?A) \<lbrace>Nonce ?NA, Nonce ?NB\<rbrace>)
          : set ?evs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_var 3)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 2)),
                      template_app (template_hole 7, template_var 4))))),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_var 4)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_var 2)),
                      template_app (template_hole 8, template_var 0))))),
              template_app (template_hole 6, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_hole 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app (template_hole 13, template_var 3),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 2)),
                     template_app (template_hole 8, template_var 0))))),
             template_app (template_hole 6, template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.NS_Public_BadMoreTemplates"
### 0.349s elapsed time, 0.487s cpu time, 0.031s GC time
val it = (): unit
