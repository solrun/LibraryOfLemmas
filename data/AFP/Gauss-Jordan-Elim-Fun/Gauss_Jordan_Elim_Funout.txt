Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.Gauss_Jordan_Elim_Fun")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.506s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Combinatorics.Transposition"
### 0.144s elapsed time, 0.598s cpu time, 0.039s GC time
Loading theory "Draft.Gauss_Jordan_Elim_Fun" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.866s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.353s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Gauss_Jordan_Elim_Fun"
### 0.246s elapsed time, 0.961s cpu time, 0.081s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.769s elapsed time, 2.506s cpu time, 0.300s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.008s elapsed time, 2.910s cpu time, 0.700s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.855s elapsed time, 4.481s cpu time, 0.872s GC time
Loading theory "Draft.Templates" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gauss_Jordan_Elim_FunMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.519s cpu time, 0.069s GC time
Loading theory "Draft.Gauss_Jordan_Elim_FunMoreTemplates"
val templateLemmas =
   [("Gauss_Jordan_Elim_Fun.gauss_jordan_correct",
     "gauss_jordan ?A ?n = Some ?B ==> solution ?A ?n (%j. ?B j ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Gauss_Jordan_Elim_Fun.gauss_jordan_complete",
     "[| ?m <= ?n; usolution ?A ?m ?n ?x |]
      ==> EX B. gauss_jordan ?A ?m = Some B",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Gauss_Jordan_Elim_Fun.lem1",
     "(SUM x:?A. ?f x * (?a * ?g x)) = ?a * (SUM x:?A. ?f x * ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Gauss_Jordan_Elim_Fun.lem2",
     "(SUM x:?A. ?f x * (?g x * ?a)) = ?a * (SUM x:?A. ?f x * ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Gauss_Jordan_Elim_Fun.solution_upd1",
     "?c ~= (0::?'a) ==>
      solution (?A(?p := %j. ?A ?p j / ?c)) ?n ?x = solution ?A ?n ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 t_empty)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Gauss_Jordan_Elim_Fun.solution_swap",
     "[| ?p1.0 < ?n; ?p2.0 < ?n |]
      ==> solution (?A o Transposition.transpose ?p1.0 ?p2.0) ?n ?x =
          solution ?A ?n ?x",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2))),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3),
           template_var 0)))),
    ("Gauss_Jordan_Elim_Fun.non_null_if_pivot",
     "[| usolution ?A ?m ?n ?x; ?q < ?m |]
      ==> EX p<?m. ?A p ?q ~= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 3)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Gauss_Jordan_Elim_Fun.gauss_jordan_lemma",
     "[| ?m <= ?n; Gauss_Jordan_Elim_Fun.unit ?A ?m ?n;
         gauss_jordan ?A ?m = Some ?B |]
      ==> Gauss_Jordan_Elim_Fun.unit ?B 0 ?n &
          solution ?A ?n (%j. ?B j ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 3),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 1),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               t_empty))
           ))),
    ("Gauss_Jordan_Elim_Fun.solution_upd_but1",
     "[| ?ap = ?A ?p; ALL i j. i ~= ?p --> ?a i j = ?A i j; ?p < ?n |]
      ==> solution (%i. if i = ?p then ?ap else (%j. ?a i j - ?c i * ?ap j))
           ?n ?x =
          solution ?A ?n ?x",
     template_implication
      ([template_equation
         (template_var 6, template_app (template_var 5, template_var 4)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_than, template_var 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Gauss_Jordan_Elim_FunMoreTemplates"
### 0.253s elapsed time, 0.321s cpu time, 0.000s GC time
val it = (): unit
