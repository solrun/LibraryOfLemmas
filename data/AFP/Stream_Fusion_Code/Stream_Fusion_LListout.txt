Loading theory "Draft.Stream_Fusion" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Draft.Stream_Fusion_List")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature STREAM_FUSION =
  sig
    val add_fusion_rule: thm -> Context.generic -> Context.generic
    val add_unstream: string -> Context.generic -> Context.generic
    val del_fusion_rule: thm -> Context.generic -> Context.generic
    val del_unstream: string -> Context.generic -> Context.generic
    val fusion_add: attribute
    val fusion_conv: Proof.context -> conv
    val fusion_del: attribute
    val fusion_simproc: Proof.context -> cterm -> thm option
    val get_conspats: Proof.context -> (term * thm) list
    val get_rules: Proof.context -> thm list
    val get_unstream: Proof.context -> string list
    val match_consumer: Proof.context -> term -> bool
    val trace: bool Config.T
  end
structure Stream_Fusion: STREAM_FUSION
### theory "Draft.Stream_Fusion"
### 0.106s elapsed time, 0.439s cpu time, 0.042s GC time
Loading theory "Draft.Stream_Fusion_List" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.558s cpu time, 0.042s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.207s elapsed time, 0.846s cpu time, 0.042s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.077s elapsed time, 0.293s cpu time, 0.061s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Infinite_Set"
### 0.321s elapsed time, 1.252s cpu time, 0.133s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.273s cpu time, 0.162s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.605s elapsed time, 2.231s cpu time, 0.683s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Proofs for inductive predicate(s) "terminates_onp"
  Proving monotonicity ...
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
  Proving monotonicity ...
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  snth :: "'a stream => nat => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.287s elapsed time, 1.124s cpu time, 0.106s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  flat :: "'a list stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  prefixes :: "'a list => 'a list list"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.131s elapsed time, 4.284s cpu time, 0.867s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
Found termination order: "{}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "{}"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.733s elapsed time, 10.559s cpu time, 1.663s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.583s elapsed time, 6.205s cpu time, 0.760s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.181s elapsed time, 4.465s cpu time, 1.482s GC time
### theory "HOL-Library.Tree"
### 2.507s elapsed time, 9.569s cpu time, 2.139s GC time
Loading theory "Draft.Templates" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Countable"
### 1.544s elapsed time, 5.771s cpu time, 1.608s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Stream_Fusion_LListMoreTemplates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "{}"
### theory "HOL-Library.Countable_Set"
### 0.411s elapsed time, 1.254s cpu time, 0.102s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.635s elapsed time, 1.936s cpu time, 0.164s GC time
Found termination order: "{}"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Stream_Fusion_List"
### 5.749s elapsed time, 20.354s cpu time, 4.733s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.019s elapsed time, 4.191s cpu time, 1.459s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.383s elapsed time, 0.419s cpu time, 0.024s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.470s elapsed time, 0.520s cpu time, 0.069s GC time
Loading theory "Coinductive.Coinductive_Nat" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList" via "Coinductive.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Coinductive.Coinductive_Nat"
### 0.487s elapsed time, 0.537s cpu time, 0.068s GC time
Loading theory "Coinductive.Coinductive_List" (required by "Draft.Stream_Fusion_LListMoreTemplates" via "Draft.Stream_Fusion_LList")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Coinductive.Coinductive_List"
### 2.929s elapsed time, 3.373s cpu time, 0.605s GC time
Loading theory "Draft.Stream_Fusion_LList" (required by "Draft.Stream_Fusion_LListMoreTemplates")
Proofs for inductive predicate(s) "productive_onp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Stream_Fusion_LList"
### 0.998s elapsed time, 1.094s cpu time, 0.096s GC time
Loading theory "Draft.Stream_Fusion_LListMoreTemplates"
val templateLemmas =
   [("Stream_Fusion_LList.lunstream_lstream", "lunstream lstream ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Stream_Fusion_LList.lunstream'_lstream",
     "lunstream' lstream' ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Stream_Fusion_LList.inf_llist_prod_fusion",
     "lunstream' (inf_llist_prod ?f) 0 = inf_llist ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Stream_Fusion_LList.productive_onp_productive_on_eq",
     "productive_onp ?g = (%x. x : productive_on ?g)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("Stream_Fusion_LList.lnull_cons'_fusion",
     "lnull_cons' ?g ?s = lnull (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_iterates_raw",
     "lunstream (iterates_raw ?f) ?x = iterates ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Stream_Fusion_LList.lunstream'_iterates_prod",
     "lunstream' (iterates_prod ?f) ?x = iterates ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Stream_Fusion_LList.productive_onI",
     "productive ?g ==> ?s : productive_on ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Stream_Fusion_LList.lhd_cons_fusion2",
     "lhd_cons (lgenerator ?g) ?s = lhd (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.gen_llength_cons_fusion",
     "gen_llength_cons ?g 0 ?s = llength (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.gen_llength_cons'_fusion",
     "gen_llength_cons' ?g 0 ?s = llength (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_inf_llist_raw",
     "lunstream (inf_llist_raw ?f) ?n = ldropn ?n (inf_llist ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Stream_Fusion_LList.lunstream_llist_of_trans",
     "lunstream' (llist_of_trans ?g) ?s = llist_of (unstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.productiveI",
     "(!!s. s : productive_on ?g) ==> productive ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Stream_Fusion_LList.lnth_cons_fusion2",
     "lnth_cons (lgenerator ?g) ?n ?s = lnth (lunstream' ?g ?s) ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Stream_Fusion_LList.lunstream'_lmap_trans'",
     "lunstream' (lmap_trans' ?f ?g) ?s = lmap ?f (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.ltakeWhile_trans'_fusion",
     "lunstream' (ltakeWhile_trans' ?P ?g) ?s =
      ltakeWhile ?P (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_lfilter_trans",
     "lunstream (lfilter_trans ?P ?g) ?s = lfilter ?P (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_lmap_trans",
     "lunstream (lmap_trans ?f ?g) ?s = lmap ?f (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.ltakeWhile_trans_fusion",
     "lunstream (takeWhile_raw ?P ?g) ?s = ltakeWhile ?P (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_simps",
     "?g ?s = Done ==> lunstream ?g ?s = LNil",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Stream_Fusion_LList.lunstream_lfilter_trans2",
     "lunstream (lfilter_trans ?P (lgenerator ?g)) ?s =
      lfilter ?P (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_unfold_llist_raw",
     "lunstream (unfold_llist_raw ?stop ?head ?tail) ?s =
      unfold_llist ?stop ?head ?tail ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Stream_Fusion_LList.lunstream'_unfold_llist_prod",
     "lunstream' (unfold_llist_prod ?stop ?head ?tail) ?s =
      unfold_llist ?stop ?head ?tail ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Stream_Fusion_LList.ldropn_trans'_fusion",
     "lunstream' (ldropn_trans' ?g) (?n, ?s) =
      ldropn ?n (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ltake_trans'_fusion",
     "lunstream' (ltake_trans' ?g) (?n, ?s) = ltake ?n (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ldropn_trans_fusion",
     "lunstream (drop_raw ?g) (?n, ?s) = ldropn ?n (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ldrop_trans_fusion",
     "lunstream (ldrop_trans ?g) (?n, ?s) = ldrop ?n (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ltake_trans_fusion",
     "lunstream (ltake_trans ?g) (?n, ?s) = ltake ?n (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream'_simps",
     "lgenerator ?g ?s = Done ==> lunstream' ?g ?s = LNil",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Stream_Fusion_LList.ldrop_trans_fusion2",
     "lunstream (ldrop_trans (lgenerator ?g)) (?n, ?s) =
      ldrop ?n (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ldropWhile_trans_fusion",
     "lunstream (dropWhile_raw ?P ?g) (True, ?s) =
      ldropWhile ?P (lunstream ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lprefix_cons_fusion3",
     "lprefix_cons ?g (lgenerator ?h) ?sg ?sh =
      lprefix (lunstream ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lprefix_cons_fusion4",
     "lprefix_cons (lgenerator ?g) ?h ?sg ?sh =
      lprefix (lunstream' ?g ?sg) (lunstream ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.ldropWhile_trans_fusion2",
     "lunstream (dropWhile_raw ?P (lgenerator ?g)) (True, ?s) =
      ldropWhile ?P (lunstream' ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_simps",
     "?g ?s = Skip ?s' ==> lunstream ?g ?s = lunstream ?g ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lhd_cons_code",
     "lhd_cons ?g ?s =
      (case ?g ?s of Skip s' => lhd_cons ?g s' | Yield x xa => x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0), t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Stream_Fusion_LList.lnull_cons_code",
     "lnull_cons ?g ?s =
      (case ?g ?s of Done => True | Skip s' => lnull_cons ?g s'
       | Yield x xa => False)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Stream_Fusion_LList.lprefix_cons_fusion2",
     "lprefix_cons (lgenerator ?g) (lgenerator ?h) ?sg ?sh =
      lprefix (lunstream' ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 3)),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lappend_trans_fusion",
     "lunstream (lappend_trans ?g ?h ?sh) (Inl ?sg) =
      lappend (lunstream' ?g ?sg) (lunstream ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Stream_Fusion_LList.lappend_trans'_fusion",
     "lunstream' (lappend_trans' ?g ?h ?sh) (Inl ?sg) =
      lappend (lunstream' ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Stream_Fusion_LList.lunstream'_simps",
     "lgenerator ?g ?s = Skip ?s' ==> lunstream' ?g ?s = lunstream' ?g ?s'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lnull_cons'_code",
     "lnull_cons' ?g ?s =
      (case lgenerator ?g ?s of Done => True | Skip s' => lnull_cons' ?g s'
       | Yield x xa => False)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.llist_all2_cons_fusion3",
     "llist_all2_cons ?g (lgenerator ?h) ?P ?sg ?sh =
      llist_all2 ?P (lunstream ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app (template_hole 3, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Stream_Fusion_LList.llist_all2_cons_fusion4",
     "llist_all2_cons (lgenerator ?g) ?h ?P ?sg ?sh =
      llist_all2 ?P (lunstream' ?g ?sg) (lunstream ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 4)),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Stream_Fusion_LList.lhd_lunstream",
     "lhd (lunstream ?g ?s) =
      (case ?g ?s of Skip s' => lhd (lunstream ?g s') | Yield x xa => x)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0), t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Stream_Fusion_LList.lnull_lunstream",
     "lnull (lunstream ?g ?s) =
      (case ?g ?s of Done => True | Skip s' => lnull (lunstream ?g s')
       | Yield x xa => False)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Stream_Fusion_LList.llist_all2_cons_fusion2",
     "llist_all2_cons (lgenerator ?g) (lgenerator ?h) ?P ?sg ?sh =
      llist_all2 ?P (lunstream' ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 4)),
               template_app (template_hole 3, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Stream_Fusion_LList.lzip_trans'_fusion",
     "lunstream' (lzip_trans' ?g ?h) (?sg, ?sh, None) =
      lzip (lunstream' ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lzip_trans_fusion",
     "lunstream (zip_raw ?g ?h) (?sg, ?sh, None) =
      lzip (lunstream ?g ?sg) (lunstream ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream_simps",
     "?g ?s = Yield ?x ?s' ==>
      lunstream ?g ?s = LCons ?x (lunstream ?g ?s')",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Stream_Fusion_LList.lhd_lunstream'",
     "lhd (lunstream' ?g ?s) =
      (case lgenerator ?g ?s of Skip s' => lhd (lunstream' ?g s')
       | Yield x xa => x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lnull_lunstream'",
     "lnull (lunstream' ?g ?s) =
      (case lgenerator ?g ?s of Done => True
       | Skip s' => lnull (lunstream' ?g s') | Yield x xa => False)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.lzip_trans_fusion3",
     "lunstream (zip_raw ?g (lgenerator ?h)) (?sg, ?sh, None) =
      lzip (lunstream ?g ?sg) (lunstream' ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app (template_hole 6, template_var 2))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lzip_trans_fusion2",
     "lunstream (zip_raw (lgenerator ?g) ?h) (?sg, ?sh, None) =
      lzip (lunstream' ?g ?sg) (lunstream ?h ?sh)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 3)),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lunstream'_simps",
     "lgenerator ?g ?s = Yield ?x ?s' ==>
      lunstream' ?g ?s = LCons ?x (lunstream' ?g ?s')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Stream_Fusion_LList.ltl_lunstream",
     "ltl (lunstream ?g ?s) =
      (case ?g ?s of Done => LNil | Skip s' => ltl (lunstream ?g s')
       | Yield x s' => lunstream ?g s')",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0), t_empty),
           t_empty),
         template_app (template_var 1, template_var 0)))),
    ("Stream_Fusion_LList.lunstream_append_raw",
     "productive ?g ==>
      lunstream (append_raw ?g ?h ?sh) (Inl ?sg) =
      lappend (lunstream ?g ?sg) (lunstream ?h ?sh)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Stream_Fusion_LList.ltl_lunstream'",
     "ltl (lunstream' ?g ?s) =
      (case lgenerator ?g ?s of Done => LNil
       | Skip s' => ltl (lunstream' ?g s')
       | Yield x s' => lunstream' ?g s')",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Stream_Fusion_LList.mcont2mcont_lunstream",
     "mcont ?lub ?ord lSup lprefix ?t ==>
      mcont ?lub ?ord lSup lprefix (%x. lunstream lstream (?t x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_hole 3),
                template_hole 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_hole 3),
               template_hole 2),
             t_empty)
           ))),
    ("Stream_Fusion_LList.case_lstream_conv_case_llist",
     "(case lstream ?xs of Done => ?done | Skip xs' => ?skip xs'
       | Yield x xs' => ?yield x xs') =
      (case ?xs of LNil => ?done | LCons x xs' => ?yield x xs')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3), t_empty),
           t_empty),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_var 0))),
    ("Stream_Fusion_LList.gen_llength_cons_code",
     "gen_llength_cons ?g ?n ?s =
      (case ?g ?s of Done => ?n | Skip s' => gen_llength_cons ?g ?n s'
       | Yield x s' => gen_llength_cons ?g (eSuc ?n) s')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1), t_empty),
           t_empty),
         template_app (template_var 2, template_var 0)))),
    ("Stream_Fusion_LList.gen_llength_cons'_code",
     "gen_llength_cons' ?g ?n ?s =
      (case lgenerator ?g ?s of Done => ?n
       | Skip s' => gen_llength_cons' ?g ?n s'
       | Yield x s' => gen_llength_cons' ?g (eSuc ?n) s')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1), t_empty),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Stream_Fusion_LList.lprefix_cons_code",
     "lprefix_cons ?g ?h ?sg ?sh =
      (case ?g ?sg of Done => True | Skip sg' => lprefix_cons ?g ?h sg' ?sh
       | Yield x sg' => lprefix_cons1 ?g ?h x sg' ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           t_empty),
         template_app (template_var 3, template_var 1)))),
    ("Stream_Fusion_LList.lnth_cons_code",
     "lnth_cons ?g ?n ?s =
      (case ?g ?s of Done => undefined ?n | Skip s' => lnth_cons ?g ?n s'
       | Yield x s' => if ?n = 0 then x else lnth_cons ?g (?n - 1) s')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             t_empty),
           t_empty),
         template_app (template_var 2, template_var 0)))),
    ("Stream_Fusion_LList.llist_all2_cons_code",
     "llist_all2_cons ?g ?h ?P ?sg ?sh =
      (case ?g ?sg of Done => lnull_cons ?h ?sh
       | Skip sg' => llist_all2_cons ?g ?h ?P sg' ?sh
       | Yield a sg' => llist_all2_cons1 ?g ?h ?P a sg' ?sh)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             t_empty),
           t_empty),
         template_app (template_var 4, template_var 1)))),
    ("Stream_Fusion_LList.lprefix_cons1_code",
     "lprefix_cons1 ?g ?h ?x ?sg' ?sh =
      (case ?h ?sh of Done => False
       | Skip sh' => lprefix_cons1 ?g ?h ?x ?sg' sh'
       | Yield y sh' => ?x = y & lprefix_cons ?g ?h ?sg' sh')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3), t_empty),
           t_empty),
         template_app (template_var 3, template_var 0)))),
    ("Stream_Fusion_LList.llist_all2_cons1_code",
     "llist_all2_cons1 ?g ?h ?P ?x ?sg' ?sh =
      (case ?h ?sh of Done => False
       | Skip sh' => llist_all2_cons1 ?g ?h ?P ?x ?sg' sh'
       | Yield y sh' => ?P ?x y & llist_all2_cons ?g ?h ?P ?sg' sh')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           t_empty),
         template_app (template_var 4, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Stream_Fusion_LListMoreTemplates"
### 0.479s elapsed time, 0.745s cpu time, 0.084s GC time
val it = (): unit
