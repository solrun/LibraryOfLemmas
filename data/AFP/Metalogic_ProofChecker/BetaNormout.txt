Loading theory "Draft.Core" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.246s elapsed time, 0.965s cpu time, 0.041s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.055s elapsed time, 0.214s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Library.Function_Algebras"
### 0.117s elapsed time, 0.453s cpu time, 0.045s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Eisbach.Eisbach"
### 0.469s elapsed time, 1.827s cpu time, 0.124s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.890s cpu time, 0.067s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.366s elapsed time, 1.477s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.265s elapsed time, 4.852s cpu time, 0.846s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "has_typ1"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.347s cpu time, 0.923s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
### theory "HOL-Library.Sublist"
### 2.038s elapsed time, 7.682s cpu time, 1.993s GC time
Loading theory "List-Index.List_Index" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.128s elapsed time, 4.262s cpu time, 1.175s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.421s elapsed time, 1.585s cpu time, 0.193s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm" via "Draft.Term")
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.621s elapsed time, 9.494s cpu time, 2.602s GC time
Loading theory "Draft.Templates" (required by "Draft.BetaNormMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.173s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BetaNormMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 4.396s elapsed time, 15.917s cpu time, 3.607s GC time
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.608s elapsed time, 1.783s cpu time, 0.159s GC time
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.877s elapsed time, 4.853s cpu time, 1.312s GC time
Loading theory "Draft.Term" (required by "Draft.BetaNormMoreTemplates" via "Draft.BetaNorm")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.716s elapsed time, 7.197s cpu time, 0.809s GC time
Loading theory "Draft.BetaNorm" (required by "Draft.BetaNormMoreTemplates")
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.BetaNorm"
### 0.290s elapsed time, 0.338s cpu time, 0.000s GC time
Loading theory "Draft.BetaNormMoreTemplates"
val templateLemmas =
   [("BetaNorm.subst_bvs1'_empty", "subst_bvs1' ?t ?lev [] = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("BetaNorm.beta_step_imp_beta_reducible",
     "?t \<rightarrow>\<^sub>\<beta> ?t' ==> beta_reducible ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("BetaNorm.beta_cases", "Bv ?i \<rightarrow>\<^sub>\<beta> ?t ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("BetaNorm.subst_bvs_subst_bvs1'",
     "subst_bvs ?s ?t = subst_bvs1' ?t 0 ?s",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("BetaNorm.beta_cases",
     "Fv ?idn ?S \<rightarrow>\<^sub>\<beta> ?t ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("BetaNorm.subst_bvs1_subst_bvs1'_0",
     "subst_bvs1 ?t 0 ?s = subst_bvs1' ?t 0 ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_hole 1),
         template_var 0))),
    ("BetaNorm.beta_reducible_imp_beta_step",
     "beta_reducible ?t ==> EX t'. ?t \<rightarrow>\<^sub>\<beta> t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("BetaNorm.subst_bvs1'_incr_bv",
     "subst_bvs1' (incr_bv (length ?ss) ?k ?t) ?k ?ss = ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_var 1),
         template_var 2),
       template_var 0)),
    ("BetaNorm.beta_fv",
     "?s \<rightarrow>\<^sub>\<beta> ?t ==> fv ?t <= fv ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("BetaNorm.fv_subst_bv2_upper_bound",
     "fv (subst_bv2 ?t ?lev ?u) <= fv ?t Un fv ?u",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("BetaNorm.is_closed_subst_bv2_unchanged",
     "is_closed ?t ==> subst_bv2 ?t ?n ?u = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("BetaNorm.beta_norm_imp_beta_reds",
     "beta_norm ?t = Some ?t' ==>
      ?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?t'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("BetaNorm.lift_preserves_beta",
     "?r \<rightarrow>\<^sub>\<beta> ?s ==>
      lift ?r ?i \<rightarrow>\<^sub>\<beta> lift ?s ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.beta_subst_bv",
     "?s \<rightarrow>\<^sub>\<beta> ?t ==>
      subst_bv ?x ?s \<rightarrow>\<^sub>\<beta> subst_bv ?x ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BetaNorm.no_loose_bvar_subst_bvs1'_unchanged",
     "~ loose_bvar ?t ?lev ==> subst_bvs1' ?t ?lev ?args = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("BetaNorm.subst_bvs1_subst_bvs1'",
     "subst_bvs1 ?t ?n ?s = subst_bvs1' ?t ?n (map (incr_bv ?n 0) ?s)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("BetaNorm.subst_bv2_lt",
     "?j < ?i ==> subst_bvs1' (Bv ?j) ?i ?u = Bv ?j",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("BetaNorm.subst_bv2_preserves_beta",
     "?r \<rightarrow>\<^sub>\<beta> ?s ==>
      subst_bv2 ?r ?k ?u \<rightarrow>\<^sub>\<beta> subst_bv2 ?s ?k ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.beta_subst_bv1",
     "?s \<rightarrow>\<^sub>\<beta> ?t ==>
      subst_bv1 ?s ?lev ?x \<rightarrow>\<^sub>\<beta>
      subst_bv1 ?t ?lev ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.lift_preserves_beta'",
     "?r \<rightarrow>\<^sub>\<beta>\<^sup>* ?s ==>
      lift ?r ?i \<rightarrow>\<^sub>\<beta>\<^sup>* lift ?s ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.rtrancl_beta_Abs",
     "?s \<rightarrow>\<^sub>\<beta>\<^sup>* ?s' ==>
      Abs ?T ?s \<rightarrow>\<^sub>\<beta>\<^sup>* Abs ?T ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BetaNorm.rtrancl_beta_AppL",
     "?s \<rightarrow>\<^sub>\<beta>\<^sup>* ?s' ==>
      ?s $ ?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?s' $ ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.rtrancl_beta_AppR",
     "?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?t' ==>
      ?s $ ?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?s $ ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("BetaNorm.subst_bv2_preserves_beta2",
     "?r \<rightarrow>\<^sub>\<beta> ?s ==>
      subst_bv2 ?t ?i ?r \<rightarrow>\<^sub>\<beta>\<^sup>*
      subst_bv2 ?t ?i ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("BetaNorm.subst_bvs1'_eq",
     "?args ~= [] ==> subst_bvs1' (Bv ?k) ?k ?args = ?args ! 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("BetaNorm.not_loose_bvar_incr_bv",
     "~ loose_bvar ?a ?lev ==>
      ~ loose_bvar (incr_bv ?inc ?lev ?a) (?lev + ?inc)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("BetaNorm.beta_imp_beta_norm",
     "[| ?t \<rightarrow>\<^sub>\<beta> ?t'; ~ beta_reducible ?t' |]
      ==> beta_norm ?t = Some ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("BetaNorm.subst_bvs1'_App",
     "subst_bvs1' (?s $ ?t) ?k ?args =
      subst_bvs1' ?s ?k ?args $ subst_bvs1' ?t ?k ?args",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BetaNorm.subst_bv2_preserves_beta'",
     "?r \<rightarrow>\<^sub>\<beta>\<^sup>* ?s ==>
      subst_bv2 ?r ?i ?t \<rightarrow>\<^sub>\<beta>\<^sup>*
      subst_bv2 ?s ?i ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BetaNorm.subst_bv2_preserves_beta2'",
     "?r \<rightarrow>\<^sub>\<beta>\<^sup>* ?s ==>
      subst_bv2 ?t ?i ?r \<rightarrow>\<^sub>\<beta>\<^sup>*
      subst_bv2 ?t ?i ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("BetaNorm.subst_bvs1'_eq'",
     "?i < length ?args ==>
      subst_bvs1' (Bv (?k + ?i)) ?k ?args = ?args ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("BetaNorm.beta_preserves_typ_of",
     "[| typ_of ?r = Some ?T; ?r \<rightarrow>\<^sub>\<beta> ?s |]
      ==> typ_of ?s = Some ?T",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("BetaNorm.subst_bvs1'_gt",
     "?i + length ?args < ?j ==>
      subst_bvs1' (Bv ?j) ?i ?args = Bv (?j - length ?args)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 4, template_var 1)))))),
    ("BetaNorm.beta_preserves_typ_of1",
     "[| typ_of1 ?Ts ?r = Some ?T; ?r \<rightarrow>\<^sub>\<beta> ?s |]
      ==> typ_of1 ?Ts ?s = Some ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("BetaNorm.beta_star_preserves_typ_of1",
     "[| ?r \<rightarrow>\<^sub>\<beta>\<^sup>* ?s;
         typ_of1 ?Ts ?r = Some ?T |]
      ==> typ_of1 ?Ts ?s = Some ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("BetaNorm.rtrancl_beta_App",
     "[| ?s \<rightarrow>\<^sub>\<beta>\<^sup>* ?s';
         ?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?t' |]
      ==> ?s $ ?t \<rightarrow>\<^sub>\<beta>\<^sup>* ?s' $ ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("BetaNorm.subst_bvs_Abs",
     "ALL x:set ?args. is_closed x ==>
      subst_bvs ?args (Abs ?T ?t) = Abs ?T (subst_bvs1' ?t 1 ?args)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_var 2))))),
    ("BetaNorm.is_closed_subst_bvs1'_closeds",
     "[| ~ is_dependent ?t; ALL x:set ?us. is_closed x |]
      ==> ~ is_dependent (subst_bvs1' ?t (Suc ?k) ?us)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_hole 0, template_var 0)),
                   template_var 1))
               )
           ))),
    ("BetaNorm.subst_bvs1'_fold",
     "ALL x:set ?args. is_closed x ==>
      subst_bvs1' ?t ?lev ?args =
      fold (%arg t. subst_bv2 t ?lev arg) ?args ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 2),
           template_var 1)))),
    ("BetaNorm.subst_bvs1'_Abs",
     "ALL x:set ?args. is_closed x ==>
      subst_bvs1' (Abs ?T ?t) ?lev ?args =
      Abs ?T (subst_bvs1' ?t (Suc ?lev) ?args)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0)),
             template_var 3))))),
    ("BetaNorm.subst_bvs_extend_lower_level",
     "ALL x:set (?a # ?args). is_closed x ==>
      subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("BetaNorm.subst_bvs1'_preserves_beta",
     "[| ALL x:set ?u. is_closed x; ?r \<rightarrow>\<^sub>\<beta> ?s |]
      ==> subst_bvs1' ?r ?k ?u \<rightarrow>\<^sub>\<beta>
          subst_bvs1' ?s ?k ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("BetaNorm.incr_bv_incr_bv",
     "?i < ?k + 1 ==>
      incr_bv ?inc2.0 (?k + ?inc1.0) (incr_bv ?inc1.0 ?i ?t) =
      incr_bv ?inc1.0 ?i (incr_bv ?inc2.0 ?k ?t)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 3, template_var 3),
            template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0))))),
    ("BetaNorm.subst_bvs1'_step",
     "ALL x:set (?a # ?args). is_closed x ==>
      subst_bvs1' ?t ?lev (?a # ?args) =
      subst_bvs1' (subst_bv2 ?t ?lev ?a) ?lev ?args",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 0),
           template_var 2)))),
    ("BetaNorm.not_loose_bvar_incr_bv_less",
     "[| ?i < ?j; ~ loose_bvar (incr_bv ?inc ?i ?a) (?lev + ?inc) |]
      ==> ~ loose_bvar (incr_bv ?inc ?j ?a) (?lev + ?inc)",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 0, template_var 0),
                    template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))
               )
           ))),
    ("BetaNorm.beta_cases",
     "[| Abs ?T ?r \<rightarrow>\<^sub>\<beta> ?s;
         !!t. [| ?s = Abs ?T t; ?r \<rightarrow>\<^sub>\<beta> t |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("BetaNorm.subst_bvs1'_step_extend_lower_level",
     "ALL x:set (?a # ?args). is_closed x ==>
      subst_bv2 (subst_bvs1' ?t (Suc ?lev) ?args) ?lev ?a =
      subst_bvs1' ?t ?lev (?a # ?args)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 0)),
                 template_var 2)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2))))),
    ("BetaNorm.lift_subst_bvs1'_lt",
     "?i < ?j + 1 ==>
      lift (subst_bvs1' ?t ?j ?ss) ?i =
      subst_bvs1' (lift ?t ?i) (?j + 1) (map (%s. lift s ?i) ?ss)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 4)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("BetaNorm.loose_bvar1_subst_bvs1'_closeds",
     "[| ~ loose_bvar1 ?t ?lev; ?lev < ?k; ALL x:set ?us. is_closed x |]
      ==> ~ loose_bvar1 (subst_bvs1' ?t ?k ?us) ?lev",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1),
                     template_var 0)),
                 template_var 2)
               )
           ))),
    ("BetaNorm.lift_subst_bvs1'",
     "?j < ?i + 1 ==>
      lift (subst_bvs1' ?t ?j ?ss) ?i =
      subst_bvs1' (lift ?t (?i + length ?ss)) ?j (map (%s. lift s ?i) ?ss)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app (template_hole 1, template_var 0)))),
             template_var 3),
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("BetaNorm.subst_bvs1'_subst_bv2",
     "?i < ?j + 1 ==>
      subst_bv2 (subst_bvs1' ?t (Suc ?j) (map (%v. lift v ?i) ?vs)) ?i
       (subst_bvs1' ?u ?j ?vs) =
      subst_bvs1' (subst_bv2 ?t ?i ?u) ?j ?vs",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app (template_hole 2, template_var 3)),
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1))),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 4),
                 template_var 0)),
             template_var 3),
           template_var 1)))),
    ("BetaNorm.subst_bvs1'_step_work",
     "[| ALL x:set ?args. is_closed x;
         ~ loose_bvar (subst_bv2 ?t ?lev ?a) ?lev |]
      ==> subst_bvs1' ?t ?lev (?a # ?args) =
          subst_bvs1' (subst_bv2 ?t ?lev ?a) ?lev ?args",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1),
                      template_var 0)),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 3)))),
    ("BetaNorm.subst_bv1_beta",
     "[| subst_bv1 ?s (length (?T # ?Ts)) ?x \<rightarrow>\<^sub>\<beta>
         subst_bv1 ?t (length (?T # ?Ts)) ?x;
         typ_of1 ?Ts ?s = Some ?ty; typ_of1 ?Ts ?t = Some ?ty |]
      ==> ?s \<rightarrow>\<^sub>\<beta> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3))),
                  template_var 2)),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3))),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 5),
          template_app (template_hole 0, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 5), template_var 1)
           ))),
    ("BetaNorm.beta_cases",
     "[| ?s $ ?t \<rightarrow>\<^sub>\<beta> ?u;
         !!T s. [| ?s = Abs T s; ?u = subst_bv2 s 0 ?t |] ==> ?P;
         !!t. [| ?u = t $ ?t; ?s \<rightarrow>\<^sub>\<beta> t |] ==> ?P;
         !!t. [| ?u = ?s $ t; ?t \<rightarrow>\<^sub>\<beta> t |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.BetaNormMoreTemplates"
### 0.459s elapsed time, 0.698s cpu time, 0.114s GC time
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
