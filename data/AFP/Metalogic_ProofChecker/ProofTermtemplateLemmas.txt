   [("ProofTerm.finite_fv_Proof", "finite (fv_Proof ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ProofTerm.typ_ok_Tv",
     "typ_ok ?thy (Tv ?idn ?S) = wf_sort (subclass (osig (sig ?thy))) ?S",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))),
         template_var 0))),
    ("ProofTerm.check_proof_sound",
     "check_proof ?thy ?P ?res ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.check_proof_really_sound",
     "check_proof ?thy ?P ?res ==> ?thy,set (hyps ?P) \<tturnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.partial_nth_Some_imp_elem",
     "partial_nth ?l ?n = Some ?x ==> ?x : set ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("ProofTerm.fv_subst_bv1",
     "fv (subst_bv1 ?t ?lev ?u) =
      fv ?t Un (if loose_bvar1 ?t ?lev then fv ?u else {})",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 5, template_var 0)),
           template_hole 0)))),
    ("ProofTerm.fv_subst_bvs1_upper_bound",
     "fv (subst_bvs1 ?t ?lev ?us) <= fv ?t Un \<Union> (fv ` set ?us)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("ProofTerm.term_ok'_imp_Sorts_ok_sig",
     "[| term_ok' ?\<Sigma> ?t; ?S : Sorts ?t |]
      ==> wf_sort (subclass (osig ?\<Sigma>)) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 0)
           ))),
    ("ProofTerm.typ_ok_sig_imp_sortsT_ok_sig",
     "[| typ_ok_sig ?\<Sigma> ?T; ?S : SortsT ?T |]
      ==> wf_sort (subclass (osig ?\<Sigma>)) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 0)
           ))),
    ("ProofTerm.replay_sound_pre_hyps",
     "[| wf_theory ?thy; replay ?thy ?P = Some ?res |]
      ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.term_ok_contained_tvars_typ_ok",
     "[| term_ok ?thy ?t; (?idn, ?S) : tvs ?t |]
      ==> typ_ok ?thy (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.term_ok'_contained_tvars_typ_ok_sig",
     "[| term_ok' ?\<Sigma> ?t; (?idn, ?S) : tvs ?t |]
      ==> typ_ok_sig ?\<Sigma> (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.typ_ok_contained_tvars_typ_ok",
     "[| typ_ok ?thy ?ty; (?idn, ?S) : tvsT ?ty |]
      ==> typ_ok ?thy (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.typ_ok_sig_contained_tvars_typ_ok_sig",
     "[| typ_ok_sig ?\<Sigma> ?ty; (?idn, ?S) : tvsT ?ty |]
      ==> typ_ok_sig ?\<Sigma> (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.fv_subst_bvs_upper_bound",
     "is_closed ?t ==>
      fv (subst_bvs ?us ?t) <= fv ?t Un \<Union> (fv ` set ?us)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("ProofTerm.typ_ok_subst_typ",
     "[| typ_ok ?thy ?T; ALL (uu_, ty):set ?insts. typ_ok ?thy ty |]
      ==> typ_ok ?thy (subst_typ ?insts ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ProofTerm.typ_ok_sig_subst_typ",
     "[| typ_ok_sig ?\<Sigma> ?T;
         ALL (uu_, ty):set ?insts. typ_ok_sig ?\<Sigma> ty |]
      ==> typ_ok_sig ?\<Sigma> (subst_typ ?insts ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ProofTerm.typ_of_axiom",
     "[| wf_theory ?thy; ?t : axioms ?thy |] ==> typ_of ?t = Some propT",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_hole 3),
                           template_hole 3),
                         template_hole 3),
                       template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 2),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 2),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1))))),
             template_hole 0))))),
    ("ProofTerm.replay''_sound_pre_hyps",
     "[| wf_theory ?thy; !!x. x : set (hyps ?P) ==> term_ok ?thy x;
         !!x. x : set (hyps ?P) ==> typ_of x = Some propT;
         replay'' ?thy [] (fst ` (fv_Proof ?P Un FV (set (hyps ?P))))
          (hyps ?P) ?P =
         Some ?res |]
      ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 2)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_var 2),
                      template_hole 10),
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 25,
                            template_app
                             (template_hole 24, template_var 1)))))),
                  template_app (template_hole 24, template_var 1)),
                template_var 1)),
            t_empty),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_hole 25,
                 template_app (template_hole 24, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.replay'_sound_pre",
     "[| wf_theory ?thy; !!x. x : set ?Hs ==> term_ok ?thy x;
         !!x. x : set ?Hs ==> typ_of x = Some propT; finite ?ns;
         fst ` FV (set ?Hs) <= ?ns; fst ` fv_Proof ?P <= ?ns;
         fst ` set ?vs <= ?ns; replay' ?thy ?vs ?ns ?Hs ?P = Some ?res |]
      ==> ?thy,set ?Hs \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 5)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_hole 6,
              template_app (template_hole 21, template_var 4))),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app (template_hole 5, template_var 2)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app (template_hole 4, template_var 1)),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 1),
                template_var 3),
              template_var 4),
            template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_app (template_hole 21, template_var 4)),
             template_var 0)
           ))),
    ("ProofTerm.replay''_sound",
     "[| wf_theory ?thy; !!x. x : set ?Hs ==> term_ok ?thy x;
         !!x. x : set ?Hs ==> typ_of x = Some propT; finite ?ns;
         fst ` FV (set ?Hs) <= ?ns; fst ` fv_Proof ?P <= ?ns;
         fst ` set ?vs <= ?ns; replay'' ?thy ?vs ?ns ?Hs ?P = Some ?res |]
      ==> ?thy,set ?Hs \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 5)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app
             (template_hole 10,
              template_app (template_hole 25, template_var 4))),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app (template_hole 9, template_var 2)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app (template_hole 8, template_var 1)),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 1),
                    template_var 3),
                  template_var 4),
                template_var 2)),
            t_empty),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_app (template_hole 25, template_var 4)),
             template_var 0)
           )))]
