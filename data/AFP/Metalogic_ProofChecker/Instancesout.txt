Loading theory "Draft.Core" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.201s elapsed time, 0.786s cpu time, 0.037s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.068s elapsed time, 0.253s cpu time, 0.040s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.439s cpu time, 0.045s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Eisbach.Eisbach"
### 0.424s elapsed time, 1.654s cpu time, 0.122s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.925s cpu time, 0.064s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.388s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.209s elapsed time, 4.614s cpu time, 0.823s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "has_typ1"
  Proving monotonicity ...
consts
  suffixes :: "'a list => 'a list list"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.244s cpu time, 0.857s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.720s elapsed time, 6.589s cpu time, 1.134s GC time
Loading theory "List-Index.List_Index" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "{}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
### theory "HOL-Library.BigO"
### 0.882s elapsed time, 3.471s cpu time, 0.375s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.432s elapsed time, 1.622s cpu time, 0.183s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances" via "Draft.Term")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.035s elapsed time, 7.543s cpu time, 0.808s GC time
Loading theory "Draft.Templates" (required by "Draft.InstancesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.InstancesMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 3.798s elapsed time, 13.838s cpu time, 1.762s GC time
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.625s elapsed time, 1.873s cpu time, 0.178s GC time
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.606s elapsed time, 3.948s cpu time, 0.392s GC time
Loading theory "Draft.Term" (required by "Draft.InstancesMoreTemplates" via "Draft.Instances")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 6.462s elapsed time, 9.196s cpu time, 2.689s GC time
Loading theory "Draft.Instances" (required by "Draft.InstancesMoreTemplates")
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (%p. size_list size (fst (snd p))) <*mlex*>
   {}"
### theory "Draft.Instances"
### 2.699s elapsed time, 2.999s cpu time, 0.333s GC time
Loading theory "Draft.InstancesMoreTemplates"
val templateLemmas =
   [("Instances.lookup_eq_map_of_ap",
     "lookup (%x. x = ?k) ?subs = map_of ?subs ?k",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Instances.tinstT_iff_assoc_match",
     "tinstT ?T1.0 ?T2.0 = (assoc_match ?T2.0 ?T1.0 [] ~= None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1),
               template_hole 1),
             template_hole 0)
           ))),
    ("Instances.tinst_iff_assoc_match_term",
     "tinst ?t1.0 ?t2.0 = (assoc_match_term ?t2.0 ?t1.0 [] ~= None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1),
               template_hole 1),
             template_hole 0)
           ))),
    ("Instances.list_of_map",
     "finite (dom ?subs) ==> EX l. map_of l = ?subs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Instances.raw_match'_assoc_match",
     "raw_match' ?T ?U (map_of ?subs) =
      map_option map_of (assoc_match ?T ?U ?subs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Instances.raw_match_term_assoc_match_term",
     "raw_match_term ?t ?u (map_of ?subs) =
      map_option map_of (assoc_match_term ?t ?u ?subs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Instances.raw_match'_map_le",
     "raw_match' ?T ?U ?subs = Some ?subs' ==>
      ?subs \<subseteq>\<^sub>m ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Instances.raw_match_term_map_le",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==>
      ?subs \<subseteq>\<^sub>m ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Instances.tinstT_iff_ex_raw_match'",
     "tinstT ?T1.0 ?T2.0 =
      (EX subs. raw_match' ?T2.0 ?T1.0 Map.empty = Some subs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Instances.tinst_iff_ex_raw_match_term",
     "tinst ?t1.0 ?t2.0 =
      (EX subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Instances.length_neq_imp_not_raw_matches",
     "length ?Ts ~= length ?Us ==> raw_matches ?Ts ?Us ?subs = None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Instances.raw_match'_tvsT_subset_dom_res",
     "raw_match' ?T ?U ?subs = Some ?subs' ==> tvsT ?T <= dom ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("Instances.raw_match_term_tvs_subset_dom_res",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==> tvs ?t <= dom ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("Instances.assoc_match_subset",
     "assoc_match ?T ?U ?subs = Some ?subs' ==> set ?subs <= set ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Instances.tinstT_imp_ex_raw_match'",
     "tinstT ?T1.0 ?T2.0 ==>
      EX subs. raw_match' ?T2.0 ?T1.0 Map.empty = Some subs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Instances.tinst_imp_ex_raw_match_term",
     "tinst ?t1.0 ?t2.0 ==>
      EX subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Instances.raw_match'_dom_res_eq_tvsT_empty",
     "raw_match' ?T ?U Map.empty = Some ?subs' ==> dom ?subs' = tvsT ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            t_empty),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Instances.ex_raw_match'_imp_tinstT",
     "EX subs. raw_match' ?T2.0 ?T1.0 Map.empty = Some subs ==>
      tinstT ?T1.0 ?T2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Instances.ex_raw_match_term_imp_tinst",
     "EX subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs ==>
      tinst ?t1.0 ?t2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Instances.map_le_same_dom_imp_same_map",
     "[| dom ?f = dom ?g; ?f \<subseteq>\<^sub>m ?g |] ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Instances.raw_match'_Type_conds",
     "raw_match' (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 5, template_var 3))),
    ("Instances.assoc_match_Type_conds",
     "assoc_match (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 5, template_var 3))),
    ("Instances.raw_match'_dom_res_eq_tvsT",
     "raw_match' ?T ?U ?subs = Some ?subs' ==>
      dom ?subs' = tvsT ?T Un dom ?subs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Instances.raw_match'_dom_res_subset_tvsT",
     "raw_match' ?T ?U ?subs = Some ?subs' ==>
      dom ?subs' <= tvsT ?T Un dom ?subs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Instances.raw_match_term_dom_res_eq_tvs",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==>
      dom ?subs' = tvs ?t Un dom ?subs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Instances.raw_match_term_dom_res_subset_tvs",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==>
      dom ?subs' <= tvs ?t Un dom ?subs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Instances.raw_match'_Type_conds",
     "raw_match' (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' ==>
      length ?Ts = length ?Us",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 2)))),
    ("Instances.assoc_match_Type_conds",
     "assoc_match (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' ==>
      length ?Ts = length ?Us",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 2)))),
    ("Instances.assoc_match_distinct",
     "[| assoc_match ?T ?U ?subs = Some ?subs'; distinct (map fst ?subs) |]
      ==> distinct (map fst ?subs')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Instances.dom_eq_and_eq_on_dom_imp_eq",
     "[| dom ?m = dom ?m'; ALL x:dom ?m. ?m x = ?m' x |] ==> ?m = ?m'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Instances.raw_match'_restriction_on_tvsT",
     "raw_match' ?T ?U ?subs = Some ?subs' ==>
      raw_match' ?T ?U (?subs |` tvsT ?T) = Some (?subs' |` tvsT ?T)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3)))))),
    ("Instances.raw_match_term_restriction_on_tvs",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==>
      raw_match_term ?t ?u (?subs |` tvs ?t) = Some (?subs' |` tvs ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3)))))),
    ("Instances.raw_match'_produces_matcher",
     "raw_match' ?T ?U ?subs = Some ?subs' ==>
      tsubstT ?T (convert_subs ?subs') = ?U",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), t_empty),
         template_var 2))),
    ("Instances.raw_match_term_produces_matcher",
     "raw_match_term ?t ?u ?subs = Some ?subs' ==>
      tsubst ?t (convert_subs ?subs') = ?u",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), t_empty),
         template_var 2))),
    ("Instances.raw_match'_hd_raw_match'",
     "raw_match' (Ty ?a (?T # ?Ts)) (Ty ?b (?U # ?Us)) ?subs =
      Some ?subs' ==>
      raw_match' ?T ?U ?subs ~= None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 7),
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5))),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2))),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 3),
               template_var 1),
             template_hole 0)
           ))),
    ("Instances.raw_match'_extend_map_preserve",
     "[| raw_match' ?T ?U ?subs = Some ?subs';
         ?subs' \<subseteq>\<^sub>m ?subs''; ?p : tvsT ?T |]
      ==> ?subs'' ?p = ?subs' ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 5))
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Instances.raw_match_term_extend_map_preserve",
     "[| raw_match_term ?t ?u ?subs = Some ?subs';
         ?subs' \<subseteq>\<^sub>m ?subs''; ?p : tvs ?t |]
      ==> ?subs'' ?p = ?subs' ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 5))
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Instances.tsubstT_matcher_imp_raw_match'_unchanged",
     "tsubstT ?T ?\<rho> = ?U ==>
      raw_match' ?T ?U (%(idx, S). Some (?\<rho> idx S)) =
      Some (%(idx, S). Some (?\<rho> idx S))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0),
           template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 0, template_app (template_hole 2, t_empty))))),
    ("Instances.tsubst_matcher_imp_raw_match_term_unchanged",
     "tsubst ?t ?\<rho> = ?u ==>
      raw_match_term ?t ?u (%(idx, S). Some (?\<rho> idx S)) =
      Some (%(idx, S). Some (?\<rho> idx S))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0),
           template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 0, template_app (template_hole 2, t_empty))))),
    ("Instances.raw_match'_restriction",
     "[| raw_match' ?T ?U ?subs = Some ?subs'; tvsT ?T <= ?restriction |]
      ==> raw_match' ?T ?U (?subs |` ?restriction) =
          Some (?subs' |` ?restriction)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 4),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Instances.raw_match_term_restriction",
     "[| raw_match_term ?t ?u ?subs = Some ?subs'; tvs ?t <= ?restriction |]
      ==> raw_match_term ?t ?u (?subs |` ?restriction) =
          Some (?subs' |` ?restriction)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 4),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Instances.raw_match'_imp_raw_match'_on_map_le",
     "[| raw_match' ?T ?U ?subs = Some ?subs';
         ?lesubs \<subseteq>\<^sub>m ?subs |]
      ==> EX lesubs'.
             raw_match' ?T ?U ?lesubs = Some lesubs' &
             lesubs' \<subseteq>\<^sub>m ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Instances.raw_match_term_imp_raw_match_term_on_map_le",
     "[| raw_match_term ?t ?u ?subs = Some ?subs';
         ?lesubs \<subseteq>\<^sub>m ?subs |]
      ==> EX lesubs'.
             raw_match_term ?t ?u ?lesubs = Some lesubs' &
             lesubs' \<subseteq>\<^sub>m ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Instances.map_le_produces_same_raw_match'",
     "[| raw_match' ?T ?U ?subs = Some ?subs'; dom ?subs <= tvsT ?T;
         ?lesubs \<subseteq>\<^sub>m ?subs |]
      ==> raw_match' ?T ?U ?lesubs = Some ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_var 0),
         template_app (template_hole 4, template_var 1)))),
    ("Instances.map_le_produces_same_raw_match_term",
     "[| raw_match_term ?t ?u ?subs = Some ?subs'; dom ?subs <= tvs ?t;
         ?lesubs \<subseteq>\<^sub>m ?subs |]
      ==> raw_match_term ?t ?u ?lesubs = Some ?subs'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_var 0),
         template_app (template_hole 4, template_var 1)))),
    ("Instances.raw_match'_eq_Some_at_point_not_None'",
     "[| length ?Ts = length ?Us;
         raw_match' (Ty ?a (?Ts @ ?Ts')) (Ty ?b (?Us @ ?Us')) ?subs =
         Some ?subs' |]
      ==> raw_match' (Ty ?a ?Ts) (Ty ?b ?Us) ?subs ~= None",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 7),
          template_app (template_hole 7, template_var 6)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 4))),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 2))),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 6)),
               template_var 1),
             template_hole 0)
           ))),
    ("Instances.fold_matches_first_step_not_None'",
     "[| length ?xs = length ?ys;
         fold (%(T, U) subs. Option.bind subs (raw_match' T U))
          (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =
         Some ?subs' |]
      ==> raw_match' ?x ?y ?subs ~= None",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 5),
          template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 8, template_app (template_hole 7, t_empty)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 5)),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 4))),
            template_app (template_hole 2, template_var 1)),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 0)
           ))),
    ("Instances.raw_match'_extend_map_preserve'",
     "[| raw_match' ?T ?U ?subs = Some ?subs';
         ?subs' \<subseteq>\<^sub>m ?subs'' |]
      ==> tsubstT ?T (convert_subs ?subs') =
          tsubstT ?T (convert_subs ?subs'')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), t_empty),
         template_app
          (template_app (template_hole 3, template_var 4), t_empty)))),
    ("Instances.raw_match_extend_map_preserve'",
     "[| raw_match_term ?t ?u ?subs = Some ?subs';
         ?subs' \<subseteq>\<^sub>m ?subs'' |]
      ==> tsubst ?t (convert_subs ?subs') =
          tsubst ?t (convert_subs ?subs'')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), t_empty),
         template_app
          (template_app (template_hole 3, template_var 4), t_empty)))),
    ("Instances.map_eq_on_tvs_imp_map_eq_on_term",
     "(!!p. p : tvs ?t ==> ?subs p = ?subs' p) ==>
      tsubst ?t (convert_subs ?subs) = tsubst ?t (convert_subs ?subs')",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), t_empty),
         template_app
          (template_app (template_hole 3, template_var 2), t_empty)))),
    ("Instances.map_eq_on_tvsT_imp_map_eq_on_typ",
     "(!!p. p : tvsT ?T ==> ?subs p = ?subs' p) ==>
      tsubstT ?T (convert_subs ?subs) = tsubstT ?T (convert_subs ?subs')",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), t_empty),
         template_app
          (template_app (template_hole 3, template_var 2), t_empty)))),
    ("Instances.fold_matches_first_step_not_None",
     "[| fold (%(T, U) subs. Option.bind subs (raw_match' T U))
          (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =
         Some ?subs';
         !!point.
            [| raw_match' ?x ?y ?subs = Some point;
               fold (%(T, U) subs. Option.bind subs (raw_match' T U))
                (zip ?xs ?ys) (Some point) =
               Some ?subs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5)),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3))),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Instances.fold_assoc_matches_first_step_not_None",
     "[| fold (%(T, U) subs. Option.bind subs (assoc_match T U))
          (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =
         Some ?subs';
         !!point.
            [| assoc_match ?x ?y ?subs = Some point;
               fold (%(T, U) subs. Option.bind subs (assoc_match T U))
                (zip ?xs ?ys) (Some point) =
               Some ?subs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5)),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3))),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Instances.fold_matches_last_step_not_None",
     "[| length ?xs = length ?ys;
         fold (%(T, U) subs. Option.bind subs (raw_match' T U))
          (zip (?xs @ [?x]) (?ys @ [?y])) (Some ?subs) =
         Some ?subs';
         !!point.
            [| fold (%(T, U) subs. Option.bind subs (raw_match' T U))
                (zip ?xs ?ys) (Some ?subs) =
               Some point;
               raw_match' ?x ?y point = Some ?subs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 6),
          template_app (template_hole 11, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 9, template_app (template_hole 8, t_empty)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_hole 2))),
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_hole 2)))),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.InstancesMoreTemplates"
### 0.488s elapsed time, 0.756s cpu time, 0.106s GC time
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
