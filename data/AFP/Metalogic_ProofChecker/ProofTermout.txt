Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "Draft.Core" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.AList" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.182s elapsed time, 0.708s cpu time, 0.037s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.075s elapsed time, 0.288s cpu time, 0.039s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Name")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.061s elapsed time, 0.246s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Eisbach.Eisbach"
### 0.421s elapsed time, 1.636s cpu time, 0.115s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.486s cpu time, 0.039s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.870s cpu time, 0.075s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.406s cpu time, 0.161s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.217s elapsed time, 4.651s cpu time, 0.803s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Proofs for inductive predicate(s) "has_typ1"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.290s cpu time, 0.834s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.952s elapsed time, 7.363s cpu time, 1.833s GC time
Loading theory "List-Index.List_Index" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "{}"
Proofs for inductive predicate(s) "has_sort"
consts
  find_index :: "('a => bool) => 'a list => nat"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.071s elapsed time, 4.059s cpu time, 1.042s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.412s elapsed time, 1.576s cpu time, 0.164s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Term")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.610s elapsed time, 9.466s cpu time, 2.539s GC time
Loading theory "Draft.Templates" (required by "Draft.ProofTermMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.230s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ProofTermMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 4.342s elapsed time, 15.692s cpu time, 3.472s GC time
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.638s elapsed time, 1.877s cpu time, 0.199s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.905s elapsed time, 5.045s cpu time, 1.330s GC time
Loading theory "Draft.Term" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.624s elapsed time, 6.936s cpu time, 0.570s GC time
Loading theory "Draft.BetaNorm" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.BetaNormProof")
Loading theory "Draft.Name" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic")
Loading theory "Draft.Term_Subst" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic")
Loading theory "Draft.Sorts" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Theory")
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
locale wf_subclass_loc
  fixes cs :: "(String.literal * String.literal) set"
  assumes "wf_subclass_loc cs"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sorts"
### 0.202s elapsed time, 0.803s cpu time, 0.080s GC time
Loading theory "Draft.SortConstants" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Theory")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.BetaNorm"
### 0.404s elapsed time, 1.597s cpu time, 0.154s GC time
Loading theory "Draft.EtaNorm" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.EtaNormProof")
Proofs for inductive predicate(s) "eta"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.SortConstants"
### 0.309s elapsed time, 1.227s cpu time, 0.074s GC time
Loading theory "Draft.Theory" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic")
### theory "Draft.EtaNorm"
### 0.119s elapsed time, 0.479s cpu time, 0.000s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
### theory "Draft.Name"
### 0.622s elapsed time, 2.462s cpu time, 0.243s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
### theory "Draft.Term_Subst"
### 0.704s elapsed time, 2.763s cpu time, 0.243s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
bundle eq_axs_simp
### theory "Draft.Theory"
### 0.424s elapsed time, 0.993s cpu time, 0.088s GC time
Loading theory "Draft.BetaNormProof" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic")
### theory "Draft.BetaNormProof"
### 0.173s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.EtaNormProof" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm" via "Draft.Logic")
### theory "Draft.EtaNormProof"
### 0.174s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.Logic" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm")
"proves"
  :: "((String.literal => typ option) *
       (String.literal => nat option) *
       (String.literal * String.literal) set *
       (String.literal
        => (String.literal => String.literal set list option) option)) *
      Core.term set
      => Core.term set => Core.term => bool"
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
wt_term ?\<Sigma> ?t ==
wf_term ?\<Sigma> ?t & (EX T. \<turnstile>\<^sub>\<tau> ?t : T)
term_ok ?\<Theta> (Fv ?idn ?\<tau>) = typ_ok ?\<Theta> ?\<tau>
typ_of (Fv ?idn ?\<tau>) = Some ?\<tau>
typ_ok ?\<Theta> ?T == wf_type (sig ?\<Theta>) ?T
[| ?\<Theta>,?\<Gamma> \<turnstile> ?B;
   strip_all_single_var ?B = Some ?\<tau>; typ_of ?t = Some ?\<tau>;
   term_ok ?\<Theta> ?t |]
==> ?\<Theta>,?\<Gamma> \<turnstile> subst_bv ?t (strip_all_single_body ?B)
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
### theory "Draft.Logic"
### 0.861s elapsed time, 1.016s cpu time, 0.206s GC time
Loading theory "Draft.EqualityProof" (required by "Draft.ProofTermMoreTemplates" via "Draft.ProofTerm")
### Ambiguous input (line 900 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t)))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" s)))))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1053 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t))))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t))))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" s)))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
ALL x:set (?a # ?args). is_closed x ==>
subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t
### theory "Draft.EqualityProof"
### 0.671s elapsed time, 0.734s cpu time, 0.084s GC time
Loading theory "Draft.ProofTerm" (required by "Draft.ProofTermMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "(%p. size_class.size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_class.size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
### theory "Draft.ProofTerm"
### 2.016s elapsed time, 2.495s cpu time, 0.179s GC time
Loading theory "Draft.ProofTermMoreTemplates"
val templateLemmas =
   [("ProofTerm.finite_fv_Proof", "finite (fv_Proof ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ProofTerm.typ_ok_Tv",
     "typ_ok ?thy (Tv ?idn ?S) = wf_sort (subclass (osig (sig ?thy))) ?S",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))),
         template_var 0))),
    ("ProofTerm.check_proof_sound",
     "check_proof ?thy ?P ?res ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.check_proof_really_sound",
     "check_proof ?thy ?P ?res ==> ?thy,set (hyps ?P) \<tturnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.partial_nth_Some_imp_elem",
     "partial_nth ?l ?n = Some ?x ==> ?x : set ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("ProofTerm.fv_subst_bv1",
     "fv (subst_bv1 ?t ?lev ?u) =
      fv ?t Un (if loose_bvar1 ?t ?lev then fv ?u else {})",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 5, template_var 0)),
           template_hole 0)))),
    ("ProofTerm.fv_subst_bvs1_upper_bound",
     "fv (subst_bvs1 ?t ?lev ?us) <= fv ?t Un \<Union> (fv ` set ?us)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("ProofTerm.term_ok'_imp_Sorts_ok_sig",
     "[| term_ok' ?\<Sigma> ?t; ?S : Sorts ?t |]
      ==> wf_sort (subclass (osig ?\<Sigma>)) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 0)
           ))),
    ("ProofTerm.typ_ok_sig_imp_sortsT_ok_sig",
     "[| typ_ok_sig ?\<Sigma> ?T; ?S : SortsT ?T |]
      ==> wf_sort (subclass (osig ?\<Sigma>)) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 0)
           ))),
    ("ProofTerm.replay_sound_pre_hyps",
     "[| wf_theory ?thy; replay ?thy ?P = Some ?res |]
      ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.term_ok_contained_tvars_typ_ok",
     "[| term_ok ?thy ?t; (?idn, ?S) : tvs ?t |]
      ==> typ_ok ?thy (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.term_ok'_contained_tvars_typ_ok_sig",
     "[| term_ok' ?\<Sigma> ?t; (?idn, ?S) : tvs ?t |]
      ==> typ_ok_sig ?\<Sigma> (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.typ_ok_contained_tvars_typ_ok",
     "[| typ_ok ?thy ?ty; (?idn, ?S) : tvsT ?ty |]
      ==> typ_ok ?thy (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.typ_ok_sig_contained_tvars_typ_ok_sig",
     "[| typ_ok_sig ?\<Sigma> ?ty; (?idn, ?S) : tvsT ?ty |]
      ==> typ_ok_sig ?\<Sigma> (Tv ?idn ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ProofTerm.fv_subst_bvs_upper_bound",
     "is_closed ?t ==>
      fv (subst_bvs ?us ?t) <= fv ?t Un \<Union> (fv ` set ?us)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("ProofTerm.typ_ok_subst_typ",
     "[| typ_ok ?thy ?T; ALL (uu_, ty):set ?insts. typ_ok ?thy ty |]
      ==> typ_ok ?thy (subst_typ ?insts ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ProofTerm.typ_ok_sig_subst_typ",
     "[| typ_ok_sig ?\<Sigma> ?T;
         ALL (uu_, ty):set ?insts. typ_ok_sig ?\<Sigma> ty |]
      ==> typ_ok_sig ?\<Sigma> (subst_typ ?insts ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ProofTerm.typ_of_axiom",
     "[| wf_theory ?thy; ?t : axioms ?thy |] ==> typ_of ?t = Some propT",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_hole 3),
                           template_hole 3),
                         template_hole 3),
                       template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 2),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 2),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1))))),
             template_hole 0))))),
    ("ProofTerm.replay''_sound_pre_hyps",
     "[| wf_theory ?thy; !!x. x : set (hyps ?P) ==> term_ok ?thy x;
         !!x. x : set (hyps ?P) ==> typ_of x = Some propT;
         replay'' ?thy [] (fst ` (fv_Proof ?P Un FV (set (hyps ?P))))
          (hyps ?P) ?P =
         Some ?res |]
      ==> ?thy,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 2)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 11, template_var 2),
                      template_hole 10),
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 1)),
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 25,
                            template_app
                             (template_hole 24, template_var 1)))))),
                  template_app (template_hole 24, template_var 1)),
                template_var 1)),
            t_empty),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_hole 25,
                 template_app (template_hole 24, template_var 1))),
             template_var 0)
           ))),
    ("ProofTerm.replay'_sound_pre",
     "[| wf_theory ?thy; !!x. x : set ?Hs ==> term_ok ?thy x;
         !!x. x : set ?Hs ==> typ_of x = Some propT; finite ?ns;
         fst ` FV (set ?Hs) <= ?ns; fst ` fv_Proof ?P <= ?ns;
         fst ` set ?vs <= ?ns; replay' ?thy ?vs ?ns ?Hs ?P = Some ?res |]
      ==> ?thy,set ?Hs \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 5)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_hole 6,
              template_app (template_hole 21, template_var 4))),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app (template_hole 5, template_var 2)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app (template_hole 4, template_var 1)),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 1),
                template_var 3),
              template_var 4),
            template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_app (template_hole 21, template_var 4)),
             template_var 0)
           ))),
    ("ProofTerm.replay''_sound",
     "[| wf_theory ?thy; !!x. x : set ?Hs ==> term_ok ?thy x;
         !!x. x : set ?Hs ==> typ_of x = Some propT; finite ?ns;
         fst ` FV (set ?Hs) <= ?ns; fst ` fv_Proof ?P <= ?ns;
         fst ` set ?vs <= ?ns; replay'' ?thy ?vs ?ns ?Hs ?P = Some ?res |]
      ==> ?thy,set ?Hs \<turnstile> ?res",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 5)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app
             (template_hole 10,
              template_app (template_hole 25, template_var 4))),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app (template_hole 9, template_var 2)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_app (template_hole 8, template_var 1)),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 1),
                    template_var 3),
                  template_var 4),
                template_var 2)),
            t_empty),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_app (template_hole 25, template_var 4)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.ProofTermMoreTemplates"
### 0.491s elapsed time, 0.746s cpu time, 0.111s GC time
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
