Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "Draft.Core" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.240s elapsed time, 0.939s cpu time, 0.038s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.063s elapsed time, 0.243s cpu time, 0.029s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Name")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.061s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "HOL-Library.Code_Target_Nat")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.412s elapsed time, 1.607s cpu time, 0.103s GC time
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen")
### theory "HOL-Library.Code_Abstract_Nat"
### 0.062s elapsed time, 0.252s cpu time, 0.036s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen")
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.154s elapsed time, 0.649s cpu time, 0.055s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Code_Target_Nat"
### 0.151s elapsed time, 0.621s cpu time, 0.055s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.417s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.395s elapsed time, 1.405s cpu time, 0.608s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.503s elapsed time, 1.836s cpu time, 0.608s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.271s elapsed time, 4.889s cpu time, 0.825s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "has_typ1"
consts
  stake :: "nat => 'a stream => 'a list"
  Proving monotonicity ...
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  suffixes :: "'a list => 'a list list"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.963s elapsed time, 3.793s cpu time, 0.498s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Sublist"
### 1.792s elapsed time, 6.892s cpu time, 1.532s GC time
Loading theory "List-Index.List_Index" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
### theory "HOL-Library.BigO"
### 1.107s elapsed time, 4.189s cpu time, 1.222s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
### theory "List-Index.List_Index"
### 0.709s elapsed time, 2.482s cpu time, 1.144s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Term")
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.614s elapsed time, 9.533s cpu time, 2.655s GC time
Loading theory "Draft.Templates" (required by "Draft.CodeGenMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.268s cpu time, 0.086s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CodeGenMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 4.407s elapsed time, 16.025s cpu time, 3.646s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.610s elapsed time, 1.794s cpu time, 0.163s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.553s elapsed time, 3.638s cpu time, 0.362s GC time
Loading theory "Draft.Term" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.868s elapsed time, 7.487s cpu time, 0.817s GC time
Loading theory "Draft.BetaNorm" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.BetaNormProof")
Loading theory "Draft.Instances" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.TheoryExe")
Loading theory "Draft.Name" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic")
Loading theory "Draft.Sorts" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Theory")
locale wf_subclass_loc
  fixes cs :: "(String.literal * String.literal) set"
  assumes "wf_subclass_loc cs"
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
### theory "Draft.Sorts"
### 0.127s elapsed time, 0.512s cpu time, 0.000s GC time
Loading theory "Draft.SortConstants" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Theory")
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (%p. size_list size (fst (snd p))) <*mlex*>
   {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SortConstants"
### 0.348s elapsed time, 1.379s cpu time, 0.188s GC time
Loading theory "Draft.SortsExe" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.TheoryExe")
### theory "Draft.BetaNorm"
### 0.476s elapsed time, 1.889s cpu time, 0.188s GC time
Loading theory "Draft.EtaNorm" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.EtaNormProof")
Proofs for inductive predicate(s) "eta"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.EtaNorm"
### 0.118s elapsed time, 0.464s cpu time, 0.000s GC time
Loading theory "Draft.Term_Subst" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Name"
### 0.711s elapsed time, 2.824s cpu time, 0.314s GC time
Loading theory "Draft.Theory" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic")
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Type
### String.literal set => String.literal set => bool
### of constant "HOL.eq"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool, in theorem:
### normalized_sort (set ?cs) ?s == exenormalized_sort ?cs ?s
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.SortsExe"
### 0.498s elapsed time, 1.970s cpu time, 0.241s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
bundle eq_axs_simp
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
### theory "Draft.Theory"
### 0.496s elapsed time, 1.938s cpu time, 0.199s GC time
Loading theory "Draft.BetaNormProof" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic")
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
### theory "Draft.Term_Subst"
### 0.735s elapsed time, 2.800s cpu time, 0.326s GC time
### theory "Draft.BetaNormProof"
### 0.224s elapsed time, 0.645s cpu time, 0.000s GC time
Loading theory "Draft.EtaNormProof" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm" via "Draft.Logic")
### theory "Draft.EtaNormProof"
### 0.182s elapsed time, 0.366s cpu time, 0.000s GC time
Loading theory "Draft.Logic" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm")
"proves"
  :: "((String.literal => typ option) *
       (String.literal => nat option) *
       (String.literal * String.literal) set *
       (String.literal
        => (String.literal => String.literal set list option) option)) *
      Core.term set
      => Core.term set => Core.term => bool"
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
wt_term ?\<Sigma> ?t ==
wf_term ?\<Sigma> ?t & (EX T. \<turnstile>\<^sub>\<tau> ?t : T)
term_ok ?\<Theta> (Fv ?idn ?\<tau>) = typ_ok ?\<Theta> ?\<tau>
typ_of (Fv ?idn ?\<tau>) = Some ?\<tau>
typ_ok ?\<Theta> ?T == wf_type (sig ?\<Theta>) ?T
[| ?\<Theta>,?\<Gamma> \<turnstile> ?B;
   strip_all_single_var ?B = Some ?\<tau>; typ_of ?t = Some ?\<tau>;
   term_ok ?\<Theta> ?t |]
==> ?\<Theta>,?\<Gamma> \<turnstile> subst_bv ?t (strip_all_single_body ?B)
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
### theory "Draft.Logic"
### 0.903s elapsed time, 1.943s cpu time, 0.290s GC time
Loading theory "Draft.EqualityProof" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen" via "Draft.ProofTerm")
### theory "Draft.Instances"
### 3.054s elapsed time, 8.811s cpu time, 0.882s GC time
Loading theory "Draft.TheoryExe" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen")
### Ambiguous input (line 900 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t)))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" s)))))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1053 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t))))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t))))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" s)))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
ALL x:set (?a # ?args). is_closed x ==>
subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t
### theory "Draft.EqualityProof"
### 0.755s elapsed time, 1.615s cpu time, 0.174s GC time
Loading theory "Draft.ProofTerm" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
exewf_sort ?sub ?S == exenormalized_sort ?sub ?S & exesort_ex ?sub ?S
Found termination order: "(%p. size_class.size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.TheoryExe"
### 2.085s elapsed time, 4.749s cpu time, 0.465s GC time
Found termination order:
  "(%p. size_class.size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
### theory "Draft.ProofTerm"
### 2.335s elapsed time, 4.741s cpu time, 0.413s GC time
Loading theory "Draft.CheckerExe" (required by "Draft.CodeGenMoreTemplates" via "Draft.CodeGen")
Found termination order: "(%p. size_class.size (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_class.size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.CheckerExe"
### 1.352s elapsed time, 1.786s cpu time, 0.190s GC time
Loading theory "Draft.CodeGen" (required by "Draft.CodeGenMoreTemplates")
See theory exports
### theory "Draft.CodeGen"
### 1.181s elapsed time, 1.261s cpu time, 0.106s GC time
Loading theory "Draft.CodeGenMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CodeGenMoreTemplates"
### 0.486s elapsed time, 0.668s cpu time, 0.000s GC time
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
