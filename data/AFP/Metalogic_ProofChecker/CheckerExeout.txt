Loading theory "Draft.Core" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.271s elapsed time, 1.038s cpu time, 0.083s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.083s elapsed time, 0.336s cpu time, 0.000s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.Name")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.104s elapsed time, 0.406s cpu time, 0.047s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.589s elapsed time, 2.293s cpu time, 0.186s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.515s cpu time, 0.057s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.920s cpu time, 0.084s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.489s elapsed time, 1.831s cpu time, 0.539s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.163s elapsed time, 4.456s cpu time, 0.777s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "has_typ1"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.959s elapsed time, 3.763s cpu time, 0.407s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.704s elapsed time, 6.562s cpu time, 1.055s GC time
Loading theory "List-Index.List_Index" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "{}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.146s elapsed time, 4.346s cpu time, 1.253s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
### theory "List-Index.List_Index"
### 0.693s elapsed time, 2.536s cpu time, 1.060s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts" via "Draft.Term")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.341s elapsed time, 8.762s cpu time, 1.649s GC time
Loading theory "Draft.Templates" (required by "Draft.CheckerExeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.228s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CheckerExeMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 4.018s elapsed time, 14.787s cpu time, 2.589s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.599s elapsed time, 1.738s cpu time, 0.111s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.532s elapsed time, 3.517s cpu time, 0.315s GC time
Loading theory "Draft.Term" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe" via "Draft.Sorts")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 6.033s elapsed time, 8.171s cpu time, 1.684s GC time
Loading theory "Draft.BetaNorm" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.BetaNormProof")
Loading theory "Draft.Instances" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe")
Loading theory "Draft.Name" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic")
Loading theory "Draft.Sorts" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.SortsExe")
Proofs for inductive predicate(s) "beta"
  Proving monotonicity ...
locale wf_subclass_loc
  fixes cs :: "(String.literal * String.literal) set"
  assumes "wf_subclass_loc cs"
### theory "Draft.Sorts"
### 0.155s elapsed time, 0.615s cpu time, 0.061s GC time
Loading theory "Draft.SortConstants" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe" via "Draft.Theory")
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (%p. size_list size (fst (snd p))) <*mlex*>
   {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.BetaNorm"
### 0.386s elapsed time, 1.536s cpu time, 0.140s GC time
Loading theory "Draft.EtaNorm" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic" via "Draft.EtaNormProof")
Proofs for inductive predicate(s) "eta"
Found termination order: "{}"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.SortConstants"
### 0.329s elapsed time, 1.311s cpu time, 0.150s GC time
Loading theory "Draft.SortsExe" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe")
### theory "Draft.EtaNorm"
### 0.143s elapsed time, 0.574s cpu time, 0.071s GC time
Loading theory "Draft.Term_Subst" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Name"
### 0.584s elapsed time, 2.317s cpu time, 0.211s GC time
Loading theory "Draft.Theory" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.TheoryExe")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### Type
### String.literal set => String.literal set => bool
### of constant "HOL.eq"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool, in theorem:
### normalized_sort (set ?cs) ?s == exenormalized_sort ?cs ?s
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.SortsExe"
### 0.562s elapsed time, 2.223s cpu time, 0.217s GC time
bundle eq_axs_simp
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
### theory "Draft.Theory"
### 0.570s elapsed time, 2.267s cpu time, 0.217s GC time
Loading theory "Draft.BetaNormProof" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic")
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
### theory "Draft.Term_Subst"
### 0.796s elapsed time, 3.143s cpu time, 0.311s GC time
### theory "Draft.BetaNormProof"
### 0.275s elapsed time, 0.905s cpu time, 0.094s GC time
Loading theory "Draft.EtaNormProof" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm" via "Draft.Logic")
### theory "Draft.EtaNormProof"
### 0.214s elapsed time, 0.427s cpu time, 0.000s GC time
Loading theory "Draft.Logic" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm")
"proves"
  :: "((String.literal => typ option) *
       (String.literal => nat option) *
       (String.literal * String.literal) set *
       (String.literal
        => (String.literal => String.literal set list option) option)) *
      Core.term set
      => Core.term set => Core.term => bool"
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
wt_term ?\<Sigma> ?t ==
wf_term ?\<Sigma> ?t & (EX T. \<turnstile>\<^sub>\<tau> ?t : T)
term_ok ?\<Theta> (Fv ?idn ?\<tau>) = typ_ok ?\<Theta> ?\<tau>
typ_of (Fv ?idn ?\<tau>) = Some ?\<tau>
typ_ok ?\<Theta> ?T == wf_type (sig ?\<Theta>) ?T
[| ?\<Theta>,?\<Gamma> \<turnstile> ?B;
   strip_all_single_var ?B = Some ?\<tau>; typ_of ?t = Some ?\<tau>;
   term_ok ?\<Theta> ?t |]
==> ?\<Theta>,?\<Gamma> \<turnstile> subst_bv ?t (strip_all_single_body ?B)
strip_all_single_var ?B = Some ?\<tau> ==>
Ct STR ''Pure.all'' ((?\<tau> \<rightarrow> propT) \<rightarrow> propT) $
Abs ?\<tau> (strip_all_single_body ?B) =
?B
### theory "Draft.Logic"
### 1.006s elapsed time, 2.175s cpu time, 0.346s GC time
Loading theory "Draft.EqualityProof" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe" via "Draft.ProofTerm")
### Ambiguous input (line 900 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs" ("_position" s) ("_position" t)))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" s)))))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>')
###                 ("_applC" ("_position" bind_fv)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" \<tau>')))
###                     ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" s)))))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>')
###             ("_applC" ("_position" bind_fv)
###               ("_cargs"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" \<tau>')))
###                 ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" s)))))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>')
###               ("_applC" ("_position" bind_fv)
###                 ("_cargs"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" \<tau>')))
###                   ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1053 of "$AFP/Metalogic_ProofChecker/EqualityProof.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.iff"
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t))))))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t))))))
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.iff"
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" s)))
###           ("_applC" ("_position" subst_bv)
###             ("_cargs"
###               ("_applC" ("_position" Fv)
###                 ("_cargs" ("_position" x) ("_position" \<tau>')))
###               ("_position" t)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" s)))
###             ("_applC" ("_position" Abs)
###               ("_cargs" ("_position" \<tau>') ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves"
###     ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" mk_eq)
###       ("_cargs"
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" s)))
###         ("_applC" ("_position" Abs)
###           ("_cargs" ("_position" \<tau>') ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.iff"
###         ("_applC" ("_position" mk_eq)
###           ("_cargs"
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" s)))
###             ("_applC" ("_position" subst_bv)
###               ("_cargs"
###                 ("_applC" ("_position" Fv)
###                   ("_cargs" ("_position" x) ("_position" \<tau>')))
###                 ("_position" t)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" mk_eq)
###         ("_cargs"
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" s)))
###           ("_applC" ("_position" Abs)
###             ("_cargs" ("_position" \<tau>') ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
ALL x:set (?a # ?args). is_closed x ==>
subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t
### theory "Draft.Instances"
### 3.374s elapsed time, 9.573s cpu time, 0.974s GC time
Loading theory "Draft.TheoryExe" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe")
### theory "Draft.EqualityProof"
### 0.770s elapsed time, 1.615s cpu time, 0.106s GC time
Loading theory "Draft.ProofTerm" (required by "Draft.CheckerExeMoreTemplates" via "Draft.CheckerExe")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "(%p. size_class.size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
exewf_sort ?sub ?S == exenormalized_sort ?sub ?S & exesort_ex ?sub ?S
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_class.size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.TheoryExe"
### 2.091s elapsed time, 4.766s cpu time, 0.453s GC time
Found termination order: "size_class.size <*mlex*> {}"
Found termination order: "size_class.size <*mlex*> {}"
### theory "Draft.ProofTerm"
### 2.371s elapsed time, 5.000s cpu time, 0.497s GC time
Loading theory "Draft.CheckerExe" (required by "Draft.CheckerExeMoreTemplates")
Found termination order: "(%p. size_class.size (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_class.size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.CheckerExe"
### 1.363s elapsed time, 1.861s cpu time, 0.133s GC time
Loading theory "Draft.CheckerExeMoreTemplates"
val templateLemmas =
   [("CheckerExe.exe_check_proof_iff_check_proof",
     "exe_check_proof ?e ?P ?res =
      check_proof (translate_theory ?e) ?P ?res",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("CheckerExe.execlass_leq_code",
     "class_leq (set ?cs) ?c1.0 ?c2.0 = execlass_leq ?cs ?c1.0 ?c2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("CheckerExe.exesort_les_code",
     "sort_leq (set ?cs) ?c1.0 ?c2.0 = exesort_leq ?cs ?c1.0 ?c2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("CheckerExe.term_ok_code",
     "exe_wf_theory' ?\<Theta> ==>
      term_ok (translate_theory ?\<Theta>) ?t = exeterm_ok ?\<Theta> ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CheckerExe.replay_code",
     "exe_wf_theory' ?thy ==>
      replay (translate_theory ?thy) ?P = exereplay ?thy ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CheckerExe.typ_ok_code",
     "exe_wf_theory' ?\<Theta> ==>
      typ_ok (translate_theory ?\<Theta>) ?ty = exetyp_ok ?\<Theta> ?ty",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("CheckerExe.check_proof_sound",
     "exe_check_proof ?e ?P ?res ==>
      translate_theory ?e,set (hyps ?P) \<turnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("CheckerExe.check_proof_really_sound",
     "exe_check_proof ?e ?P ?res ==>
      translate_theory ?e,set (hyps ?P) \<tturnstile> ?res",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("CheckerExe.has_sort_code",
     "exe_osig_conds ?oss ==>
      has_sort (translate_osig ?oss) ?T ?S = exehas_sort ?oss ?T ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("CheckerExe.has_sort_code'",
     "exe_wf_theory' ?\<Theta> ==>
      has_sort (osig (sig (translate_theory ?\<Theta>))) ?T ?S =
      exehas_sort (exesorts (exesig ?\<Theta>)) ?T ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))),
             template_var 1),
           template_var 0)))),
    ("CheckerExe.replay'_code",
     "exe_wf_theory' ?thy ==>
      replay' (translate_theory ?thy) ?vs ?ns ?Hs ?P =
      exereplay' ?thy ?vs ?ns ?Hs ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("CheckerExe.inst_ok_code1",
     "exe_wf_theory' ?\<Theta> ==>
      list_all (exetyp_ok ?\<Theta>) (map snd ?insts) =
      list_all (typ_ok (translate_theory ?\<Theta>)) (map snd ?insts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("CheckerExe.exehas_sort_imp_has_sort",
     "[| exe_osig_conds (?sub, ?tcs); exehas_sort (?sub, ?tcs) ?T ?S |]
      ==> has_sort (translate_osig (?sub, ?tcs)) ?T ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2))),
               template_var 1),
             template_var 0)
           ))),
    ("CheckerExe.has_sort_imp_exehas_sort",
     "[| exe_osig_conds (?sub, ?tcs);
         has_sort (translate_osig (?sub, ?tcs)) ?T ?S |]
      ==> exehas_sort (?sub, ?tcs) ?T ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("CheckerExe.replay''_code",
     "exe_wf_theory' ?thy ==>
      replay'' (translate_theory ?thy) ?vs ?ns ?Hs ?P =
      exereplay'' ?thy ?vs ?ns ?Hs ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 4)),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           t_empty)))),
    ("CheckerExe.inst_ok_code2",
     "exe_wf_theory' ?\<Theta> ==>
      list_all
       (%((idn, S), T).
           has_sort (osig (sig (translate_theory ?\<Theta>))) T S)
       ?insts =
      list_all
       (%((idn, S), T). exehas_sort (exesorts (exesig ?\<Theta>)) T S)
       ?insts",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8, template_app (template_hole 7, t_empty))),
           template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8, template_app (template_hole 7, t_empty))),
           template_var 0)))),
    ("CheckerExe.of_class_code1",
     "exe_wf_theory' ?thy ==>
      (has_sort (osig (sig (translate_theory ?thy))) ?ty
        (insert ?c full_sort) &
       typ_ok (translate_theory ?thy) ?ty) =
      (exehas_sort (exesorts (exesig ?thy)) ?ty (insert ?c full_sort) &
       exetyp_ok ?thy ?ty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 2)))),
                 template_var 1),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2))),
                 template_var 1),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 2)),
             template_var 1))))),
    ("CheckerExe.inst_ok_code",
     "exe_wf_theory' ?\<Theta> ==>
      inst_ok (translate_theory ?\<Theta>) ?insts =
      exeinst_ok ?\<Theta> ?insts",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 18,
             template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 1))),
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1))),
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty))),
               template_var 0)))))),
    ("CheckerExe.of_class_code2",
     "exe_wf_theory' ?thy ==>
      const_type (sig (translate_theory ?thy)) (const_of_class ?c) =
      lookup (%k. k = const_of_class ?c) (execonst_type_of (exesig ?thy))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 1))),
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 7, template_hole 6),
                               template_hole 6),
                             template_hole 6),
                           template_hole 6),
                         template_hole 6),
                       template_hole 5),
                     template_hole 6),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 7, template_hole 6),
                                 template_hole 6),
                               template_hole 5),
                             template_hole 5),
                           template_hole 5),
                         template_hole 6),
                       template_hole 6),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 7, template_hole 5),
                                   template_hole 5),
                                 template_hole 6),
                               template_hole 6),
                             template_hole 5),
                           template_hole 6),
                         template_hole 6),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 7, template_hole 6),
                                     template_hole 5),
                                   template_hole 5),
                                 template_hole 5),
                               template_hole 5),
                             template_hole 6),
                           template_hole 6),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 7, template_hole 6), template_hole 6),
                                     template_hole 5),
                                   template_hole 5),
                                 template_hole 6),
                               template_hole 6),
                             template_hole 6),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 7, template_hole 6), template_hole 6),
 template_hole 5),
                                     template_hole 5),
                                   template_hole 6),
                                 template_hole 6),
                               template_hole 6),
                             template_hole 4)))))))))),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))))))]:
   (string * thm * template) list
### theory "Draft.CheckerExeMoreTemplates"
### 0.505s elapsed time, 0.724s cpu time, 0.037s GC time
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** Undefined fact: "4" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 170 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "4" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** At command "thm" (line 166 of "$AFP/Metalogic_ProofChecker/EtaNorm.thy")
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
