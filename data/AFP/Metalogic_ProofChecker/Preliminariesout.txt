Loading theory "HOL-Library.AList" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.461s cpu time, 0.040s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.192s elapsed time, 0.751s cpu time, 0.040s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.073s elapsed time, 0.279s cpu time, 0.046s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.442s elapsed time, 1.717s cpu time, 0.135s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.250s cpu time, 0.095s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.906s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.AList"
### 1.231s elapsed time, 4.722s cpu time, 0.821s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "list_emb"
class height = type +
  fixes height :: "'a => nat"
  Proving monotonicity ...
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.289s cpu time, 0.835s GC time
Loading theory "List-Index.List_Index" (required by "Draft.PreliminariesMoreTemplates" via "Draft.Preliminaries")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.445s elapsed time, 1.749s cpu time, 0.265s GC time
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.122s elapsed time, 4.181s cpu time, 1.211s GC time
### theory "HOL-Library.Sublist"
### 1.942s elapsed time, 7.218s cpu time, 1.896s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.PreliminariesMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.410s elapsed time, 8.185s cpu time, 1.982s GC time
Loading theory "Draft.Templates" (required by "Draft.PreliminariesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PreliminariesMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.114s cpu time, 0.109s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.469s elapsed time, 2.822s cpu time, 0.252s GC time
Loading theory "Draft.PreliminariesMoreTemplates"
val templateLemmas =
   [("Preliminaries.diff_list_set_from_Nil", "diff_list [] ?ys = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Preliminaries.diff_list_set_remove_Nil", "diff_list ?xs [] = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Preliminaries.lookup_in_empty", "lookup ?f [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Preliminaries.distinct_on_remdups_on",
     "distinct_on ?f (remdups_on ?f ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Preliminaries.remdups_on_subset_input",
     "set (remdups_on ?f ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Preliminaries.set_AList_delete_bound",
     "set (AList.delete ?a ?l) <= set ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Preliminaries.distinct_fst_imp_distinct",
     "distinct (map fst ?l) ==> distinct ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.diff_list_set",
     "set (diff_list ?xs ?ys) = set ?xs - set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Preliminaries.in_range_if_ex_key",
     "(?v : ran ?m) = (EX k. ?m k = Some ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Preliminaries.find_None",
     "(Preliminaries.find ?f ?xs = None) = (ALL x:set ?xs. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Preliminaries.lift2_option_None",
     "(lift2_option ?f ?x ?y = None) = (?x = None | ?y = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Preliminaries.lookup_AList_clearjunk",
     "lookup (%x. x = ?k) ?al = lookup (%x. x = ?k) (AList.clearjunk ?al)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.lookup_in_single",
     "lookup ?f [(?k, ?v)] = (if ?f ?k then Some ?v else None)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_hole 3)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Preliminaries.fold_Option_bind_eq_None_start_None",
     "fold (%(x, y) option. Option.bind option (?f x y)) ?list None = None",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Preliminaries.diff_list_order_irr",
     "set ?ys = set ?ys' ==> diff_list ?xs ?ys = diff_list ?xs ?ys'",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Preliminaries.list_all_clearjunk_cons",
     "list_all ?P (?x # AList.clearjunk ?l) ==>
      list_all ?P (AList.clearjunk (?x # ?l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("Preliminaries.lookup_None_iff_find_None",
     "(lookup ?P ?xs = None) = (List.find (%(k, uu_). ?P k) ?xs = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_hole 0))),
    ("Preliminaries.find_ListFind",
     "Preliminaries.find ?f ?l =
      Option.bind
       (List.find (%x. case ?f x of None => False | Some a => True) ?l) ?f",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 0)),
         template_var 1))),
    ("Preliminaries.find_Some",
     "List.find ?P ?l = Some ?p ==> ?p : set ?l & ?P ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_app (template_var 2, template_var 0))
           ))),
    ("Preliminaries.list_allI",
     "(!!x. x : set ?l ==> ?P x) ==> list_all ?P ?l",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Preliminaries.Or_None",
     "(?e1.0 OR ?e2.0 = None) = (?e1.0 = None & ?e2.0 = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1), t_empty),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 1))
           ))),
    ("Preliminaries.lift2_option_not_None",
     "(lift2_option ?f ?x ?y ~= None) = (?x ~= None & ?y ~= None)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 5)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Preliminaries.findD",
     "Preliminaries.find ?f ?xs = Some ?p ==> EX x:set ?xs. ?f x = Some ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("Preliminaries.lookup_eq_key_not_present",
     "?key ~: set (map fst ?inst) ==> lookup (%x. x = ?key) ?inst = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_hole 0))),
    ("Preliminaries.lookup_present_eq_key'",
     "lookup (%x. x = ?k) ?al = Some ?v ==> (?k, ?v) : set ?al",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, t_empty), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Preliminaries.lookup_None_iff",
     "(lookup ?P ?xs = None) = (\<nexists>x. x : set (map fst ?xs) & ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_hole 7),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Preliminaries.fold_Option_bind_eq_Some_start_not_None",
     "fold (%new option. Option.bind option (?f new)) ?list ?start =
      Some ?res ==>
      ?start ~= None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, t_empty), template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Preliminaries.diff_list_rec",
     "diff_list (?x # ?xs) ?ys =
      (if ?x : set ?ys then diff_list ?xs ?ys else ?x # diff_list ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Preliminaries.alist_map_corr",
     "distinct (map fst ?al) ==>
      ((?k, ?v) : set ?al) = (map_of ?al ?k = Some ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0)),
                template_app (template_hole 3, template_var 2))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Preliminaries.key_present_imp_eq_lookup_finds_value",
     "?k : fst ` set ?al ==> EX v. lookup (%x. x = ?k) ?al = Some v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app (template_hole 5, template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Preliminaries.find_Some_imp_lookup_Some",
     "List.find (%(k, uu_). ?P k) ?xs = Some (?k, ?v) ==>
      lookup ?P ?xs = Some ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6, template_app (template_hole 5, t_empty)),
            template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.lookup_AList_delete",
     "?k' ~= ?k ==>
      lookup (%x. x = ?k) ?al = lookup (%x. x = ?k) (AList.delete ?k' ?al)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 0),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Preliminaries.idem_map2", "(!!x. ?f x x = x) ==> map2 ?f ?l ?l = ?l",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0)),
         template_var 0))),
    ("Preliminaries.fold_Option_bind_eq_Some_start_not_None'",
     "fold (%(x, y) option. Option.bind option (?f x y)) ?list ?start =
      Some ?res ==>
      ?start ~= None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5, template_app (template_hole 4, t_empty)),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Preliminaries.lookup_present_eq_key",
     "distinct (map fst ?al) ==>
      ((?k, ?v) : set ?al) = (lookup (%x. x = ?k) ?al = Some ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0)),
                template_app (template_hole 4, template_var 2))
              )],
         template_equation
          (template_app
            (template_app (template_hole 2, t_empty), template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Preliminaries.lookup_present_eq_key''",
     "distinct (map fst ?al) ==>
      (lookup (%x. x = ?k) ?al = Some ?v) = ((?k, ?v) : set ?al)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_var 2)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("Preliminaries.lookup_Some_imp_find_Some",
     "lookup ?P ?xs = Some ?v ==>
      EX x. List.find (%(k, uu_). ?P k) ?xs = Some (x, ?v)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Preliminaries.Or_Some",
     "(?e1.0 OR ?e2.0 = Some ?x) =
      (?e1.0 = Some ?x | ?e1.0 = None & ?e2.0 = Some ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2), t_empty),
           template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 3, template_var 0))))
           ))),
    ("Preliminaries.remdups_on_antimono",
     "(!!x y. ?f x y ==> ?g x y) ==>
      set (remdups_on ?g ?xs) <= set (remdups_on ?f ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Preliminaries.length_alist",
     "[| distinct (map fst ?al); distinct (map fst ?al');
         set ?al = set ?al' |]
      ==> length ?al = length ?al'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.same_map_of_imp_same_length",
     "[| distinct (map fst ?ars1.0); distinct (map fst ?ars2.0);
         map_of ?ars1.0 = map_of ?ars2.0 |]
      ==> length ?ars1.0 = length ?ars2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Preliminaries.lookup_Some_append_back",
     "lookup (%x. x = ?k) ?insts = Some ?v ==>
      lookup (%x. x = ?k) (?insts @ [(?k, ?v')]) = Some ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, t_empty), template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_hole 0))),
         template_app (template_hole 4, template_var 1)))),
    ("Preliminaries.fold_Option_bind_eq_Some_at_point_not_None",
     "fold (%new option. Option.bind option (?f new)) (?l1.0 @ ?l2.0)
       ?start =
      Some ?res ==>
      fold (%new option. Option.bind option (?f new)) ?l1.0 ?start ~= None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, t_empty),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_var 3),
               template_var 1),
             template_hole 0)
           ))),
    ("Preliminaries.fold_Option_bind_at_some_point_None_eq_None",
     "fold (%(x, y) option. Option.bind option (?f x y)) ?l1.0 ?start =
      None ==>
      fold (%(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)
       ?start =
      None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 4, template_app (template_hole 3, t_empty)),
              template_var 2),
            template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 1))),
    ("Preliminaries.lookup_eq_order_irrelevant",
     "[| distinct (map fst ?pairs); distinct (map fst ?pairs');
         set ?pairs = set ?pairs' |]
      ==> lookup (%x. x = ?k) ?pairs = lookup (%x. x = ?k) ?pairs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("Preliminaries.map2_sym",
     "(!!x y. ?f x y = ?f y x) ==> map2 ?f ?xs ?ys = map2 ?f ?ys ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Preliminaries.fold_Option_bind_eq_Some_at_point_not_None'",
     "fold (%(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)
       ?start =
      Some ?res ==>
      fold (%(x, y) option. Option.bind option (?f x y)) ?l1.0 ?start ~=
      None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6, template_app (template_hole 5, t_empty)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty)),
                 template_var 3),
               template_var 1),
             template_hole 0)
           ))),
    ("Preliminaries.distinct_on_no_compare",
     "[| !!x y. ?f x y ==> ?f y x; distinct_on ?f ?xs; ?x : set ?xs;
         ?y : set ?xs; ?x ~= ?y |]
      ==> ~ ?f ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 0)
               )
           ))),
    ("Preliminaries.rev_induct2",
     "[| length ?xs = length ?ys; ?P [] [];
         !!x xs y ys.
            [| length xs = length ys; ?P xs ys |]
            ==> ?P (xs @ [x]) (ys @ [y]) |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Preliminaries.fold_Option_bind_eq_Some_at_each_point_Some",
     "fold (%(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)
       ?start =
      Some ?res ==>
      EX point.
         fold (%(x, y) option. Option.bind option (?f x y)) ?l1.0 ?start =
         Some point &
         fold (%(x, y) option. Option.bind option (?f x y)) ?l2.0
          (Some point) =
         Some ?res",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6, template_app (template_hole 5, t_empty)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Preliminaries.fold_matches_first_step_not_None",
     "[| fold (%(T, U) subs. Option.bind subs (?f T U))
          (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =
         Some ?subs';
         !!point.
            [| ?f ?x ?y ?subs = Some point;
               fold (%(T, U) subs. Option.bind subs (?f T U)) (zip ?xs ?ys)
                (Some point) =
               Some ?subs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5)),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3))),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Preliminaries.fold_Option_bind_eq_Some_at_each_point_Some'",
     "[| fold (%(x, y) option. Option.bind option (?f x y)) (?xs @ ?ys)
          ?start =
         Some ?res;
         !!point.
            [| fold (%(x, y) option. Option.bind option (?f x y)) ?xs
                ?start =
               Some point;
               fold (%(x, y) option. Option.bind option (?f x y)) ?ys
                (Some point) =
               Some ?res |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5, template_app (template_hole 4, t_empty)),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3)),
            template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Preliminaries.find_the_pair",
     "[| distinct (map fst ?pairs);
         !!x y.
            [| x : set (map fst ?pairs); y : set (map fst ?pairs); ?P x;
               ?P y |]
            ==> x = y;
         (?x, ?y) : set ?pairs; ?P ?x |]
      ==> List.find (%(x, uu_). ?P x) ?pairs = Some (?x, ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 3),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Preliminaries.fold_matches_last_step_not_None",
     "[| length ?xs = length ?ys;
         fold (%(T, U) subs. Option.bind subs (?f T U))
          (zip (?xs @ [?x]) (?ys @ [?y])) (Some ?subs) =
         Some ?subs';
         !!point.
            [| fold (%(T, U) subs. Option.bind subs (?f T U)) (zip ?xs ?ys)
                (Some ?subs) =
               Some point;
               ?f ?x ?y point = Some ?subs' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 7),
          template_app (template_hole 13, template_var 6)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 11, template_app (template_hole 10, t_empty)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_hole 5))),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_hole 2)))),
            template_app (template_hole 1, template_var 2)),
          template_app (template_hole 1, template_var 1)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.PreliminariesMoreTemplates"
### 0.341s elapsed time, 0.477s cpu time, 0.000s GC time
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
