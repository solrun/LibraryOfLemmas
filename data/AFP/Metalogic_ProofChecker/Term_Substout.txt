Loading theory "Draft.Core" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.234s elapsed time, 0.913s cpu time, 0.051s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.066s elapsed time, 0.252s cpu time, 0.037s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.450s cpu time, 0.039s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Eisbach.Eisbach"
### 0.432s elapsed time, 1.682s cpu time, 0.127s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.890s cpu time, 0.072s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.401s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.261s elapsed time, 4.847s cpu time, 0.800s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "has_typ1"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.194s cpu time, 0.820s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.720s elapsed time, 6.611s cpu time, 1.088s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "{}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Proofs for inductive predicate(s) "has_sort"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.878s elapsed time, 3.449s cpu time, 0.358s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.430s elapsed time, 1.633s cpu time, 0.174s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst" via "Draft.Term")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.033s elapsed time, 7.489s cpu time, 0.780s GC time
Loading theory "Draft.Templates" (required by "Draft.Term_SubstMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.230s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Term_SubstMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 3.787s elapsed time, 13.823s cpu time, 1.704s GC time
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.608s elapsed time, 1.750s cpu time, 0.117s GC time
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.611s elapsed time, 3.986s cpu time, 0.351s GC time
Loading theory "Draft.Term" (required by "Draft.Term_SubstMoreTemplates" via "Draft.Term_Subst")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.638s elapsed time, 6.894s cpu time, 0.581s GC time
Loading theory "Draft.Term_Subst" (required by "Draft.Term_SubstMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
### theory "Draft.Term_Subst"
### 0.939s elapsed time, 2.037s cpu time, 1.377s GC time
Loading theory "Draft.Term_SubstMoreTemplates"
val templateLemmas =
   [("Term_Subst.subst_typ_nil", "subst_typ [] ?T = ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Term_Subst.subst_term_empty_no_change", "subst_term [] ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Term_Subst.subst_typ'_nil", "subst_typ' [] ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Term_Subst.subst_type_term_empty_no_change",
     "subst_type_term [] [] ?t = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Term_Subst.subst_typ_AList_clearjunk",
     "subst_typ ?insts ?T = subst_typ (AList.clearjunk ?insts) ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Term_Subst.subst_type_term_without_type_insts_eq_subst_term",
     "subst_type_term [] ?insts ?t = subst_term ?insts ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Term_Subst.distinct_fst_imp_distinct",
     "distinct (map fst ?l) ==> distinct ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Term_Subst.subst_typ'_AList_clearjunk",
     "subst_typ' ?insts ?t = subst_typ' (AList.clearjunk ?insts) ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Term_Subst.subst_type_term_split_levels",
     "subst_type_term ?instT ?insts ?t =
      subst_term ?insts (subst_typ' ?instT ?t)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Term_Subst.distinct_kv_list",
     "distinct ?l ==> distinct (map (%x. (x, ?f x)) ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Term_Subst.subst_typ_comp",
     "subst_typ ?inst1.0 (subst_typ ?inst2.0 ?T) =
      subst_typ (map (apsnd (subst_typ ?inst1.0)) ?inst2.0 @ ?inst1.0) ?T",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 2))),
                 template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Term_Subst.subst_typ'_comp",
     "subst_typ' ?inst1.0 (subst_typ' ?inst2.0 ?t) =
      subst_typ' (map (apsnd (subst_typ ?inst1.0)) ?inst2.0 @ ?inst1.0) ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_hole 3, template_var 2))),
                   template_var 1)),
               template_var 2))),
         template_var 0))),
    ("Term_Subst.tsubstT_simulates_subst_typ",
     "subst_typ ?insts ?T =
      tsubstT ?T
       (%idn S. the_default (Tv idn S) (lookup (%x. x = (idn, S)) ?insts))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 0), t_empty))),
    ("Term_Subst.tsubst_simulates_subst_typ'",
     "subst_typ' ?insts ?T =
      tsubst ?T
       (%idn S. the_default (Tv idn S) (lookup (%x. x = (idn, S)) ?insts))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 0), t_empty))),
    ("Term_Subst.subst_term_not_loose_bvar",
     "[| ~ loose_bvar ?t ?n; is_closed ?b |]
      ==> ~ loose_bvar (subst_term [((?idn, ?T), ?b)] ?t) ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 1, template_var 1),
                                 template_var 0)),
                             template_var 2)),
                         template_hole 0)),
                     template_var 4)),
                 template_var 3)
               )
           ))),
    ("Term_Subst.subst_subst_term",
     "[| distinct ?l; fv ?t <= set ?l |]
      ==> subst ?t ?\<rho> =
          subst_term (map (%x. (x, case x of (x, xa) => ?\<rho> x xa)) ?l)
           ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_var 1)))),
    ("Term_Subst.subst_type_add_degenerate_instance",
     "(?idx, ?s) ~: set (map fst ?insts) ==>
      subst_typ ?insts ?T =
      subst_typ (((?idx, ?s), Tv ?idx ?s) # ?insts) ?T",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2))),
               template_var 1)),
           template_var 0)))),
    ("Term_Subst.subst_typ_irrelevant_order",
     "[| distinct (map fst ?pairs); distinct (map fst ?pairs');
         set ?pairs = set ?pairs' |]
      ==> subst_typ ?pairs ?T = subst_typ ?pairs' ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Term_Subst.subst_typ_simulates_tsubstT",
     "tsubstT ?T ?\<rho> =
      subst_typ
       (map (%(x, y). ((x, y), ?\<rho> x y))
         (SOME l. distinct l & set l = tvsT ?T))
       ?T",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 5, t_empty))),
         template_var 1))),
    ("Term_Subst.subst_typ_simulates_tsubstT_gen",
     "tsubstT ?T ?\<rho> =
      subst_typ
       (map (%(x, y). ((x, y), ?\<rho> x y))
         (SOME l. distinct l & tvsT ?T <= set l))
       ?T",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 5, t_empty))),
         template_var 1))),
    ("Term_Subst.subst_typ'_simulates_tsubst_gen",
     "tsubst ?t ?\<rho> =
      subst_typ'
       (map (%(x, y). ((x, y), ?\<rho> x y))
         (SOME l. distinct l & tvs ?t <= set l))
       ?t",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9, template_app (template_hole 8, t_empty)),
               template_app (template_hole 5, t_empty)))),
         template_var 1))),
    ("Term_Subst.subst_typ'_add_degenerate_instance",
     "(?idx, ?s) ~: set (map fst ?insts) ==>
      subst_typ' ?insts ?t =
      subst_typ' (((?idx, ?s), Tv ?idx ?s) # ?insts) ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 9, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2))),
                 template_var 1))),
           template_var 0)))),
    ("Term_Subst.subst_typ_simulates_tsubstT_gen'",
     "[| distinct ?l; tvsT ?T <= set ?l |]
      ==> tsubstT ?T ?\<rho> =
          subst_typ (map (%(x, y). ((x, y), ?\<rho> x y)) ?l) ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 2)),
           template_var 1)))),
    ("Term_Subst.instantiate_var_same_typ'",
     "[| typ_of ?a = Some ?\<tau>; is_closed ?B |]
      ==> subst_bv ?a (bind_fv (?x, ?\<tau>) ?B) =
          subst_term [((?x, ?\<tau>), ?a)] ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 2)),
                   template_var 3)),
               template_hole 0)),
           template_var 1)))),
    ("Term_Subst.subst_typ'_simulates_tsubst_gen'",
     "[| distinct ?pairs; tvs ?t <= set ?pairs |]
      ==> tsubst ?t ?\<rho> =
          subst_typ' (map (%(x, y). ((x, y), ?\<rho> x y)) ?pairs) ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_var 2))),
           template_var 1)))),
    ("Term_Subst.bind_fv2_subst_bv1_eq_subst_term",
     "[| ~ loose_bvar ?t ?n; is_closed ?b |]
      ==> subst_term [((?idn, ?T), ?b)] ?t =
          subst_bv1 (bind_fv2 (?idn, ?T) ?n ?t) ?n ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_var 2)),
               template_hole 2)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_var 3),
                 template_var 4)),
             template_var 3),
           template_var 2)))),
    ("Term_Subst.instantiate_var_same_type''",
     "[| typ_of ?a = Some ?\<tau>; is_closed ?B |]
      ==> Abs_fv ?x ?\<tau> ?B \<bullet> ?a =
          subst_term [((?x, ?\<tau>), ?a)] ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 2)),
                 template_var 1))),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 2)),
                   template_var 3)),
               template_hole 0)),
           template_var 1)))),
    ("Term_Subst.instantiate_var_same_typ",
     "[| typ_of ?a = Some ?\<tau>; ~ loose_bvar ?B ?lev |]
      ==> subst_bv1 (bind_fv2 (?x, ?\<tau>) ?lev ?B) ?lev ?a =
          subst_term [((?x, ?\<tau>), ?a)] ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 4),
          template_app (template_hole 10, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 3)),
                   template_var 1),
                 template_var 2)),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 3)),
                   template_var 4)),
               template_hole 0)),
           template_var 2)))),
    ("Term_Subst.subst_term_subst",
     "distinct (map fst ?l) ==>
      subst_term ?l ?t =
      subst ?t
       (fold (%((idn, T), t) f x y. if x = idn & y = T then t else f x y) ?l
         Fv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty))),
               template_var 1),
             template_hole 0))))),
    ("Term_Subst.subst_typ_combine_single",
     "?fresh_idn ~: fst ` tvsT ?\<tau> ==>
      subst_typ [((?fresh_idn, ?S), ?\<tau>2.0)]
       (subst_typ [((?idn, ?S), Tv ?fresh_idn ?S)] ?\<tau>) =
      subst_typ [((?idn, ?S), ?\<tau>2.0)] ?\<tau>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 2)),
                   template_var 1)),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 2))),
                 template_hole 1)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2)),
                   template_var 1)),
               template_hole 1)),
           template_var 3)))),
    ("Term_Subst.subst_typ_stepwise",
     "[| distinct (map fst ?instT);
         !!x. x : tvsT_Set (snd ` set ?instT) ==> x ~: fst ` set ?instT |]
      ==> subst_typ ?instT ?T =
          fold (%single. subst_typ [single]) ?instT ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Term_Subst.subst_term_stepwise",
     "[| distinct (map fst ?insts);
         !!x. x : \<Union> (fv ` snd ` set ?insts) ==>
              x ~: fst ` set ?insts |]
      ==> subst_term ?insts ?t =
          fold (%single. subst_term [single]) ?insts ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Term_Subst.subst_typ'_stepwise",
     "[| distinct (map fst ?instT);
         !!x. x : tvsT_Set (snd ` set ?instT) ==> x ~: fst ` set ?instT |]
      ==> subst_typ' ?instT ?t =
          fold (%single. subst_typ' [single]) ?instT ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("Term_Subst.instantiate_vars_same_typ",
     "[| list_all (%((idx, ty), t). typ_of t = Some ty) ?insts;
         ~ loose_bvar ?B ?lev |]
      ==> fold
           (%((idx, ty), t) B. subst_bv1 (bind_fv2 (idx, ty) ?lev B) ?lev t)
           ?insts ?B =
          fold (%single. subst_term [single]) ?insts ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, t_empty))),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 8, t_empty), template_var 2),
           template_var 1)))),
    ("Term_Subst.subst_type_term_irrelevant_order",
     "[| distinct (map fst ?instT); distinct (map fst ?instT');
         set ?instT = set ?instT'; distinct (map fst ?insts);
         distinct (map fst ?insts'); set ?insts = set ?insts' |]
      ==> subst_type_term ?instT ?insts ?t =
          subst_type_term ?instT' ?insts' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 3))
            ),
        template_equation
         (template_app (template_hole 7, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Term_Subst.subst_typ_split_first",
     "[| distinct (map fst (?x # ?xs));
         !!y. y : tvsT_Set (snd ` set (?x # ?xs)) ==>
              y ~: fst ` set (?x # ?xs) |]
      ==> subst_typ (?x # ?xs) ?T = subst_typ ?xs (subst_typ [?x] ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 13, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 13, template_var 2),
                 template_hole 0)),
             template_var 0))))),
    ("Term_Subst.subst_type_term_simulates_subst_tsubst",
     "subst (tsubst ?t ?\<rho>ty) ?\<rho>t =
      subst_type_term
       (map (%(x, y). ((x, y), ?\<rho>ty x y))
         (SOME lty. distinct lty & tvs ?t = set lty))
       (map (%(x, y). ((x, y), ?\<rho>t x y))
         (SOME lt. distinct lt & fv (tsubst ?t ?\<rho>ty) = set lt))
       ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 21,
           template_app
            (template_app (template_hole 20, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 18,
                 template_app (template_hole 17, t_empty)),
               template_app (template_hole 14, t_empty))),
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 4, t_empty))),
         template_var 2))),
    ("Term_Subst.subst_type_term_simulates_subst_tsubst_gen'",
     "[| distinct ?lty; tvs ?t <= set ?lty; distinct ?lt;
         fv (tsubst ?t ?\<rho>ty) <= set ?lt |]
      ==> subst (tsubst ?t ?\<rho>ty) ?\<rho>t =
          subst_type_term (map (%(x, y). ((x, y), ?\<rho>ty x y)) ?lty)
           (map (%(x, y). ((x, y), ?\<rho>t x y)) ?lt) ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 3),
          template_app (template_hole 16, template_var 4)),
        template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 3),
              template_var 1)),
          template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 12, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 2)),
           template_var 3)))),
    ("Term_Subst.subst_typ_split_last",
     "[| distinct (map fst (?xs @ [?x]));
         !!y. y : tvsT_Set (snd ` set (?xs @ [?x])) ==>
              y ~: fst ` set (?xs @ [?x]) |]
      ==> subst_typ (?xs @ [?x]) ?T = subst_typ [?x] (subst_typ ?xs ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 14, template_var 2),
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_hole 12))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 13, template_var 1),
               template_hole 12)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Term_Subst.subst_term_split_last",
     "[| distinct (map fst (?xs @ [?x]));
         !!y. y : \<Union> (fv ` snd ` set (?xs @ [?x])) ==>
              y ~: fst ` set (?xs @ [?x]) |]
      ==> subst_term (?xs @ [?x]) ?t = subst_term [?x] (subst_term ?xs ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 14, template_var 2),
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_hole 12))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 13, template_var 1),
               template_hole 12)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Term_Subst.instantiate_vars_same_typ'",
     "[| list_all (%((idx, ty), t). typ_of t = Some ty) ?insts;
         ~ loose_bvar ?B ?lev; distinct (map fst ?insts);
         !!x. x : \<Union> (fv ` snd ` set ?insts) ==>
              x ~: fst ` set ?insts |]
      ==> fold
           (%((idx, ty), t) B. subst_bv1 (bind_fv2 (idx, ty) ?lev B) ?lev t)
           ?insts ?B =
          subst_term ?insts ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_hole 26,
                  template_app (template_hole 25, t_empty))),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5, template_app (template_hole 4, t_empty))),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Term_Subst.subst_typ_combine",
     "[| length ?fresh_idns = length ?insts; distinct ?fresh_idns;
         distinct (map fst ?insts);
         ALL idn:set ?fresh_idns.
            idn
            ~: fst `
               (tvsT ?\<tau> Un tvsT_Set (snd ` set ?insts) Un
                fst ` set ?insts) |]
      ==> subst_typ ?insts ?\<tau> =
          subst_typ
           (zip (zip ?fresh_idns (map snd (map fst ?insts)))
             (map snd ?insts))
           (subst_typ
             (zip (map fst ?insts)
               (map2 Tv ?fresh_idns (map snd (map fst ?insts))))
             ?\<tau>)",
     template_implication
      ([template_equation
         (template_app (template_hole 29, template_var 2),
          template_app (template_hole 28, template_var 1)),
        template_predicate
         (template_app (template_hole 27, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 26,
              template_app
               (template_app (template_hole 25, template_hole 24),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 25, template_hole 24),
                       template_var 1)))),
               template_app
                (template_app (template_hole 3, template_hole 12),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 25, template_hole 24),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 25, template_hole 24),
                         template_var 1)))))),
             template_var 0))))),
    ("Term_Subst.subst_term_combine",
     "[| length ?fresh_idns = length ?insts; distinct ?fresh_idns;
         distinct (map fst ?insts);
         ALL idn:set ?fresh_idns.
            idn
            ~: fst `
               (fv ?t Un \<Union> (fv ` snd ` set ?insts) Un
                fst ` set ?insts) |]
      ==> subst_term ?insts ?t =
          subst_term
           (zip (zip ?fresh_idns (map snd (map fst ?insts)))
             (map snd ?insts))
           (subst_term
             (zip (map fst ?insts)
               (map2 Fv ?fresh_idns (map snd (map fst ?insts))))
             ?t)",
     template_implication
      ([template_equation
         (template_app (template_hole 29, template_var 2),
          template_app (template_hole 28, template_var 1)),
        template_predicate
         (template_app (template_hole 27, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 26,
              template_app
               (template_app (template_hole 25, template_hole 24),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 25, template_hole 24),
                       template_var 1)))),
               template_app
                (template_app (template_hole 3, template_hole 12),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 25, template_hole 24),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 25, template_hole 24),
                         template_var 1)))))),
             template_var 0))))),
    ("Term_Subst.subst_type_term_stepwise",
     "[| distinct (map fst ?instT);
         !!x. x : tvsT_Set (snd ` set ?instT) ==> x ~: fst ` set ?instT;
         distinct (map fst ?insts);
         !!x. x : \<Union> (fv ` snd ` set ?insts) ==>
              x ~: fst ` set ?insts |]
      ==> subst_type_term ?instT ?insts ?t =
          fold (%single. subst_term [single]) ?insts
           (fold (%single. subst_typ' [single]) ?instT ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 35,
              template_app
               (template_app (template_hole 34, template_hole 33),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 32, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app
               (template_app (template_hole 21, template_hole 20),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 8, t_empty), template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_var 2),
             template_var 0))))),
    ("Term_Subst.subst_typ'_combine",
     "[| length ?fresh_idns = length ?insts; distinct ?fresh_idns;
         distinct (map fst ?insts);
         ALL idn:set ?fresh_idns.
            idn
            ~: fst `
               (tvs ?t Un tvsT_Set (snd ` set ?insts) Un
                fst ` set ?insts) |]
      ==> subst_typ' ?insts ?t =
          subst_typ'
           (zip (zip ?fresh_idns (map snd (map fst ?insts)))
             (map snd ?insts))
           (subst_typ'
             (zip (map fst ?insts)
               (map2 Tv ?fresh_idns (map snd (map fst ?insts))))
             ?t)",
     template_implication
      ([template_equation
         (template_app (template_hole 31, template_var 2),
          template_app (template_hole 30, template_var 1)),
        template_predicate
         (template_app (template_hole 29, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app
               (template_app (template_hole 27, template_hole 26),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 27, template_hole 26),
                         template_var 1)))),
                 template_app
                  (template_app (template_hole 3, template_hole 13),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 27, template_hole 26),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, t_empty)),
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_app
                          (template_app
                            (template_hole 27, template_hole 26),
                           template_var 1))))))),
             template_var 0))))),
    ("Term_Subst.subst_typ_combine'",
     "[| length ?fresh_idns = length ?insts; distinct ?fresh_idns;
         distinct (map fst ?insts);
         ALL idn:set ?fresh_idns.
            idn
            ~: fst `
               (tvsT ?\<tau> Un tvsT_Set (snd ` set ?insts) Un
                fst ` set ?insts) |]
      ==> subst_typ ?insts ?\<tau> =
          fold (%single. subst_typ [single])
           (zip (zip ?fresh_idns (map snd (map fst ?insts)))
             (map snd ?insts))
           (fold (%single. subst_typ [single])
             (zip (map fst ?insts)
               (map2 Tv ?fresh_idns (map snd (map fst ?insts))))
             ?\<tau>)",
     template_implication
      ([template_equation
         (template_app (template_hole 32, template_var 2),
          template_app (template_hole 31, template_var 1)),
        template_predicate
         (template_app (template_hole 30, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app
               (template_app (template_hole 28, template_hole 27),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 28, template_hole 27),
                       template_var 1)))),
               template_app
                (template_app (template_hole 3, template_hole 15),
                 template_var 1))),
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 28, template_hole 27),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 28, template_hole 27),
                         template_var 1)))))),
             template_var 0))))),
    ("Term_Subst.subst_term_combine'",
     "[| length ?fresh_idns = length ?insts; distinct ?fresh_idns;
         distinct (map fst ?insts);
         ALL idn:set ?fresh_idns.
            idn
            ~: fst `
               (fv ?t Un \<Union> (fv ` snd ` set ?insts) Un
                fst ` set ?insts) |]
      ==> subst_term ?insts ?t =
          fold (%single. subst_term [single])
           (zip (zip ?fresh_idns (map snd (map fst ?insts)))
             (map snd ?insts))
           (fold (%single. subst_term [single])
             (zip (map fst ?insts)
               (map2 Fv ?fresh_idns (map snd (map fst ?insts))))
             ?t)",
     template_implication
      ([template_equation
         (template_app (template_hole 32, template_var 2),
          template_app (template_hole 31, template_var 1)),
        template_predicate
         (template_app (template_hole 30, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app
               (template_app (template_hole 28, template_hole 27),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 10, t_empty),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 28, template_hole 27),
                       template_var 1)))),
               template_app
                (template_app (template_hole 3, template_hole 15),
                 template_var 1))),
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 28, template_hole 27),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, t_empty)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_app
                        (template_app (template_hole 28, template_hole 27),
                         template_var 1)))))),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Term_SubstMoreTemplates"
### 0.491s elapsed time, 0.678s cpu time, 0.051s GC time
*** Undefined fact: "Cons.IH" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** At command "thm" (line 570 of "$AFP/Metalogic_ProofChecker/Term_Subst.thy")
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
