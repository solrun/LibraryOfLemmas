Loading theory "Draft.Core" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.AList" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.199s elapsed time, 0.776s cpu time, 0.038s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries")
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.068s elapsed time, 0.260s cpu time, 0.039s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.448s cpu time, 0.055s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.434s elapsed time, 1.687s cpu time, 0.132s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.938s cpu time, 0.062s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.352s elapsed time, 1.425s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.237s elapsed time, 4.727s cpu time, 0.844s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "has_typ1"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
  Proving monotonicity ...
consts
  suffixes :: "'a list => 'a list list"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.120s elapsed time, 4.241s cpu time, 0.866s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.695s elapsed time, 6.511s cpu time, 1.047s GC time
Loading theory "List-Index.List_Index" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term" via "Draft.Preliminaries")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
### theory "HOL-Library.BigO"
### 0.880s elapsed time, 3.460s cpu time, 0.359s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.435s elapsed time, 1.625s cpu time, 0.178s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory" via "Draft.Term")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.056s elapsed time, 7.582s cpu time, 0.786s GC time
Loading theory "Draft.Templates" (required by "Draft.TheoryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.233s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TheoryMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 3.818s elapsed time, 13.902s cpu time, 1.756s GC time
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.614s elapsed time, 1.802s cpu time, 0.121s GC time
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.614s elapsed time, 3.997s cpu time, 0.356s GC time
Loading theory "Draft.Term" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.734s elapsed time, 7.008s cpu time, 0.619s GC time
Loading theory "Draft.Sorts" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory")
locale wf_subclass_loc
  fixes cs :: "(String.literal * String.literal) set"
  assumes "wf_subclass_loc cs"
### theory "Draft.Sorts"
### 0.123s elapsed time, 0.176s cpu time, 0.028s GC time
Loading theory "Draft.SortConstants" (required by "Draft.TheoryMoreTemplates" via "Draft.Theory")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SortConstants"
### 0.614s elapsed time, 1.609s cpu time, 1.315s GC time
Loading theory "Draft.Theory" (required by "Draft.TheoryMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
bundle eq_axs_simp
### theory "Draft.Theory"
### 0.410s elapsed time, 0.448s cpu time, 0.041s GC time
Loading theory "Draft.TheoryMoreTemplates"
val templateLemmas =
   [("Theory.wf_term_iff_term_ok'",
     "wf_term ?\<Sigma> ?t = term_ok' ?\<Sigma> ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Theory.wf_type_iff_typ_ok_sig",
     "wf_type ?\<Sigma> ?T = typ_ok_sig ?\<Sigma> ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Theory.wf_theory_imp_is_std_sig",
     "wf_theory ?\<Theta> ==> is_std_sig (sig ?\<Theta>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Theory.wf_theory_imp_wf_sig",
     "wf_theory ?\<Theta> ==> wf_sig (sig ?\<Theta>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_abstract_rule_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_combination_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_elim_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_intr_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_reflexive_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_symmetric_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_eq_ax",
     "is_std_sig (sig ?\<Theta>) ==> term_ok ?\<Theta> eq_transitive_ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Theory.wf_term_imp_term_ok'",
     "wf_term ?\<Sigma> ?t ==> term_ok' ?\<Sigma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Theory.wf_type_imp_typ_ok_sig",
     "wf_type ?\<Sigma> ?T ==> typ_ok_sig ?\<Sigma> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Theory.term_ok'_imp_wf_term",
     "term_ok' ?\<Sigma> ?t ==> wf_term ?\<Sigma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Theory.typ_ok_sig_imp_wf_type",
     "typ_ok_sig ?\<Sigma> ?T ==> wf_type ?\<Sigma> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Theory.term_ok_subst_bv_no_change",
     "term_ok ?\<Theta> ?t ==> subst_bv ?u ?t = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Theory.term_ok'_incr_bv",
     "term_ok' ?\<Sigma> ?t ==> term_ok' ?\<Sigma> (incr_bv ?inc ?lev ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Theory.typ_of_subst_bv_no_change",
     "typ_of ?t ~= None ==> subst_bv ?u ?t = ?t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Theory.axioms_terms_ok",
     "[| wf_theory ?thy; ?A : axioms ?thy |] ==> term_ok ?thy ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Theory.term_ok_subst_bv",
     "term_ok ?\<Theta> (Abs ?T ?t) ==>
      term_ok ?\<Theta> (subst_bv (Fv ?x ?T) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Theory.term_ok_app_eqD",
     "term_ok ?\<Theta> (?s $ ?t) ==>
      term_ok ?\<Theta> ?s & term_ok ?\<Theta> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Theory.term_ok'_subst_bv",
     "term_ok' ?\<Sigma> (Abs ?T ?t) ==>
      term_ok' ?\<Sigma> (subst_bv (Fv ?x ?T) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Theory.has_sort_empty",
     "[| wf_sig ?\<Sigma>; wf_type ?\<Sigma> ?T |]
      ==> has_sort (osig ?\<Sigma>) ?T full_sort",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             template_hole 0)
           ))),
    ("Theory.term_ok_subst_bv2_0",
     "term_ok ?\<Theta> (Abs ?T ?t) ==>
      term_ok ?\<Theta> (subst_bv2 ?t 0 (Fv ?x ?T))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Theory.term_ok'_subst_bv2",
     "[| term_ok' ?\<Sigma> ?s; term_ok' ?\<Sigma> ?u |]
      ==> term_ok' ?\<Sigma> (subst_bv2 ?s ?lev ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Theory.typ_Fv_of_full_sort",
     "[| wf_theory ?\<Theta>; term_ok ?\<Theta> (Fv ?v ?T) |]
      ==> has_sort (osig (sig ?\<Theta>)) ?T full_sort",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2))),
               template_var 0),
             template_hole 0)
           ))),
    ("Theory.wf_type_Type_imp_mgd",
     "[| wf_sig ?\<Sigma>; wf_type ?\<Sigma> (Ty ?n ?Ts) |]
      ==> tcsigs (osig ?\<Sigma>) ?n ~= None",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_hole 0)
           ))),
    ("Theory.term_ok_imp_typ_ok",
     "[| wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty |]
      ==> typ_ok ?thy ?ty",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Theory.theory_full_exhaust",
     "(!!cto tao sorts axioms.
          ?\<Theta> = ((cto, tao, sorts), axioms) ==> ?P) ==>
      ?P",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Theory.term_ok_imp_typ_ok_pre",
     "[| is_std_sig ?\<Sigma>; wf_term ?\<Sigma> ?t;
         list_all (typ_ok_sig ?\<Sigma>) ?Ts; typ_of1 ?Ts ?t = Some ?ty |]
      ==> typ_ok_sig ?\<Sigma> ?ty",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3), template_var 0)
           ))),
    ("Theory.propT_ok", "wf_theory ?\<Theta> ==> typ_ok ?\<Theta> propT",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 3),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 3),
                                 template_hole 2),
                               template_hole 3),
                             template_hole 3),
                           template_hole 2),
                         template_hole 2),
                       template_hole 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 2),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 3),
                           template_hole 2),
                         template_hole 2),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 2),
                             template_hole 2),
                           template_hole 2),
                         template_hole 1))))),
               template_hole 0))
           ))),
    ("Theory.axioms_typ_of_propT",
     "[| wf_theory ?thy; ?A : axioms ?thy |] ==> typ_of ?A = Some propT",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_hole 3),
                           template_hole 3),
                         template_hole 3),
                       template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 2),
                           template_hole 3),
                         template_hole 2),
                       template_hole 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 2),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1))))),
             template_hole 0))))),
    ("Theory.term_ok_eta_expand",
     "[| wf_theory ?\<Theta>; term_ok ?\<Theta> ?f;
         typ_of ?f = Some (?\<tau> \<rightarrow> ?\<tau>');
         typ_ok ?\<Theta> ?\<tau> |]
      ==> term_ok ?\<Theta> (Abs ?\<tau> (?f $ Bv 0))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_hole 12,
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_hole 9),
                              template_hole 8),
                            template_hole 8),
                          template_hole 9),
                        template_hole 9),
                      template_hole 8),
                    template_hole 8),
                  template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 10, template_hole 8),
                                template_hole 9),
                              template_hole 8),
                            template_hole 9),
                          template_hole 8),
                        template_hole 8),
                      template_hole 8),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_hole 10, template_hole 9),
                                  template_hole 8),
                                template_hole 8),
                              template_hole 8),
                            template_hole 9),
                          template_hole 8),
                        template_hole 8),
                      template_hole 7)))),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5))))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 15, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_hole 0))))
           ))),
    ("Theory.term_ok_mk_eqD",
     "term_ok ?\<Theta> (mk_eq ?s ?t) ==>
      term_ok ?\<Theta> ?s & term_ok ?\<Theta> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 9, template_hole 8), template_hole 8),
template_hole 8),
                                    template_hole 8),
                                  template_hole 7),
                                template_hole 8),
                              template_hole 7),
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 9, template_hole 7), template_hole 8),
  template_hole 7),
template_hole 8),
                                    template_hole 7),
                                  template_hole 7),
                                template_hole 7),
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 9, template_hole 8), template_hole 7),
    template_hole 8),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 7),
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 7), template_hole 8),
      template_hole 7),
    template_hole 8),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 8), template_hole 7),
        template_hole 7),
      template_hole 7),
    template_hole 8),
  template_hole 7),
template_hole 8),
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 7),
            template_hole 8),
          template_hole 7),
        template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 7),
              template_hole 8),
            template_hole 8),
          template_hole 8),
        template_hole 7),
      template_hole 7),
    template_hole 7),
  template_hole 6)))))))),
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 9, template_hole 8), template_hole 7),
  template_hole 7),
template_hole 8),
                                    template_hole 8),
                                  template_hole 7),
                                template_hole 7),
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 9, template_hole 7), template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 7),
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 8), template_hole 7),
      template_hole 7),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 6)))),
                          template_app
                           (template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3,
                                template_app
                                 (template_hole 2, template_var 1))),
                            template_app
                             (template_app
                               (template_hole 4,
                                template_app
                                 (template_app
                                   (template_hole 5,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_hole 7),
          template_hole 7),
        template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 7),
              template_hole 8),
            template_hole 7),
          template_hole 8),
        template_hole 7),
      template_hole 7),
    template_hole 7),
  template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7),
              template_hole 7),
            template_hole 7),
          template_hole 8),
        template_hole 7),
      template_hole 7),
    template_hole 6)))),
                                  template_app
                                   (template_app
                                     (template_hole 4,
template_app
 (template_hole 3, template_app (template_hole 2, template_var 0))),
                                    template_app
                                     (template_app
 (template_hole 4,
  template_app
   (template_app
     (template_hole 5,
      template_app
       (template_app
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 8),
                  template_hole 8),
                template_hole 8),
              template_hole 7),
            template_hole 7),
          template_hole 7),
        template_app
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_hole 7),
                    template_hole 8),
                  template_hole 8),
                template_hole 7),
              template_hole 7),
            template_hole 7),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_hole 7),
                        template_hole 7),
                      template_hole 7),
                    template_hole 7),
                  template_hole 8),
                template_hole 7),
              template_hole 7),
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, template_hole 8),
                          template_hole 8),
                        template_hole 8),
                      template_hole 8),
                    template_hole 7),
                  template_hole 7),
                template_hole 7),
              template_hole 6))))),
    template_hole 1)),
template_hole 1)))),
                              template_hole 1))))),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 12, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.TheoryMoreTemplates"
### 0.440s elapsed time, 0.638s cpu time, 0.064s GC time
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
