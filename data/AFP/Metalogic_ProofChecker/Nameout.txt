Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries")
Loading theory "Draft.Core" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Term")
Loading theory "HOL-Library.AList" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries" via "HOL-Library.Simps_Case_Conv")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
structure Eisbach_Rule_Insts: sig end
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.221s elapsed time, 0.869s cpu time, 0.038s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.073s elapsed time, 0.279s cpu time, 0.045s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.NameMoreTemplates" via "Draft.Name")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
### theory "HOL-Library.Char_ord"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Eisbach.Eisbach"
### 0.428s elapsed time, 1.668s cpu time, 0.128s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.587s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.885s cpu time, 0.091s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries")
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.530s cpu time, 0.170s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.284s elapsed time, 4.931s cpu time, 0.856s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "has_typ1"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.291s elapsed time, 4.924s cpu time, 0.910s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "has_sort"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Sublist"
### 1.841s elapsed time, 7.090s cpu time, 1.120s GC time
Loading theory "List-Index.List_Index" (required by "Draft.NameMoreTemplates" via "Draft.Name" via "Draft.Preliminaries")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.BigO"
### 1.154s elapsed time, 4.405s cpu time, 1.315s GC time
Proofs for inductive predicate(s) "wf_type"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
  Proving monotonicity ...
### theory "List-Index.List_Index"
### 0.710s elapsed time, 2.597s cpu time, 1.105s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.NameMoreTemplates" via "Draft.Name")
Proofs for inductive predicate(s) "wf_term"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.322s elapsed time, 8.682s cpu time, 1.771s GC time
Loading theory "Draft.Templates" (required by "Draft.NameMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NameMoreTemplates")
Found termination order: "{}"
Proofs for inductive predicate(s) "proves"
  Proving monotonicity ...
### Ambiguous input (line 311 of "$AFP/Metalogic_ProofChecker/Core.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>Core.proves"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" t)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>Core.proves"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" h) ("_position" \<Gamma>)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" wf_term)
###               ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###                 ("_position" h)))
###             ("_applC" ("_position" has_typ)
###               ("_cargs" ("_position" h) ("_position" propT)))))
###         ("_position" \<Theta>))
###       ("_position" \<Gamma>) ("_position" t))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" proves')
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<Gamma>) ("_position" t))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" wf_theory) ("_position" \<Theta>))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_position" h) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" wf_term)
###             ("_cargs" ("_applC" ("_position" sig) ("_position" \<Theta>))
###               ("_position" h)))
###           ("_applC" ("_position" has_typ)
###             ("_cargs" ("_position" h) ("_position" propT)))))
###       ("\<^const>Core.proves" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Core"
### 4.117s elapsed time, 15.171s cpu time, 2.751s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.930s elapsed time, 2.872s cpu time, 1.163s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Preliminaries"
### 1.890s elapsed time, 4.637s cpu time, 1.320s GC time
Loading theory "Draft.Term" (required by "Draft.NameMoreTemplates" via "Draft.Name")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?m < Suc ?n) = (?m < ?n | ?m = ?n)
?n < length (butlast ?xs) ==> butlast ?xs ! ?n = ?xs ! ?n
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. replace_types (Fv v va) [] = undefined
### !!v va. replace_types (Abs v va) [] = undefined
### !!v va. replace_types (Ct v va) [] = undefined
### (2 more)
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Term"
### 5.661s elapsed time, 7.144s cpu time, 0.731s GC time
Loading theory "Draft.Name" (required by "Draft.NameMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Name"
### 0.480s elapsed time, 0.575s cpu time, 0.068s GC time
Loading theory "Draft.NameMoreTemplates"
val templateLemmas =
   [("Name.fresh_name_fresh", "finite ?S ==> fresh_name ?S ~: ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 0)
               )
           ))),
    ("Name.fresh_name'_fresh", "finite ?S ==> fresh_name' ?S ~: ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 0)
               )
           ))),
    ("Name.variant_names_distinct",
     "finite ?S ==> distinct (fst (variant_variables ?n ?s ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("Name.variant_variable_adds",
     "snd (variant_variable ?s ?S) =
      insert (fst (variant_variable ?s ?S)) ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_var 0))),
    ("Name.variant_name_adds",
     "snd (variant_name ?s ?S) = insert (fst (variant_name ?s ?S)) ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_var 0))),
    ("Name.variant_variable_fresh",
     "finite ?S ==> fst (variant_variable ?s ?S) ~: ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))),
                 template_var 1)
               )
           ))),
    ("Name.variant_name_fresh",
     "finite ?S ==> fst (variant_name ?s ?S) ~: ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))),
                 template_var 1)
               )
           ))),
    ("Name.variant_names_amount",
     "finite ?S ==> length (fst (variant_variables ?n ?s ?S)) = ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))),
         template_var 1))),
    ("Name.map_Pair_zip_replicate_conv",
     "map (%x. (x, ?c)) ?l = zip ?l (replicate (length ?l) ?c)",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Name.variant_names_fresh",
     "finite ?S ==> ALL s:set (fst (variant_variables ?n ?s ?S)). s ~: ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0),
                     template_var 2)))),
             t_empty)
           ))),
    ("Name.distinct_fresh_rename_ns",
     "finite ?G ==> distinct (fresh_rename_idns ?n ?B ?insts ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3))],
       template_predicate
        (
           template_app
            (template_hole 19,
             template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_app (template_hole 17, template_var 2),
                   template_app
                    (template_hole 16,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 15, template_hole 14),
                                   template_hole 14),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14),
                           template_hole 13),
                         template_hole 13),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 15, template_hole 13),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 14),
                             template_hole 13),
                           template_hole 13),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 15, template_hole 14), template_hole 14),
                                     template_hole 13),
                                   template_hole 13),
                                 template_hole 14),
                               template_hole 13),
                             template_hole 13),
                           template_hole 12))))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7, template_var 1)),
                             template_app
                              (template_hole 6,
                               template_app
                                (template_app (template_hole 5, t_empty),
                                 template_app
                                  (template_app
                                    (template_hole 4, template_hole 3),
                                   template_app
                                    (template_hole 2, template_var 0)))))),
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_app
                            (template_hole 2, template_var 0))))),
                   template_var 3))))
           ))),
    ("Name.length_fresh_rename_ns",
     "finite ?G ==> length (fresh_rename_idns ?n ?B ?insts ?G) = ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 3))],
       template_equation
        (template_app
          (template_hole 19,
           template_app
            (template_hole 18,
             template_app
              (template_app
                (template_app (template_hole 17, template_var 2),
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 15, template_hole 14),
                                 template_hole 14),
                               template_hole 13),
                             template_hole 13),
                           template_hole 14),
                         template_hole 13),
                       template_hole 13),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 15, template_hole 13),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 13),
                             template_hole 14),
                           template_hole 13),
                         template_hole 13),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 15, template_hole 14),
                                     template_hole 14),
                                   template_hole 13),
                                 template_hole 13),
                               template_hole 14),
                             template_hole 13),
                           template_hole 13),
                         template_hole 12))))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 1)),
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app (template_hole 5, t_empty),
                               template_app
                                (template_app
                                  (template_hole 4, template_hole 3),
                                 template_app
                                  (template_hole 2, template_var 0)))))),
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_app (template_hole 2, template_var 0))))),
                 template_var 3)))),
         template_var 2))),
    ("Name.fresh_fresh_rename_ns",
     "finite ?G ==>
      ALL nm:set (fresh_rename_idns ?n ?B ?insts ?G).
         nm ~: fst `
               (fv ?B Un \<Union> (fv ` snd ` set ?insts) Un
                fst ` set ?insts) Un
               ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_hole 21,
                 template_app
                  (template_hole 20,
                   template_app
                    (template_app
                      (template_app (template_hole 19, template_var 2),
                       template_app
                        (template_hole 18,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 17, template_hole 16), template_hole 16),
                                     template_hole 15),
                                   template_hole 15),
                                 template_hole 16),
                               template_hole 15),
                             template_hole 15),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 17, template_hole 15), template_hole 15),
 template_hole 15),
                                     template_hole 15),
                                   template_hole 16),
                                 template_hole 15),
                               template_hole 15),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 17, template_hole 16), template_hole 16),
   template_hole 15),
 template_hole 15),
                                     template_hole 16),
                                   template_hole 15),
                                 template_hole 15),
                               template_hole 14))))),
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app
                          (template_app
                            (template_hole 12, template_hole 11),
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_hole 9, template_var 1)),
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_app
(template_hole 7, t_empty),
                                     template_app
(template_app (template_hole 6, template_hole 5),
 template_app (template_hole 4, template_var 0)))))),
                             template_app
                              (template_app
                                (template_hole 3, template_hole 2),
                               template_app
                                (template_hole 4, template_var 0))))),
                       template_var 3))))),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.NameMoreTemplates"
### 0.448s elapsed time, 0.661s cpu time, 0.082s GC time
*** Undefined fact: "Cons.prems" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
*** At command "thm" (line 69 of "$AFP/Metalogic_ProofChecker/Preliminaries.thy")
Exception- TOPLEVEL_ERROR raised
