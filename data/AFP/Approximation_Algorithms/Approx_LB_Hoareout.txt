Loading theory "HOL-Hoare.Hoare_Syntax" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.Approx_LB_Hoare" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Hoare.Hoare_Tac" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.Approx_LB_Hoare" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.537s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.306s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.817s cpu time, 0.075s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### ML warning (line 58 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 62 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 232 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val hoare_tc_vars_tr: Proof.context -> term list -> term
    val hoare_vars_tr: Proof.context -> term list -> term
    val setup:
       {Basic: string,
        Cond: string,
        Seq: string,
        Skip: string, Valid: string, ValidTC: string, While: string}
         -> theory -> theory
    val spec_tr': string -> Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "HOL-Hoare.Hoare_Syntax"
### 0.780s elapsed time, 3.103s cpu time, 0.247s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.869s elapsed time, 3.431s cpu time, 0.243s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.789s elapsed time, 2.773s cpu time, 0.172s GC time
### ML warning (line 49 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 64 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 76 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (file "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
signature HOARE_TAC =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val hoare_tc_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Hoare_Tac: HOARE_TAC
### theory "HOL-Hoare.Hoare_Tac"
### 1.625s elapsed time, 6.041s cpu time, 0.480s GC time
Loading theory "HOL-Hoare.Hoare_Logic" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.Approx_LB_Hoare")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.001s elapsed time, 6.293s cpu time, 0.942s GC time
Loading theory "Draft.Templates" (required by "Draft.Approx_LB_HoareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.176s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Approx_LB_HoareMoreTemplates")
Proofs for inductive predicate(s) "Sem"
  Proving monotonicity ...
### theory "HOL-Hoare.Hoare_Logic"
### 1.026s elapsed time, 2.296s cpu time, 0.690s GC time
Loading theory "Draft.Approx_LB_Hoare" (required by "Draft.Approx_LB_HoareMoreTemplates")
### Ambiguous input (line 14 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" A)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" sum)
###         ("_cargs" ("_position" f) ("_position" A)))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" card) ("_position" A))
###         ("_applC" ("_position" Max)
###           ("\<^const>Set.image" ("_position" f) ("_position" A)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal"
###         ("_Seq" ("_applC" ("_position" finite) ("_position" A))
###           ("_position" A))
###         ("\<^const>Set.empty"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" sum)
###         ("_cargs" ("_position" f) ("_position" A)))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" card) ("_position" A))
###         ("_applC" ("_position" Max)
###           ("\<^const>Set.image" ("_position" f) ("_position" A)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" A)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Max)
###         ("\<^const>Set.image" ("_lambda" ("_idtdummy") ("_position" c))
###           ("_position" A)))
###       ("_position" c))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal"
###         ("_Seq" ("_applC" ("_position" finite) ("_position" A))
###           ("_position" A))
###         ("\<^const>Set.empty"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Max)
###         ("\<^const>Set.image" ("_lambda" ("_idtdummy") ("_position" c))
###           ("_position" A)))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.126s cpu time, 0.052s GC time
### Ambiguous input (line 46 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" y)
###       ("_applC" ("_position" T) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_Update" ("_position" T)
###             ("_updbind" ("_position" x) ("_position" y)))
###           ("_position" m)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" m))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" y)
###       ("_applC" ("_position" T) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_applC" ("_position" T)
###             ("_assign" ("_position" x) ("_position" y)))
###           ("_position" m)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" m))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" m)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_Update" ("_position" T)
###             ("_updbind" ("_position" x) ("_position" y)))
###           ("_position" m))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" m)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_applC" ("_position" T)
###             ("_assign" ("_position" x) ("_position" y)))
###           ("_position" m))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member" ("_position" x)
###       ("\<^const>Set_Interval.ord_class.atLeastAtMost"
###         ("\<^const>Groups.one_class.one") ("_position" k))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_Update" ("_position" T)
###             ("_updbind" ("_position" x) ("_position" y)))
###           ("_position" k)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" k))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member" ("_position" x)
###       ("\<^const>Set_Interval.ord_class.atLeastAtMost"
###         ("\<^const>Groups.one_class.one") ("_position" k))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs"
###           ("_applC" ("_position" T)
###             ("_assign" ("_position" x) ("_position" y)))
###           ("_position" k)))
###       ("_applC" ("_position" f_Max\<^sub>0)
###         ("_cargs" ("_position" T) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" f_Max\<^sub>0)
###       ("_cargs"
###         ("_Update" ("_position" T)
###           ("_updbind" ("_position" x) ("_position" y)))
###         ("_position" m)))
###     ("_applC" ("_position" max)
###       ("_cargs" ("_position" y)
###         ("_applC" ("_position" f_Max\<^sub>0)
###           ("_cargs" ("_position" T) ("_position" m)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" f_Max\<^sub>0)
###       ("_cargs"
###         ("_applC" ("_position" T)
###           ("_assign" ("_position" x) ("_position" y)))
###         ("_position" m)))
###     ("_applC" ("_position" max)
###       ("_cargs" ("_position" y)
###         ("_applC" ("_position" f_Max\<^sub>0)
###           ("_cargs" ("_position" T) ("_position" m)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale LoadBalancing
  fixes t :: "nat => nat"
    and m :: "nat"
    and n :: "nat"
  assumes "LoadBalancing m"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 221 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" lb)
###     ("_cargs"
###       ("_Update" ("_position" T)
###         ("_updbind" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x))
###             ("_applC" ("_position" t)
###               ("_applC" ("_position" Suc) ("_position" j))))))
###       ("_cargs"
###         ("_Update" ("_position" A)
###           ("_updbind" ("_position" x)
###             ("\<^const>Set.union" ("_applC" ("_position" A) ("_position" x))
###               ("_Finset" ("_applC" ("_position" Suc) ("_position" j))))))
###         ("_applC" ("_position" Suc) ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" lb)
###     ("_cargs"
###       ("_applC" ("_position" T)
###         ("_assign" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x))
###             ("_applC" ("_position" t)
###               ("_applC" ("_position" Suc) ("_position" j))))))
###       ("_cargs"
###         ("_Update" ("_position" A)
###           ("_updbind" ("_position" x)
###             ("\<^const>Set.union" ("_applC" ("_position" A) ("_position" x))
###               ("_Finset" ("_applC" ("_position" Suc) ("_position" j))))))
###         ("_applC" ("_position" Suc) ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" lb)
###     ("_cargs"
###       ("_Update" ("_position" T)
###         ("_updbind" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x))
###             ("_applC" ("_position" t)
###               ("_applC" ("_position" Suc) ("_position" j))))))
###       ("_cargs"
###         ("_applC" ("_position" A)
###           ("_assign" ("_position" x)
###             ("\<^const>Set.union" ("_applC" ("_position" A) ("_position" x))
###               ("_Finset" ("_applC" ("_position" Suc) ("_position" j))))))
###         ("_applC" ("_position" Suc) ("_position" j))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" lb)
###     ("_cargs"
###       ("_applC" ("_position" T)
###         ("_assign" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x))
###             ("_applC" ("_position" t)
###               ("_applC" ("_position" Suc) ("_position" j))))))
###       ("_cargs"
###         ("_applC" ("_position" A)
###           ("_assign" ("_position" x)
###             ("\<^const>Set.union" ("_applC" ("_position" A) ("_position" x))
###               ("_Finset" ("_applC" ("_position" Suc) ("_position" j))))))
###         ("_applC" ("_position" Suc) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" y)
###       ("_applC" ("_position" T) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" makespan)
###         ("_applC" ("_position" T)
###           ("_assign" ("_position" x) ("_position" y))))
###       ("_applC" ("_position" makespan) ("_position" T)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" y)
###       ("_applC" ("_position" T) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" makespan)
###         ("_Update" ("_position" T)
###           ("_updbind" ("_position" x) ("_position" y))))
###       ("_applC" ("_position" makespan) ("_position" T)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" makespan) ("_position" T))
###       ("_applC" ("_position" makespan)
###         ("_applC" ("_position" T)
###           ("_assign" ("_position" x) ("_position" y)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" makespan) ("_position" T))
###       ("_applC" ("_position" makespan)
###         ("_Update" ("_position" T)
###           ("_updbind" ("_position" x) ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("_applC" ("_position" makespan)
###       ("_applC" ("_position" T)
###         ("_assign" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x)) ("_position" y)))))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("_applC" ("_position" makespan)
###       ("_Update" ("_position" T)
###         ("_updbind" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x)) ("_position" y)))))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" T) ("_position" x)) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" makespan)
###       ("_applC" ("_position" T)
###         ("_assign" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x)) ("_position" y)))))
###     ("_applC" ("_position" makespan) ("_position" T))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" makespan)
###       ("_Update" ("_position" T)
###         ("_updbind" ("_position" x)
###           ("\<^const>Groups.plus_class.plus"
###             ("_applC" ("_position" T) ("_position" x)) ("_position" y)))))
###     ("_applC" ("_position" makespan) ("_position" T))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###     ("_position" True)
###     ("_Seq"
###       ("_assign" ("_position" T)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_Seq"
###         ("_assign" ("_position" A)
###           ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###         ("_Seq"
###           ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###           ("_While0"
###             ("\<^const>Orderings.ord_class.less" ("_position" j)
###               ("_position" n))
###             ("_applC" ("_position" inv\<^sub>1)
###               ("_cargs" ("_position" T)
###                 ("_cargs" ("_position" A) ("_position" j))))
###             ("_Seq"
###               ("_assign" ("_position" i)
###                 ("_applC" ("_position" min_arg)
###                   ("_cargs" ("_position" T) ("_position" m))))
###               ("_Seq"
###                 ("_assign" ("_position" j)
###                   ("_applC" ("_position" Suc) ("_position" j)))
###                 ("_Seq"
###                   ("_assign" ("_position" A)
###                     ("_Update" ("_position" A)
###                       ("_updbind" ("_position" i)
###                         ("\<^const>Set.union"
###                           ("_applC" ("_position" A) ("_position" i))
###                           ("_Finset" ("_position" j))))))
###                   ("_assign" ("_position" T)
###                     ("_Update" ("_position" T)
###                       ("_updbind" ("_position" i)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" T) ("_position" i))
###                           ("_applC" ("_position" t)
###                             ("_position" j)))))))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" lb)
###         ("_cargs" ("_position" T)
###           ("_cargs" ("_position" A) ("_position" n))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" T') ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" lb)
###             ("_cargs" ("_position" T')
###               ("_cargs" ("_position" A') ("_position" n))))
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" makespan) ("_position" T))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2)))
###               ("_applC" ("_position" makespan) ("_position" T')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###     ("_position" True)
###     ("_Seq"
###       ("_assign" ("_position" T)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_Seq"
###         ("_assign" ("_position" A)
###           ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###         ("_Seq"
###           ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###           ("_While0"
###             ("\<^const>Orderings.ord_class.less" ("_position" j)
###               ("_position" n))
###             ("_applC" ("_position" inv\<^sub>1)
###               ("_cargs" ("_position" T)
###                 ("_cargs" ("_position" A) ("_position" j))))
###             ("_Seq"
###               ("_assign" ("_position" i)
###                 ("_applC" ("_position" min_arg)
###                   ("_cargs" ("_position" T) ("_position" m))))
###               ("_Seq"
###                 ("_assign" ("_position" j)
###                   ("_applC" ("_position" Suc) ("_position" j)))
###                 ("_Seq"
###                   ("_assign" ("_position" A)
###                     ("_applC" ("_position" A)
###                       ("_assign" ("_position" i)
###                         ("\<^const>Set.union"
###                           ("_applC" ("_position" A) ("_position" i))
###                           ("_Finset" ("_position" j))))))
###                   ("_assign" ("_position" T)
###                     ("_Update" ("_position" T)
###                       ("_updbind" ("_position" i)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" T) ("_position" i))
###                           ("_applC" ("_position" t)
###                             ("_position" j)))))))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" lb)
###         ("_cargs" ("_position" T)
###           ("_cargs" ("_position" A) ("_position" n))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" T') ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" lb)
###             ("_cargs" ("_position" T')
###               ("_cargs" ("_position" A') ("_position" n))))
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" makespan) ("_position" T))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2)))
###               ("_applC" ("_position" makespan) ("_position" T')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###     ("_position" True)
###     ("_Seq"
###       ("_assign" ("_position" T)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_Seq"
###         ("_assign" ("_position" A)
###           ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###         ("_Seq"
###           ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###           ("_While0"
###             ("\<^const>Orderings.ord_class.less" ("_position" j)
###               ("_position" n))
###             ("_applC" ("_position" inv\<^sub>1)
###               ("_cargs" ("_position" T)
###                 ("_cargs" ("_position" A) ("_position" j))))
###             ("_Seq"
###               ("_assign" ("_position" i)
###                 ("_applC" ("_position" min_arg)
###                   ("_cargs" ("_position" T) ("_position" m))))
###               ("_Seq"
###                 ("_assign" ("_position" j)
###                   ("_applC" ("_position" Suc) ("_position" j)))
###                 ("_Seq"
###                   ("_assign" ("_position" A)
###                     ("_Update" ("_position" A)
###                       ("_updbind" ("_position" i)
###                         ("\<^const>Set.union"
###                           ("_applC" ("_position" A) ("_position" i))
###                           ("_Finset" ("_position" j))))))
###                   ("_assign" ("_position" T)
###                     ("_applC" ("_position" T)
###                       ("_assign" ("_position" i)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" T) ("_position" i))
###                           ("_applC" ("_position" t)
###                             ("_position" j)))))))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" lb)
###         ("_cargs" ("_position" T)
###           ("_cargs" ("_position" A) ("_position" n))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" T') ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" lb)
###             ("_cargs" ("_position" T')
###               ("_cargs" ("_position" A') ("_position" n))))
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" makespan) ("_position" T))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2)))
###               ("_applC" ("_position" makespan) ("_position" T')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" T)
###       ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###     ("_position" True)
###     ("_Seq"
###       ("_assign" ("_position" T)
###         ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###       ("_Seq"
###         ("_assign" ("_position" A)
###           ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###         ("_Seq"
###           ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###           ("_While0"
###             ("\<^const>Orderings.ord_class.less" ("_position" j)
###               ("_position" n))
###             ("_applC" ("_position" inv\<^sub>1)
###               ("_cargs" ("_position" T)
###                 ("_cargs" ("_position" A) ("_position" j))))
###             ("_Seq"
###               ("_assign" ("_position" i)
###                 ("_applC" ("_position" min_arg)
###                   ("_cargs" ("_position" T) ("_position" m))))
###               ("_Seq"
###                 ("_assign" ("_position" j)
###                   ("_applC" ("_position" Suc) ("_position" j)))
###                 ("_Seq"
###                   ("_assign" ("_position" A)
###                     ("_applC" ("_position" A)
###                       ("_assign" ("_position" i)
###                         ("\<^const>Set.union"
###                           ("_applC" ("_position" A) ("_position" i))
###                           ("_Finset" ("_position" j))))))
###                   ("_assign" ("_position" T)
###                     ("_applC" ("_position" T)
###                       ("_assign" ("_position" i)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" T) ("_position" i))
###                           ("_applC" ("_position" t)
###                             ("_position" j)))))))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" lb)
###         ("_cargs" ("_position" T)
###           ("_cargs" ("_position" A) ("_position" n))))
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" T') ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" lb)
###             ("_cargs" ("_position" T')
###               ("_cargs" ("_position" A') ("_position" n))))
###           ("\<^const>Orderings.ord_class.less_eq"
###             ("_applC" ("_position" makespan) ("_position" T))
###             ("\<^const>Groups.times_class.times"
###               ("_Numeral" ("_constify" ("_position" 2)))
###               ("_applC" ("_position" makespan) ("_position" T')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted) ("_position" j)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater_eq" ("_position" j)
###           ("_position" j')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sorted) ("_position" j'))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("_Seq" ("_applC" ("_position" sorted) ("_position" j))
###           ("_position" j))
###         ("_position" j'))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" sorted) ("_position" j'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 584 of "$AFP/Approximation_Algorithms/Approx_LB_Hoare.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" sorted) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_hoare_vars"
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###       ("_position" True)
###       ("_Seq"
###         ("_assign" ("_position" T)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###         ("_Seq"
###           ("_assign" ("_position" A)
###             ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###           ("_Seq"
###             ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###             ("_While0"
###               ("\<^const>Orderings.ord_class.less" ("_position" j)
###                 ("_position" n))
###               ("_applC" ("_position" inv\<^sub>2)
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" A) ("_position" j))))
###               ("_Seq"
###                 ("_assign" ("_position" i)
###                   ("_applC" ("_position" min_arg)
###                     ("_cargs" ("_position" T) ("_position" m))))
###                 ("_Seq"
###                   ("_assign" ("_position" j)
###                     ("_applC" ("_position" Suc) ("_position" j)))
###                   ("_Seq"
###                     ("_assign" ("_position" A)
###                       ("_Update" ("_position" A)
###                         ("_updbind" ("_position" i)
###                           ("\<^const>Set.union"
###                             ("_applC" ("_position" A) ("_position" i))
###                             ("_Finset" ("_position" j))))))
###                     ("_assign" ("_position" T)
###                       ("_Update" ("_position" T)
###                         ("_updbind" ("_position" i)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" T) ("_position" i))
###                             ("_applC" ("_position" t)
###                               ("_position" j)))))))))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" lb)
###           ("_cargs" ("_position" T)
###             ("_cargs" ("_position" A) ("_position" n))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" T') ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" lb)
###               ("_cargs" ("_position" T')
###                 ("_cargs" ("_position" A') ("_position" n))))
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" makespan) ("_position" T))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_Numeral" ("_constify" ("_position" 3)))
###                   ("_Numeral" ("_constify" ("_position" 2))))
###                 ("_applC" ("_position" makespan) ("_position" T'))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" sorted) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_hoare_vars"
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###       ("_position" True)
###       ("_Seq"
###         ("_assign" ("_position" T)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###         ("_Seq"
###           ("_assign" ("_position" A)
###             ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###           ("_Seq"
###             ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###             ("_While0"
###               ("\<^const>Orderings.ord_class.less" ("_position" j)
###                 ("_position" n))
###               ("_applC" ("_position" inv\<^sub>2)
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" A) ("_position" j))))
###               ("_Seq"
###                 ("_assign" ("_position" i)
###                   ("_applC" ("_position" min_arg)
###                     ("_cargs" ("_position" T) ("_position" m))))
###                 ("_Seq"
###                   ("_assign" ("_position" j)
###                     ("_applC" ("_position" Suc) ("_position" j)))
###                   ("_Seq"
###                     ("_assign" ("_position" A)
###                       ("_applC" ("_position" A)
###                         ("_assign" ("_position" i)
###                           ("\<^const>Set.union"
###                             ("_applC" ("_position" A) ("_position" i))
###                             ("_Finset" ("_position" j))))))
###                     ("_assign" ("_position" T)
###                       ("_Update" ("_position" T)
###                         ("_updbind" ("_position" i)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" T) ("_position" i))
###                             ("_applC" ("_position" t)
###                               ("_position" j)))))))))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" lb)
###           ("_cargs" ("_position" T)
###             ("_cargs" ("_position" A) ("_position" n))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" T') ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" lb)
###               ("_cargs" ("_position" T')
###                 ("_cargs" ("_position" A') ("_position" n))))
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" makespan) ("_position" T))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_Numeral" ("_constify" ("_position" 3)))
###                   ("_Numeral" ("_constify" ("_position" 2))))
###                 ("_applC" ("_position" makespan) ("_position" T'))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" sorted) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_hoare_vars"
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###       ("_position" True)
###       ("_Seq"
###         ("_assign" ("_position" T)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###         ("_Seq"
###           ("_assign" ("_position" A)
###             ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###           ("_Seq"
###             ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###             ("_While0"
###               ("\<^const>Orderings.ord_class.less" ("_position" j)
###                 ("_position" n))
###               ("_applC" ("_position" inv\<^sub>2)
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" A) ("_position" j))))
###               ("_Seq"
###                 ("_assign" ("_position" i)
###                   ("_applC" ("_position" min_arg)
###                     ("_cargs" ("_position" T) ("_position" m))))
###                 ("_Seq"
###                   ("_assign" ("_position" j)
###                     ("_applC" ("_position" Suc) ("_position" j)))
###                   ("_Seq"
###                     ("_assign" ("_position" A)
###                       ("_Update" ("_position" A)
###                         ("_updbind" ("_position" i)
###                           ("\<^const>Set.union"
###                             ("_applC" ("_position" A) ("_position" i))
###                             ("_Finset" ("_position" j))))))
###                     ("_assign" ("_position" T)
###                       ("_applC" ("_position" T)
###                         ("_assign" ("_position" i)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" T) ("_position" i))
###                             ("_applC" ("_position" t)
###                               ("_position" j)))))))))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" lb)
###           ("_cargs" ("_position" T)
###             ("_cargs" ("_position" A) ("_position" n))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" T') ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" lb)
###               ("_cargs" ("_position" T')
###                 ("_cargs" ("_position" A') ("_position" n))))
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" makespan) ("_position" T))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_Numeral" ("_constify" ("_position" 3)))
###                   ("_Numeral" ("_constify" ("_position" 2))))
###                 ("_applC" ("_position" makespan) ("_position" T'))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" sorted) ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_hoare_vars"
###       ("_idts" ("_position" T)
###         ("_idts" ("_position" A) ("_idts" ("_position" i) ("_position" j))))
###       ("_position" True)
###       ("_Seq"
###         ("_assign" ("_position" T)
###           ("_lambda" ("_idtdummy") ("\<^const>Groups.zero_class.zero")))
###         ("_Seq"
###           ("_assign" ("_position" A)
###             ("_lambda" ("_idtdummy") ("\<^const>Set.empty")))
###           ("_Seq"
###             ("_assign" ("_position" j) ("\<^const>Groups.zero_class.zero"))
###             ("_While0"
###               ("\<^const>Orderings.ord_class.less" ("_position" j)
###                 ("_position" n))
###               ("_applC" ("_position" inv\<^sub>2)
###                 ("_cargs" ("_position" T)
###                   ("_cargs" ("_position" A) ("_position" j))))
###               ("_Seq"
###                 ("_assign" ("_position" i)
###                   ("_applC" ("_position" min_arg)
###                     ("_cargs" ("_position" T) ("_position" m))))
###                 ("_Seq"
###                   ("_assign" ("_position" j)
###                     ("_applC" ("_position" Suc) ("_position" j)))
###                   ("_Seq"
###                     ("_assign" ("_position" A)
###                       ("_applC" ("_position" A)
###                         ("_assign" ("_position" i)
###                           ("\<^const>Set.union"
###                             ("_applC" ("_position" A) ("_position" i))
###                             ("_Finset" ("_position" j))))))
###                     ("_assign" ("_position" T)
###                       ("_applC" ("_position" T)
###                         ("_assign" ("_position" i)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" T) ("_position" i))
###                             ("_applC" ("_position" t)
###                               ("_position" j)))))))))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" lb)
###           ("_cargs" ("_position" T)
###             ("_cargs" ("_position" A) ("_position" n))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" T') ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" lb)
###               ("_cargs" ("_position" T')
###                 ("_cargs" ("_position" A') ("_position" n))))
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" makespan) ("_position" T))
###               ("\<^const>Groups.times_class.times"
###                 ("\<^const>Fields.inverse_class.inverse_divide"
###                   ("_Numeral" ("_constify" ("_position" 3)))
###                   ("_Numeral" ("_constify" ("_position" 2))))
###                 ("_applC" ("_position" makespan) ("_position" T'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Approx_LB_Hoare"
### 0.854s elapsed time, 1.244s cpu time, 0.078s GC time
Loading theory "Draft.Approx_LB_HoareMoreTemplates"
val templateLemmas =
   [("Approx_LB_Hoare.f_Max\<^sub>0_correct",
     "ALL x:{1..?m}. ?T x <= f_Max\<^sub>0 ?T ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           t_empty)
         )),
    ("Approx_LB_Hoare.f_Max\<^sub>0_correct",
     "0 < ?m ==> EX x:{1..?m}. ?T x = f_Max\<^sub>0 ?T ?m",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Approx_LB_Hoare.f_Max\<^sub>0_mono",
     "?y <= ?T ?x ==>
      f_Max\<^sub>0 (?T(?x := ?y)) ?m <= f_Max\<^sub>0 ?T ?m",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_var 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Approx_LB_Hoare.f_Max\<^sub>0_mono",
     "?T ?x <= ?y ==>
      f_Max\<^sub>0 ?T ?m <= f_Max\<^sub>0 (?T(?x := ?y)) ?m",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Approx_LB_Hoare.Max_const",
     "[| finite ?A; ?A ~= {} |] ==> (MAX _\<in>?A. ?c) = ?c",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1)),
         template_var 0))),
    ("Approx_LB_Hoare.f_Max\<^sub>0_out_of_range",
     "?x ~: {1..?k} ==>
      f_Max\<^sub>0 (?T(?x := ?y)) ?k = f_Max\<^sub>0 ?T ?k",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Approx_LB_Hoare.f_Max\<^sub>0_equiv",
     "f_Max\<^sub>0 ?f ?n = Max\<^sub>0 (?f ` {1..?n})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 0))),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0))))
           ))),
    ("Approx_LB_Hoare.sum_le_card_Max",
     "[| finite ?A; ?A ~= {} |] ==> sum ?f ?A <= card ?A * Max (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Approx_LB_Hoare.fun_upd_f_Max\<^sub>0",
     "[| ?x : {1..?m}; ?T ?x <= ?y |]
      ==> f_Max\<^sub>0 (?T(?x := ?y)) ?m = max ?y (f_Max\<^sub>0 ?T ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 3),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.Approx_LB_HoareMoreTemplates"
### 0.322s elapsed time, 0.412s cpu time, 0.000s GC time
val it = (): unit
