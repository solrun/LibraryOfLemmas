Loading theory "HOL-Hoare.Hoare_Tac" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.Approx_VC_Hoare" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Hoare.Hoare_Syntax" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.Approx_VC_Hoare" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.613s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.307s elapsed time, 1.242s cpu time, 0.047s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.276s elapsed time, 1.086s cpu time, 0.113s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### ML warning (line 58 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 62 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 232 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val hoare_tc_vars_tr: Proof.context -> term list -> term
    val hoare_vars_tr: Proof.context -> term list -> term
    val setup:
       {Basic: string,
        Cond: string,
        Seq: string,
        Skip: string, Valid: string, ValidTC: string, While: string}
         -> theory -> theory
    val spec_tr': string -> Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "HOL-Hoare.Hoare_Syntax"
### 0.828s elapsed time, 3.289s cpu time, 0.292s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 0.914s elapsed time, 3.597s cpu time, 0.372s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.788s elapsed time, 2.764s cpu time, 0.194s GC time
### ML warning (line 49 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 64 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 76 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (file "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
signature HOARE_TAC =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val hoare_tc_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Hoare_Tac: HOARE_TAC
### theory "HOL-Hoare.Hoare_Tac"
### 1.654s elapsed time, 6.141s cpu time, 0.486s GC time
Loading theory "HOL-Hoare.Hoare_Logic" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.Approx_VC_Hoare")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.212s cpu time, 0.934s GC time
Loading theory "Draft.Templates" (required by "Draft.Approx_VC_HoareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.154s cpu time, 0.045s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Approx_VC_HoareMoreTemplates")
Proofs for inductive predicate(s) "Sem"
  Proving monotonicity ...
### theory "HOL-Hoare.Hoare_Logic"
### 1.001s elapsed time, 2.243s cpu time, 0.653s GC time
Loading theory "Draft.Approx_VC_Hoare" (required by "Draft.Approx_VC_HoareMoreTemplates")
### Ambiguous input (line 21 of "$AFP/Approximation_Algorithms/Approx_VC_Hoare.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Seq" ("_applC" ("_position" finite) ("_position" C))
###         ("_applC" ("_position" matching) ("_position" M))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq" ("_position" M) ("_position" E)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" vertex_cover)
###             ("_cargs" ("_position" E) ("_position" C)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" matching) ("_position" M)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq" ("_position" M) ("_position" E)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" vertex_cover)
###               ("_cargs" ("_position" E) ("_position" C))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_Seq" ("_applC" ("_position" matching) ("_position" M))
###             ("_position" M))
###           ("_position" E)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" vertex_cover)
###             ("_cargs" ("_position" E) ("_position" C)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq"
###         ("_Seq" ("_applC" ("_position" finite) ("_position" C))
###           ("_Seq" ("_applC" ("_position" matching) ("_position" M))
###             ("_position" M)))
###         ("_position" E)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" vertex_cover)
###           ("_cargs" ("_position" E) ("_position" C))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Seq" ("_applC" ("_position" finite) ("_position" C))
###         ("_applC" ("_position" matching) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq" ("_position" M)
###           ("_Seq" ("_position" E)
###             ("_applC" ("_position" vertex_cover)
###               ("_cargs" ("_position" E) ("_position" C))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" matching) ("_position" M)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq" ("_position" M)
###             ("_Seq" ("_position" E)
###               ("_applC" ("_position" vertex_cover)
###                 ("_cargs" ("_position" E) ("_position" C)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" finite) ("_position" C)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_Seq" ("_applC" ("_position" matching) ("_position" M))
###             ("_position" M))
###           ("_Seq" ("_position" E)
###             ("_applC" ("_position" vertex_cover)
###               ("_cargs" ("_position" E) ("_position" C))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq"
###         ("_Seq" ("_applC" ("_position" finite) ("_position" C))
###           ("_Seq" ("_applC" ("_position" matching) ("_position" M))
###             ("_position" M)))
###         ("_Seq" ("_position" E)
###           ("_applC" ("_position" vertex_cover)
###             ("_cargs" ("_position" E) ("_position" C)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("_applC" ("_position" card) ("_position" M))
###       ("_applC" ("_position" card) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Edges
  fixes E :: "'a set set"
  assumes "Edges E"
locale Bounded_Hypergraph
  fixes E :: "'a set set"
    and k :: "nat"
  assumes "Bounded_Hypergraph E k"
### theory "Draft.Approx_VC_Hoare"
### 0.117s elapsed time, 0.254s cpu time, 0.049s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 0.828s cpu time, 0.049s GC time
Loading theory "Draft.Approx_VC_HoareMoreTemplates"
val templateLemmas =
   [("Approx_VC_Hoare.card_matching_vertex_cover",
     "[| finite ?C; matching ?M; ?M <= ?E; vertex_cover ?E ?C |]
      ==> card ?M <= card ?C",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Approx_VC_HoareMoreTemplates"
### 0.329s elapsed time, 0.456s cpu time, 0.051s GC time
val it = (): unit
