Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.520s cpu time, 0.053s GC time
Loading theory "Draft.FFT" (required by "Draft.FFTMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.888s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs")
### Cannot skip proof of schematic goal statement
consts
  FFT :: "nat => (nat => complex) => nat => complex"
consts
  IFFT :: "nat => (nat => complex) => nat => complex"
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.441s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs")
### Cannot skip proof of schematic goal statement
### theory "Draft.FFT"
### 0.256s elapsed time, 1.006s cpu time, 0.114s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.804s elapsed time, 2.602s cpu time, 0.364s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.014s elapsed time, 2.941s cpu time, 0.806s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.997s elapsed time, 5.098s cpu time, 1.059s GC time
Loading theory "Draft.Templates" (required by "Draft.FFTMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FFTMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.484s elapsed time, 0.544s cpu time, 0.071s GC time
Loading theory "Draft.FFTMoreTemplates"
val templateLemmas =
   [("FFT.root_nonzero", "FFT.root ?n ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("FFT.root_unity", "FFT.root ?n ^ ?n = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("FFT.double_inj_on", "inj_on ((*) 2) ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)
         )),
    ("FFT.sin_periodic_pi_diff", "sin (?x - pi) = - sin ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("FFT.Suc_double_inj_on", "inj_on (%i. Suc (2 * i)) ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)
         )),
    ("FFT.root_cancel2", "0 < ?n ==> FFT.root (2 * ?n) ^ ?n = - 1",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 0))),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("FFT.DFT_inverse",
     "?i < ?n ==> IDFT ?n (DFT ?n ?a) ?i = of_nat ?n * ?a ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_var 0, template_var 2))))),
    ("FFT.root_cancel",
     "0 < ?d ==> FFT.root (?d * ?n) ^ (?d * ?k) = FFT.root ?n ^ ?k",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("FFT.sum_add_nat_ivl_singleton",
     "?m < ?n ==> ?f ?m + sum ?f {?m<..<?n} = sum ?f {?m..<?n}",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("FFT.root_cancel1",
     "FFT.root (2 * ?m) ^ (?i * (2 * ?j)) = FFT.root ?m ^ (?i * ?j)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("FFT.ivl_splice_Int",
     "(*) 2 ` {0..<?n} Int (%i. Suc (2 * i)) ` {0..<?n} = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4)))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0))),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))),
       template_hole 0)),
    ("FFT.DFT_FFT", "?i < 2 ^ ?k ==> DFT (2 ^ ?k) ?a ?i = FFT ?k ?a ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 1)),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("FFT.IDFT_IFFT", "?i < 2 ^ ?k ==> IDFT (2 ^ ?k) ?a ?i = IFFT ?k ?a ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 1)),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("FFT.root_summation",
     "[| 0 < ?k; ?k < ?n |] ==> sum ((^) (FFT.root ?n ^ ?k)) {0..<?n} = 0",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_var 0)),
         template_hole 0))),
    ("FFT.root_summation_inv",
     "[| 0 < ?k; ?k < ?n |]
      ==> sum ((^) ((1 / FFT.root ?n) ^ ?k)) {0..<?n} = 0",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 8),
             template_var 0)),
         template_hole 0))),
    ("FFT.sin_cos_between_zero_two_pi",
     "[| 0 < ?x; ?x < 2 * pi |] ==> sin ?x ~= 0 | cos ?x ~= 1",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 11))),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)))
           ))),
    ("FFT.power_diff_inverse",
     "[| ?a ~= (0::?'a); ?m <= ?n |]
      ==> inverse ?a ^ (?n - ?m) = ?a ^ ?m / ?a ^ ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("FFT.Sum4", "sum ?x {0..<4} = ?x 0 + ?x 1 + ?x 2 + ?x 3",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_hole 3))))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_var 0, template_hole 6)),
                 template_app (template_var 0, template_hole 1))),
             template_app
              (template_var 0,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))))),
         template_app
          (template_var 0,
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_hole 3)))))),
    ("FFT.power_divides_special",
     "?a ~= (0::?'a) ==>
      ?a ^ (?i * ?j) / ?a ^ (?k * ?i) = (?a ^ ?j / ?a ^ ?k) ^ ?i",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0))),
           template_var 2)))),
    ("FFT.ivl_splice_Un",
     "{0..<2 * ?n} = (*) 2 ` {0..<?n} Un (%i. Suc (2 * i)) ` {0..<?n}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 0))),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 0))))),
    ("FFT.power_diff_rev_if",
     "?a ~= (0::?'a) ==>
      ?a ^ ?m / ?a ^ ?n =
      (if ?n <= ?m then ?a ^ (?m - ?n) else ((1::?'a) / ?a) ^ (?n - ?m))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_hole 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("FFT.sum_splice",
     "sum ?f {0..<2 * ?n} =
      (SUM i = 0..<?n. ?f (2 * i)) + (SUM i = 0..<?n. ?f (2 * i + 1))",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 0))),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 0))))),
    ("FFT.sum_add_split_nat_ivl_singleton",
     "[| ?m < ?n; !!i. [| ?m < i; i < ?n |] ==> ?g i = ?f i |]
      ==> ?f ?m + sum ?g {?m<..<?n} = sum ?f {?m..<?n}",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 0, template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2))))),
    ("FFT.DFT_lower",
     "DFT (2 * ?m) ?a ?i =
      DFT ?m (%i. ?a (2 * i)) ?i +
      FFT.root (2 * ?m) ^ ?i * DFT ?m (%i. ?a (2 * i + 1)) ?i",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2), t_empty),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 6))),
                     template_var 2))),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2), t_empty),
             template_var 0))))),
    ("FFT.IDFT_lower",
     "IDFT (2 * ?m) ?a ?i =
      IDFT ?m (%i. ?a (2 * i)) ?i +
      (1 / FFT.root (2 * ?m)) ^ ?i * IDFT ?m (%i. ?a (2 * i + 1)) ?i",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_hole 8))),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 12, template_var 2), t_empty),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8))),
                       template_var 2)))),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 12, template_var 2), t_empty),
             template_var 0))))),
    ("FFT.DFT_upper",
     "[| 0 < ?m; ?m <= ?i |]
      ==> DFT (2 * ?m) ?a ?i =
          DFT ?m (%i. ?a (2 * i)) (?i - ?m) -
          FFT.root (2 * ?m) ^ (?i - ?m) *
          DFT ?m (%i. ?a (2 * i + 1)) (?i - ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))),
                 template_var 2)),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 11, template_var 2), t_empty),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 7))),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 11, template_var 2), t_empty),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 2))))))),
    ("FFT.IDFT_upper",
     "[| 0 < ?m; ?m <= ?i |]
      ==> IDFT (2 * ?m) ?a ?i =
          IDFT ?m (%i. ?a (2 * i)) (?i - ?m) -
          (1 / FFT.root (2 * ?m)) ^ (?i - ?m) *
          IDFT ?m (%i. ?a (2 * i + 1)) (?i - ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9))),
                 template_var 2)),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 13, template_var 2), t_empty),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_var 2)))),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 13, template_var 2), t_empty),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 2))))))),
    ("FFT.sum_add_split_nat_ivl",
     "[| ?m <= ?k; ?k <= ?n; !!i. [| ?m <= i; i < ?k |] ==> ?g i = ?f i;
         !!i. [| ?k <= i; i < ?n |] ==> ?h i = ?f i |]
      ==> sum ?g {?m..<?k} + sum ?h {?k..<?n} = sum ?f {?m..<?n}",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3)))))]:
   (string * thm * template) list
### theory "Draft.FFTMoreTemplates"
### 0.280s elapsed time, 0.365s cpu time, 0.000s GC time
val it = (): unit
