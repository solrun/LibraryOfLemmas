   [("TwoSquares.product_two_squares_int",
     "[| ??.TwoSquares.is_sum2sq_int ?m; ??.TwoSquares.is_sum2sq_int ?n |]
      ==> ??.TwoSquares.is_sum2sq_int (?m * ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("TwoSquares.sum2sq_int_nat_eq",
     "int (?a\<^sup>2 + ?b\<^sup>2) =
      ??.TwoSquares.sum2sq_int (int ?a, int ?b)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 7, template_var 0))))),
    ("TwoSquares.best_division_abs",
     "0 < ?n ==> EX k. 2 * \<bar>?a - k * ?n\<bar> <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TwoSquares.aux_lemma",
     "[| [?a = ?b] (mod ?c); ?b < ?c |] ==> EX k. ?a = ?c * k + ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TwoSquares.is_sum2sq_int_nat_eq",
     "(EX a b. ?n = a\<^sup>2 + b\<^sup>2) =
      ??.TwoSquares.is_sum2sq_int (int ?n)",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("TwoSquares.Legendre_1mod4",
     "prime (4 * ?k + 1) ==> Legendre (- 1) (int (4 * ?k + 1)) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_hole 7, template_hole 6)))),
                    template_var 0)),
                template_hole 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 7, template_hole 6)))),
                   template_var 0)),
               template_hole 5))),
         template_hole 1))),
    ("TwoSquares.product_two_squares_aux",
     "??.TwoSquares.sum2sq_int (?a, ?b) *
      ??.TwoSquares.sum2sq_int (?c, ?d) =
      ??.TwoSquares.sum2sq_int (?a * ?c - ?b * ?d, ?a * ?d + ?b * ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)))))),
    ("TwoSquares.sum_of_two_squares_prime",
     "prime ?p ==>
      (EX a b. ?p = a\<^sup>2 + b\<^sup>2) = [?p \<noteq> 3] (mod 4)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app (template_hole 9, t_empty),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_hole 3))),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("TwoSquares.fermat_two_squares",
     "[| prime ?p; [?p \<noteq> 3] (mod 4) |]
      ==> EX a b. ?p = a\<^sup>2 + b\<^sup>2",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 0),
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 4, template_hole 5))))
                )
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TwoSquares.qf1_prime_exists",
     "prime (4 * ?k + 1) ==> EX a b. 4 * ?k + 1 = a\<^sup>2 + b\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 5, template_hole 4)))),
                    template_var 0)),
                template_hole 3))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TwoSquares.sum_of_two_squares'",
     "(EX a b. ?n = a\<^sup>2 + b\<^sup>2) =
      (ALL p. prime p & [p = 3] (mod 4) --> even (multiplicity p ?n))",
     template_equation
      (template_app (template_hole 14, t_empty),
       template_app (template_hole 7, t_empty))),
    ("TwoSquares.k_mod_eq",
     "(ALL p. prime p & [p = 3] (mod 4) --> ?P p) =
      (ALL k. prime (4 * k + 3) --> ?P (4 * k + 3))",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app (template_hole 10, t_empty))),
    ("TwoSquares.sots1",
     "EX a b. ?n = a\<^sup>2 + b\<^sup>2 ==>
      prime (4 * ?k + 3) --> even (multiplicity (4 * ?k + 3) ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 7, template_hole 6)))),
                       template_var 0)),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 2, template_hole 6))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 7, template_hole 6)))),
                         template_var 0)),
                     template_app
                      (template_hole 8,
                       template_app (template_hole 2, template_hole 6)))),
                 template_var 1)))
           ))),
    ("TwoSquares.sum_of_two_squares",
     "(EX a b. ?n = a\<^sup>2 + b\<^sup>2) =
      (ALL k. prime (4 * k + 3) --> even (multiplicity (4 * k + 3) ?n))",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app (template_hole 6, t_empty))),
    ("TwoSquares.sots2",
     "(!!k. prime (4 * k + 3) --> even (multiplicity (4 * k + 3) ?n)) ==>
      EX a b. ?n = a\<^sup>2 + b\<^sup>2",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TwoSquares.sots1_aux",
     "[| prime (4 * ?k + 3); odd (multiplicity (4 * ?k + 3) ?n) |]
      ==> \<nexists>a b. ?n = a\<^sup>2 + b\<^sup>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 8, template_hole 7)))),
                    template_var 1)),
                template_app
                 (template_hole 9,
                  template_app (template_hole 6, template_hole 7))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 8, template_hole 7)))),
                            template_var 1)),
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 6, template_hole 7)))),
                    template_var 0))
                )
            )],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("TwoSquares.product_two_squares_nat",
     "[| EX a b. ?m = a\<^sup>2 + b\<^sup>2;
         EX a b. ?n = a\<^sup>2 + b\<^sup>2 |]
      ==> EX a b. ?m * ?n = a\<^sup>2 + b\<^sup>2",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty))))]
