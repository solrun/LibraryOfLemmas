   [("terms.set_of_positions_is_finite", "finite (pos_of ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("terms.set_of_subterms_is_finite", "finite (subterms_of ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("terms.subt_irrefl", "~ ?s \<prec> ?s",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("terms.root_position", "[] : pos_of ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("terms.root_subterm", "?t : subterms_of ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("terms.constants_are_ground", "is_a_constant ?x ==> ground_term ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("terms.constants_are_not_variables",
     "is_a_constant ?x ==> ~ is_a_variable ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("terms.subst_codomain_is_finite",
     "finite ?A ==> finite (subst_codomain ?\<eta> ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("terms.substs_preserve_groundness",
     "ground_term ?t ==> ground_term (?t \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("terms.ground_subst_exists",
     "finite ?V ==> EX \<sigma>. ground_on ?V \<sigma>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("terms.substs_preserve_ground_terms",
     "ground_term ?t ==> ?t \<lhd> ?\<sigma> = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("terms.coincide_sym",
     "coincide_on ?\<sigma> ?\<eta> ?V ==>
      coincide_on ?\<eta> ?\<sigma> ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("terms.ground_instance",
     "ground_on (vars_of ?t) ?\<sigma> ==>
      ground_term (?t \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("terms.vars_subterms_of",
     "?s : subterms_of ?t ==> vars_of ?s <= vars_of ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("terms.vars_subterm", "subterm ?t ?p ?s ==> vars_of ?s <= vars_of ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("terms.substs_preserve_occurs_in",
     "occurs_in ?s ?t ==>
      occurs_in (?s \<lhd> ?\<sigma>) (?t \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("terms.replace_subterm_is_a_function",
     "subterm ?t ?p ?u ==> EX s. replace_subterm ?t ?p ?v s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("terms.positions_of_an_atomic_term",
     "is_a_variable ?t | is_a_constant ?t ==> pos_of ?t = {[]}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("terms.subterms_of_an_atomic_term",
     "is_a_variable ?t | is_a_constant ?t ==> subterms_of ?t = {?t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("terms.occur_in_subterm",
     "[| occurs_in ?u ?t; occurs_in ?t ?s |] ==> occurs_in ?u ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("terms.substs_preserve_subterms",
     "subterm ?t ?p ?s ==>
      subterm (?t \<lhd> ?\<sigma>) ?p (?s \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("terms.coincide_on_term",
     "coincide_on ?\<sigma> ?\<eta> (vars_of ?t) ==>
      ?t \<lhd> ?\<sigma> = ?t \<lhd> ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("terms.vars_of_replacement_set",
     "replace_subterm ?t ?p ?v ?s ==>
      vars_of ?s <= vars_of ?t Un vars_of ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 1))))),
    ("terms.MGU_exists",
     "ALL \<sigma>.
         ?t \<lhd> \<sigma> = ?s \<lhd> \<sigma> --> unify ?t ?s ~= None",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("terms.subterms_of_a_non_atomic_term",
     "subterms_of (?t1.0 \<cdot> ?t2.0) =
      subterms_of ?t1.0 Un subterms_of ?t2.0 Un {?t1.0 \<cdot> ?t2.0}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("terms.comp_subst_terms",
     "?\<sigma> \<doteq> ?\<theta> \<lozenge> ?\<eta> ==>
      ?t \<lhd> ?\<sigma> = ?t \<lhd> ?\<theta> \<lhd> ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("terms.vars_of_subterm",
     "[| ?x : vars_of ?s; subterm ?t ?p ?s |] ==> ?x : vars_of ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 1))
           ))),
    ("terms.subt_decompose",
     "ALL t1 t2.
         t1 \<cdot> t2 \<prec> ?s --> t1 \<prec> ?s & t2 \<prec> ?s",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("terms.positions_of_a_non_atomic_term",
     "pos_of (?t1.0 \<cdot> ?t2.0) =
      left_app ` pos_of ?t1.0 Un right_app ` pos_of ?t2.0 Un {[]}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 8, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 3),
               template_app (template_hole 8, template_var 0)))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("terms.subterm_of_a_subterm_is_a_subterm",
     "[| subterm ?u ?q ?v; subterm ?t ?p ?u |] ==> subterm ?t (?p @ ?q) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("terms.equivalent_on_term",
     "[| congruence ?I; equivalent_on ?\<sigma> ?\<eta> (vars_of ?t) ?I |]
      ==> ?I (?t \<lhd> ?\<sigma>) (?t \<lhd> ?\<eta>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("terms.vars_of_replacement",
     "[| ?x : vars_of ?s; replace_subterm ?t ?p ?v ?s |]
      ==> ?x : vars_of ?t Un vars_of ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 2)),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("terms.vars_of_instances",
     "vars_of (?t \<lhd> ?\<sigma>) =
      \<Union>
       {V. EX x. x : vars_of ?t & V = vars_of (Var x \<lhd> ?\<sigma>)}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("terms.ground_replacement",
     "[| replace_subterm ?t ?p ?v ?s; ground_term (?t \<lhd> ?\<sigma>);
         ground_term (?v \<lhd> ?\<sigma>) |]
      ==> ground_term (?s \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Transcendental.exp_first_two_terms",
     "exp ?x =
      (1::?'a) + ?x + (\<Sum>n. ?x ^ (n + 2) /\<^sub>R fact (n + 2))",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 0)),
         template_app (template_hole 8, t_empty)))),
    ("terms.renaming_exists",
     "[| infinite ?Vars; finite ?V |]
      ==> ALL V'.
             finite V' -->
             (EX \<eta>.
                 renaming \<eta> ?V &
                 subst_codomain \<eta> ?V Int V' = {})",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("terms.combine_substs",
     "[| finite ?V1.0; ?V1.0 Int ?V2.0 = {}; ground_on ?V1.0 ?\<eta>1.0 |]
      ==> EX \<sigma>.
             coincide_on \<sigma> ?\<eta>1.0 ?V1.0 &
             coincide_on \<sigma> ?\<eta>2.0 ?V2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Transcendental.exp_first_terms",
     "exp ?x =
      (SUM n<?k. ?x ^ n /\<^sub>R fact n) +
      (\<Sum>n. ?x ^ (n + ?k) /\<^sub>R fact (n + ?k))",
     template_equation
      (template_app (template_hole 9, template_var 1),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, t_empty)))),
    ("terms.replacement_preserves_congruences",
     "[| congruence ?I; ?I (?u \<lhd> ?\<sigma>) (?v \<lhd> ?\<sigma>);
         subterm ?t ?p ?u; replace_subterm ?t ?p ?v ?s |]
      ==> ?I (?t \<lhd> ?\<sigma>) (?s \<lhd> ?\<sigma>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_var 6,
                template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 6,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4))
           ))),
    ("terms.map_subst_lemma",
     "Var ?x \<lhd> ?\<sigma> ~= Var ?x |
      Var ?x \<lhd> ?\<sigma> ~= Var ?x \<lhd> map_subst ?f ?\<sigma> -->
      Var ?x \<lhd> map_subst ?f ?\<sigma> = ?f (Var ?x \<lhd> ?\<sigma>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 2)),
                         template_var 1)),
                     template_app (template_hole 1, template_var 2)))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 2)),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1)))))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_var 0,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1))))
         )),
    ("terms.renamings_admit_inverse",
     "[| finite ?V; renaming ?\<sigma> ?V |]
      ==> EX \<theta>.
             (ALL x:?V. Var x \<lhd> ?\<sigma> \<lhd> \<theta> = Var x) &
             (ALL x.
                 x ~: subst_codomain ?\<sigma> ?V -->
                 Var x \<lhd> \<theta> = Var x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("terms.subterms_of_instances",
     "ALL u v u' s.
         u = v \<lhd> s -->
         subterm u ?p u' -->
         (EX x q1 q2.
             is_a_variable x &
             subterm (x \<lhd> s) q1 u' & subterm v q2 x & ?p = q2 @ q1) |
         (EX v'. ~ is_a_variable v' & subterm v ?p v' & u' = v' \<lhd> s)",
     template_predicate (template_app (template_hole 13, t_empty)))]
