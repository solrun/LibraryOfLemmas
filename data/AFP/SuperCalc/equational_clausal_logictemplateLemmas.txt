   [("equational_clausal_logic.set_of_variables_is_finite_eq",
     "finite (vars_of_eq ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("equational_clausal_logic.set_of_variables_is_finite_lit",
     "finite (vars_of_lit ?l)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("equational_clausal_logic.set_of_variables_is_finite_cl",
     "finite ?C ==> finite (vars_of_cl ?C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("equational_clausal_logic.substs_preserve_finiteness",
     "finite ?C ==> finite (subst_cl ?C ?\<sigma>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("equational_clausal_logic.set_entails_clause_member",
     "?C : ?S ==> set_entails_clause ?S ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("equational_clausal_logic.substs_preserve_ground_clause",
     "ground_clause ?C ==> subst_cl ?C ?\<sigma> = ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("equational_clausal_logic.ground_instance_exists",
     "finite ?C ==> EX \<sigma>. ground_clause (subst_cl ?C \<sigma>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("equational_clausal_logic.vars_of_cl_lem",
     "?L : ?C ==> vars_of_lit ?L <= vars_of_cl ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("equational_clausal_logic.instances_are_entailed",
     "validate_clause ?I ?C ==> validate_clause ?I (subst_cl ?C ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("equational_clausal_logic.ground_clauses_and_ground_substs",
     "ground_clause (subst_cl ?C ?\<sigma>) ==>
      ground_on (vars_of_cl ?C) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("equational_clausal_logic.ground_substs_yield_ground_clause",
     "ground_on (vars_of_cl ?C) ?\<sigma> ==>
      ground_clause (subst_cl ?C ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("equational_clausal_logic.composition_of_substs_cl",
     "subst_cl (subst_cl ?C ?\<sigma>) ?\<eta> =
      subst_cl ?C (?\<sigma> \<lozenge> ?\<eta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("equational_clausal_logic.composition_of_substs",
     "?t \<lhd> ?\<sigma> \<lhd> ?\<eta> =
      ?t \<lhd> ?\<sigma> \<lozenge> ?\<eta>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("equational_clausal_logic.composition_of_substs_lit",
     "subst_lit (subst_lit ?l ?\<sigma>) ?\<eta> =
      subst_lit ?l (?\<sigma> \<lozenge> ?\<eta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("equational_clausal_logic.composition_of_substs_eq",
     "subst_equation (subst_equation ?e ?\<sigma>) ?\<eta> =
      subst_equation ?e (?\<sigma> \<lozenge> ?\<eta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("equational_clausal_logic.subterm_vars",
     "?u : subterms_of_cl ?C ==> vars_of ?u <= vars_of_cl ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("equational_clausal_logic.subterm_lit_vars",
     "?u : subterms_of_lit ?L ==> vars_of ?u <= vars_of_lit ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("equational_clausal_logic.decompose_equation_vars",
     "decompose_equation ?e ?t ?s ==> vars_of ?t <= vars_of_eq ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("equational_clausal_logic.subst_eq_cl",
     "?\<sigma> \<doteq> ?\<eta> ==>
      subst_cl ?C ?\<sigma> = subst_cl ?C ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.subst_eq_lit",
     "?\<sigma> \<doteq> ?\<eta> ==>
      subst_lit ?l ?\<sigma> = subst_lit ?l ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.subst_eq_eq",
     "?\<sigma> \<doteq> ?\<eta> ==>
      subst_equation ?e ?\<sigma> = subst_equation ?e ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.decompose_literal_vars",
     "decompose_literal ?L ?t ?s ?p ==> vars_of ?t <= vars_of_lit ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 3)))),
    ("equational_clausal_logic.subterm_cl_subst",
     "?x : subterms_of_cl ?C ==>
      ?x \<lhd> ?\<sigma> : subterms_of_cl (subst_cl ?C ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("equational_clausal_logic.coincide_on_cl",
     "coincide_on ?\<sigma> ?\<eta> (vars_of_cl ?C) ==>
      subst_cl ?C ?\<sigma> = subst_cl ?C ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.coincide_on_eq",
     "coincide_on ?\<sigma> ?\<eta> (vars_of_eq ?e) ==>
      subst_equation ?e ?\<sigma> = subst_equation ?e ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.coincide_on_lit",
     "coincide_on ?\<sigma> ?\<eta> (vars_of_lit ?l) ==>
      subst_lit ?l ?\<sigma> = subst_lit ?l ?\<eta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("equational_clausal_logic.substs_preserve_ground_lit",
     "[| ground_clause ?C; ?y : ?C |] ==> subst_lit ?y ?\<sigma> = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("equational_clausal_logic.equivalent_on_cl",
     "[| equivalent_on ?\<sigma> ?\<eta> (vars_of_cl ?C) ?I;
         fo_interpretation ?I |]
      ==> validate_ground_clause ?I (subst_cl ?C ?\<sigma>) =
          validate_ground_clause ?I (subst_cl ?C ?\<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("equational_clausal_logic.equivalent_on_eq",
     "[| equivalent_on ?\<sigma> ?\<eta> (vars_of_eq ?e) ?I;
         fo_interpretation ?I |]
      ==> validate_ground_eq ?I (subst_equation ?e ?\<sigma>) =
          validate_ground_eq ?I (subst_equation ?e ?\<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("equational_clausal_logic.equivalent_on_lit",
     "[| equivalent_on ?\<sigma> ?\<eta> (vars_of_lit ?l) ?I;
         fo_interpretation ?I |]
      ==> validate_ground_lit ?I (subst_lit ?l ?\<sigma>) =
          validate_ground_lit ?I (subst_lit ?l ?\<eta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)))))]
