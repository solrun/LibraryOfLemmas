   [("Refine_Pfun.nrec_admissible",
     "nrec.admissible (%f. ALL x0. f x0 <= SPEC (?P x0))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)),
             template_app (template_hole 4, template_hole 3)),
           t_empty)
         )),
    ("Refine_Pfun.drec_admissible",
     "drec.admissible
       (%f. ALL x.
               ?P x -->
               f x ~= dFAIL & (ALL r. f x = dRETURN r --> ?Q x r))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 11, template_hole 10)),
             template_app (template_hole 9, template_hole 8)),
           t_empty)
         )),
    ("Refine_Pfun.drec_bind_mono_pfun",
     "[| monotone drec.le_fun (<=) ?B;
         !!y. monotone drec.le_fun (<=) (?C y) |]
      ==> monotone drec.le_fun (<=) (%f. ?B f >>= (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_hole 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_hole 5)),
               template_hole 1),
             t_empty)
           ))),
    ("Refine_Pfun.bind_mono_pfun",
     "[| monotone nrec.le_fun (<=) ?B;
         !!y. monotone nrec.le_fun (<=) (?C y) |]
      ==> monotone nrec.le_fun (<=) (%f. ?B f >>= (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_hole 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_hole 5)),
               template_hole 1),
             t_empty)
           )))]
