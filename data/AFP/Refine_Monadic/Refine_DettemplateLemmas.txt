   [("Refine_Det.dr_mono", "mono (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Refine_Det.dbind_mono2", "mono ((>>=) ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Det.dres_order_simps", "dSUCCEED ~= dRETURN ?r",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Det.dres_order_simps", "dFAIL ~= dRETURN ?r",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Det.dres_order_simps", "dRETURN ?r ~= dSUCCEED",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Det.dres_order_simps", "dRETURN ?r ~= dFAIL",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Det.dres_ne_bot_basic", "dRETURN ?x ~= dSUCCEED",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Det.dres_ne_bot_basic", "dASSERT ?\<Phi> ~= dSUCCEED",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Det.inf_dres_addsimps", "inf dSUCCEEDi ?x = dSUCCEEDi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Refine_Det.inf_dres_addsimps", "inf ?x dFAILi = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Det.inf_dres_addsimps", "inf ?x dSUCCEEDi = dSUCCEEDi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Refine_Det.sup_dres_addsimps", "sup ?x dFAILi = dFAILi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Refine_Det.sup_dres_addsimps", "sup ?x dSUCCEEDi = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Det.dres_monad2", "?M >>= dRETURN = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Det.inf_dres_addsimps", "inf (dRETURN ?v) ?x ~= dFAILi",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0),
           template_hole 0)
         )),
    ("Refine_Det.dres_order_simps", "(dFAIL <= ?x) = (?x = dFAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Det.dres_order_simps", "(?x <= dSUCCEED) = (?x = dSUCCEED)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Det.dres_monad1", "dRETURN ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Refine_Det.dr_mono_bind'", "mono (%F s. ?f s >>= F)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Refine_Det.dres_monad3",
     "?M >>= ?f >>= ?g = ?M >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Det.dres_order_simps",
     "?x = ?y ==> inf (dRETURN ?x) (dRETURN ?y) = dRETURN ?y",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Det.dres_order_simps",
     "?x = ?y ==> sup (dRETURN ?x) (dRETURN ?y) = dRETURN ?y",
     template_implication
      ([template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Det.dres_order_simps",
     "?x ~= ?y ==> inf (dRETURN ?x) (dRETURN ?y) = dSUCCEED",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Refine_Det.dres_order_simps",
     "?x ~= ?y ==> sup (dRETURN ?x) (dRETURN ?y) = dFAIL",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Refine_Det.dres_ne_bot_basic",
     "(!!x. ?f x ~= dSUCCEED) ==> Let ?x ?f ~= dSUCCEED",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("Refine_Det.dres_ne_bot_dWHILET",
     "(!!x. ?f x ~= dSUCCEED) ==> dWHILET ?b ?f ?s ~= dSUCCEED",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0),
             template_hole 1)
           ))),
    ("Refine_Det.dres_ne_bot_dWHILEIT",
     "(!!x. ?f x ~= dSUCCEED) ==> dWHILEIT ?I ?b ?f ?s ~= dSUCCEED",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3),
               template_var 0),
             template_hole 1)
           ))),
    ("Refine_Det.dres_ne_bot_basic",
     "(!!x1 x2. ?g x1 x2 ~= dSUCCEED) ==>
      (case ?p of (x, xa) => ?g x xa) ~= dSUCCEED",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Refine_Det.dres_ne_bot_basic",
     "[| ?m1.0 ~= dSUCCEED; ?m2.0 ~= dSUCCEED |]
      ==> (if ?b then ?m1.0 else ?m2.0) ~= dSUCCEED",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1),
             template_hole 1)
           ))),
    ("Refine_Det.dr_mono",
     "[| mono ?S1.0; mono ?S2.0 |]
      ==> mono (%F s. if ?b s then ?S1.0 F s else ?S2.0 F s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Det.dres_chain_eq_res",
     "[| is_chain ?M; dRETURN ?r : ?M; dRETURN ?s : ?M |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Refine_Det.dres_ne_bot_basic",
     "[| ?m ~= dSUCCEED; !!x. ?f x ~= dSUCCEED |]
      ==> ?m >>= ?f ~= dSUCCEED",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Refine_Det.dres_ne_bot_basic",
     "[| ?fn ~= dSUCCEED; !!v. ?fs v ~= dSUCCEED |]
      ==> (case ?x of None => ?fn | Some x => ?fs x) ~= dSUCCEED",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 2)
           ))),
    ("Refine_Det.dr_mono_bind",
     "[| mono ?A; !!s. mono (?B s) |] ==> mono (%F s. ?A F s >>= ?B s F)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Det.dbind_mono",
     "[| flat_ge ?M ?M'; !!x. flat_ge (?f x) (?f' x) |]
      ==> flat_ge (?M >>= ?f) (?M' >>= ?f')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Refine_Det.dres_ne_bot_basic",
     "[| ?fn ~= dSUCCEED; !!x xs. ?fc x xs ~= dSUCCEED |]
      ==> (case ?x of [] => ?fn | x # xa => ?fc x xa) ~= dSUCCEED",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 3)
           ))),
    ("Refine_Det.dres_ne_bot_RECT",
     "(!!f x. (!!x. f x ~= dSUCCEED) ==> ?B f x ~= dSUCCEED) ==>
      REC\<^sub>T ?B ?x ~= dSUCCEED",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Refine_Det.dbind_mono",
     "[| ?M <= ?M'; !!x. dRETURN x <= ?M ==> ?f x <= ?f' x |]
      ==> ?M >>= ?f <= ?M' >>= ?f'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Refine_Det.less_eq_dres_split_conv",
     "(?a <= ?b) =
      (case (?a, ?b) of (dSUCCEEDi, xa) => True | (dFAILi, dFAILi) => True
       | (dFAILi, _) => False | (dRETURN aa, dSUCCEEDi) => False
       | (dRETURN aa, dFAILi) => True | (dRETURN aa, dRETURN b) => aa = b)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Det.dres_cases",
     "[| ?x = dSUCCEED ==> ?thesis; !!r. ?x = dRETURN r ==> ?thesis;
         ?x = dFAIL ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Refine_Det.inf_dres_split_conv",
     "inf ?a ?b =
      (case (?a, ?b) of (dSUCCEEDi, dSUCCEEDi) => dSUCCEEDi
       | (dSUCCEEDi, _) => dSUCCEEDi | (dFAILi, xa) => xa
       | (dRETURN aa, dSUCCEEDi) => dSUCCEEDi
       | (dRETURN aa, dFAILi) => dRETURN aa
       | (dRETURN aa, dRETURN b) =>
           if aa = b then dRETURN b else dSUCCEEDi)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Det.sup_dres_split_conv",
     "sup ?a ?b =
      (case (?a, ?b) of (dSUCCEEDi, xa) => xa
       | (dFAILi, dSUCCEEDi) => dFAILi | (dFAILi, _) => dFAILi
       | (dRETURN aa, dSUCCEEDi) => dRETURN aa
       | (dRETURN aa, dFAILi) => dFAILi
       | (dRETURN aa, dRETURN b) => if aa = b then dRETURN b else dFAILi)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Det.dres_Sup_chain_cases",
     "[| is_chain ?M; [| ?M <= {dSUCCEED}; Sup ?M = dSUCCEED |] ==> ?thesis;
         !!r. [| ?M <= {dSUCCEED, dRETURN r}; dRETURN r : ?M;
                 Sup ?M = dRETURN r |]
              ==> ?thesis;
         [| dFAIL : ?M; Sup ?M = dFAIL |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_hole 6))],
          template_implication
           ([template_equation
              (template_app (template_hole 4, template_var 1),
               template_hole 7)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)
               )],
          template_implication
           ([template_equation
              (template_app (template_hole 4, template_var 1),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Refine_Det.dres_Inf_chain_cases",
     "[| is_chain ?M; [| ?M <= {dFAIL}; Inf ?M = dFAIL |] ==> ?thesis;
         !!r. [| ?M <= {dFAIL, dRETURN r}; dRETURN r : ?M;
                 Inf ?M = dRETURN r |]
              ==> ?thesis;
         [| dSUCCEED : ?M; Inf ?M = dSUCCEED |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_hole 6))],
          template_implication
           ([template_equation
              (template_app (template_hole 4, template_var 1),
               template_hole 7)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)
               )],
          template_implication
           ([template_equation
              (template_app (template_hole 4, template_var 1),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Refine_Det.dres_Sup_cases",
     "[| [| ?S <= {dSUCCEED}; Sup ?S = dSUCCEED |] ==> ?thesis;
         [| dFAIL : ?S; Sup ?S = dFAIL |] ==> ?thesis;
         !!a b.
            [| a ~= b; dRETURN a : ?S; dRETURN b : ?S; dFAIL ~: ?S;
               Sup ?S = dFAIL |]
            ==> ?thesis;
         !!a. [| ?S <= {dSUCCEED, dRETURN a}; dRETURN a : ?S;
                 Sup ?S = dRETURN a |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_var 1,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_hole 8))],
          template_implication
           ([template_equation
              (template_app (template_hole 6, template_var 1),
               template_hole 9)],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1)
               )],
          template_implication
           ([template_equation
              (template_app (template_hole 6, template_var 1),
               template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Refine_Det.dres_Inf_cases",
     "[| [| ?S <= {dFAIL}; Inf ?S = dFAIL |] ==> ?thesis;
         [| dSUCCEED : ?S; Inf ?S = dSUCCEED |] ==> ?thesis;
         !!a b.
            [| a ~= b; dRETURN a : ?S; dRETURN b : ?S; dSUCCEED ~: ?S;
               Inf ?S = dSUCCEED |]
            ==> ?thesis;
         !!a. [| ?S <= {dFAIL, dRETURN a}; dRETURN a : ?S;
                 Inf ?S = dRETURN a |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals, template_var 1,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_hole 8))],
          template_implication
           ([template_equation
              (template_app (template_hole 6, template_var 1),
               template_hole 9)],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1)
               )],
          template_implication
           ([template_equation
              (template_app (template_hole 6, template_var 1),
               template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0)))]
