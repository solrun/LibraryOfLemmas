   [("Refine_Leof.FAIL_leof", "FAIL \<le>\<^sub>n ?m",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Refine_Leof.leof_refl", "?a \<le>\<^sub>n ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Refine_Leof.leof_FAIL", "?m \<le>\<^sub>n FAIL",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Leof.leof_RES_UNIV", "?m \<le>\<^sub>n RES UNIV",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Refine_Leof.leof_lift", "?m <= ?F ==> ?m \<le>\<^sub>n ?F",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Leof.RETURN_leof_RES_iff",
     "(RETURN ?x \<le>\<^sub>n RES ?Y) = (?x : ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Leof.RES_leof_RES_iff",
     "(RES ?X \<le>\<^sub>n RES ?Y) = (?X <= ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Leof.leof_RETURN_rule",
     "?\<Phi> ?m ==> RETURN ?m \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Refine_Leof.ASSUME_leof_iff",
     "(ASSUME ?\<Phi> \<le>\<^sub>n SPEC ?\<Psi>) =
      (?\<Phi> --> ?\<Psi> ())",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_var 0, template_hole 0)))),
    ("Refine_Leof.leof_True_rule",
     "(!!x. ?\<Phi> x) ==> ?m \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Refine_Leof.leofI",
     "(nofail ?m ==> ?m <= ?m') ==> ?m \<le>\<^sub>n ?m'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 1))],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Leof.leof_add_nofailI",
     "(nofail ?m ==> ?m \<le>\<^sub>n ?m') ==> ?m \<le>\<^sub>n ?m'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate
           (
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Leof.leofD",
     "[| nofail ?m; ?m \<le>\<^sub>n ?m' |] ==> ?m <= ?m'",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Refine_Leof.ASSUME_leof_rule",
     "(?\<Phi> ==> ?\<Psi> ()) ==>
      ASSUME ?\<Phi> \<le>\<^sub>n SPEC ?\<Psi>",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_predicate
           (template_app (template_var 0, template_hole 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Refine_Leof.leof_Let_rule",
     "?f ?x \<le>\<^sub>n SPEC ?\<Phi> ==>
      Let ?x ?f \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 2, template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Refine_Leof.leof_ASSERT_rule",
     "(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
      ?m \<le>\<^sub>n ASSERT ?\<Phi> >>= (%_. ?m')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               t_empty))
           ))),
    ("Refine_Leof.ASSERT_leof_rule",
     "(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
      ASSERT ?\<Phi> >>= (%_. ?m) \<le>\<^sub>n ?m'",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_predicate
           (
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 t_empty)),
             template_var 0)
           ))),
    ("Refine_Leof.leof_trans",
     "[| ?a \<le>\<^sub>n RES ?X; RES ?X \<le>\<^sub>n ?c |]
      ==> ?a \<le>\<^sub>n ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Refine_Leof.pw_leof_iff",
     "(?m \<le>\<^sub>n ?m') =
      (nofail ?m --> (ALL x. inres ?m x --> inres ?m' x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("Refine_Leof.leof_fun_conv_le",
     "(?f ?x \<le>\<^sub>n ?M ?x) =
      (?f ?x <= (if nofail (?f ?x) then ?M ?x else FAIL))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_var 2, template_var 1)),
         template_app (template_var 0, template_var 1)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 2, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_var 2, template_var 1))),
             template_app (template_var 0, template_var 1)),
           template_hole 0)))),
    ("Refine_Leof.le_by_leofI",
     "[| nofail ?m' ==> nofail ?m; ?m \<le>\<^sub>n ?m' |] ==> ?m <= ?m'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 1))],
          template_predicate
           (template_app (template_hole 2, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Refine_Leof.leof_RES_rule",
     "(!!x. ?\<Psi> x ==> ?\<Phi> x) ==>
      SPEC ?\<Psi> \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Refine_Leof.leof_RES_rule",
     "(!!x. x : ?X ==> ?\<Phi> x) ==> RES ?X \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Refine_Leof.leof_trans_nofail",
     "[| ?a \<le>\<^sub>n ?b; nofail ?b; ?b \<le>\<^sub>n ?c |]
      ==> ?a \<le>\<^sub>n ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Refine_Leof.inres_leof_mono",
     "[| ?m \<le>\<^sub>n ?m'; nofail ?m; inres ?m ?x |] ==> inres ?m' ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Leof.leof_strengthen_SPEC",
     "?m \<le>\<^sub>n SPEC ?\<Phi> ==>
      ?m \<le>\<^sub>n SPEC (%x. inres ?m x & ?\<Phi> x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty)))
           ))),
    ("Refine_Leof.RETURN_as_SPEC_refine_leof",
     "?M \<le>\<^sub>n SPEC (%c. (c, ?a) : ?R) ==>
      ?M \<le>\<^sub>n \<Down> ?R (RETURN ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Refine_Leof.sup_leof_iff",
     "(sup ?a ?b \<le>\<^sub>n ?m) =
      (nofail ?a & nofail ?b -->
       ?a \<le>\<^sub>n ?m & ?b \<le>\<^sub>n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Refine_Leof.leof_ASSERT_refine_rule",
     "(?\<Phi> ==> ?m \<le>\<^sub>n \<Down> ?R ?m') ==>
      ?m \<le>\<^sub>n \<Down> ?R (ASSERT ?\<Phi> >>= (%_. ?m'))",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0))
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 t_empty)))
           ))),
    ("Refine_Leof.leof_bind_rule",
     "?m \<le>\<^sub>n SPEC (%x. ?f x \<le>\<^sub>n SPEC ?\<Phi>) ==>
      ?m >>= ?f \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Refine_Leof.build_rel_SPEC_leof",
     "?m \<le>\<^sub>n SPEC (%x. ?I x & ?\<Phi> (?\<alpha> x)) ==>
      ?m \<le>\<^sub>n \<Down> (br ?\<alpha> ?I) (SPEC ?\<Phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6, template_app (template_hole 5, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Refine_Leof.leof_cons_rule",
     "[| ?m \<le>\<^sub>n SPEC ?Q; !!x. ?Q x ==> ?P x |]
      ==> ?m \<le>\<^sub>n SPEC ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Refine_Leof.SPEC_rule_conj_leofI1",
     "[| ?m <= SPEC ?\<Phi>; ?m \<le>\<^sub>n SPEC ?\<Psi> |]
      ==> ?m <= SPEC (%s. ?\<Phi> s & ?\<Psi> s)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Refine_Leof.SPEC_rule_conj_leofI2",
     "[| ?m \<le>\<^sub>n SPEC ?\<Phi>; ?m <= SPEC ?\<Psi> |]
      ==> ?m <= SPEC (%s. ?\<Phi> s & ?\<Psi> s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Refine_Leof.SPEC_rule_leof_conjI",
     "[| ?m \<le>\<^sub>n SPEC ?\<Phi>; ?m \<le>\<^sub>n SPEC ?\<Psi> |]
      ==> ?m \<le>\<^sub>n SPEC (%x. ?\<Phi> x & ?\<Psi> x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("Refine_Leof.use_spec_leof_rule",
     "[| ?m \<le>\<^sub>n SPEC ?\<Psi>;
         ?m <= SPEC (%s. ?\<Psi> s --> ?\<Phi> s) |]
      ==> ?m <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 3, template_app (template_hole 2, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Leof.leof_use_spec_rule",
     "[| ?m \<le>\<^sub>n SPEC ?\<Psi>;
         ?m \<le>\<^sub>n SPEC (%s. ?\<Psi> s --> ?\<Phi> s) |]
      ==> ?m \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2, template_app (template_hole 1, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Refine_Leof.leof_If_rule",
     "[| ?c ==> ?t \<le>\<^sub>n SPEC ?\<Phi>;
         ~ ?c ==> ?e \<le>\<^sub>n SPEC ?\<Phi> |]
      ==> (if ?c then ?t else ?e) \<le>\<^sub>n SPEC ?\<Phi>",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)))
              )),
        template_implication
         ([template_negation (template_predicate (template_var 3))],
          template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)))
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))
           ))),
    ("Refine_Leof.sup_leof_rule",
     "[| [| nofail ?a; nofail ?b |] ==> ?a \<le>\<^sub>n ?m;
         [| nofail ?a; nofail ?b |] ==> ?b \<le>\<^sub>n ?m |]
      ==> sup ?a ?b \<le>\<^sub>n ?m",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 2))],
          template_implication
           ([template_predicate
              (template_app (template_hole 2, template_var 1))],
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)
                ))),
        template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 2))],
          template_implication
           ([template_predicate
              (template_app (template_hole 2, template_var 1))],
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Refine_Leof.leof_option_rule",
     "[| ?v = None ==> ?S1.0 \<le>\<^sub>n SPEC ?\<Phi>;
         !!x. ?v = Some x ==> ?f2.0 x \<le>\<^sub>n SPEC ?\<Phi> |]
      ==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) \<le>\<^sub>n
          SPEC ?\<Phi>",
     template_implication
      ([template_implication
         ([template_equation (template_var 3, template_hole 6)],
          template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)))
              )),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2), t_empty),
                 template_var 3)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)))
           ))),
    ("Refine_Leof.RECT_rule_leof",
     "[| wf ?V; ?pre ?x;
         !!f x.
            [| !!x'. [| ?pre x'; (x', x) : ?V |]
                     ==> f x' \<le>\<^sub>n ?M x';
               ?pre x; REC\<^sub>T ?body = f |]
            ==> ?body f x \<le>\<^sub>n ?M x |]
      ==> REC\<^sub>T ?body ?x \<le>\<^sub>n ?M ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_var 1, template_var 2))
           )))]
