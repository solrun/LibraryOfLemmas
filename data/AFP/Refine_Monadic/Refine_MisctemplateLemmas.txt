   [("Refine_Misc.mono_const", "mono (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Refine_Misc.map_to_set_simps", "single_valued (map_to_set ?m)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Misc.wf_greater_bounded", "wf (greater_bounded ?N)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Misc.cont_is_mono", "cont ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.inf_distribD", "inf_distrib ?f ==> cont ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.inf_distribD", "inf_distrib ?f ==> strict ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.inf_distrib_is_mono", "inf_distrib ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.ccpo_mono_simp", "monotone (<=) (<=) ?f = mono ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Misc.finite_psupset_wf",
     "finite ?S ==> wf (finite_psupset ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Refine_Misc.mono_funpow", "mono ?f ==> mono (?f ^^ ?i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Refine_Misc.ccpo_monoI", "mono ?f ==> monotone (<=) (<=) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Refine_Misc.strictD_simp", "strict ?f ==> ?f bot = bot",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 0), template_hole 0))),
    ("Refine_Misc.strictD", "strict ?f ==> ?f bot = bot",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Refine_Misc.ccpo_monoD", "monotone (<=) (<=) ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.strictI", "?f bot = bot ==> strict ?f",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 2), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.bot_Inf", "bot : ?A ==> Inf ?A = bot",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Refine_Misc.top_Sup", "top : ?A ==> Sup ?A = top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Refine_Misc.mono_infArg", "mono ?f ==> mono (%x. ?f (inf x ?X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Misc.inf_distribI",
     "[| strict ?f; cont ?f |] ==> inf_distrib ?f",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set ?m Int dom ?m \<times> UNIV = map_to_set ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           t_empty)),
       template_app (template_hole 3, template_var 0))),
    ("Refine_Misc.dual_chain_iff", "is_dual_chain ?C = is_chain ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Refine_Misc.ccpo_lfp_simp",
     "mono ?f ==> ccpo.fixp Sup (<=) ?f = lfp ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.lfp_le_gfp'", "mono ?f ==> lfp ?f ?x <= gfp ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m |` ?K) = map_to_set ?m Int ?K \<times> UNIV",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Refine_Misc.greater_bounded_Suc_iff",
     "((Suc ?x, ?x) : greater_bounded ?N) = (Suc ?x <= ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Refine_Misc.mono_Inf", "mono ?f ==> ?f (Inf ?S) <= Inf (?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refine_Misc.mono_Sup", "mono ?f ==> Sup (?f ` ?S) <= ?f (Sup ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Misc.inf_distribD'",
     "inf_distrib ?f ==> ?f (Sup ?C) = Sup (?f ` ?C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refine_Misc.dual_chainI", "is_chain ?C ==> is_dual_chain ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Refine_Misc.point_chainI",
     "is_chain ?M ==> is_chain ((%f. f ?x) ` ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Refine_Misc.chain_dualI", "is_dual_chain ?C ==> is_chain ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Refine_Misc.mono_infI", "[| mono ?f; mono ?g |] ==> mono (inf ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Refine_Misc.map_to_set_simps", "map_to_set [?a |-> ?b] = {(?a, ?b)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Refine_Misc.less_than_bool_iff",
     "((?x, ?y) : less_than_bool) = (?x = False & ?y = True)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 0))
           ))),
    ("Refine_Misc.map_to_set_simps",
     "?m ?k = Some ?v ==> (?k, ?v) : map_to_set ?m",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Refine_Misc.let_mono",
     "?f ?x <= ?f' ?x' ==> Let ?x ?f <= Let ?x' ?f'",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Misc.inf_distribI'",
     "(!!C. ?f (Sup C) = Sup (?f ` C)) ==> inf_distrib ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m(?x := None)) = map_to_set ?m - {?x} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           t_empty)))),
    ("Refine_Misc.dual_ccpo_mono_simp",
     "monotone (%x y. y <= x) (%x y. y <= x) ?f = mono ?f",
     template_equation
      (template_app
        (template_app (template_app (template_hole 3, t_empty), t_empty),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Misc.ccpo_gfp_simp",
     "mono ?f ==> ccpo.fixp Inf (%x y. y <= x) ?f = gfp ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.kleene_lfp",
     "cont ?f ==> lfp ?f = (SUP i. (?f ^^ i) bot)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))))),
    ("Refine_Misc.mono_infI'",
     "[| mono ?f; mono ?g |] ==> mono (%x. inf (?f x) (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Misc.dual_ccpo_monoI",
     "mono ?f ==> monotone (%x y. y <= x) (%x y. y <= x) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_var 0)
           ))),
    ("Refine_Misc.dual_ccpo_monoD",
     "monotone (%x y. y <= x) (%x y. y <= x) ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.mono_compD",
     "[| mono ?f; ?x <= ?y |] ==> ?f o ?x <= ?f o ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Refine_Misc.mono_SupI",
     "[| mono ?f; ?S' <= ?f ` ?S |] ==> Sup ?S' <= ?f (Sup ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_var 2,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Misc.contD",
     "[| cont ?f; ?C ~= {} |] ==> ?f (Sup ?C) = Sup (?f ` ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refine_Misc.gen_kleene_lfp",
     "cont ?f ==> lfp (%x. sup ?m (?f x)) = (SUP i. (?f ^^ i) ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0))))),
    ("Refine_Misc.wf_no_infinite_down_chainI",
     "(!!f. (!!i. (f (Suc i), f i) : ?r) ==> False) ==> wf ?r",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.map_to_set_inj",
     "[| (?k, ?v) : map_to_set ?m; (?k, ?v') : map_to_set ?m |]
      ==> ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 0)),
              template_app (template_hole 1, template_var 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Refine_Misc.contI",
     "(!!C. C ~= {} ==> ?f (Sup C) = Sup (?f ` C)) ==> cont ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Refine_Misc.mono_if",
     "[| mono ?S1.0; mono ?S2.0 |]
      ==> mono (%F s. if ?b s then ?S1.0 F s else ?S2.0 F s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m(?x |-> ?v)) =
      map_to_set ?m - {?x} \<times> UNIV Un {(?x, ?v)}",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 11, template_var 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Refine_Misc.SUP_funpow_contracting",
     "cont ?f ==> ?f (SUP i. (?f ^^ i) ?m) <= (SUP i. (?f ^^ i) ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_var 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_hole 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0))))),
    ("Refine_Misc.gen_kleene_chain_conv",
     "cont ?f ==>
      (SUP i. (?f ^^ i) ?m) = (SUP i. ((%x. sup ?m (?f x)) ^^ i) bot)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_hole 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_hole 2))))),
    ("Refine_Misc.if_mono",
     "[| ?b ==> ?m1.0 <= ?m1'; ~ ?b ==> ?m2.0 <= ?m2' |]
      ==> (if ?b then ?m1.0 else ?m2.0) <= (if ?b then ?m1' else ?m2')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 4)],
          template_inequation
           (less_equals, template_var 3, template_var 2)),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Refine_Misc.case_prod_mono",
     "(!!a b. ?p = (a, b) ==> ?f a b <= ?f' a b) ==>
      (case ?p of (x, xa) => ?f x xa) <= (case ?p of (x, xa) => ?f' x xa)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Refine_Misc.lfp_induct'",
     "[| mono ?f; !!m. [| m <= lfp ?f; m <= ?P |] ==> ?f m <= ?P |]
      ==> lfp ?f <= ?P",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Refine_Misc.mono_gfp_eqI",
     "[| mono ?f; ?a <= ?f ?a; !!x. ?f x = x ==> x <= ?a |]
      ==> gfp ?f = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_var 1, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Misc.mono_lfp_eqI",
     "[| mono ?f; ?f ?a <= ?a; !!x. ?f x = x ==> ?a <= x |]
      ==> lfp ?f = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Misc.all_nat_split_at",
     "[| ALL i<?k. ?P i; ?P ?k; ALL i>?k. ?P i |] ==> ALL i. ?P i",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Refine_Misc.chain_admissibleI",
     "(!!A. [| is_chain A; A ~= {}; ALL x:A. ?P x |] ==> ?P (Sup A)) ==>
      chain_admissible ?P",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_hole 6),
             template_var 0)
           ))),
    ("Refine_Misc.case_option_mono",
     "[| ?fn <= ?fn'; !!v. ?x = Some v ==> ?fs v <= ?fs' v |]
      ==> (case ?x of None => ?fn | Some x => ?fs x)
          <= (case ?x of None => ?fn' | Some x => ?fs' x)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("Refine_Misc.lfp_cadm_induct",
     "[| chain_admissible ?P; ?P (Sup {}); mono ?f;
         !!x. ?P x ==> ?P (?f x) |]
      ==> ?P (lfp ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 5, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("Refine_Misc.gfp_cadm_induct",
     "[| dual_chain_admissible ?P; ?P (Inf {}); mono ?f;
         !!x. ?P x ==> ?P (?f x) |]
      ==> ?P (gfp ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5), t_empty),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 5, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("Refine_Misc.case_list_mono",
     "[| ?fn <= ?fn'; !!x xs. ?l = x # xs ==> ?fc x xs <= ?fc' x xs |]
      ==> (case ?l of [] => ?fn | x # xa => ?fc x xa)
          <= (case ?l of [] => ?fn' | x # xa => ?fc' x xa)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("Refine_Misc.dual_chain_admissibleI",
     "(!!A. [| is_dual_chain A; A ~= {}; ALL x:A. ?P x |]
            ==> ?P (Inf A)) ==>
      dual_chain_admissible ?P",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1), t_empty),
             template_var 0)
           ))),
    ("Refine_Misc.lfp_gen_induct",
     "[| mono ?f; ?m0.0 <= ?P;
         !!m. [| m <= lfp (%s. sup ?m0.0 (?f s)); m <= ?P;
                 ?f m <= lfp (%s. sup ?m0.0 (?f s)) |]
              ==> ?f m <= ?P |]
      ==> lfp (%s. sup ?m0.0 (?f s)) <= ?P",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, t_empty),
         template_var 0))),
    ("Refine_Misc.sim_wf",
     "[| wf (?S'^-1); (?x0.0, ?x0') : ?R;
         !!s s' t.
            [| (s, s') : ?R; (s, t) : ?S; (?x0', s') : ?S'^* |]
            ==> EX t'. (s', t') : ?S' & (t, t') : ?R;
         Domain ?S <= ?S^* `` {?x0.0} |]
      ==> wf (?S^-1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0)),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           )))]
