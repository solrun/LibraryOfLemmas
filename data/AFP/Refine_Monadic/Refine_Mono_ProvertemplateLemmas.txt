   [("Refine_Mono_Prover.refine_mono", "?x <= ?x",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Refine_Mono_Prover.refine_mono",
     "(!!x. ?f x <= ?f' x) ==> Let ?x ?f <= Let ?x ?f'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Mono_Prover.refine_mono",
     "[| ?t <= ?t'; ?e <= ?e' |]
      ==> (if ?b then ?t else ?e) <= (if ?b then ?t' else ?e')",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 1)))),
    ("Refine_Mono_Prover.refine_mono",
     "(!!Z x. ?f Z x <= ?g Z x) ==> gfp ?f ?x <= gfp ?g ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Mono_Prover.refine_mono",
     "(!!Z x. ?f Z x <= ?g Z x) ==> lfp ?f ?x <= lfp ?g ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Mono_Prover.refine_mono",
     "(!!f g x. (!!x. f x <= g x) ==> ?B f x <= ?B g x) ==>
      monotone (fun_ord (<=)) (fun_ord (<=)) ?B",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 3)),
               template_app (template_hole 0, template_hole 3)),
             template_var 0)
           )))]
