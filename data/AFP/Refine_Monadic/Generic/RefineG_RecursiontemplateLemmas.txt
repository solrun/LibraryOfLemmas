   [("RefineG_Recursion.flat_ord_top", "flat_ord ?b ?b ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1),
           template_var 0)
         )),
    ("RefineG_Recursion.trimonoD_mono", "trimono ?B ==> mono ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("RefineG_Recursion.trimono_trigger", "trimono ?B ==> trimono ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("RefineG_Recursion.REC_le_RECT",
     "REC ?body ?x <= REC\<^sub>T ?body ?x",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("RefineG_Recursion.REC_unfold", "trimono ?B ==> REC ?B = ?B (REC ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 0))))),
    ("RefineG_Recursion.RECT_unfold",
     "trimono ?B ==> REC\<^sub>T ?B = ?B (REC\<^sub>T ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 0))))),
    ("RefineG_Recursion.trimono_alt",
     "trimono ?B = (ALL ord:fun_ord ` triords. monotone ord ord ?B)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         t_empty))),
    ("RefineG_Recursion.trimonoD_flatf_ge",
     "trimono ?B ==> monotone flatf_ge flatf_ge ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)
           ))),
    ("RefineG_Recursion.RECT_eq_REC",
     "REC\<^sub>T ?body ?x ~= top ==> REC\<^sub>T ?body ?x = REC ?body ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("RefineG_Recursion.trimonoI",
     "[| monotone flatf_ge flatf_ge ?B; mono ?B |] ==> trimono ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_hole 2))),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("RefineG_Recursion.trimonoI'",
     "(!!ord. ord : triords ==> monotone (fun_ord ord) (fun_ord ord) ?B) ==>
      trimono ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("RefineG_Recursion.REC_mono",
     "[| trimono ?B; !!F x. ?B F x <= ?B' F x |]
      ==> REC ?B ?x <= REC ?B' ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("RefineG_Recursion.RECT_mono",
     "[| trimono ?B'; !!F x. flat_ge (?B F x) (?B' F x) |]
      ==> flat_ge (REC\<^sub>T ?B ?x) (REC\<^sub>T ?B' ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("RefineG_Recursion.REC_rule",
     "[| trimono ?body; ?pre ?x;
         !!f x.
            [| !!x. ?pre x ==> f x <= ?M x; ?pre x; f <= REC ?body |]
            ==> ?body f x <= ?M x |]
      ==> REC ?body ?x <= ?M ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("RefineG_Recursion.REC_rule_arb",
     "[| trimono ?body; ?pre ?arb ?x;
         !!f arb x.
            [| !!arb' x. ?pre arb' x ==> f x <= ?M arb' x; ?pre arb x;
               f <= REC ?body |]
            ==> ?body f x <= ?M arb x |]
      ==> REC ?body ?x <= ?M ?arb ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.RECT_rule",
     "[| trimono ?body; wf ?V; ?pre ?x;
         !!f x.
            [| !!x'. [| ?pre x'; (x', x) : ?V |] ==> f x' <= ?M x'; ?pre x;
               REC\<^sub>T ?body = f |]
            ==> ?body f x <= ?M x |]
      ==> REC\<^sub>T ?body ?x <= ?M ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("RefineG_Recursion.fp_compare",
     "[| flatf_mono ?b1.0 ?B; flatf_mono ?b2.0 ?B |]
      ==> flatf_fp ?b1.0 ?B ?x = flatf_fp ?b2.0 ?B ?x |
          flatf_fp ?b1.0 ?B ?x = ?b1.0 & flatf_fp ?b2.0 ?B ?x = ?b2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3))),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1))),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 3))),
                         template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 3))),
                       template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 1))),
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 1))),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1, template_var 3))),
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_var 3))),
                         template_var 2),
                       template_var 0)),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 1))),
                         template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 1))),
                       template_var 2),
                     template_var 0)),
                 template_var 1)))
           ))),
    ("RefineG_Recursion.lfp_gfp_compare",
     "[| monotone flatf_le flatf_le ?B; monotone flatf_ge flatf_ge ?B |]
      ==> flatf_lfp ?B ?x = flatf_gfp ?B ?x |
          flatf_lfp ?B ?x = bot & flatf_gfp ?B ?x = top",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 6))),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 6))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 7))),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 7))),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 6))),
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 6))),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1, template_hole 7))),
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_hole 7))),
                         template_var 1),
                       template_var 0)),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 6))),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 6))),
                       template_var 1),
                     template_var 0)),
                 template_hole 6)))
           ))),
    ("RefineG_Recursion.REC_rule_arb2",
     "[| trimono ?body; ?pre ?arb ?arc ?x;
         !!f arb arc x.
            [| !!arb' arc' x'.
                  ?pre arb' arc' x' ==> f x' <= ?M arb' arc' x';
               ?pre arb arc x |]
            ==> ?body f x <= ?M arb arc x |]
      ==> REC ?body ?x <= ?M ?arb ?arc ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), template_var 1),
         template_app
          (template_app
            (template_app (template_var 0, template_var 3), template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.RECT_transfer_rel'",
     "[| trimono ?F; trimono ?F'; !!x. ?tr x top; ?P ?x ?x';
         !!D D' x x'.
            [| !!x x'. ?P x x' ==> ?tr (D x) (D' x'); ?P x x' |]
            ==> ?tr (?F D x) (?F' D' x') |]
      ==> ?tr (REC\<^sub>T ?F ?x) (REC\<^sub>T ?F' ?x')",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 5)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("RefineG_Recursion.RECT_rule_arb",
     "[| trimono ?body; wf ?V; ?pre ?arb ?x;
         !!f arb x.
            [| !!arb' x'.
                  [| ?pre arb' x'; (x', x) : ?V |] ==> f x' <= ?M arb' x';
               ?pre arb x; REC\<^sub>T ?body = f |]
            ==> ?body f x <= ?M arb x |]
      ==> REC\<^sub>T ?body ?x <= ?M ?arb ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 5)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), template_var 1),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.RECT_transfer_rel",
     "[| trimono ?F; trimono ?F'; !!x. ?tr x top; ?P ?x ?x';
         !!D D' x x'.
            [| !!x x'. ?P x x' ==> ?tr (D x) (D' x'); ?P x x';
               REC\<^sub>T ?F = D |]
            ==> ?tr (?F D x) (?F' D' x') |]
      ==> ?tr (REC\<^sub>T ?F ?x) (REC\<^sub>T ?F' ?x')",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("RefineG_Recursion.REC_rule_arb3",
     "[| trimono ?body; ?pre ?arb ?arc ?ard ?x;
         !!f arb arc ard x.
            [| !!arb' arc' ard' x'.
                  ?pre arb' arc' ard' x' ==> f x' <= ?M arb' arc' ard' x';
               ?pre arb arc ard x |]
            ==> ?body f x <= ?M arb arc ard x |]
      ==> REC ?body ?x <= ?M ?arb ?arc ?ard ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_var 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 6), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.RECT_rule_arb2",
     "[| trimono ?body; wf ?V; ?pre ?arb ?arc ?x;
         !!f arb arc x.
            [| !!arb' arc' x'.
                  [| ?pre arb' arc' x'; (x', x) : ?V |]
                  ==> f x' <= ?M arb' arc' x';
               ?pre arb arc x; f <= REC\<^sub>T ?body |]
            ==> ?body f x <= ?M arb arc x |]
      ==> REC\<^sub>T ?body ?x <= ?M ?arb ?arc ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 6)),
        template_predicate (template_app (template_hole 9, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 6), template_var 1),
         template_app
          (template_app
            (template_app (template_var 0, template_var 3), template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.RECT_eq_REC_tproof",
     "[| trimono ?body; wf ?V; ?pre ?a ?x;
         !!f arb x.
            [| !!arb' x'.
                  [| ?pre arb' x'; (x', x) : ?V |] ==> f x' <= ?M arb' x';
               ?pre arb x; REC\<^sub>T ?body = f |]
            ==> ?body f x <= ?M arb x;
         ?M ?a ?x ~= top |]
      ==> REC\<^sub>T ?body ?x = REC ?body ?x &
          REC\<^sub>T ?body ?x <= ?M ?a ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_var 0, template_var 2),
                template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 5, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_var 0, template_var 2),
                 template_var 1)))
           ))),
    ("RefineG_Recursion.RECT_rule_arb3",
     "[| trimono ?body; wf ?V; ?pre ?arb ?arc ?ard ?x;
         !!f arb arc ard x.
            [| !!arb' arc' ard' x'.
                  [| ?pre arb' arc' ard' x'; (x', x) : ?V |]
                  ==> f x' <= ?M arb' arc' ard' x';
               ?pre arb arc ard x; f <= REC\<^sub>T ?body |]
            ==> ?body f x <= ?M arb arc ard x |]
      ==> REC\<^sub>T ?body ?x <= ?M ?arb ?arc ?ard ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 7)),
        template_predicate
         (template_app (template_hole 10, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_var 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 7), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1)))),
    ("RefineG_Recursion.lfp_induct_pointwise",
     "[| !!a x.
            chain_admissible (%b. ALL a x. ?pre a x --> ?post a x (b x));
         !!a x. ?pre a x --> ?post a x bot; mono ?B; ?pre ?a ?x;
         !!f a x.
            [| !!a' x'. ?pre a' x' ==> ?post a' x' (f x'); ?pre a x;
               f <= lfp ?B |]
            ==> ?post a x (?B f x) |]
      ==> ?post ?a ?x (lfp ?B ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           )))]
