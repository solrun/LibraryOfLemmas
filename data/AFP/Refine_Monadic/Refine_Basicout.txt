Loading theory "Automatic_Refinement.Foldi" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
Loading theory "Automatic_Refinement.Prio_List" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Loading theory "Automatic_Refinement.Refine_Util_Bootstrap1" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  foldli :: "'b list => ('a => bool) => ('b => 'a => 'a) => 'a => 'a"
infix 1 ##
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
signature PRIO_LIST =
  sig
    type T
    val add_after: T -> item -> item -> T
    val add_before: T -> item -> item -> T
    val add_first: T -> item -> T
    val add_last: T -> item -> T
    val contains: T -> item -> bool
    val delete: item -> T -> T
    val dest: T -> item list
    val empty: T
    type item
    val merge: T * T -> T
    val merge': T * T -> item list * T
    val prio_of: (item -> bool) -> (item * item -> bool) -> T -> int
  end
functor Prio_List (sig val eq: item * item -> bool type item end): PRIO_LIST
### theory "Automatic_Refinement.Refine_Util_Bootstrap1"
### 0.034s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mk_Term_Antiquot" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
### theory "Automatic_Refinement.Prio_List"
### 0.035s elapsed time, 0.137s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mpat_Antiquot" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
val mk_term_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
### theory "Automatic_Refinement.Mk_Term_Antiquot"
### 0.080s elapsed time, 0.297s cpu time, 0.024s GC time
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "HOL-Library.Monad_Syntax")
### theory "Automatic_Refinement.Foldi"
### 0.129s elapsed time, 0.499s cpu time, 0.024s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc" via "HOL-Library.Multiset")
structure Eisbach_Rule_Insts: sig end
val mpat_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
### theory "Automatic_Refinement.Mpat_Antiquot"
### 0.131s elapsed time, 0.509s cpu time, 0.024s GC time
Loading theory "Automatic_Refinement.Refine_Util" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.088s elapsed time, 0.362s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic")
### theory "HOL-Library.Monad_Syntax"
### 0.047s elapsed time, 0.167s cpu time, 0.031s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.097s elapsed time, 0.385s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.439s elapsed time, 1.709s cpu time, 0.114s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### ML warning (line 563 of "$AFP/Automatic_Refinement/Lib/Refine_Util.thy"):
### Handler catches all exceptions.
infix 0 THEN_ELSE'
infix 0 THEN_ELSE_COMB'
infix 1 THEN_ALL_NEW_FWD
infix 1 THEN_INTERVAL
infix 2 ORELSE_INTERVAL
infix 3 ->>
type itactic = int -> int -> tactic
type tactic' = int -> tactic
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val has_Var: term -> bool
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val prefer_tac: int -> tactic
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    type tactic' = int -> tactic
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
signature REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val HOL_concl_conv: (Proof.context -> conv) -> Proof.context -> conv
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val OF_fst: thm list -> thm list -> thm
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RS_fst: thm -> thm list -> thm
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val abs_def: Proof.context -> thm -> thm
    val anorm_term: term -> term
    val anorm_typ: typ -> typ
    val apply_configs:
       ('a Config.T * 'a) list -> Proof.context -> Proof.context
    val build_res_net: thm list -> (int * thm) Net.net
    val cfg_trace_f_tac_conv: bool Config.T
    val changed_rule: (thm -> thm) -> thm -> thm
    val dest_itselfT: typ -> typ
    val dummify_tvars: term -> term
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val f_tac_conv:
       Proof.context -> (term -> term) -> (Proof.context -> tactic) -> conv
    val fcomb_conv: conv -> conv
    val fix_conv: Proof.context -> conv -> conv
    val fix_left_tuple_from_Ts:
       string -> typ list -> Proof.context -> term * Proof.context
    val fixup_vars: cterm -> thm -> thm
    val fixup_vars_conv: conv -> conv
    val fixup_vars_conv': (Proof.context -> conv) -> Proof.context -> conv
    val fo_matches: theory -> cterm -> term -> bool
    val fo_matchp: theory -> cterm -> term -> term list option
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val fold_binop_left:
       ('a -> 'b * 'a) ->
         ('c -> 'a -> 'b * 'a) ->
           ('b * 'b -> 'b) -> 'c list -> 'a -> 'b * 'a
    val fsub_conv: (Proof.context -> conv) -> Proof.context -> conv
    val ftop_conv: (Proof.context -> conv) -> Proof.context -> conv
    val has_Var: term -> bool
    val import_conv: (Proof.context -> conv) -> Proof.context -> conv
    val import_cterms:
       bool -> cterm list -> Proof.context -> cterm list * Proof.context
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val instantiate_tuples:
       Proof.context -> (indexname * typ) list -> thm -> thm
    val instantiate_tuples_from_term_tac: Proof.context -> term -> tactic
    val instantiate_tuples_subgoal_tac: Proof.context -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val ite_conv: conv -> conv -> conv -> conv
    val lambda_tuple: term list -> term -> term
    val list_binop_left: 'a -> ('a * 'a -> 'a) -> 'a list -> 'a
    val list_prodT_left: typ list -> typ
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val mk_compN: int -> term -> term -> term
    val mk_compN1: typ list -> int -> term -> term -> term
    val mk_ltuple: term list -> term
    val monitor_conv: string -> conv -> conv
    val monitor_conv':
       string -> (Proof.context -> conv) -> Proof.context -> conv
    val order_by: ('a * 'a -> order) -> ('b -> 'a) -> 'b list -> 'b list
    val parse_bool_config: string -> bool Config.T -> bool context_parser
    val parse_bool_config':
       string ->
         bool Config.T ->
           Token.T list -> (bool Config.T * bool) * Token.T list
    val parse_paren_list: 'a context_parser -> 'a list context_parser
    val parse_paren_list':
       'a parser -> Token.T list -> 'a list * Token.T list
    val parse_paren_lists: 'a context_parser -> 'a list list context_parser
    val pat_conv: cterm -> (Proof.context -> conv) -> Proof.context -> conv
    val pat_conv':
       cterm -> (string -> Proof.context -> conv) -> Proof.context -> conv
    val prefer_tac: int -> tactic
    val repeat_rule: (thm -> thm) -> thm -> thm
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val shift_lambda_left: thm -> thm
    val shift_lambda_leftN: int -> thm -> thm
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val strip_prodT_left: typ -> typ list
    val subsume_sort: ('a -> term) -> theory -> 'a list -> 'a list
    val subsume_sort_gen:
       ('a -> term) -> Context.generic -> 'a list -> 'a list
    type tactic' = int -> tactic
    val trace_conv: conv
    val trade_rule:
       (Proof.context -> thm -> thm) -> Proof.context -> thm -> thm
    val try_rule: (thm -> thm) -> thm -> thm
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Refine_Util: REFINE_UTIL
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val REPEAT_DETERM' = fn: tactic' -> tactic'
val RSm = fn: Proof.context -> thm -> thm -> thm
val NTIMES' = fn: tactic' -> int -> tactic'
val fo_resolve_tac = fn: thm list -> Proof.context -> tactic'
val SINGLE_INTERVAL = fn: itactic -> tactic'
val insert_subgoals_tac = fn: cterm list -> tactic'
val insert_subgoal_tac = fn: cterm -> tactic'
val THEN_ALL_NEW_FWD = fn: tactic' * tactic' -> tactic'
val TRY_SOLVED' = fn: tactic' -> tactic'
val INTERVAL_FWD = fn: tactic' -> int -> int -> tactic
val IF_EXGOAL = fn: (int -> tactic) -> tactic'
val eqsubst_inst_tac = fn:
   Proof.context ->
     bool ->
       int list ->
         ((indexname * Position.T) * string) list -> thm -> int -> tactic
val fo_rtac = fn: thm -> Proof.context -> tactic'
val TRADE = fn: (Proof.context -> tactic') -> Proof.context -> tactic'
val is_TFree = fn: typ -> bool
val ALL_GOALS_FWD = fn: tactic' -> tactic
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val CAN' = fn: tactic' -> tactic'
val WITH_concl = fn: (term -> tactic') -> tactic'
val is_Abs = fn: term -> bool
val COND' = fn: (term -> bool) -> tactic'
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val REPEAT_ALL_NEW_FWD = fn: tactic' -> tactic'
val CASES' = fn: (tactic' * tactic) list -> tactic'
val APPEND_LIST' = fn: tactic' list -> tactic'
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val is_def_thm = fn: thm -> bool
val THEN_INTERVAL = fn: itactic * itactic -> itactic
val rprems_tac = fn: Proof.context -> tactic'
val WITH_subgoal = fn: (term -> tactic') -> tactic'
val is_Comb = fn: term -> bool
val THEN_ELSE_COMB' = fn:
   tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') -> tactic'
val eqsubst_inst_meth = fn: (Proof.context -> Proof.method) context_parser
val elim_all_tac = fn: Proof.context -> thm list -> tactic
val ->> = fn:
   'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
     'b context_parser
val ALL_GOALS_FWD' = fn: tactic' -> tactic'
val prefer_tac = fn: int -> tactic
val rprem_tac = fn: int -> Proof.context -> tactic'
val has_Var = fn: term -> bool
val REPEAT' = fn: tactic' -> tactic'
val THEN_ELSE' = fn: tactic' * (tactic' * tactic') -> tactic'
val CONCL_COND' = fn: (term -> bool) -> tactic'
val ORELSE_INTERVAL = fn: itactic * itactic -> itactic
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
### theory "Automatic_Refinement.Refine_Util"
### 0.334s elapsed time, 1.355s cpu time, 0.090s GC time
Loading theory "Automatic_Refinement.Anti_Unification" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature ANTI_UNIFICATION =
  sig
    val anti_unify: term * term -> term
    val anti_unifyT: typ * typ -> typ_env -> typ * typ_env
    val anti_unify_env: term * term -> env -> term * env
    val anti_unify_list: term list -> term
    val empty: env
    val empty_term: term_env
    val empty_typ: typ_env
    type env = typ_env * term_env
    val specialize_net_tac: Proof.context -> (int * thm) Net.net -> tactic'
    val specialize_tac: Proof.context -> thm list -> tactic'
    type term_env
    type typ_env
  end
structure Anti_Unification: ANTI_UNIFICATION
### theory "Automatic_Refinement.Anti_Unification"
### 0.085s elapsed time, 0.331s cpu time, 0.047s GC time
Loading theory "Automatic_Refinement.Attr_Comb" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.487s elapsed time, 1.956s cpu time, 0.137s GC time
Loading theory "Automatic_Refinement.Autoref_Data" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
signature AUTOREF_DATA =
  sig
    type T
    exception exCIRCULAR
    exception exNULL
    val get: Proof.context -> T
    val init: Proof.context -> Proof.context
  end
functor Autoref_Data (
  sig
    type T
    val compute: Proof.context -> T
    val prereq: (Proof.context -> Proof.context) list
  end
  ): 
  AUTOREF_DATA
### theory "Automatic_Refinement.Autoref_Data"
### 0.030s elapsed time, 0.118s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Indep_Vars" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
infixr 5 THEN_ATTR
infixr 4 ELSE_ATTR
signature ATTR_COMB =
  sig
    exception ATTR_EXC of string
    val CHECK_PREPARE:
       (Context.generic * thm -> bool) -> attribute -> attribute
    val COND_attr: (Context.generic * thm -> bool) -> attribute
    val EFF_ATTR: (Context.generic * thm -> 'a) -> attribute
    val ELSE_ATTR: attribute * attribute -> attribute
    val ID_ATTR: attribute
    val IGNORE_THM: attribute -> attribute
    val ITE_ATTR: attribute -> attribute -> attribute -> attribute
    val ITE_ATTR': attribute -> attribute -> (exn -> attribute) -> attribute
    val NO_ATTR: attribute
    val RPT1_ATTR: attribute -> attribute
    val RPT_ATTR: attribute -> attribute
    val RS_attr: thm -> attribute
    val RSm_attr: thm -> attribute
    val THEN_ATTR: attribute * attribute -> attribute
    val TRACE_ATTR: string -> attribute -> attribute
    val TRY_ATTR: attribute -> attribute
    val WARN_ATTR: Context.generic -> string -> attribute
  end
structure Attr_Comb: ATTR_COMB
### theory "Automatic_Refinement.Attr_Comb"
### 0.062s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Named_Sorted_Thms" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
### theory "HOL-Library.Infinite_Set"
### 0.312s elapsed time, 1.265s cpu time, 0.106s GC time
Loading theory "Automatic_Refinement.Mk_Record_Simp" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Found termination order: "size_list size <*mlex*> {}"
signature NAMED_SORTED_THMS =
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    val member: Proof.context -> thm -> bool
    val setup: theory -> theory
  end
functor Named_Sorted_Thms (
  sig
    val description: string
    val name: binding
    val sort: Context.generic -> thm list -> thm list
    val transform: Context.generic -> thm -> thm list
  end
  ): 
  NAMED_SORTED_THMS
signature INDEP_VARS = sig val indep_tac: Proof.context -> tactic' end
structure Indep_Vars: INDEP_VARS
### theory "Automatic_Refinement.Named_Sorted_Thms"
### 0.034s elapsed time, 0.140s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Tagged_Solver" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
### theory "Automatic_Refinement.Indep_Vars"
### 0.049s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Select_Solve" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
val mk_record_simp = fn: Context.generic -> thm -> thm
### theory "Automatic_Refinement.Mk_Record_Simp"
### 0.042s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
signature SELECT_SOLVE =
  sig
    val AS_FIRSTGOAL: tactic -> tactic'
    val IF_SUBGOAL_SOLVED: tactic -> tactic -> tactic -> tactic
    val PREFER_SOLVED: tactic -> tactic
    val REPEAT_SOLVE_FWD_SELECT: Proof.context -> int -> tactic' -> tactic'
    val SELECT_FIRST: Proof.context -> tactic -> tactic
    val TRY_SOLVE_FWD: int -> tactic -> tactic
  end
structure Select_Solve: SELECT_SOLVE
### theory "Automatic_Refinement.Select_Solve"
### 0.108s elapsed time, 0.413s cpu time, 0.092s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
signature TAGGED_SOLVER =
  sig
    val add_triggers:
       string -> thm list -> morphism -> Context.generic -> Context.generic
    val cfg_full: bool Config.T
    val cfg_keep: bool Config.T
    val cfg_step: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_solver:
       string -> morphism -> Context.generic -> Context.generic
    val get_potential_solvers: Proof.context -> int -> thm -> solver list
    val get_potential_tacs: Proof.context -> int -> thm -> tactic' list
    val get_solvers: Proof.context -> solver list
    val lookup_solver: string -> Context.generic -> solver option
    val pretty_solvers: Proof.context -> Pretty.T
    val solve_full_keep_tac: Proof.context -> tactic'
    val solve_full_step_tac: Proof.context -> tactic'
    val solve_full_tac: Proof.context -> tactic'
    val solve_greedy_keep_tac: Proof.context -> tactic'
    val solve_greedy_step_tac: Proof.context -> tactic'
    val solve_greedy_tac: Proof.context -> tactic'
    val solve_tac: Proof.context -> tactic'
    type solver = thm list * string * string * (Proof.context -> tactic')
    val tac_of_solver: Proof.context -> solver -> tactic'
  end
structure Tagged_Solver: TAGGED_SOLVER
### theory "Automatic_Refinement.Tagged_Solver"
### 0.126s elapsed time, 0.490s cpu time, 0.092s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.395s elapsed time, 1.586s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
### theory "HOL-Library.Set_Algebras"
### 0.381s elapsed time, 1.367s cpu time, 0.491s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Option_ord"
### 0.509s elapsed time, 1.879s cpu time, 0.491s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.109s elapsed time, 4.236s cpu time, 0.786s GC time
Found termination order: "size <*mlex*> {}"
val mk_2elem_list = fn: term -> term -> term
val mk_compr = fn: term -> term -> term
val test1 = "[1, 2]": cterm
val test2 = "{x: {1, 2, 3}. 2 < x}": cterm
val test3 =
   Const ("Groups.plus_class.plus", "nat => nat => nat") $ Bound 0 $
     Bound 0:
   term
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
val dest_pair_singleton = fn: term -> term
val dest_nat_pair_singleton = fn: term -> term * term
val dest_pair_singleton_T = fn: term -> (term * typ) * (term * typ)
val dest_pair_lambda = fn: term -> string * typ * string * typ * term * term
val foo = fn: term -> term * term * int * term * term
"True"
  :: "bool"
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.848s elapsed time, 3.188s cpu time, 0.296s GC time
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.118s elapsed time, 6.379s cpu time, 1.320s GC time
Loading theory "Draft.Templates" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Refine_BasicMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.800s elapsed time, 1.968s cpu time, 0.918s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.885s elapsed time, 10.578s cpu time, 2.818s GC time
Loading theory "HOL-ex.Quicksort" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "length <*mlex*> {}"
### theory "HOL-ex.Quicksort"
### 0.316s elapsed time, 0.467s cpu time, 0.076s GC time
Loading theory "Automatic_Refinement.Misc" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
(0 < length ?xs) = (?xs ~= [])
locale Assoc
  fixes f :: "'a => 'a => 'a"
  assumes "Assoc f"
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### Ignoring duplicate rewrite rule:
### dom (%x. Some (?f1 x)) == UNIV
consts
  filter_rev_aux :: "'a list => ('a => bool) => 'a list => 'a list"
### Missing patterns in function definition:
### !!a v va. zipf a (v # va) [] = undefined
### !!a v va. zipf a [] (v # va) = undefined
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Code generator: dropping subsumed code equation
### quicksort (?x # ?xs) ==
### quicksort (filter (%y. y < ?x) ?xs) @
### [?x] @ quicksort (filter ((<=) ?x) ?xs)
### Code generator: dropping subsumed code equation
### quicksort [] == []
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
"merge"
  :: "'a"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  the_default :: "'a => 'a option => 'a"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |] ==> x <= Sup A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> Sup A <= z"
### theory "Automatic_Refinement.Misc"
### 3.061s elapsed time, 4.230s cpu time, 1.584s GC time
Loading theory "Automatic_Refinement.Refine_Lib" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
signature COND_REWR_CONV =
  sig
    val cond_rewr_conv:
       (Proof.context -> tactic) -> thm -> Proof.context -> conv
    val cond_rewrs_conv:
       (Proof.context -> tactic) -> thm list -> Proof.context -> conv
  end
structure Cond_Rewr_Conv: COND_REWR_CONV
signature REVERT_ABBREV =
  sig
    val revert_abbrev: string -> theory -> theory
    val revert_abbrev_matching: (string -> bool) -> theory -> theory
  end
structure Revert_Abbrev: REVERT_ABBREV
### theory "Automatic_Refinement.Refine_Lib"
### 0.678s elapsed time, 0.745s cpu time, 0.074s GC time
Loading theory "Automatic_Refinement.Autoref_Phases" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
Loading theory "Automatic_Refinement.Autoref_Tagging" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
Loading theory "Automatic_Refinement.Relators" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity" via "Automatic_Refinement.Param_Tool")
Loading theory "Draft.Refine_Mono_Prover" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc")
structure Autoref_Tag_Defs: NAMED_THMS
structure Refine_Relators_Thms:
  sig structure rel_comb_def_rules: NAMED_THMS end
signature AUTOREF_PHASES =
  sig
    val all_phases_tac: Proof.context -> tactic'
    val cfg_debug: bool Config.T
    val cfg_keep_goal: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_phase:
       string -> morphism -> Context.generic -> Context.generic
    val get_phase: string -> Proof.context -> (string * int * phase) option
    val get_phases: Proof.context -> (string * int * phase) list
    val init_data: Proof.context -> Proof.context
    val init_phase: string * int * phase -> Proof.context -> Proof.context
    val init_phases:
       (string * int * phase) list -> Proof.context -> Proof.context
    type phase =
       {analyze: Proof.context -> int -> int -> thm -> bool,
        init: Proof.context -> Proof.context,
        pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T,
        tac: Proof.context -> int -> int -> tactic}
    val phase_tac: string * int * phase -> Proof.context -> tactic'
    val phase_tacN: string -> Proof.context -> tactic'
    val phases_tac: (string * int * phase) list -> Proof.context -> tactic'
    val phases_tacN: string list -> Proof.context -> tactic'
    val register_phase:
       string ->
         int -> phase -> morphism -> Context.generic -> Context.generic
  end
structure Autoref_Phases: AUTOREF_PHASES
### theory "Automatic_Refinement.Autoref_Phases"
### 0.065s elapsed time, 0.258s cpu time, 0.000s GC time
signature REFINE_MONO_PROVER =
  sig
    val add_mono_thm: thm -> Context.generic -> Context.generic
    val decl_setup: morphism -> Context.generic -> Context.generic
    val declare_mono_triggers:
       thm list -> morphism -> Context.generic -> Context.generic
    val del_mono_thm: thm -> Context.generic -> Context.generic
    val gen_split_cases_tac: pat_extractor -> Proof.context -> tactic'
    val get_mono_thms: Proof.context -> thm list
    val mono_tac: Proof.context -> tactic'
    type pat_extractor =
       term ->
         (term * ((Proof.context -> conv) -> Proof.context -> conv)) option
    val setup: theory -> theory
    val split_cases_tac: Proof.context -> tactic'
    val untriggered_mono_tac: Proof.context -> tactic'
  end
structure Refine_Mono_Prover: REFINE_MONO_PROVER
locale mono_setup_loc
  fixes le :: "'a => 'a => bool"
  assumes "mono_setup_loc le"
signature AUTOREF_TAGGING =
  sig
    val ABS_beta_conv: Proof.context -> conv
    val is_valid_tagged: term -> bool
    val lambda': string * typ -> term -> term
    val list_APP: term * term list -> term
    val mk_ABS_conv: Proof.context -> conv
    val mk_ANNOT_conv: cterm -> conv
    val mk_APP: term -> term -> term
    val mk_APP_conv: conv
    val mk_OP: term -> term
    val mk_OP_conv: conv
    val mk_rel_ANNOT_conv: Proof.context -> cterm -> conv
    val rhs_conv: (Proof.context -> conv) -> Proof.context -> conv
    val strip_app: term -> term * term list
    val term_of_tagged: term -> term
    val untag_conv: Proof.context -> conv
  end
structure Autoref_Tagging: AUTOREF_TAGGING
### theory "Draft.Refine_Mono_Prover"
### 0.098s elapsed time, 0.362s cpu time, 0.000s GC time
### theory "Automatic_Refinement.Autoref_Tagging"
### 0.098s elapsed time, 0.364s cpu time, 0.000s GC time
val it = "foo == ANNOT foo bar": thm
val it = "foo == foo ::: bar": thm
"set_rel"
  :: "('a * 'b) set => ('a set * 'b set) set"
structure relator_props: NAMED_THMS
structure solve_relator_props: NAMED_THMS
### ML warning (line 560 of "$AFP/Automatic_Refinement/Parametricity/Relators.thy"):
### Handler catches all exceptions.
signature RELATORS =
  sig
    val declare_natural_relator:
       string * string -> Context.generic -> Context.generic
    val dest_prodrel: term -> term * term
    val dest_relT: typ -> typ * typ
    val is_prodrel: term -> bool
    val list_prodrel_left: term list -> term
    val list_rel: term list -> term -> term
    val list_relAPP: term list -> term -> term
    val mk_fun_rel: term -> term -> term
    val mk_natural_relator:
       Proof.context -> term list -> string -> term option
    val mk_prodrel: term * term -> term
    val mk_relAPP: term -> term -> term
    val mk_relT: typ * typ -> typ
    val natural_relator_of: Proof.context -> string -> string option
    val rel_absT: term -> typ
    val rel_concT: term -> typ
    val remove_natural_relator: string -> Context.generic -> Context.generic
    val setup: theory -> theory
    val strip_prodrel_left: term -> term list
    val strip_relAPP: term -> term list * term
  end
structure Relators: RELATORS
val it = "Ra \<times>\<^sub>r \<langle>Rb\<rangle>option_rel": cterm
val it =
   "\<langle>Id\<rangle>option_rel \<rightarrow>
    \<langle>Id\<rangle>list_rel":
   cterm
### theory "Automatic_Refinement.Relators"
### 0.608s elapsed time, 0.914s cpu time, 0.068s GC time
Loading theory "Automatic_Refinement.Param_Tool" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
signature PARAMETRICITY =
  sig
    val add_dflt: thm -> Context.generic -> Context.generic
    val add_dflt_attr: attribute
    val adjust_arity: int -> thm -> thm
    val adjust_arity_tac: int -> Proof.context -> tactic'
    val asm_param_tac: Proof.context -> tactic'
    val cfg_single_step: bool Config.T
    val cfg_use_asm: bool Config.T
    val del_dflt: thm -> Context.generic -> Context.generic
    val del_dflt_attr: attribute
    val dest_param_goal: int -> thm -> param_ruleT
    val dest_param_rule: thm -> param_ruleT
    val dest_param_term: term -> param_ruleT
    val fo_rule: thm -> thm
    val get_dflt: Proof.context -> param_net
    val net_add: thm -> param_net -> param_net
    val net_add_int: Context.generic -> thm -> param_net -> param_net
    val net_del: thm -> param_net -> param_net
    val net_del_int: Context.generic -> thm -> param_net -> param_net
    val net_empty: param_net
    val net_tac: param_net -> Proof.context -> tactic'
    type param_net
    type param_ruleT =
       {R: term, arity: int, lhs: term, rhs: term, rhs_head: term}
    val param_rule_tac: Proof.context -> thm -> tactic'
    val param_rules_tac: Proof.context -> thm list -> tactic'
    val prepare_tac: Proof.context -> tactic'
    val safe_fun_relD_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val unlambda_tac: Proof.context -> tactic'
  end
structure Parametricity: PARAMETRICITY
val cnv_relAPP = fn: term -> term
val to_relAPP_conv = fn: Proof.context -> conv
val to_relAPP_attr = fn: attribute
### theory "Automatic_Refinement.Param_Tool"
### 0.097s elapsed time, 0.097s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Param_HOL" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  is_Inl :: "'a + 'b => bool"
consts
  is_Inr :: "'b + 'a => bool"
consts
  list_all2_alt :: "('a => 'b => bool) => 'a list => 'b list => bool"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  list_all_rec :: "('a => bool) => 'a list => bool"
consts
  list_ex_rec :: "('a => bool) => 'a list => bool"
"list_update"
  :: "'a list => nat => 'a => 'a list"
### theory "Automatic_Refinement.Param_HOL"
### 0.565s elapsed time, 0.682s cpu time, 0.153s GC time
Loading theory "Automatic_Refinement.Parametricity" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
### theory "Automatic_Refinement.Parametricity"
### 0.020s elapsed time, 0.022s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Id_Ops" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel")
val limit_depth = fn: int -> term -> term
val depth_of = fn: term -> int
val depth_of_lhs = fn: thm -> int
val depth_of_rhs = fn: thm -> int
val pretty_rewrite = fn: Proof.context -> thm -> thm -> Pretty.T
val index_rewr_thms = fn: thm list -> thm Item_Net.T
val net_rewr_tac = fn:
   thm Item_Net.T -> (term -> term) -> (conv -> 'a -> conv) -> 'a -> tactic'
val it = 4: int
val it = "(1::'a) # \<dots> # \<dots>": cterm
signature AUTOREF_ID_OPS =
  sig
    val cfg_ss_id_op: bool Config.T
    val cfg_trace_failed_id: bool Config.T
    val cfg_trace_id_tags: bool Config.T
    val cfg_trace_intf_unif: bool Config.T
    val cfg_trace_patterns: bool Config.T
    val cfg_use_id_tags: bool Config.T
    val decl_derived_typing:
       bool -> term -> term -> Context.generic -> Context.generic
    val dest_const_intf: term -> term * term
    val dest_const_intf_thm: thm -> term * term
    val has_typ_thms: Proof.context -> term -> bool
    val id_phase: Autoref_Phases.phase
    val id_tac: Proof.context -> tactic'
    val mk_const_intf: term -> term -> term
    val mk_const_intf_thm: Proof.context -> term -> term -> thm
    val setup: theory -> theory
    val typ_thms_of_seq: Proof.context -> term -> thm Seq.seq
  end
structure Autoref_Id_Ops: AUTOREF_ID_OPS
signature AUTOREF_REL_INF =
  sig
    val cfg_sbias: int Config.T
    val roi_phase: Autoref_Phases.phase
    val roi_step_tac: Proof.context -> tactic'
    val roi_tac: Proof.context -> tactic'
    val setup: theory -> theory
  end
structure Autoref_Rel_Inf: AUTOREF_REL_INF
### theory "Automatic_Refinement.Autoref_Id_Ops"
### 0.521s elapsed time, 0.581s cpu time, 0.065s GC time
Loading theory "Automatic_Refinement.Autoref_Fix_Rel" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate")
val it = [2, 3, 4, 5]: int list
structure Autoref_Rules: NAMED_THMS
### ML warning (line 350 of "$AFP/Automatic_Refinement/Tool/Autoref_Fix_Rel.thy"):
### Value identifier (phi) has not been referenced.
signature AUTOREF_FIX_REL =
  sig
    val add_hom_rule: thm -> Context.generic -> Context.generic
    val add_tyrel_rule: thm -> Context.generic -> Context.generic
    val analyze: Proof.context -> int -> int -> thm -> bool
    val compute_hom_net: thm_pairs -> Proof.context -> hom_net
    type constraint = (term * term) list * (term * term)
    val constraint_of_thm: Proof.context -> thm -> constraint
    val constraints_of_goal: int -> thm -> (term * term) list
    val constraints_of_term: term -> (term * term) list
    val declare_prio:
       string -> term -> prio_relpos -> local_theory -> local_theory
    val del_hom_rule: thm -> Context.generic -> Context.generic
    val del_tyrel_rule: thm -> Context.generic -> Context.generic
    val delete_prio: string -> local_theory -> local_theory
    val get_hom_rules: Proof.context -> thm list
    val get_tyrel_rules: Proof.context -> thm list
    val guess_relators_tac: Proof.context -> itactic
    type hom_net = (int * thm) Net.net
    val insert_CONSTRAINTS_tac: Proof.context -> tactic'
    val insert_tyrel_tac: Proof.context -> int -> int -> tactic'
    val internal_hom_tac: Proof.context -> itactic
    val internal_solve_tac: Proof.context -> itactic
    val internal_spec_tac: Proof.context -> itactic
    val mk_CONSTRAINT: term * term -> term
    val mk_CONSTRAINT_rl: Proof.context -> constraint -> thm
    val phase: Autoref_Phases.phase
    val pretty_constraint: Proof.context -> constraint -> Pretty.T
    val pretty_constraints: Proof.context -> constraint list -> Pretty.T
    val pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val pretty_thm_pair:
       Proof.context -> constraint option * thm -> Pretty.T
    val pretty_thm_pairs: Proof.context -> thm_pairs -> Pretty.T
    val print_prios: Proof.context -> unit
    datatype prio_relpos
    = PR_AFTER of string | PR_BEFORE of string | PR_FIRST | PR_LAST
    val setup: theory -> theory
    val solve_step_tac: Proof.context -> tactic'
    val solve_tyrel_tac: Proof.context -> tactic'
    type thm_pairs = (constraint option * thm) list
    val thm_pairsD_get: Proof.context -> thm_pairs
    val thm_pairsD_init: Proof.context -> Proof.context
    val try_solve_tac: Proof.context -> tactic'
    val tyrel_tac: Proof.context -> itactic
  end
structure Autoref_Fix_Rel: AUTOREF_FIX_REL
### theory "Automatic_Refinement.Autoref_Fix_Rel"
### 0.238s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Translate" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
Loading theory "Automatic_Refinement.Autoref_Relator_Interface" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
signature AUTOREF_RELATOR_INTERFACE =
  sig
    val declare_rel_intf: thm -> Context.generic -> Context.generic
    val delete_rel_intf: thm -> Context.generic -> Context.generic
    val get_rel_intfs: Proof.context -> thm list
    val intf_of_rel: Proof.context -> term -> term
    val itype_of_rule: Proof.context -> thm -> (term * term) option
    val list_invented_intf: term -> term list
    val mk_intfAPP: term -> term -> term
    val setup: theory -> theory
    val warn_invented_intf: Proof.context -> term -> unit
  end
structure Autoref_Relator_Interface: AUTOREF_RELATOR_INTERFACE
### theory "Automatic_Refinement.Autoref_Relator_Interface"
### 0.047s elapsed time, 0.094s cpu time, 0.000s GC time
signature AUTOREF_TACTICALS =
  sig
    val COND'': (int -> thm -> bool) -> tactic' -> tactic' -> tactic'
    val IF_SOLVED: tactic' -> tactic' -> tactic' -> tactic'
    val REPEAT_INTERVAL: tactic' -> itactic
    val REPEAT_ON_SUBGOAL: tactic' -> tactic'
    val is_defer_cond: int -> thm -> bool
    val is_prefer_cond: int -> thm -> bool
  end
signature AUTOREF_TRANSLATE =
  sig
    val add_post_rule: thm -> Context.generic -> Context.generic
    val compute_trans_net:
       Autoref_Fix_Rel.thm_pairs -> Proof.context -> trans_net
    val delete_post_rule: thm -> Context.generic -> Context.generic
    val get_post_rules: Proof.context -> thm list
    val setup: theory -> theory
    val side_dbg_tac: Proof.context -> tactic'
    val side_tac: Proof.context -> tactic'
    val trans_analyze: Proof.context -> int -> int -> thm -> bool
    val trans_dbg_step_tac: Proof.context -> tactic'
    type trans_net = (int * thm) Net.net
    val trans_phase: Autoref_Phases.phase
    val trans_pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val trans_step_only_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> itactic
  end
structure Autoref_Tacticals: AUTOREF_TACTICALS
structure Autoref_Translate: AUTOREF_TRANSLATE
### theory "Automatic_Refinement.Autoref_Translate"
### 0.096s elapsed time, 0.144s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Gen_Algo" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
structure Autoref_Gen_Algo:
  sig
    val decl_setup: morphism -> Context.generic -> Context.generic
    structure ga_side_thms: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_ga_op_tac: Proof.context -> int -> tactic
    val side_ga_tac: Proof.context -> int -> tactic
    val transform_ga_rule: Context.generic -> thm -> thm list
  end
### theory "Automatic_Refinement.Autoref_Gen_Algo"
### 0.043s elapsed time, 0.043s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Tool" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
structure Autoref_Debug:
  sig
    val print_thm_pairs: Proof.context -> unit
    val print_thm_pairs_matching: Proof.context -> cterm -> unit
  end
locale autoref_syn
### theory "Automatic_Refinement.Autoref_Tool"
### 0.439s elapsed time, 0.478s cpu time, 0.053s GC time
Loading theory "Automatic_Refinement.Autoref_Bindings_HOL" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
structure Autoref_Struct_Expand:
  sig
    structure autoref_struct_expand: NAMED_THMS
    val decl_setup: morphism -> Context.generic -> Context.generic
    val expand_tac: Proof.context -> int -> tactic
    val setup: theory -> theory
  end
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
"(o)"
  :: "('a => 'b) => ('c => 'a) => 'c => 'b"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Adding overloaded interface type to constant: ?a ::\<^sub>i i_of_rel Id
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Automatic_Refinement.Autoref_Bindings_HOL"
### 1.681s elapsed time, 1.780s cpu time, 0.124s GC time
Loading theory "Automatic_Refinement.Automatic_Refinement" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.Refine_Misc")
### theory "Automatic_Refinement.Automatic_Refinement"
### 0.043s elapsed time, 0.082s cpu time, 0.047s GC time
Loading theory "Draft.Refine_Misc" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic")
locale galois_connection
  fixes \<alpha> :: "'a => 'b"
    and \<gamma> :: "'b => 'a"
  assumes "galois_connection \<alpha> \<gamma>"
### Ignoring duplicate rewrite rule:
### map_to_set Map.empty == {}
### theory "Draft.Refine_Misc"
### 0.385s elapsed time, 0.385s cpu time, 0.000s GC time
Loading theory "Draft.RefineG_Domain" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.RefineG_Recursion")
Loading theory "Draft.RefineG_Transfer" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic" via "Draft.RefineG_Recursion")
structure RefineG_Transfer:
  sig
    structure Post_Processors: THEORY_DATA
    structure Post_Simp: GENERIC_DATA
    val add_post_processor:
       Symtab.key -> (Proof.context -> tactic') -> theory -> theory
    val add_post_simps: thm list -> Context.generic -> Context.generic
    val align_tac: Proof.context -> tactic'
    val del_post_simps: thm list -> Context.generic -> Context.generic
    val delete_post_processor: Symtab.key -> theory -> theory
    val get_post_processors:
       theory -> (Symtab.key * (Proof.context -> tactic')) list
    val get_post_simp_rules: Context.generic -> thm list
    val get_post_ss: Proof.context -> Proof.context
    val post_process_tac: Proof.context -> tactic'
    val post_simps_op:
       (Proof.context * 'a -> Proof.context) ->
         'a -> Context.generic -> Context.generic
    structure post_subst: NAMED_THMS
    val post_subst_tac: Proof.context -> int -> tactic
    val post_transfer_tac: thm list -> Proof.context -> int -> tactic
    val setup: theory -> theory
    structure transfer: NAMED_THMS
    val transfer_tac: thm list -> Proof.context -> int -> thm -> thm Seq.seq
  end
locale transfer
  fixes \<alpha> :: "'c => 'a"
locale ordered_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_transfer \<alpha>"
locale ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_ccpo_transfer \<alpha>"
### theory "Draft.RefineG_Transfer"
### 0.153s elapsed time, 0.362s cpu time, 0.103s GC time
Loading theory "Draft.RefineG_Assert" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic")
locale generic_Assert
  fixes bind :: "'mu => (unit => 'ma) => 'ma"
    and return :: "unit => 'mu"
    and ASSERT :: "bool => 'mu"
    and ASSUME :: "bool => 'mu"
  assumes "generic_Assert bind return ASSERT ASSUME"
locale transfer_generic_Assert
  fixes cbind :: "'muc => (unit => 'mac) => 'mac"
    and creturn :: "unit => 'muc"
    and cASSERT :: "bool => 'muc"
    and cASSUME :: "bool => 'muc"
    and abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes
    "transfer_generic_Assert cbind creturn cASSERT cASSUME abind areturn
      aASSERT aASSUME"
locale transfer_generic_Assert_remove
  fixes abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes "transfer_generic_Assert_remove abind areturn aASSERT aASSUME"
### theory "Draft.RefineG_Assert"
### 0.093s elapsed time, 0.185s cpu time, 0.000s GC time
### theory "Draft.RefineG_Domain"
### 0.441s elapsed time, 0.739s cpu time, 0.103s GC time
Loading theory "Draft.RefineG_Recursion" (required by "Draft.Refine_BasicMoreTemplates" via "Draft.Refine_Basic")
### Ignoring duplicate rewrite rule:
### flat_ord ?b1 ?b1 ?x1 == True
theorem flatf_fp_induct_pointwise:
  fixes pre :: "'a => 'b => bool"
    and post :: "'a => 'b => 'c => bool"
    and b :: "'c"
    and B :: "('b => 'c) => 'b => 'c"
    and a :: "'a"
    and x :: "'b"
  assumes "!!a x. pre a x ==> post a x b"
    and "flatf_mono b B"
    and "pre a x"
    and
    "!!f a x.
        [| !!a' x'. pre a' x' ==> post a' x' (f x'); pre a x;
           flatf_ord b f (flatf_fp b B) |]
        ==> post a x (B f x)"
  shows "post a x (flatf_fp b B x)"
### theory "Draft.RefineG_Recursion"
### 0.281s elapsed time, 0.388s cpu time, 0.096s GC time
Loading theory "Draft.Refine_Basic" (required by "Draft.Refine_BasicMoreTemplates")
instantiation
  nres :: (type) complete_lattice
  Inf_nres == Inf :: 'a nres set => 'a nres
  Sup_nres == Sup :: 'a nres set => 'a nres
  bot_nres == bot :: 'a nres
  sup_nres == sup :: 'a nres => 'a nres => 'a nres
  top_nres == top :: 'a nres
  inf_nres == inf :: 'a nres => 'a nres => 'a nres
  less_eq_nres == less_eq :: 'a nres => 'a nres => bool
  less_nres == less :: 'a nres => 'a nres => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
structure refine_pw_simps: NAMED_THMS
### No equation for constructor "FAILi"
consts
  the_RES :: "'a nres => 'a set"
structure Refine:
  sig
    val no_prod_split: bool Config.T
    val post_tac: Proof.context -> tactic'
    val rcg_tac: thm list -> Proof.context -> tactic'
    structure refine: NAMED_THMS
    structure refine0: NAMED_THMS
    structure refine2: NAMED_THMS
    structure vcg: NAMED_THMS
    structure vcg_cons: NAMED_THMS
  end
### theory "Draft.Refine_Basic"
### 1.600s elapsed time, 1.761s cpu time, 0.203s GC time
Loading theory "Draft.Refine_BasicMoreTemplates"
val templateLemmas =
   [("Refine_Basic.nres_order_simps", "SUCCEED <= ?M",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Refine_Basic.nres_order_simps", "?M <= FAIL",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("Refine_Basic.nr_mono", "mono (%_. ?c)",
     template_predicate (template_app (template_hole 0, t_empty))),
    ("Refine_Basic.bind_mono2'", "mono ((>>=) ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.abs_fun_mono", "mono (\<Up> ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.conc_fun_mono", "mono (\<Down> ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.pw_ASSUME", "nofail (ASSUME ?\<Phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.pw_ASSERT", "inres (ASSERT ?\<Phi>) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Refine_Basic.nres_inequalities", "FAIL ~= RES ?X",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.nres_inequalities", "RES ?X ~= FAIL",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Basic.nres_inequalities", "SUCCEED ~= RETURN ?x",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.nres_inequalities", "FAIL ~= RETURN ?x",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Refine_Basic.nres_inequalities", "RETURN ?x ~= SUCCEED",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Basic.nres_inequalities", "RETURN ?x ~= FAIL",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Refine_Basic.nofail_simps", "nofail (RES ?X) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Refine_Basic.nofail_simps", "nofail (RETURN ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Refine_Basic.pw_ASSERT", "nofail (ASSERT ?\<Phi>) = ?\<Phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Refine_Basic.abs_fun_strict", "\<Up> ?R SUCCEED = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.abs_fun_simps", "\<Up> ?R FAIL = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.nres_monad2", "?M >>= RETURN = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Basic.bind_SUCCEED", "SUCCEED >>= ?f = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Basic.bind_FAIL", "FAIL >>= ?f = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Basic.conc_fun_strict", "\<Down> ?R SUCCEED = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.conc_fun_FAIL", "\<Down> ?R FAIL = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.SUCCEED_refine", "SUCCEED <= \<Down> ?R ?X'",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.SUCCEED_rule", "SUCCEED <= SPEC ?\<Phi>",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.Id_refine", "?S <= \<Down> Id ?S",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Refine_Basic.FAIL_refine", "?X <= \<Down> ?R FAIL",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Refine_Basic.bind_mono1", "mono (%M. M >>= ?f)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Refine_Basic.pw_ASSUME", "inres (ASSUME ?\<Phi>) ?x = ?\<Phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Refine_Basic.not_nofail_iff", "(~ nofail ?S) = (?S = FAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_order_simps", "(?M <= SUCCEED) = (?M = SUCCEED)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Basic.nres_order_simps", "(FAIL <= ?M) = (?M = FAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Basic.intro_nofail", "(FAIL ~= ?S) = nofail ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.intro_nofail", "(?S ~= FAIL) = nofail ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.pw_conc_nofail", "nofail (\<Down> ?R ?S) = nofail ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.RES_Sup_RETURN", "Sup (RETURN ` ?X) = RES ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.nres_monad1", "RETURN ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Refine_Basic.SPEC_eq_is_RETURN", "SPEC ((=) ?x) = RETURN ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.RES_sng_eq_RETURN", "RES {?x} = RETURN ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.nr_mono_bind'", "mono (%F s. ?f s >>= F)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Refine_Basic.param_SUCCEED",
     "(SUCCEED, SUCCEED) : \<langle>?R\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Refine_Basic.param_FAIL",
     "(FAIL, FAIL) : \<langle>?R\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Refine_Basic.inres_simps", "inres (RES ?X) = (%x. x : ?X)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Refine_Basic.inres_simps", "inres (RETURN ?x) = (=) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Refine_Basic.nres_more_simps", "(SUCCEED = RES ?X) = (?X = {})",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = SUCCEED) = (?X = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_order_simps", "(Sup ?X = FAIL) = (FAIL : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Refine_Basic.nres_order_simps", "(FAIL = Sup ?X) = (FAIL : ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 2), template_var 0))),
    ("Refine_Basic.nf_inres_RES", "nf_inres (RES ?X) ?x = (?x : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Refine_Basic.nf_inres_SPEC",
     "nf_inres (SPEC ?\<Phi>) ?x = ?\<Phi> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app (template_var 1, template_var 0))),
    ("Refine_Basic.let_to_bind_conv", "Let ?x ?f = RETURN ?x >>= ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Refine_Basic.ife_FAIL_to_ASSERT_cnv",
     "(if ?\<Phi> then ?m else FAIL) = op_nres_ASSERT_bnd ?\<Phi> ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.bind_to_let_conv", "RETURN ?x >>= ?f = Let ?x ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.nres_order_simps", "Sup (RES ` ?A) = RES (\<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.nres_order_simps", "Sup (RES ` ?A) = RES (\<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.FAIL_rule", "False ==> FAIL <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_hole 4)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.not_nofail_inres", "~ nofail ?S ==> inres ?S ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Basic.le_RES_nofailI", "?a <= RES ?x ==> nofail ?a",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Refine_Basic.nofail_RES_conv", "nofail ?m = (EX M. ?m = RES M)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Refine_Basic.nofail_SPEC_iff", "nofail ?m = (?m <= SPEC (%_. True))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.pw_Inf_nofail", "nofail (Inf ?C) = (EX x:?C. nofail x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_Sup_nofail", "nofail (Sup ?X) = (ALL x:?X. nofail x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.conc_fun_fail_iff",
     "(FAIL = \<Down> ?R ?S) = (?S = FAIL)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_more_simps", "(RETURN ?x = RETURN ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = RES ?Y) = (?X = ?Y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.conc_fun_fail_iff",
     "(\<Down> ?R ?S = FAIL) = (?S = FAIL)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_order_simps", "(RES ?X <= RES ?Y) = (?X <= ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.nres_order_simps",
     "(RETURN ?x <= RETURN ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.nres_order_simps", "(RETURN ?x <= RES ?Y) = (?x : ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.RETURN_SPEC_conv", "RETURN ?r = SPEC (%x. x = ?r)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.bind_RES", "RES ?X >>= ?f = Sup (?f ` ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Basic.SPEC_eq_is_RETURN", "SPEC (%x. x = ?y) = RETURN ?y",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.the_RES_inv", "nofail ?m ==> RES (the_RES ?m) = ?m",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Refine_Basic.ac_galois",
     "single_valued ?R ==> galois_connection (\<Up> ?R) (\<Down> ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Refine_Basic.nres_order_simps", "FAIL : ?X ==> Sup ?X = FAIL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Refine_Basic.SPEC_nofail", "?X <= SPEC ?\<Phi> ==> nofail ?X",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Refine_Basic.refine", "[| ?P; ?Q |] ==> ?P & ?Q",
     template_implication
      ([template_predicate (template_var 1),
        template_predicate (template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Basic.pw_inf_nofail",
     "nofail (inf ?a ?b) = (nofail ?a | nofail ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Refine_Basic.pw_sup_nofail",
     "nofail (sup ?a ?b) = (nofail ?a & nofail ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Refine_Basic.conc_fun_RES", "\<Down> ?R (RES ?X) = RES (?R^-1 `` ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Refine_Basic.push_in_let_conv",
     "Let ?x (RETURN o ?f) = RETURN (Let ?x ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.bind_ASSERT_eq_if",
     "ASSERT ?\<Phi> >>= (%_. ?m) = (if ?\<Phi> then ?m else FAIL)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Refine_Basic.nofail_SPEC", "nofail ?m ==> ?m <= SPEC (%_. True)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.RETURN_rule", "?\<Phi> ?x ==> RETURN ?x <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Refine_Basic.refine_IdI", "?m <= ?m' ==> ?m <= \<Down> Id ?m'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Refine_Basic.refine_IdD", "?c <= \<Down> Id ?a ==> ?c <= ?a",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Refine_Basic.pw_Inf_inres",
     "inres (Inf ?C) ?r = (ALL M:?C. inres M ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_Sup_inres",
     "inres (Sup ?X) ?r = (EX M:?X. inres M ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.nres_more_simps", "(RETURN ?x = RES ?X) = ({?x} = ?X)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = RETURN ?x) = (?X = {?x})",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Refine_Basic.nres_order_simps",
     "(RES ?X <= RETURN ?y) = (?X <= {?y})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Refine_Basic.pull_out_let_conv",
     "RETURN (Let ?x ?f) = (let x = ?x in RETURN (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.conc_fun_chain",
     "\<Down> ?R (\<Down> ?S ?M) = \<Down> (?R O ?S) ?M",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Refine_Basic.push_in_let_conv",
     "(let x = ?x in RETURN (?f x)) = RETURN (Let ?x ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.param_RETURN",
     "(RETURN, RETURN) : ?R \<rightarrow> \<langle>?R\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("Refine_Basic.pwD1", "[| ?S <= ?S'; nofail ?S' |] ==> nofail ?S",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Refine_Basic.pw_INF_nofail",
     "nofail (Inf (?f ` ?C)) = (EX x:?C. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_SUP_nofail",
     "nofail (Sup (?f ` ?X)) = (ALL x:?X. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_RES_bind_choose",
     "nofail (RES ?X >>= ?f) = (ALL x:?X. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.nres_order_simps",
     "(Sup (?f ` ?X) = FAIL) = (FAIL : ?f ` ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.nres_order_simps",
     "(FAIL = Sup (?f ` ?X)) = (FAIL : ?f ` ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_hole 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Basic.bind_distrib_Sup1",
     "Sup ?M >>= ?f = (SUP m\<in>?M. m >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Refine_Basic.nofail_antimono_fun",
     "?f <= ?g ==> nofail (?g ?x) --> nofail (?f ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)))
           ))),
    ("Refine_Basic.conc_fun_R_mono",
     "?R <= ?R' ==> \<Down> ?R ?M <= \<Down> ?R' ?M",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.intro_prgR",
     "?c <= \<Down> ?R ?a ==> ?c <= \<Down> ?R ?a",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.introR", "(?a, ?a') : ?R ==> (?a, ?a') : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Refine_Basic.le_SPEC_UNIV_rule",
     "?m <= SPEC (%_. True) ==> ?m <= RES UNIV",
     template_implication
      ([template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 3, template_app (template_hole 2, t_empty)))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 3, template_hole 0)))),
    ("Refine_Basic.RETURN_to_SPEC_rule",
     "?m <= SPEC ((=) ?v) ==> ?m <= RETURN ?v",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))))],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.le_nofailI", "(nofail ?M' ==> ?M <= ?M') ==> ?M <= ?M'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_inequation
           (less_equals, template_var 0, template_var 1))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Refine_Basic.nres_rel_comp",
     "\<langle>?A\<rangle>nres_rel O \<langle>?B\<rangle>nres_rel =
      \<langle>?A O ?B\<rangle>nres_rel",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_inf_inres",
     "inres (inf ?a ?b) ?x = (inres ?a ?x & inres ?b ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_sup_inres",
     "inres (sup ?a ?b) ?x = (inres ?a ?x | inres ?b ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.RETURN_refine_iff",
     "(RETURN ?x <= \<Down> ?R (RETURN ?y)) = ((?x, ?y) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Refine_Basic.in_nres_rel_iff",
     "((?a, ?b) : \<langle>?R\<rangle>nres_rel) = (?a <= \<Down> ?R ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Basic.rel2p_nres_RETURN",
     "rel2p (\<langle>?A\<rangle>nres_rel) (RETURN ?x) (RETURN ?y) =
      rel2p ?A ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Refine_Basic.conc_fun_RETURN",
     "\<Down> ?R (RETURN ?x) = SPEC (%y. (y, ?x) : ?R)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.inf_RETURN_RES",
     "inf (RETURN ?x) (RES ?X) = (if ?x : ?X then RETURN ?x else SUCCEED)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 4, template_var 1)),
         template_hole 0))),
    ("Refine_Basic.inf_RETURN_RES",
     "inf (RES ?X) (RETURN ?x) = (if ?x : ?X then RETURN ?x else SUCCEED)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Refine_Basic.bind_distrib_sup1",
     "sup ?M ?N >>= ?f = sup (?M >>= ?f) (?N >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.nres_monad3",
     "?M >>= ?f >>= ?g = ?M >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Basic.param_RES",
     "(RES, RES)
      : \<langle>?R\<rangle>set_rel \<rightarrow>
        \<langle>?R\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_hole 7)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("Refine_Basic.unused_bind_RES_ne",
     "?X ~= {} ==> RES ?X >>= (%_. ?m) = ?m",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           t_empty),
         template_var 0))),
    ("Refine_Basic.RECT_eq_REC'",
     "nofail (REC\<^sub>T ?B ?x) ==> REC\<^sub>T ?B ?x = REC ?B ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.ASSUME_refine",
     "(?\<Phi> ==> ?\<Phi>') ==>
      ASSUME ?\<Phi> <= \<Down> unit_rel (ASSUME ?\<Phi>')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Basic.ASSERT_refine",
     "(?\<Phi>' ==> ?\<Phi>) ==>
      ASSERT ?\<Phi> <= \<Down> unit_rel (ASSERT ?\<Phi>')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 1))))),
    ("Refine_Basic.abs_fun_simps",
     "~ ?X <= Domain ?R ==> \<Up> ?R (RES ?X) = FAIL",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Refine_Basic.nres_order_simps",
     "FAIL : ?f ` ?X ==> Sup (?f ` ?X) = FAIL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 3))),
    ("Refine_Basic.ASSUME_rule",
     "(?\<Phi> ==> ?\<Psi> ()) ==> ASSUME ?\<Phi> <= SPEC ?\<Psi>",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_predicate
           (template_app (template_var 0, template_hole 4)))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.pwD2", "[| ?S <= ?S'; inres ?S ?x |] ==> inres ?S' ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Refine_Basic.pw_INF_inres",
     "inres (Inf (?f ` ?C)) ?r = (ALL M:?C. inres (?f M) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_SUP_inres",
     "inres (Sup (?f ` ?X)) ?r = (EX M:?X. inres (?f M) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_RES_bind_choose",
     "inres (RES ?X >>= ?f) ?y = (EX x:?X. inres (?f x) ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Basic.pull_out_RETURN_case_option",
     "(case ?x of None => RETURN ?a | Some v => RETURN (?f v)) =
      RETURN (case ?x of None => ?a | Some x => ?f x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Refine_Basic.nres_order_simps",
     "?A ~= {} ==> Inf (RES ` ?A) = RES (\<Inter> ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.nres_order_simps",
     "?A ~= {} ==> Inf (RES ` ?A) = RES (\<Inter> ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.Id_SPEC_refine",
     "?S <= SPEC ?\<Phi> ==> ?S <= \<Down> Id (SPEC ?\<Phi>)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Refine_Basic.nres_relI",
     "?c <= \<Down> ?R ?a ==> (?c, ?a) : \<langle>?R\<rangle>nres_rel",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("Refine_Basic.RETURN_refine",
     "(?x, ?x') : ?R ==> RETURN ?x <= \<Down> ?R (RETURN ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Refine_Basic.RETURN_ref_RETURND",
     "RETURN ?c <= \<Down> ?R (RETURN ?a) ==> (?c, ?a) : ?R",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Refine_Basic.nres_relD",
     "(?c, ?a) : \<langle>?R\<rangle>nres_rel ==> ?c <= \<Down> ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Basic.inres_SPEC",
     "[| inres ?M ?x; ?M <= SPEC ?\<Phi> |] ==> ?\<Phi> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 0)))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Refine_Basic.conc_abs_swap",
     "single_valued ?R ==> (?m' <= \<Down> ?R ?m) = (\<Up> ?R ?m' <= ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Refine_Basic.abs_fun_simps",
     "?X <= Domain ?R ==> \<Up> ?R (RES ?X) = RES (?R `` ?X)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Refine_Basic.remove_Let_refine",
     "?M <= \<Down> ?R (?f ?x) ==> ?M <= \<Down> ?R (Let ?x ?f)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app (template_var 1, template_var 0)))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Refine_Basic.intro_Let_refine",
     "?f ?x <= \<Down> ?R ?M' ==> Let ?x ?f <= \<Down> ?R ?M'",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 3, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Basic.Let_rule",
     "?f ?x <= SPEC ?\<Phi> ==> Let ?x ?f <= SPEC ?\<Phi>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 2, template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.refine_vcg",
     "(?\<Phi> ==> ?M <= ?M') ==> ?M <= ASSERT ?\<Phi> >>= (%_. ?M')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Refine_Basic.refine_vcg",
     "(?\<Phi> ==> ?M <= ?M') ==> ASSUME ?\<Phi> >>= (%_. ?M) <= ?M'",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty),
         template_var 0))),
    ("Refine_Basic.nofail_SPEC_triv_refine",
     "[| nofail ?m; !!x. ?\<Phi> x |] ==> ?m <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.conc_trans_additional",
     "[| ?A <= ?B; ?B <= \<Down> Id ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.abs_trans_additional",
     "[| ?A <= ?B; \<Up> Id ?B <= ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1),
          template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.conc_trans_additional",
     "[| ?A <= \<Down> Id ?B; ?B <= ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.abs_trans_additional",
     "[| \<Up> Id ?A <= ?B; ?B <= ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 2),
          template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.lift_assnI",
     "[| (?s, ?s') : ?R; ?\<Phi> ?s' |] ==> lift_assn ?R ?\<Phi> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Refine_Basic.RETURN_RES_refine_iff",
     "(RETURN ?x <= \<Down> ?R (RES ?Y)) = (EX y:?Y. (?x, y) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("Refine_Basic.bind_distrib_sup2",
     "?m >>= (%x. sup (?f x) (?g x)) = sup (?m >>= ?f) (?m >>= ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Refine_Basic.ASSERT_rule",
     "[| ?\<Phi>; ?\<Phi> ==> ?\<Psi> () |]
      ==> ASSERT ?\<Phi> <= SPEC ?\<Psi>",
     template_implication
      ([template_predicate (template_var 1),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate
           (template_app (template_var 0, template_hole 4)))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.pw_bind_nofail",
     "nofail (?M >>= ?f) =
      (nofail ?M & (ALL x. inres ?M x --> nofail (?f x)))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.assert_bind_spec_conv",
     "(ASSERT ?\<Phi> >>= (%_. ?m) <= SPEC ?\<Psi>) =
      (?\<Phi> & ?m <= SPEC ?\<Psi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             t_empty)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("Refine_Basic.ASSERT_same_eq_conv",
     "(ASSERT ?\<Phi> >>= (%_. ?m) = ASSERT ?\<Phi> >>= (%_. ?n)) =
      (?\<Phi> --> ?m = ?n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty)),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Refine_Basic.build_rel_SPEC_conv",
     "\<Down> (br ?\<alpha> ?I) (SPEC ?\<Phi>) =
      SPEC (%x. ?I x & ?\<Phi> (?\<alpha> x))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.summarize_ASSERT_conv",
     "ASSERT ?\<Phi> >>= (%_. ASSERT ?\<Psi> >>= (%_. ?m)) =
      ASSERT (?\<Phi> & ?\<Psi>) >>= (%_. ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         t_empty))),
    ("Refine_Basic.intro_RETURN_Let_refine",
     "RETURN (?f ?x) <= \<Down> ?R ?M' ==>
      RETURN (Let ?x ?f) <= \<Down> ?R ?M'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 2, template_app (template_var 3, template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Basic.SPEC_rule",
     "(!!x. ?\<Phi> x ==> ?\<Phi>' x) ==> SPEC ?\<Phi> <= SPEC ?\<Phi>'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.RES_rule",
     "(!!x. x : ?S ==> ?\<Phi> x) ==> RES ?S <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.SPEC_rule_conjunct1",
     "?A <= SPEC (%v. ?P v & ?Q v) ==> ?A <= SPEC ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2, template_app (template_hole 1, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))))),
    ("Refine_Basic.SPEC_rule_conjunct2",
     "?A <= SPEC (%v. ?P v & ?Q v) ==> ?A <= SPEC ?Q",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2, template_app (template_hole 1, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.lhs_step_RES",
     "(!!x. x : ?X ==> RETURN x <= ?m) ==> RES ?X <= ?m",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Refine_Basic.le_SPEC_bindI",
     "[| ?\<Phi> ?x; ?m <= ?f ?x |] ==> ?m <= SPEC ?\<Phi> >>= ?f",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 0, template_var 2))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3))),
           template_var 0)))),
    ("Refine_Basic.abs_trans_additional",
     "[| ?A <= ?B; \<Up> ?R ?B <= ?C |] ==> \<Up> ?R ?A <= ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_var 0))),
    ("Refine_Basic.SPEC_trans",
     "[| ?x <= ?y; ?y <= SPEC ?Postcond |] ==> ?x <= SPEC ?Postcond",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.RES_bind_choose",
     "[| ?x : ?X; ?m <= ?f ?x |] ==> ?m <= RES ?X >>= ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 0, template_var 3))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Refine_Basic.ref_two_step",
     "[| ?A <= \<Down> ?R ?B; ?B <= ?C |] ==> ?A <= \<Down> ?R ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Refine_Basic.conc_trans_additional",
     "[| ?A <= \<Down> Id ?B; ?B <= \<Down> Id ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.abs_trans_additional",
     "[| \<Up> Id ?A <= ?B; \<Up> Id ?B <= ?C |] ==> ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1),
          template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Refine_Basic.pw_abs_nofail",
     "nofail (\<Up> ?R ?M) =
      (nofail ?M & (ALL x. inres ?M x --> x : Domain ?R))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.intro_spec_refine_iff",
     "(RES ?X >>= ?f <= \<Down> ?R ?M) = (ALL x:?X. ?f x <= \<Down> ?R ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3), t_empty))),
    ("Refine_Basic.inf_RETURN_SPEC",
     "inf (RETURN ?x) (SPEC ?\<Phi>) = SPEC (%y. y = ?x & ?\<Phi> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.inf_RETURN_SPEC",
     "inf (SPEC ?\<Phi>) (RETURN ?x) = SPEC (%y. y = ?x & ?\<Phi> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Refine_Basic.bind_distrib_Sup2",
     "?F ~= {} ==> ?m >>= Sup ?F = Sup ((>>=) ?m ` ?F)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Refine_Basic.Let_unfold_refine",
     "?f ?x <= \<Down> ?R (?f' ?x') ==>
      Let ?x ?f <= \<Down> ?R (Let ?x' ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 4, template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app (template_var 1, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 4),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Refine_Basic.RETURN_as_SPEC_refine_old",
     "?M <= \<Down> ?R (SPEC (%x. x = ?v)) ==>
      ?M <= \<Down> ?R (RETURN ?v)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.RETURN_as_SPEC_refine",
     "?M <= SPEC (%c. (c, ?a) : ?R) ==> ?M <= \<Down> ?R (RETURN ?a)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 5, template_app (template_hole 4, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Refine_Basic.refine_vcg",
     "[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |]
      ==> ?M <= ASSUME ?\<Phi> >>= (%_. ?M')",
     template_implication
      ([template_predicate (template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Refine_Basic.refine_vcg",
     "[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |]
      ==> ASSERT ?\<Phi> >>= (%_. ?M) <= ?M'",
     template_implication
      ([template_predicate (template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_inequation
           (less_equals, template_var 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty),
         template_var 0))),
    ("Refine_Basic.pw_bind_inres",
     "inres (?M >>= ?f) =
      (%x. nofail ?M --> (EX y. inres ?M y & inres (?f y) x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       t_empty)),
    ("Refine_Basic.pw_eq_iff",
     "(?S = ?S') =
      (nofail ?S = nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Refine_Basic.pw_le_iff",
     "(?S <= ?S') =
      (nofail ?S' --> nofail ?S & (ALL x. inres ?S x --> inres ?S' x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.bind_le_shift",
     "(?m >>= ?f <= ?m') =
      (?m <= (if nofail ?m' then SPEC (%x. ?f x <= ?m') else FAIL))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))),
           template_hole 0)))),
    ("Refine_Basic.bind_rule_complete",
     "(?M >>= ?f <= SPEC ?\<Phi>) =
      (?M <= SPEC (%x. ?f x <= SPEC ?\<Phi>))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Refine_Basic.nres_bind_let_law",
     "Let ?v ?f >>= ?g = (let y = ?v in ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Basic.ASSERT_refine_right",
     "(?\<Phi> ==> ?S <= \<Down> ?R ?S') ==>
      ?S <= \<Down> ?R (ASSERT ?\<Phi> >>= (%_. ?S'))",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             t_empty))))),
    ("Refine_Basic.ASSUME_refine_left",
     "(?\<Phi> ==> ?S <= \<Down> ?R ?S') ==>
      ASSUME ?\<Phi> >>= (%_. ?S) <= \<Down> ?R ?S'",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.lhs_step_SPEC",
     "(!!x. ?\<Phi> x ==> RETURN x <= ?m) ==> SPEC ?\<Phi> <= ?m",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Refine_Basic.le_ASSERTI_pres",
     "(?\<Phi> ==> ?S <= ASSERT ?\<Phi> >>= (%_. ?S')) ==>
      ?S <= ASSERT ?\<Phi> >>= (%_. ?S')",
     template_implication
      ([template_implication
         ([template_predicate (template_var 2)],
          template_inequation
           (less_equals, template_var 1,
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)),
              t_empty)))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Refine_Basic.conc_trans_additional",
     "[| ?A <= \<Down> Id ?B; ?B <= \<Down> ?R ?C |]
      ==> ?A <= \<Down> ?R ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.conc_trans_additional",
     "[| ?A <= \<Down> ?R ?B; ?B <= \<Down> Id ?C |]
      ==> ?A <= \<Down> ?R ?C",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 0))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Refine_Basic.abs_trans_additional",
     "[| \<Up> Id ?A <= ?B; \<Up> ?R ?B <= ?C |] ==> \<Up> ?R ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 3),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_var 0))),
    ("Refine_Basic.abs_trans_additional",
     "[| \<Up> ?R ?A <= ?B; \<Up> Id ?B <= ?C |] ==> \<Up> ?R ?A <= ?C",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_var 0))),
    ("Refine_Basic.pw_conc_inres",
     "inres (\<Down> ?R ?S') =
      (%s. nofail ?S' --> (EX s'. (s, s') : ?R & inres ?S' s'))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       t_empty)),
    ("Refine_Basic.pw_flat_ge_iff",
     "flat_ge ?S ?S' =
      (nofail ?S --> nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.RETURN_SPEC_refine",
     "EX x'. (?x, x') : ?R & ?\<Phi> x' ==>
      RETURN ?x <= \<Down> ?R (SPEC ?\<Phi>)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Refine_Basic.RES_sng_as_SPEC_refine",
     "?M <= SPEC (%c. (c, ?a) : ?R) ==> ?M <= \<Down> ?R (RES {?a})",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 7, template_app (template_hole 6, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))))),
    ("Refine_Basic.RETURN_RES_refine",
     "EX x'. (?x, x') : ?R & x' : ?X ==> RETURN ?x <= \<Down> ?R (RES ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.pw_leI",
     "nofail ?S' --> nofail ?S & (ALL x. inres ?S x --> inres ?S' x) ==>
      ?S <= ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 2, t_empty)))
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Refine_Basic.nr_mono",
     "[| mono ?S1.0; mono ?S2.0 |]
      ==> mono (%F s. if ?b s then ?S1.0 F s else ?S2.0 F s)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.nres_cases",
     "[| ?M = FAIL ==> ?thesis; !!X. ?M = RES X ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Refine_Basic.SUP_img_rule_complete",
     "(ALL x. x : ?S --> ?f x <= SPEC ?\<Phi>) =
      (Sup (?f ` ?S) <= SPEC ?\<Phi>)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Basic.bind_RES_RETURN_eq",
     "RES ?X >>= (%x. RETURN (?f x)) =
      SPEC (%uu_. EX x. uu_ = ?f x & x : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         t_empty),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.conc_fun_SPEC",
     "\<Down> ?R (SPEC ?\<Phi>) = SPEC (%y. EX x. (y, x) : ?R & ?\<Phi> x)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.If_bind_distrib",
     "(if ?b then ?t else ?e) >>= ?f =
      (if ?b then ?t >>= ?f else ?e >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Refine_Basic.strengthen_SPEC",
     "?m <= SPEC ?\<Phi> ==>
      ?m <= SPEC (%s. inres ?m s & nofail ?m & ?\<Phi> s)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Refine_Basic.rhs_step_bind_SPEC",
     "[| ?\<Phi> ?x'; ?m <= \<Down> ?R (?f' ?x') |]
      ==> ?m <= \<Down> ?R (SPEC ?\<Phi> >>= ?f')",
     template_implication
      ([template_predicate (template_app (template_var 4, template_var 3)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_var 0, template_var 3)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 4))),
             template_var 0))))),
    ("Refine_Basic.rhs_step_bind_RES",
     "[| ?x' : ?X'; ?m <= \<Down> ?R (?f' ?x') |]
      ==> ?m <= \<Down> ?R (RES ?X' >>= ?f')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_var 0, template_var 4)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0))))),
    ("Refine_Basic.pw_eqI",
     "[| nofail ?S = nofail ?S'; !!x. inres ?S x = inres ?S' x |]
      ==> ?S = ?S'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.conc_trans",
     "[| ?C <= \<Down> ?R ?B; ?B <= \<Down> ?R' ?A |]
      ==> ?C <= \<Down> ?R (\<Down> ?R' ?A)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_var 4,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Refine_Basic.abs_trans",
     "[| \<Up> ?R ?C <= ?B; \<Up> ?R' ?B <= ?A |]
      ==> \<Up> ?R' (\<Up> ?R ?C) <= ?A",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_var 0))),
    ("Refine_Basic.pw_abs_inres",
     "inres (\<Up> ?R ?M) ?a =
      (nofail (\<Up> ?R ?M) --> (EX c. inres ?M c & (c, ?a) : ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.build_rel_SPEC",
     "?M <= SPEC (%x. ?\<Phi> (?\<alpha> x) & ?I x) ==>
      ?M <= \<Down> (br ?\<alpha> ?I) (SPEC ?\<Phi>)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 6, template_app (template_hole 5, t_empty)))],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("Refine_Basic.bind_rule",
     "?M <= SPEC (%x. ?f x <= SPEC ?\<Phi>) ==> ?M >>= ?f <= SPEC ?\<Phi>",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 5, template_app (template_hole 4, t_empty)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.ASSUME_refine_right",
     "[| ?\<Phi>; ?\<Phi> ==> ?S <= \<Down> ?R ?S' |]
      ==> ?S <= \<Down> ?R (ASSUME ?\<Phi> >>= (%_. ?S'))",
     template_implication
      ([template_predicate (template_var 3),
        template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             t_empty))))),
    ("Refine_Basic.ASSERT_refine_left",
     "[| ?\<Phi>; ?\<Phi> ==> ?S <= \<Down> ?R ?S' |]
      ==> ASSERT ?\<Phi> >>= (%_. ?S) <= \<Down> ?R ?S'",
     template_implication
      ([template_predicate (template_var 3),
        template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.weaken_SPEC",
     "[| ?m <= SPEC ?\<Phi>; !!x. ?\<Phi> x ==> ?\<Psi> x |]
      ==> ?m <= SPEC ?\<Psi>",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1))),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.case_prod_bind_simp",
     "(%x. (case x of (a, b) => ?f a b) <= SPEC ?\<Phi>) =
      (%(a, b). ?f a b <= SPEC ?\<Phi>)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("Refine_Basic.ignore_snd_refine_conv",
     "(?m <= \<Down> (?R \<times>\<^sub>r UNIV) ?m') =
      (?m >>= RETURN o fst <= \<Down> ?R (?m' >>= RETURN o fst))",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 2),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_var 1)),
               template_hole 10)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))))),
    ("Refine_Basic.autoref_bind",
     "((>>=), (>>=))
      : \<langle>?R1.0\<rangle>nres_rel \<rightarrow>
        (?R1.0 \<rightarrow> \<langle>?R2.0\<rangle>nres_rel) \<rightarrow>
        \<langle>?R2.0\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, template_hole 14),
               template_hole 13)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0)))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))
         )),
    ("Refine_Basic.param_bind",
     "((>>=), (>>=))
      : \<langle>?Ra\<rangle>nres_rel \<rightarrow>
        (?Ra \<rightarrow> \<langle>?Rb\<rangle>nres_rel) \<rightarrow>
        \<langle>?Rb\<rangle>nres_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, template_hole 14),
               template_hole 13)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0)))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))
         )),
    ("Refine_Basic.ret_le_down_conv",
     "nofail ?m ==>
      (RETURN ?c <= \<Down> ?R ?m) = (EX a. (?c, a) : ?R & RETURN a <= ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 1)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 2)),
         template_app (template_hole 5, t_empty)))),
    ("Refine_Basic.ASSERT_refine_right_pres",
     "(?\<Phi> ==> ?S <= \<Down> ?R (ASSERT ?\<Phi> >>= (%_. ?S'))) ==>
      ?S <= \<Down> ?R (ASSERT ?\<Phi> >>= (%_. ?S'))",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 3)),
                t_empty))))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             t_empty))))),
    ("Refine_Basic.ASSUME_refine_left_pres",
     "(?\<Phi> ==> ASSUME ?\<Phi> >>= (%_. ?S) <= \<Down> ?R ?S') ==>
      ASSUME ?\<Phi> >>= (%_. ?S) <= \<Down> ?R ?S'",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              t_empty),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.Sup_img_rule",
     "(!!x. x : ?S ==> ?f x <= SPEC ?\<Phi>) ==>
      Sup (?f ` ?S) <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Basic.nr_mono_bind",
     "[| mono ?A; !!s. mono (?B s) |] ==> mono (%F s. ?A F s >>= ?B s F)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.nofail_inf_serialize",
     "[| nofail ?a; nofail ?b |]
      ==> inf ?a ?b = ?a >>= (%x. ASSUME (inres ?b x) >>= (%_. RETURN x))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1), t_empty)))),
    ("Refine_Basic.bind_le_nofailI",
     "[| nofail ?m; !!x. RETURN x <= ?m ==> ?f x <= ?m' |]
      ==> ?m >>= ?f <= ?m'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Refine_Basic.sup_refine",
     "[| ?ai <= \<Down> ?R ?a; ?bi <= \<Down> ?R ?b |]
      ==> sup ?ai ?bi <= \<Down> ?R (sup ?a ?b)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Refine_Basic.intro_bind_refine_id",
     "[| ?m <= SPEC ((=) ?m'); ?f ?m' <= \<Down> ?R ?m'' |]
      ==> ?m >>= ?f <= \<Down> ?R ?m''",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)))),
        template_inequation
         (less_equals, template_app (template_var 2, template_var 3),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Basic.lhs_step_If",
     "[| ?b ==> ?t <= ?m; ~ ?b ==> ?e <= ?m |]
      ==> (if ?b then ?t else ?e) <= ?m",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2, template_var 1)),
        template_implication
         ([template_negation (template_predicate (template_var 3))],
          template_inequation
           (less_equals, template_var 0, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Refine_Basic.Let_rule'",
     "(!!x. x = ?v ==> ?f x <= SPEC ?\<Phi>) ==> Let ?v ?f <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.SPEC_refine",
     "?S <= SPEC (%x. EX x'. (x, x') : ?R & ?\<Phi> x') ==>
      ?S <= \<Down> ?R (SPEC ?\<Phi>)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 8, template_app (template_hole 7, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Refine_Basic.RES_refine",
     "(!!s. s : ?S ==> EX s':?S'. (s, s') : ?R) ==>
      RES ?S <= \<Down> ?R (RES ?S')",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Refine_Basic.bind_mono",
     "[| flat_ge ?M ?M'; !!x. flat_ge (?f x) (?f' x) |]
      ==> flat_ge (?M >>= ?f) (?M' >>= ?f')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Refine_Basic.SPEC_rule_conjI",
     "[| ?A <= SPEC ?P; ?A <= SPEC ?Q |] ==> ?A <= SPEC (%v. ?P v & ?Q v)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.use_spec_rule",
     "[| ?m <= SPEC ?\<Psi>; ?m <= SPEC (%s. ?\<Psi> s --> ?\<Phi> s) |]
      ==> ?m <= SPEC ?\<Phi>",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2, template_app (template_hole 1, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.refine2spec_aux",
     "(?a <= \<Down> ?R ?b) =
      (nofail ?b --> ?a <= SPEC (%r. EX x. inres ?b x & (r, x) : ?R))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app
          (template_app (template_hole 10, template_var 2),
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("Refine_Basic.pw_bind_le_iff",
     "(?M >>= ?f <= ?S) =
      ((nofail ?S --> nofail ?M) &
       (ALL x. nofail ?M & inres ?M x --> ?f x <= ?S))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_var 2))),
         template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.intro_spec_refine",
     "(!!x. x : ?X ==> ?f x <= \<Down> ?R ?M) ==>
      RES ?X >>= ?f <= \<Down> ?R ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_flat_le_iff",
     "flat_le ?S ?S' =
      ((EX x. inres ?S x) -->
       nofail ?S = nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, t_empty)))
           ))),
    ("Refine_Basic.Sup_eq_RESE",
     "[| Sup ?A = RES ?B;
         !!C. [| ?A = RES ` C; ?B = \<Union> C |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Refine_Basic.specify_left",
     "[| ?m <= SPEC ?\<Phi>; !!x. ?\<Phi> x ==> ?f x <= ?M |]
      ==> ?m >>= ?f <= ?M",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 2))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), t_empty),
         template_var 0))),
    ("Refine_Basic.pw_nres_rel_iff",
     "((?a, ?b) : \<langle>?A\<rangle>nres_rel) =
      (nofail (\<Down> ?A ?b) -->
       nofail ?a & (ALL x. inres ?a x --> inres (\<Down> ?A ?b) x))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.prod_rule",
     "(!!a b. ?p = (a, b) ==> ?S a b <= SPEC ?\<Phi>) ==>
      (case ?p of (x, xa) => ?S x xa) <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.refine2specI",
     "(nofail ?b ==> ?a <= SPEC (%r. EX x. inres ?b x & (r, x) : ?R)) ==>
      ?a <= \<Down> ?R ?b",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 9, template_var 2))],
          template_inequation
           (less_equals, template_var 1,
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Refine_Basic.bind_cong",
     "[| ?m = ?m'; !!x. RETURN x <= ?m' ==> ?f x = ?f' x |]
      ==> ?m >>= ?f = ?m' >>= ?f'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Refine_Basic.bind_mono",
     "[| ?M <= ?M'; !!x. RETURN x <= ?M ==> ?f x <= ?f' x |]
      ==> ?M >>= ?f <= ?M' >>= ?f'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Refine_Basic.pw_leI'",
     "[| nofail ?S' ==> nofail ?S;
         !!x. [| nofail ?S'; inres ?S x |] ==> inres ?S' x |]
      ==> ?S <= ?S'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 3, template_var 1))],
          template_predicate
           (template_app (template_hole 3, template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Refine_Basic.RETURN_ref_SPECD",
     "[| RETURN ?c <= \<Down> ?R (SPEC ?\<Phi>);
         !!a. [| (?c, a) : ?R; ?\<Phi> a |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Refine_Basic.lhs_step_bind",
     "[| nofail ?m' ==> nofail ?m; !!x. nf_inres ?m x ==> ?f x <= ?m' |]
      ==> ?m >>= ?f <= ?m'",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 2))],
          template_predicate
           (template_app (template_hole 4, template_var 1))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), t_empty),
         template_var 2))),
    ("Refine_Basic.pw_ref_iff",
     "(?S <= \<Down> ?R ?S') =
      (nofail ?S' -->
       nofail ?S &
       (ALL x. inres ?S x --> (EX s'. (x, s') : ?R & inres ?S' s')))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app (template_hole 5, t_empty))))),
    ("Refine_Basic.bind_RES_RETURN2_eq",
     "RES ?X >>= (%(x, y). RETURN (?f x y)) =
      SPEC (%uu_. EX x y. uu_ = ?f x y & (x, y) : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app (template_hole 9, t_empty)),
       template_app
        (template_hole 7, template_app (template_hole 6, t_empty)))),
    ("Refine_Basic.refine",
     "(!!a a'. (a, a') : ?A ==> (?f a, ?f' a') : ?B) ==>
      (?f, ?f') : ?A \<rightarrow> ?B",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 3)),
               template_var 0))
           ))),
    ("Refine_Basic.if_rule",
     "[| ?b ==> ?S1.0 <= SPEC ?\<Phi>; ~ ?b ==> ?S2.0 <= SPEC ?\<Phi> |]
      ==> (if ?b then ?S1.0 else ?S2.0) <= SPEC ?\<Phi>",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)))),
        template_implication
         ([template_negation (template_predicate (template_var 3))],
          template_inequation
           (less_equals, template_var 0,
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 1))))),
    ("Refine_Basic.pw_ref_I",
     "nofail ?S' -->
      nofail ?S &
      (ALL x. inres ?S x --> (EX s'. (x, s') : ?R & inres ?S' s')) ==>
      ?S <= \<Down> ?R ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 7, t_empty)))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Refine_Basic.pw_bind_leI",
     "[| nofail ?S ==> nofail ?M;
         !!x. [| nofail ?M; inres ?M x |] ==> ?f x <= ?S |]
      ==> ?M >>= ?f <= ?S",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 5, template_var 2))],
          template_predicate
           (template_app (template_hole 4, template_var 1))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Refine_Basic.unused_bind_conv",
     "[| NO_MATCH (ASSERT ?\<Phi>) ?m; NO_MATCH (ASSUME ?\<Phi>) ?m |]
      ==> ?m >>= (%x. ?c) =
          ASSERT (nofail ?m) >>=
          (%_. ASSUME (EX x. inres ?m x) >>= (%x. ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 6, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_var 1))),
           t_empty)))),
    ("Refine_Basic.bind_assert_refine",
     "[| ?m1.0 <= SPEC ?\<Phi>; !!x. ?\<Phi> x ==> ?m2.0 x <= ?m' |]
      ==> ?m1.0 >>= (%x. ASSERT (?\<Phi> x) >>= (%_. ?m2.0 x)) <= ?m'",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 3), t_empty),
         template_var 0))),
    ("Refine_Basic.return_refine_prop_return",
     "[| nofail ?m; RETURN ?x <= \<Down> ?R ?m;
         !!x'. [| (?x, x') : ?R; RETURN x' <= ?m |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Refine_Basic.param_op_nres_ASSERT_bnd",
     "[| ?\<Phi>' ==> ?\<Phi>;
         [| ?\<Phi>'; ?\<Phi> |]
         ==> (?m, ?m') : \<langle>?R\<rangle>nres_rel |]
      ==> (op_nres_ASSERT_bnd ?\<Phi> ?m, op_nres_ASSERT_bnd ?\<Phi>' ?m')
          : \<langle>?R\<rangle>nres_rel",
     template_implication
      ([template_implication
         ([template_predicate (template_var 4)],
          template_predicate (template_var 3)),
        template_implication
         ([template_predicate (template_var 4)],
          template_implication
           ([template_predicate (template_var 3)],
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 0))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0))
           ))),
    ("Refine_Basic.Let_refine'",
     "[| (?m, ?m') : ?R; (?m, ?m') : ?R ==> ?f ?m <= \<Down> ?S (?f' ?m') |]
      ==> Let ?m ?f <= \<Down> ?S (Let ?m' ?f')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_inequation
           (less_equals, template_app (template_var 2, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_var 0, template_var 4))))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0))))),
    ("Refine_Basic.inres_if",
     "[| inres (if ?P then ?Q else ?R) ?x; [| ?P; inres ?Q ?x |] ==> ?S;
         [| ~ ?P; inres ?R ?x |] ==> ?S |]
      ==> ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Refine_Basic.autoref_ASSERT",
     "(?\<Phi> ==> (?m', ?m) : \<langle>?R\<rangle>nres_rel) ==>
      (?m',
       (Autoref_Tagging.OP (op_nres_ASSERT_bnd ?\<Phi>) :::
        \<langle>?R\<rangle>nres_rel \<rightarrow>
        \<langle>?R\<rangle>nres_rel) $
       ?m)
      : \<langle>?R\<rangle>nres_rel",
     template_implication
      ([template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0))
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 3))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_hole 0),
                               template_app
                                (template_app
                                  (template_hole 9, template_hole 8),
                                 template_var 0))),
                           template_app
                            (template_app
                              (template_hole 9, template_hole 8),
                             template_var 0))))),
                   template_var 1))),
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 0))
           ))),
    ("Refine_Basic.intro_bind_refine",
     "[| ?m <= \<Down> ?R' (RETURN ?m');
         !!x. (x, ?m') : ?R' ==> ?f x <= \<Down> ?R ?m'' |]
      ==> ?m >>= ?f <= \<Down> ?R ?m''",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app (template_hole 6, template_var 3))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Basic.SPEC_iff",
     "[| ?P <= SPEC (%s. ?Q s --> ?R s);
         ?P <= SPEC (%s. ~ ?Q s --> ~ ?R s) |]
      ==> ?P <= SPEC (%s. ?Q s = ?R s)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 4, template_app (template_hole 3, t_empty))),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 4, template_app (template_hole 3, t_empty)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Refine_Basic.option_rule",
     "[| ?v = None ==> ?S1.0 <= SPEC ?\<Phi>;
         !!x. ?v = Some x ==> ?f2.0 x <= SPEC ?\<Phi> |]
      ==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) <= SPEC ?\<Phi>",
     template_implication
      ([template_implication
         ([template_equation (template_var 3, template_hole 6)],
          template_inequation
           (less_equals, template_var 2,
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 1))))),
    ("Refine_Basic.rhs_step_bind",
     "[| ?m <= \<Down> ?R ?m'; inres ?m ?x;
         !!x'. (?x, x') : ?R ==> ?lhs <= \<Down> ?S (?f' x') |]
      ==> ?lhs <= \<Down> ?S (?m' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0))))),
    ("Refine_Basic.pw_REC_nofail",
     "nofail (REC ?B ?x) =
      (trimono ?B &
       (EX F. (ALL x.
                  nofail (F x) -->
                  nofail (?B F x) &
                  (ALL x'. inres (?B F x) x' --> inres (F x) x')) &
              nofail (F ?x)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.pw_RECT_nofail",
     "nofail (REC\<^sub>T ?B ?x) =
      (trimono ?B &
       (ALL F.
           (ALL y.
               nofail (?B F y) -->
               nofail (F y) &
               (ALL x. inres (F y) x --> inres (?B F y) x)) -->
           nofail (F ?x)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.param_ASSERT_bind",
     "[| (?\<Phi>, ?\<Psi>) : bool_rel;
         [| ?\<Phi>; ?\<Psi> |]
         ==> (?f, ?g) : \<langle>?R\<rangle>nres_rel |]
      ==> (ASSERT ?\<Phi> >>= (%_. ?f), ASSERT ?\<Psi> >>= (%_. ?g))
          : \<langle>?R\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_hole 7)
            ),
        template_implication
         ([template_predicate (template_var 4)],
          template_implication
           ([template_predicate (template_var 3)],
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 0))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 4)),
                     t_empty)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 3)),
                   t_empty))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))
           ))),
    ("Refine_Basic.bind2let_refine",
     "[| RETURN ?x <= \<Down> ?R' ?M';
         !!x'. (?x, x') : ?R' ==> ?f ?x <= \<Down> ?R (?f' x') |]
      ==> Let ?x ?f <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 5),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.pw_REC_inres",
     "inres (REC ?B ?x) ?x' =
      (trimono ?B -->
       (ALL F.
           (ALL x''.
               nofail (F x'') -->
               nofail (?B F x'') &
               (ALL x. inres (?B F x'') x --> inres (F x'') x)) -->
           inres (F ?x) ?x'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.pw_RECT_inres",
     "inres (REC\<^sub>T ?B ?x) ?x' =
      (trimono ?B -->
       (EX M. (ALL y.
                  nofail (?B M y) -->
                  nofail (M y) &
                  (ALL x. inres (M y) x --> inres (?B M y) x)) &
              inres (M ?x) ?x'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.bind2letRETURN_refine",
     "[| RETURN ?x <= \<Down> ?R' ?M';
         !!x'. (?x, x') : ?R' ==> RETURN (?f ?x) <= \<Down> ?R (?f' x') |]
      ==> RETURN (Let ?x ?f) <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 5),
          template_app
           (template_app (template_hole 8, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.autoref_ASSUME",
     "[| SIDE_PRECOND ?\<Phi>;
         ?\<Phi> ==> (?m', ?m) : \<langle>?R\<rangle>nres_rel |]
      ==> (?m',
           (Autoref_Tagging.OP (op_nres_ASSUME_bnd ?\<Phi>) :::
            \<langle>?R\<rangle>nres_rel \<rightarrow>
            \<langle>?R\<rangle>nres_rel) $
           ?m)
          : \<langle>?R\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)))
            ),
        template_implication
         ([template_predicate (template_var 3)],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0))
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 3))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_hole 0),
                               template_app
                                (template_app
                                  (template_hole 9, template_hole 8),
                                 template_var 0))),
                           template_app
                            (template_app
                              (template_hole 9, template_hole 8),
                             template_var 0))))),
                   template_var 1))),
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 0))
           ))),
    ("Refine_Basic.bind_refine",
     "[| ?M <= \<Down> ?R' ?M';
         !!x x'. (x, x') : ?R' ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> ?M >>= ?f <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.Let_refine",
     "[| (?m, ?m') : ?R';
         !!x x'. (x, x') : ?R' ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> Let ?m ?f <= \<Down> ?R (Let ?m' ?f')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4), t_empty))))),
    ("Refine_Basic.add_invar_refineI",
     "[| ?f ?x <= \<Down> ?R (?f' ?x');
         nofail (?f ?x) ==> ?f ?x <= SPEC ?I |]
      ==> ?f ?x <= \<Down> {(c, a). (c, a) : ?R & ?I c} (?f' ?x')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 5, template_var 4),
          template_app
           (template_app (template_hole 8, template_var 3),
            template_app (template_var 2, template_var 1))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 7,
                 template_app (template_var 5, template_var 4))
               )],
          template_inequation
           (less_equals, template_app (template_var 5, template_var 4),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))))],
       template_inequation
        (less_equals, template_app (template_var 5, template_var 4),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty))),
           template_app (template_var 2, template_var 1))))),
    ("Refine_Basic.param_RECT",
     "[| (?B, ?B')
         : (?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
           ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel;
         trimono ?B |]
      ==> (REC\<^sub>T ?B, REC\<^sub>T ?B')
          : ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_hole 7),
                          template_var 1)),
                      template_app
                       (template_app (template_hole 6, template_hole 5),
                        template_var 0)))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 0))))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 1)),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)))
           ))),
    ("Refine_Basic.let2bind_refine",
     "[| ?m <= \<Down> ?R' (RETURN ?m');
         !!x x'. (x, x') : ?R' ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> ?m >>= ?f <= \<Down> ?R (Let ?m' ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app (template_hole 8, template_var 3))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.if_bind_cond_refine",
     "[| ?ci <= RETURN ?b; ?b ==> ?ti <= \<Down> ?R ?t;
         ~ ?b ==> ?ei <= \<Down> ?R ?e |]
      ==> ?ci >>= (%b. if b then ?ti else ?ei)
          <= \<Down> ?R (if ?b then ?t else ?e)",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app (template_hole 6, template_var 5)),
        template_implication
         ([template_predicate (template_var 5)],
          template_inequation
           (less_equals, template_var 4,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2))),
        template_implication
         ([template_negation (template_predicate (template_var 5))],
          template_inequation
           (less_equals, template_var 1,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 6), t_empty),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0))))),
    ("Refine_Basic.bind_sim_select_rule",
     "[| ?m >>= ?f' <= SPEC ?\<Psi>;
         !!x. [| nofail ?m; inres ?m x; ?f' x <= SPEC ?\<Psi> |]
              ==> ?f x <= SPEC ?\<Phi> |]
      ==> ?m >>= ?f <= SPEC ?\<Phi>",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 4), template_var 3),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 2))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Refine_Basic.bind_Let_refine2",
     "[| ?m' <= \<Down> ?R' (RETURN ?x);
         !!x'. [| inres ?m' x'; (x', ?x) : ?R' |]
               ==> ?f' x' <= \<Down> ?R (?f ?x) |]
      ==> ?m' >>= ?f' <= \<Down> ?R (Let ?x ?f)",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app (template_hole 8, template_var 3))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.if_refine",
     "[| ?b = ?b'; [| ?b; ?b' |] ==> ?S1.0 <= \<Down> ?R ?S1';
         [| ~ ?b; ~ ?b' |] ==> ?S2.0 <= \<Down> ?R ?S2' |]
      ==> (if ?b then ?S1.0 else ?S2.0)
          <= \<Down> ?R (if ?b' then ?S1' else ?S2')",
     template_implication
      ([template_equation (template_var 6, template_var 5),
        template_implication
         ([template_predicate (template_var 6)],
          template_implication
           ([template_predicate (template_var 5)],
            template_inequation
             (less_equals, template_var 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)))),
        template_implication
         ([template_negation (template_predicate (template_var 6))],
          template_implication
           ([template_negation (template_predicate (template_var 5))],
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0))))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 4),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0))))),
    ("Refine_Basic.bind_refine_abs'",
     "[| ?M <= \<Down> ?R' ?M';
         !!x x'.
            [| (x, x') : ?R'; nf_inres ?M' x' |]
            ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> ?M >>= ?f <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 9, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.bind_refine_RES",
     "[| ?M <= \<Down> ?R' (RES ?X');
         !!x x'.
            [| (x, x') : ?R'; x' : ?X' |] ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> ?M >>= ?f <= \<Down> ?R (RES ?X' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app (template_hole 9, template_var 3))),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 9, template_var 3)),
             t_empty))))),
    ("Refine_Basic.bind_refine_RES",
     "[| RES ?X <= \<Down> ?R' ?M';
         !!x x'.
            [| (x, x') : ?R'; x : ?X |] ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> RES ?X >>= ?f <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 5),
          template_app
           (template_app (template_hole 9, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 10, template_var 5)),
           t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.if_RETURN_refine",
     "[| ?b = ?b'; [| ?b; ?b' |] ==> RETURN ?S1.0 <= \<Down> ?R ?S1';
         [| ~ ?b; ~ ?b' |] ==> RETURN ?S2.0 <= \<Down> ?R ?S2' |]
      ==> RETURN (if ?b then ?S1.0 else ?S2.0)
          <= \<Down> ?R (if ?b' then ?S1' else ?S2')",
     template_implication
      ([template_equation (template_var 6, template_var 5),
        template_implication
         ([template_predicate (template_var 6)],
          template_implication
           ([template_predicate (template_var 5)],
            template_inequation
             (less_equals, template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)))),
        template_implication
         ([template_negation (template_predicate (template_var 6))],
          template_implication
           ([template_negation (template_predicate (template_var 5))],
            template_inequation
             (less_equals, template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0))))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 6),
               template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0))))),
    ("Refine_Basic.prod2_rule",
     "(!!a b c d.
          [| ?ab = (a, b); ?cd = (c, d) |]
          ==> ?f a b c d <= SPEC ?\<Phi>) ==>
      (case ?ab of (a, b) => %(c, d). ?f a b c d) ?cd <= SPEC ?\<Phi>",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 3),
           template_var 2),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Basic.bind_refine_RES",
     "[| RES ?X <= \<Down> ?R' (RES ?X');
         !!x x'.
            [| (x, x') : ?R'; x : ?X; x' : ?X' |]
            ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> RES ?X >>= ?f <= \<Down> ?R (RES ?X' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 5),
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app (template_hole 10, template_var 3))),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 12, template_var 5)),
           t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 10, template_var 3)),
             t_empty))))),
    ("Refine_Basic.REC_le_rule",
     "[| trimono ?body; (?x, ?x') : ?R;
         !!f x x'.
            [| !!x x'. (x, x') : ?R ==> f x <= ?M x'; (x, x') : ?R |]
            ==> ?body f x <= ?M x' |]
      ==> REC ?body ?x <= ?M ?x'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app (template_var 0, template_var 2)))),
    ("Refine_Basic.bind_refine'",
     "[| ?M <= \<Down> ?R' ?M';
         !!x x'.
            [| (x, x') : ?R'; inres ?M x; inres ?M' x'; nofail ?M;
               nofail ?M' |]
            ==> ?f x <= \<Down> ?R (?f' x') |]
      ==> ?M >>= ?f <= \<Down> ?R (?M' >>= ?f')",
     template_implication
      ([template_inequation
         (less_equals, template_var 5,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 5), t_empty),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty))))),
    ("Refine_Basic.case_option_refine",
     "[| (?v, ?v') : \<langle>?Ra\<rangle>option_rel;
         [| ?v = None; ?v' = None |] ==> ?n <= \<Down> ?Rb ?n';
         !!x x'.
            [| ?v = Some x; ?v' = Some x'; (x, x') : ?Ra |]
            ==> ?f x <= \<Down> ?Rb (?f' x') |]
      ==> (case ?v of None => ?n | Some x => ?f x)
          <= \<Down> ?Rb (case ?v' of None => ?n' | Some x => ?f' x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 7),
                  template_var 6)),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 5))
            ),
        template_implication
         ([template_equation (template_var 7, template_hole 12)],
          template_implication
           ([template_equation (template_var 6, template_hole 10)],
            template_inequation
             (less_equals, template_var 4,
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2)))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1),
           template_var 7),
         template_app
          (template_app (template_hole 8, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 6))))),
    ("Refine_Basic.autoref_REC",
     "[| (?B, ?B')
         : (?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
           ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel;
         DEFER trimono ?B |]
      ==> (REC ?B,
           (Autoref_Tagging.OP REC :::
            ((?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
             ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
            ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) $
           ?B')
          : ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 20, template_hole 19),
                    template_app
                     (template_app
                       (template_hole 18,
                        template_app
                         (template_app (template_hole 17, template_hole 16),
                          template_var 1)),
                      template_app
                       (template_app (template_hole 15, template_hole 14),
                        template_var 0)))),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_hole 16),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 15, template_hole 14),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 3)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_hole 0),
                               template_app
                                (template_app
                                  (template_hole 21,
                                   template_app
                                    (template_app
(template_hole 20, template_hole 19),
                                     template_app
(template_app
  (template_hole 18,
   template_app
    (template_app (template_hole 17, template_hole 16), template_var 1)),
 template_app
  (template_app (template_hole 15, template_hole 14), template_var 0)))),
                                 template_app
                                  (template_app
                                    (template_hole 18,
                                     template_app
(template_app (template_hole 17, template_hole 16), template_var 1)),
                                   template_app
                                    (template_app
(template_hole 15, template_hole 14),
                                     template_var 0))))),
                           template_app
                            (template_app
                              (template_hole 18,
                               template_app
                                (template_app
                                  (template_hole 17, template_hole 16),
                                 template_var 1)),
                             template_app
                              (template_app
                                (template_hole 15, template_hole 14),
                               template_var 0)))))),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app (template_hole 17, template_hole 16),
                   template_var 1)),
               template_app
                (template_app (template_hole 15, template_hole 14),
                 template_var 0)))
           ))),
    ("Refine_Basic.autoref_RECT",
     "[| (?B, ?B')
         : (?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
           ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel;
         DEFER trimono ?B |]
      ==> (REC\<^sub>T ?B,
           (Autoref_Tagging.OP REC\<^sub>T :::
            ((?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
             ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) \<rightarrow>
            ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel) $
           ?B')
          : ?Ra \<rightarrow> \<langle>?Rr\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 20, template_hole 19),
                    template_app
                     (template_app
                       (template_hole 18,
                        template_app
                         (template_app (template_hole 17, template_hole 16),
                          template_var 1)),
                      template_app
                       (template_app (template_hole 15, template_hole 14),
                        template_var 0)))),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_hole 16),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 15, template_hole 14),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 3)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_hole 0),
                               template_app
                                (template_app
                                  (template_hole 21,
                                   template_app
                                    (template_app
(template_hole 20, template_hole 19),
                                     template_app
(template_app
  (template_hole 18,
   template_app
    (template_app (template_hole 17, template_hole 16), template_var 1)),
 template_app
  (template_app (template_hole 15, template_hole 14), template_var 0)))),
                                 template_app
                                  (template_app
                                    (template_hole 18,
                                     template_app
(template_app (template_hole 17, template_hole 16), template_var 1)),
                                   template_app
                                    (template_app
(template_hole 15, template_hole 14),
                                     template_var 0))))),
                           template_app
                            (template_app
                              (template_hole 18,
                               template_app
                                (template_app
                                  (template_hole 17, template_hole 16),
                                 template_var 1)),
                             template_app
                              (template_app
                                (template_hole 15, template_hole 14),
                               template_var 0)))))),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app (template_hole 17, template_hole 16),
                   template_var 1)),
               template_app
                (template_app (template_hole 15, template_hole 14),
                 template_var 0)))
           ))),
    ("Refine_Basic.RECT_refine",
     "[| trimono ?body; (?x, ?x') : ?R;
         !!f f' x x'.
            [| !!x x'. (x, x') : ?R ==> f x <= \<Down> ?S (f' x');
               (x, x') : ?R |]
            ==> ?body f x <= \<Down> ?S (?body' f' x') |]
      ==> REC\<^sub>T ?body ?x <= \<Down> ?S (REC\<^sub>T ?body' ?x')",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty), template_var 4),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, t_empty), template_var 3))))),
    ("Refine_Basic.prod_case_refine",
     "[| (?p', ?p) : ?R1.0 \<times>\<^sub>r ?R2.0;
         !!x1' x2' x1 x2.
            [| ?p' = (x1', x2'); ?p = (x1, x2); (x1', x1) : ?R1.0;
               (x2', x2) : ?R2.0 |]
            ==> ?f' x1' x2' <= \<Down> ?R (?f x1 x2) |]
      ==> (case ?p' of (x1', x2') => ?f' x1' x2')
          <= \<Down> ?R (case ?p of (x1, x2) => ?f x1 x2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app (template_hole 17, template_hole 16),
                    template_var 4)),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty), template_var 6),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, t_empty), template_var 5))))),
    ("Refine_Basic.REC_refine",
     "[| trimono ?body; (?x, ?x') : ?R;
         !!f f' x x'.
            [| !!x x'. (x, x') : ?R ==> f x <= \<Down> ?S (f' x');
               (x, x') : ?R; REC ?body' = f' |]
            ==> ?body f x <= \<Down> ?S (?body' f' x') |]
      ==> REC ?body ?x <= \<Down> ?S (REC ?body' ?x')",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, t_empty), template_var 4),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, t_empty), template_var 3))))),
    ("Refine_Basic.list_case_refine",
     "[| (?li, ?l) : \<langle>?S\<rangle>list_rel; ?fni <= \<Down> ?R ?fn;
         !!xi x xsi xs.
            [| (xi, x) : ?S; (xsi, xs) : \<langle>?S\<rangle>list_rel;
               ?li = xi # xsi; ?l = x # xs |]
            ==> ?fci xi xsi <= \<Down> ?R (?fc x xs) |]
      ==> (case ?li of [] => ?fni | xi # xsi => ?fci xi xsi)
          <= \<Down> ?R (case ?l of [] => ?fn | x # xs => ?fc x xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 7),
                  template_var 6)),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 5))
            ),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4), t_empty),
           template_var 7),
         template_app
          (template_app (template_hole 12, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2), t_empty),
             template_var 6)))))]:
   (string * thm * template) list
### theory "Draft.Refine_BasicMoreTemplates"
### 0.553s elapsed time, 0.803s cpu time, 0.093s GC time
val it = (): unit
