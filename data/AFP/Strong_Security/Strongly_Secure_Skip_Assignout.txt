Loading theory "Draft.Types" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.Strongly_Secure_Skip_Assign" via "Draft.MWLf")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring sort constraints in type variables(s): "'d"
### in type abbreviation "DomainAssignment"
### theory "Draft.Types"
### 0.043s elapsed time, 0.209s cpu time, 0.000s GC time
Loading theory "Draft.MWLf" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.Strongly_Secure_Skip_Assign")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.505s cpu time, 0.040s GC time
Loading theory "Draft.Strong_Security" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.Strongly_Secure_Skip_Assign" via "Draft.Parallel_Composition" via "Draft.Up_To_Technique")
locale Strong_Security
  fixes SR :: "(('com * ('id => 'val)) * 'com list * ('id => 'val)) set"
    and DA :: "'id => 'd"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.841s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 41 of "$AFP/Strong_Security/Strong_Security.thy") produces 50 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m1)
###               ("_idts" ("_position" m1')
###                 ("_idts" ("_position" m2) ("_position" W))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V) ("_position" i))
###                   ("_position" m1) ("_position" W) ("_position" m2))
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1')))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" W') ("_position" m2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V') ("_position" i))
###                     ("_position" m1') ("_position" W') ("_position" m2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" W)
###                       ("_tuple_arg" ("_position" W')))
###                     ("\<^const>local.d_equal'"
###                       ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                       ("_position" d) ("_position" m2'))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m1)
###               ("_idts" ("_position" m1')
###                 ("_idts" ("_position" m2) ("_position" W))))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.d_equal'"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))
###                     ("_position" m1) ("_position" W) ("_position" m2))
###                   ("_position" m1))
###                 ("_position" d) ("_position" m1'))
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" W') ("_position" m2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V') ("_position" i))
###                     ("_position" m1') ("_position" W') ("_position" m2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" W)
###                       ("_tuple_arg" ("_position" W')))
###                     ("\<^const>local.d_equal'"
###                       ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                       ("_position" d) ("_position" m2'))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>HOL.implies"
###             ("\<^const>local.d_equal'"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" m1)
###                   ("_idts" ("_position" m1')
###                     ("_idts" ("_position" m2) ("_position" W))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))
###                     ("_position" m1) ("_position" W) ("_position" m2))
###                   ("_position" m1)))
###               ("_position" d) ("_position" m1'))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" W') ("_position" m2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V') ("_position" i))
###                   ("_position" m1') ("_position" W') ("_position" m2'))
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                   ("\<^const>local.d_equal'"
###                     ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                     ("_position" d) ("_position" m2')))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>local.d_equal'"
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" m1)
###                   ("_idts" ("_position" m1')
###                     ("_idts" ("_position" m2) ("_position" W))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))
###                     ("_position" m1) ("_position" W) ("_position" m2))
###                   ("_position" m1)))))
###           ("_position" d) ("_position" m1'))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" W') ("_position" m2'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.SRabbr"
###               ("\<^const>List.nth" ("_position" V') ("_position" i))
###               ("_position" m1') ("_position" W') ("_position" m2'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###               ("\<^const>local.d_equal'"
###                 ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                 ("_position" d) ("_position" m2')))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.implies"
###           ("\<^const>local.d_equal'"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" m1)
###                   ("_idts" ("_position" m1')
###                     ("_idts" ("_position" m2) ("_position" W))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))
###                     ("_position" m1) ("_position" W) ("_position" m2))
###                   ("_position" m1))))
###             ("_position" d) ("_position" m1'))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" W') ("_position" m2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V') ("_position" i))
###                 ("_position" m1') ("_position" W') ("_position" m2'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                 ("\<^const>local.d_equal'"
###                   ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                   ("_position" d) ("_position" m2'))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m1)
###               ("_idts" ("_position" m1')
###                 ("_idts" ("_position" m2) ("_position" W))))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2))
###               ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                 ("\<^const>HOL.implies" ("_position" m1')
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" W') ("_position" m2'))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>local.SRabbr"
###                         ("\<^const>List.nth" ("_position" V')
###                           ("_position" i))
###                         ("_position" m1') ("_position" W')
###                         ("_position" m2'))
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" W)
###                           ("_tuple_arg" ("_position" W')))
###                         ("\<^const>local.d_equal'"
###                           ("\<^const>HOL.conj" ("_position" R)
###                             ("_position" m2))
###                           ("_position" d) ("_position" m2'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m1)
###               ("_idts" ("_position" m1')
###                 ("_idts" ("_position" m2) ("_position" W))))
###             ("\<^const>local.d_equal'"
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V) ("_position" i))
###                   ("_position" m1) ("_position" W) ("_position" m2))
###                 ("_position" m1))
###               ("_position" d)
###               ("\<^const>HOL.implies" ("_position" m1')
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" W') ("_position" m2'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.SRabbr"
###                       ("\<^const>List.nth" ("_position" V') ("_position" i))
###                       ("_position" m1') ("_position" W') ("_position" m2'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" W)
###                         ("_tuple_arg" ("_position" W')))
###                       ("\<^const>local.d_equal'"
###                         ("\<^const>HOL.conj" ("_position" R)
###                           ("_position" m2))
###                         ("_position" d) ("_position" m2')))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("_All_less" ("_position" i)
###           ("_applC" ("_position" length) ("_position" V))
###           ("\<^const>local.d_equal'"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" m1)
###                 ("_idts" ("_position" m1')
###                   ("_idts" ("_position" m2) ("_position" W))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V) ("_position" i))
###                   ("_position" m1) ("_position" W) ("_position" m2))
###                 ("_position" m1)))
###             ("_position" d)
###             ("\<^const>HOL.implies" ("_position" m1')
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" W') ("_position" m2'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>local.SRabbr"
###                     ("\<^const>List.nth" ("_position" V') ("_position" i))
###                     ("_position" m1') ("_position" W') ("_position" m2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" W)
###                       ("_tuple_arg" ("_position" W')))
###                     ("\<^const>local.d_equal'"
###                       ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                       ("_position" d) ("_position" m2'))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("\<^const>local.d_equal'"
###         ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###           ("_position" R)
###           ("_All_less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" m1)
###                 ("_idts" ("_position" m1')
###                   ("_idts" ("_position" m2) ("_position" W))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V) ("_position" i))
###                   ("_position" m1) ("_position" W) ("_position" m2))
###                 ("_position" m1)))))
###         ("_position" d)
###         ("\<^const>HOL.implies" ("_position" m1')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" W') ("_position" m2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V') ("_position" i))
###                 ("_position" m1') ("_position" W') ("_position" m2'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                 ("\<^const>local.d_equal'"
###                   ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                   ("_position" d) ("_position" m2'))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_d_Bisimulation)
###     ("_cargs" ("_position" d) ("_position" R)))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj"
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###           ("_applC" ("_position" length) ("_position" V'))))
###       ("_Ball" ("_pattern" ("_position" V) ("_position" V')) ("_position" R)
###         ("\<^const>local.d_equal'"
###           ("_All_less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" m1)
###                 ("_idts" ("_position" m1')
###                   ("_idts" ("_position" m2) ("_position" W))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V) ("_position" i))
###                   ("_position" m1) ("_position" W) ("_position" m2))
###                 ("_position" m1))))
###           ("_position" d)
###           ("\<^const>HOL.implies" ("_position" m1')
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" W') ("_position" m2'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.SRabbr"
###                   ("\<^const>List.nth" ("_position" V') ("_position" i))
###                   ("_position" m1') ("_position" W') ("_position" m2'))
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                   ("\<^const>local.d_equal'"
###                     ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###                     ("_position" d) ("_position" m2')))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/Strong_Security/Strong_Security.thy") produces 5 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" V)
###     ("_idts" ("_position" V')
###       ("_idts" ("_position" m1)
###         ("_idts" ("_position" m1')
###           ("_idts" ("_position" m2)
###             ("_idts" ("_position" W) ("_position" i)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Strong_d_Bisimulation)
###           ("_cargs" ("_position" d) ("_position" R))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###               ("_position" R)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" W') ("_position" m2'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.SRabbr"
###             ("\<^const>List.nth" ("_position" V') ("_position" i))
###             ("_position" m1') ("_position" W') ("_position" m2'))
###           ("\<^const>local.d_equal'"
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                 ("_position" R))
###               ("_position" m2))
###             ("_position" d) ("_position" m2')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" V)
###     ("_idts" ("_position" V')
###       ("_idts" ("_position" m1)
###         ("_idts" ("_position" m1')
###           ("_idts" ("_position" m2)
###             ("_idts" ("_position" W) ("_position" i)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Strong_d_Bisimulation)
###           ("_cargs" ("_position" d) ("_position" R))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###               ("_position" R)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" W') ("_position" m2'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.SRabbr"
###               ("\<^const>List.nth" ("_position" V') ("_position" i))
###               ("_position" m1') ("_position" W') ("_position" m2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                 ("_position" R))
###               ("_position" m2))))
###         ("_position" d) ("_position" m2')))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" V)
###     ("_idts" ("_position" V')
###       ("_idts" ("_position" m1)
###         ("_idts" ("_position" m1')
###           ("_idts" ("_position" m2)
###             ("_idts" ("_position" W) ("_position" i)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Strong_d_Bisimulation)
###           ("_cargs" ("_position" d) ("_position" R))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###               ("_position" R)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" W') ("_position" m2'))
###         ("\<^const>local.d_equal'"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.SRabbr"
###               ("\<^const>List.nth" ("_position" V') ("_position" i))
###               ("_position" m1') ("_position" W') ("_position" m2'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###                 ("_position" R))
###               ("_position" m2)))
###           ("_position" d) ("_position" m2'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" V)
###     ("_idts" ("_position" V')
###       ("_idts" ("_position" m1)
###         ("_idts" ("_position" m1')
###           ("_idts" ("_position" m2)
###             ("_idts" ("_position" W) ("_position" i)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Strong_d_Bisimulation)
###           ("_cargs" ("_position" d) ("_position" R))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###               ("_position" R)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" W') ("_position" m2'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.SRabbr"
###             ("\<^const>List.nth" ("_position" V') ("_position" i))
###             ("_position" m1') ("_position" W') ("_position" m2'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###               ("_position" R))
###             ("\<^const>local.d_equal'" ("_position" m2) ("_position" d)
###               ("_position" m2'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" V)
###     ("_idts" ("_position" V')
###       ("_idts" ("_position" m1)
###         ("_idts" ("_position" m1')
###           ("_idts" ("_position" m2)
###             ("_idts" ("_position" W) ("_position" i)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" Strong_d_Bisimulation)
###           ("_cargs" ("_position" d) ("_position" R))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" V))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###               ("_position" R)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.SRabbr"
###                 ("\<^const>List.nth" ("_position" V) ("_position" i))
###                 ("_position" m1) ("_position" W) ("_position" m2)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.d_equal'" ("_position" m1) ("_position" d)
###                   ("_position" m1'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" W') ("_position" m2'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.SRabbr"
###             ("\<^const>List.nth" ("_position" V') ("_position" i))
###             ("_position" m1') ("_position" W') ("_position" m2'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" W) ("_tuple_arg" ("_position" W')))
###             ("\<^const>local.d_equal'"
###               ("\<^const>HOL.conj" ("_position" R) ("_position" m2))
###               ("_position" d) ("_position" m2'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Security"
### 0.217s elapsed time, 0.856s cpu time, 0.075s GC time
Loading theory "Draft.Up_To_Technique" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.Strongly_Secure_Skip_Assign" via "Draft.Parallel_Composition")
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.383s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs")
locale Strong_Security
  fixes SR :: "(('com * ('id => 'val)) * 'com list * ('id => 'val)) set"
    and DA :: "'id => 'd"
### theory "Draft.Up_To_Technique"
### 0.055s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.Parallel_Composition" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.Strongly_Secure_Skip_Assign")
locale Strong_Security
  fixes SR :: "(('com * ('id => 'val)) * 'com list * ('id => 'val)) set"
    and DA :: "'id => 'd"
### Ambiguous input (line 127 of "$AFP/Strong_Security/Parallel_Composition.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.relatedbyUSdB" ("_list" ("_position" c))
###       ("_position" d) ("_list" ("_position" c')))
###     ("\<^const>local.relatedbyUSdB" ("_position" V) ("_position" d)
###       ("_position" V'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relatedbyUSdB" ("_list" ("_position" c)) ("_position" d)
###     ("\<^const>HOL.conj" ("_list" ("_position" c'))
###       ("\<^const>local.relatedbyUSdB" ("_position" V) ("_position" d)
###         ("_position" V')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Parallel_Composition"
### 0.073s elapsed time, 0.278s cpu time, 0.083s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
locale MWLf_semantics
  fixes E :: "'exp => ('id => 'val) => 'val"
    and BMap :: "'val => bool"
### Ambiguous input (line 44 of "$AFP/Strong_Security/MWLf.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" E) ("_cargs" ("_position" e) ("_position" m)))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>MWLfSteps_det'"
###       ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" e))
###       ("_position" m) ("\<^const>List.list.Nil")
###       ("_applC" ("_position" m)
###         ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" E) ("_cargs" ("_position" e) ("_position" m)))
###       ("_position" v)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>MWLfSteps_det'"
###       ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" e))
###       ("_position" m) ("\<^const>List.list.Nil")
###       ("_Update" ("_position" m)
###         ("_updbind" ("_position" x) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "MWLfSteps_detp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.095s elapsed time, 4.150s cpu time, 0.829s GC time
### theory "HOL-Library.BigO"
### 1.015s elapsed time, 3.804s cpu time, 0.746s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "MWLfSteps_ndetp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.MWLf"
### 1.658s elapsed time, 5.941s cpu time, 0.994s GC time
Loading theory "Draft.Strongly_Secure_Skip_Assign" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Strongly_Secure_Programs
  fixes E :: "'exp => ('id => 'val) => 'val"
    and BMap :: "'val => bool"
    and DA :: "'id => 'd"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 23 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>relatedbyUSdB" ("_position" V) ("_position" d)
###     ("_position" V'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###     ("_applC" ("_position" USdB) ("_position" d))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" V)
###     ("_cargs" ("\<^const>local.USdBname" ("_position" d)) ("_position" V')))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" V) ("_tuple_arg" ("_position" V')))
###     ("_applC" ("_position" USdB) ("_position" d))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>d_indistinguishable'" ("_position" e1) ("_position" d)
###     ("\<^const>Pure.eq" ("_position" e2)
###       ("_applC" ("_position" d_indistinguishable)
###         ("_cargs" ("_position" d)
###           ("_cargs" ("_position" e1) ("_position" e2)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>d_indistinguishable'" ("_position" e1) ("_position" d)
###     ("_position" e2))
###   ("_applC" ("_position" d_indistinguishable)
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>d_indistinguishable'" ("_position" e1) ("_position" d)
###       ("\<^const>Pure.eq" ("_position" e2)
###         ("_position" d_indistinguishable)))
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>d_indistinguishable'" ("_position" e1) ("_position" d)
###       ("\<^const>Pure.eq" ("_position" e2)
###         ("_applC" ("_position" d_indistinguishable) ("_position" d))))
###     ("_cargs" ("_position" e1) ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>d_indistinguishable'" ("_position" e1) ("_position" d)
###       ("\<^const>Pure.eq" ("_position" e2)
###         ("_applC" ("_position" d_indistinguishable)
###           ("_cargs" ("_position" d) ("_position" e1)))))
###     ("_position" e2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" e'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.d_indistinguishable'" ("_position" e')
###           ("_position" d) ("_position" e))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e') ("_position" d)
###       ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###     ("\<^const>local.d_indistinguishable'"
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" e'))
###         ("\<^const>HOL.Trueprop" ("_position" e')))
###       ("_position" d) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" e'))
###         ("\<^const>HOL.Trueprop" ("_position" e'))))
###     ("_position" d) ("_position" e)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.d_indistinguishable'" ("_position" e)
###           ("_position" d) ("_position" e')))
###       ("\<^const>HOL.Trueprop" ("_position" e')))
###     ("_position" d) ("_position" e)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>MWLf.MWLfCom.Seq"
###         ("\<^const>local.d_indistinguishable'" ("_position" e)
###           ("_position" d) ("_position" e'))
###         ("\<^const>local.d_indistinguishable'" ("_position" e')
###           ("_position" d) ("_position" e'')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###         ("\<^const>MWLf.MWLfCom.Seq" ("_position" e')
###           ("\<^const>local.d_indistinguishable'" ("_position" e')
###             ("_position" d) ("_position" e''))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###         ("_position" e')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.d_indistinguishable'" ("_position" e')
###           ("_position" d) ("_position" e'')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_indistinguishable'"
###         ("\<^const>MWLf.MWLfCom.Seq"
###           ("\<^const>local.d_indistinguishable'" ("_position" e)
###             ("_position" d) ("_position" e'))
###           ("_position" e'))
###         ("_position" d) ("_position" e''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_indistinguishable'"
###         ("\<^const>local.d_indistinguishable'" ("_position" e)
###           ("_position" d)
###           ("\<^const>MWLf.MWLfCom.Seq" ("_position" e') ("_position" e')))
###         ("_position" d) ("_position" e''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###         ("\<^const>local.d_indistinguishable'"
###           ("\<^const>MWLf.MWLfCom.Seq" ("_position" e') ("_position" e'))
###           ("_position" d) ("_position" e'')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.d_indistinguishable'" ("_position" e) ("_position" d)
###       ("_position" e''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("_bigimpl"
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>MWLf.MWLfCom.Seq"
###             ("\<^const>local.d_indistinguishable'" ("_position" e)
###               ("_position" d) ("_position" e'))
###             ("\<^const>local.d_indistinguishable'" ("_position" e')
###               ("_position" d) ("_position" e'')))))
###       ("\<^const>HOL.Trueprop" ("_position" e)))
###     ("_position" d) ("_position" e'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("_bigimpl"
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.d_indistinguishable'" ("_position" e)
###             ("_position" d)
###             ("\<^const>MWLf.MWLfCom.Seq" ("_position" e')
###               ("\<^const>local.d_indistinguishable'" ("_position" e')
###                 ("_position" d) ("_position" e''))))))
###       ("\<^const>HOL.Trueprop" ("_position" e)))
###     ("_position" d) ("_position" e'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.d_indistinguishable'" ("_position" e)
###             ("_position" d) ("_position" e')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.d_indistinguishable'" ("_position" e')
###               ("_position" d) ("_position" e'')))))
###       ("\<^const>HOL.Trueprop" ("_position" e)))
###     ("_position" d) ("_position" e'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.d_indistinguishable'"
###     ("_bigimpl"
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.d_indistinguishable'"
###             ("\<^const>MWLf.MWLfCom.Seq"
###               ("\<^const>local.d_indistinguishable'" ("_position" e)
###                 ("_position" d) ("_position" e'))
###               ("_position" e'))
###             ("_position" d) ("_position" e''))))
###       ("\<^const>HOL.Trueprop" ("_position" e)))
###     ("_position" d) ("_position" e'')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relatedbyUSdB" ("_list" ("\<^const>MWLf.MWLfCom.Skip"))
###     ("_position" d) ("_list" ("\<^const>MWLf.MWLfCom.Skip"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_list" ("\<^const>MWLf.MWLfCom.Skip"))
###     ("_cargs" ("\<^const>local.USdBname" ("_position" d))
###       ("_list" ("\<^const>MWLf.MWLfCom.Skip")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Strong_Security/Strongly_Secure_Skip_Assign.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relatedbyUSdB"
###     ("_list"
###       ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" e)))
###     ("_position" d)
###     ("_list"
###       ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" e')))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_list"
###       ("\<^const>MWLf.MWLfCom.Assign" ("_position" x) ("_position" e)))
###     ("_cargs" ("\<^const>local.USdBname" ("_position" d))
###       ("_list"
###         ("\<^const>MWLf.MWLfCom.Assign" ("_position" x)
###           ("_position" e'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strongly_Secure_Skip_Assign"
### 0.230s elapsed time, 0.488s cpu time, 0.045s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.995s elapsed time, 6.073s cpu time, 1.028s GC time
Loading theory "Draft.Templates" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Strongly_Secure_Skip_AssignMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.474s elapsed time, 0.520s cpu time, 0.054s GC time
Loading theory "Draft.Strongly_Secure_Skip_AssignMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Strongly_Secure_Skip_AssignMoreTemplates"
### 0.294s elapsed time, 0.359s cpu time, 0.000s GC time
val it = (): unit
