   [("Huffman.weight_mergeSibling",
     "weight (mergeSibling ?t ?a) = weight ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Huffman.length_insortTree",
     "length (insortTree ?t ?ts) = length ?ts + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Huffman.consistent\<^sub>F_insortTree",
     "consistent\<^sub>F (insortTree ?t ?ts) =
      consistent\<^sub>F (?t # ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Huffman.height\<^sub>F_insortTree",
     "height\<^sub>F (insortTree ?t ?ts) =
      max (Huffman.height ?t) (height\<^sub>F ?ts)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Huffman.cachedWeight_splitLeaf",
     "cachedWeight (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      cachedWeight ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Huffman.height_swapLeaves",
     "Huffman.height (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      Huffman.height ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Huffman.alphabet_uniteTrees",
     "alphabet (uniteTrees ?t\<^sub>1 ?t\<^sub>2) =
      alphabet ?t\<^sub>1 Un alphabet ?t\<^sub>2",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Huffman.alphabet\<^sub>F_insortTree",
     "alphabet\<^sub>F (insortTree ?t ?ts) =
      alphabet ?t Un alphabet\<^sub>F ?ts",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Huffman.freq\<^sub>F_insortTree",
     "freq\<^sub>F (insortTree ?t ?ts) =
      (%a. freq ?t a + freq\<^sub>F ?ts a)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("Huffman.freq_uniteTrees",
     "freq (uniteTrees ?t\<^sub>1 ?t\<^sub>2) ?a =
      freq ?t\<^sub>1 ?a + freq ?t\<^sub>2 ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Huffman.max_0_imp_0", "(max ?x ?y = 0) = (?x = 0 & ?y = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Huffman.alphabet_splitLeaf",
     "alphabet (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      (if ?a : alphabet ?t then alphabet ?t Un {?b} else alphabet ?t)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 6, template_var 4))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app (template_hole 6, template_var 4)))),
    ("Huffman.alphabet_swapLeaves",
     "alphabet (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      (if ?a : alphabet ?t
       then if ?b : alphabet ?t then alphabet ?t
            else alphabet ?t - {?a} Un {?b}
       else if ?b : alphabet ?t then alphabet ?t - {?b} Un {?a}
            else alphabet ?t)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 7, template_var 4))),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 7, template_var 4))),
               template_app (template_hole 7, template_var 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 7, template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_app (template_hole 7, template_var 4)))))]
