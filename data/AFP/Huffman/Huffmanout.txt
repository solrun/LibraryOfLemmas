Loading theory "Draft.Huffman" (required by "Draft.HuffmanMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ignoring duplicate rewrite rule:
### ?b1 <= ?y ==> max ?y ?b1 == ?y
### Ignoring duplicate rewrite rule:
### ?a1 <= ?y ==> max ?a1 ?y == ?y
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.167s elapsed time, 0.678s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.262s elapsed time, 1.067s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.392s elapsed time, 1.567s cpu time, 0.215s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  alphabet :: "'a tree => 'a set"
consts
  alphabet\<^sub>F :: "'a tree list => 'a set"
consts
  consistent :: "'a tree => bool"
consts
  consistent\<^sub>F :: "'a tree list => bool"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  depth :: "'a tree => 'a => nat"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  height :: "'a tree => nat"
consts
  height\<^sub>F :: "'a tree list => nat"
consts
  freq :: "'a tree => 'a => nat"
consts
  freq\<^sub>F :: "'a tree list => 'a => nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  weight :: "'a tree => nat"
Found termination order: "size <*mlex*> {}"
consts
  cost :: "'a tree => nat"
consts
  flat :: "'a list stream => 'a stream"
consts
  cachedWeight :: "'a tree => nat"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  insortTree :: "'a tree => 'a tree list => 'a tree list"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.225s elapsed time, 4.613s cpu time, 1.063s GC time
### Missing patterns in function definition:
### huffman [] = undefined
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.190s elapsed time, 4.404s cpu time, 0.958s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  swapLeaves :: "'a tree => nat => 'a => nat => 'a => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  splitLeaf :: "'a tree => nat => 'a => nat => 'a => 'a tree"
consts
  splitLeaf\<^sub>F ::
    "'a tree list => nat => 'a => nat => 'a => 'a tree list"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Huffman"
### 2.506s elapsed time, 7.930s cpu time, 1.395s GC time
### theory "HOL-Library.Tree"
### 2.515s elapsed time, 7.584s cpu time, 1.394s GC time
Loading theory "Draft.Templates" (required by "Draft.HuffmanMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HuffmanMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 0.592s cpu time, 0.068s GC time
Loading theory "Draft.HuffmanMoreTemplates"
val templateLemmas =
   [("Huffman.finite_alphabet", "finite (alphabet ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Huffman.exists_in_alphabet", "EX a. a : alphabet ?t",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Huffman.insortTree_ne_Nil", "insortTree ?t ?ts ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Huffman.depth_le_height", "depth ?t ?a <= Huffman.height ?t",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Huffman.weight_mergeSibling",
     "weight (mergeSibling ?t ?a) = weight ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Huffman.consistent_mergeSibling",
     "consistent ?t ==> consistent (mergeSibling ?t ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Huffman.sortedByWeight_Cons_imp_sortedByWeight",
     "sortedByWeight (?t # ?ts) ==> sortedByWeight ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Huffman.length_insortTree",
     "length (insortTree ?t ?ts) = length ?ts + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Huffman.consistent\<^sub>F_insortTree",
     "consistent\<^sub>F (insortTree ?t ?ts) =
      consistent\<^sub>F (?t # ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Huffman.consistent_swapSyms",
     "consistent ?t ==> consistent (swapSyms ?t ?a ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Huffman.height\<^sub>F_insortTree",
     "height\<^sub>F (insortTree ?t ?ts) =
      max (Huffman.height ?t) (height\<^sub>F ?ts)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Huffman.cachedWeight_splitLeaf",
     "cachedWeight (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      cachedWeight ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Huffman.height_swapLeaves",
     "Huffman.height (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      Huffman.height ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 4))),
    ("Huffman.alphabet_uniteTrees",
     "alphabet (uniteTrees ?t\<^sub>1 ?t\<^sub>2) =
      alphabet ?t\<^sub>1 Un alphabet ?t\<^sub>2",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Huffman.alphabet\<^sub>F_insortTree",
     "alphabet\<^sub>F (insortTree ?t ?ts) =
      alphabet ?t Un alphabet\<^sub>F ?ts",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Huffman.swapSyms_id", "consistent ?t ==> swapSyms ?t ?a ?a = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0),
         template_var 1))),
    ("Huffman.height_0_imp_cost_0", "Huffman.height ?t = 0 ==> cost ?t = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Huffman.sibling_sibling_id",
     "consistent ?t ==> sibling ?t (sibling ?t ?a) = ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Huffman.consistent_swapFourSyms",
     "consistent ?t ==> consistent (swapFourSyms ?t ?a ?b ?c ?d)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Huffman.consistent_swapLeaves",
     "consistent ?t ==>
      consistent (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Huffman.height_0_imp_sibling_id",
     "Huffman.height ?t = 0 ==> sibling ?t ?a = ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Huffman.height_0_imp_cachedWeight_eq_weight",
     "Huffman.height ?t = 0 ==> cachedWeight ?t = weight ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Huffman.alphabet_huffman",
     "?ts ~= [] ==> alphabet (huffman ?ts) = alphabet\<^sub>F ?ts",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Huffman.in_alphabet_imp_sibling_in_alphabet",
     "?a : alphabet ?t ==> sibling ?t ?a : alphabet ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Huffman.notin_alphabet_imp_sibling_id",
     "?a ~: alphabet ?t ==> sibling ?t ?a = ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Huffman.notin_alphabet_imp_freq_0",
     "?a ~: alphabet ?t ==> freq ?t ?a = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Huffman.notin_alphabet_imp_mergeSibling_id",
     "?a ~: alphabet ?t ==> mergeSibling ?t ?a = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("Huffman.notin_alphabet\<^sub>F_imp_freq\<^sub>F_0",
     "?a ~: alphabet\<^sub>F ?ts ==> freq\<^sub>F ?ts ?a = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Huffman.freq\<^sub>F_insortTree",
     "freq\<^sub>F (insortTree ?t ?ts) =
      (%a. freq ?t a + freq\<^sub>F ?ts a)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("Huffman.freq_uniteTrees",
     "freq (uniteTrees ?t\<^sub>1 ?t\<^sub>2) ?a =
      freq ?t\<^sub>1 ?a + freq ?t\<^sub>2 ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Huffman.max_0_imp_0", "(max ?x ?y = 0) = (?x = 0 & ?y = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Huffman.depth_sibling",
     "consistent ?t ==> depth ?t (sibling ?t ?a) = depth ?t ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Huffman.consistent_huffman",
     "[| consistent\<^sub>F ?ts; ?ts ~= [] |] ==> consistent (huffman ?ts)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Huffman.weight_eq_Sum_freq",
     "consistent ?t ==> weight ?t = sum (freq ?t) (alphabet ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Huffman.exists_at_height",
     "consistent ?t ==> EX a:alphabet ?t. depth ?t a = Huffman.height ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             t_empty)
           ))),
    ("Huffman.freq_huffman",
     "?ts ~= [] ==> freq (huffman ?ts) ?a = freq\<^sub>F ?ts ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Huffman.sibling_ne_imp_sibling_in_alphabet",
     "sibling ?t ?a ~= ?a ==> sibling ?t ?a : alphabet ?t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Huffman.sortedByWeight_Cons_imp_forall_weight_ge",
     "sortedByWeight (?t # ?ts) ==> ALL u:set ?ts. weight ?t <= weight u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Huffman.notin_alphabet_imp_splitLeaf_id",
     "?a ~: alphabet ?t ==> splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("Huffman.swapLeaves_id_when_notin_alphabet",
     "?a ~: alphabet ?t ==> swapLeaves ?t ?w ?a ?w' ?a = ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0),
           template_var 3),
         template_var 2))),
    ("Huffman.notin_alphabet\<^sub>F_imp_splitLeaf\<^sub>F_id",
     "?a ~: alphabet\<^sub>F ?ts ==>
      splitLeaf\<^sub>F ?ts ?w\<^sub>a ?a ?w\<^sub>b ?b = ?ts",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("Huffman.swapLeaves_id",
     "consistent ?t ==> swapLeaves ?t (freq ?t ?a) ?a (freq ?t ?a) ?a = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("Huffman.sibling_reciprocal",
     "[| consistent ?t; sibling ?t ?a = ?b |] ==> sibling ?t ?b = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Huffman.cost_eq_Sum_freq_mult_depth",
     "consistent ?t ==>
      cost ?t = (SUM a:alphabet ?t. freq ?t a * depth ?t a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Huffman.consistent_splitLeaf",
     "[| consistent ?t; ?b ~: alphabet ?t |]
      ==> consistent (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 4))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("Huffman.alphabet_swapSyms",
     "[| ?a : alphabet ?t; ?b : alphabet ?t |]
      ==> alphabet (swapSyms ?t ?a ?b) = alphabet ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("Huffman.freq_0_right",
     "[| alphabet ?t\<^sub>1 Int alphabet ?t\<^sub>2 = {};
         ?a : alphabet ?t\<^sub>1 |]
      ==> freq ?t\<^sub>2 ?a = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Huffman.freq_0_left",
     "[| alphabet ?t\<^sub>1 Int alphabet ?t\<^sub>2 = {};
         ?a : alphabet ?t\<^sub>2 |]
      ==> freq ?t\<^sub>1 ?a = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Huffman.sortedByWeight_insortTree",
     "[| sortedByWeight ?ts; Huffman.height ?t = 0;
         height\<^sub>F ?ts = 0 |]
      ==> sortedByWeight (insortTree ?t ?ts)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Huffman.alphabet_splitLeaf",
     "alphabet (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      (if ?a : alphabet ?t then alphabet ?t Un {?b} else alphabet ?t)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 6, template_var 4))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app (template_hole 6, template_var 4)))),
    ("Huffman.height_gt_0_imp_mergeSibling_left",
     "0 < Huffman.height ?t\<^sub>1 ==>
      mergeSibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
      Huffman.tree.Node ?w (mergeSibling ?t\<^sub>1 ?a)
       (mergeSibling ?t\<^sub>2 ?a)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Huffman.height_gt_0_imp_mergeSibling_right",
     "0 < Huffman.height ?t\<^sub>2 ==>
      mergeSibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
      Huffman.tree.Node ?w (mergeSibling ?t\<^sub>1 ?a)
       (mergeSibling ?t\<^sub>2 ?a)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Huffman.consistent_uniteTrees",
     "[| consistent ?t\<^sub>1; consistent ?t\<^sub>2;
         alphabet ?t\<^sub>1 Int alphabet ?t\<^sub>2 = {} |]
      ==> consistent (uniteTrees ?t\<^sub>1 ?t\<^sub>2)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Huffman.height_gt_0_alphabet_eq_imp_height_gt_0",
     "[| 0 < Huffman.height ?t; consistent ?t; alphabet ?t = alphabet ?u |]
      ==> 0 < Huffman.height ?u",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_inequation
        (less_than, template_hole 4,
         template_app (template_hole 3, template_var 0)))),
    ("Huffman.height_gt_0_in_alphabet_imp_sibling_left",
     "[| 0 < Huffman.height ?t\<^sub>1; ?a : alphabet ?t\<^sub>1 |]
      ==> sibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
          sibling ?t\<^sub>1 ?a",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 2)))),
    ("Huffman.height_gt_0_in_alphabet_imp_sibling_right",
     "[| 0 < Huffman.height ?t\<^sub>2; ?a : alphabet ?t\<^sub>1 |]
      ==> sibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
          sibling ?t\<^sub>1 ?a",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Huffman.height_gt_0_notin_alphabet_imp_sibling_left",
     "[| 0 < Huffman.height ?t\<^sub>1; ?a ~: alphabet ?t\<^sub>1 |]
      ==> sibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
          sibling ?t\<^sub>2 ?a",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Huffman.height_gt_0_notin_alphabet_imp_sibling_right",
     "[| 0 < Huffman.height ?t\<^sub>2; ?a ~: alphabet ?t\<^sub>1 |]
      ==> sibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
          sibling ?t\<^sub>2 ?a",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 2)))),
    ("Huffman.optimum_huffman",
     "[| consistent\<^sub>F ?ts; height\<^sub>F ?ts = 0; sortedByWeight ?ts;
         ?ts ~= [] |]
      ==> optimum (huffman ?ts)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Huffman.freq_swapSyms",
     "[| consistent ?t; ?a : alphabet ?t; ?b : alphabet ?t |]
      ==> freq (swapSyms ?t ?a ?b) = freq ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Huffman.height\<^sub>F_0_imp_Leaf_freq\<^sub>F_in_set",
     "[| consistent\<^sub>F ?ts; height\<^sub>F ?ts = 0;
         ?a : alphabet\<^sub>F ?ts |]
      ==> Huffman.tree.Leaf (freq\<^sub>F ?ts ?a) ?a : set ?ts",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Huffman.le_le_imp_sum_mult_le_sum_mult",
     "[| ?i <= ?j; ?m <= ?n |] ==> ?i * ?n + ?j * ?m <= ?i * ?m + ?j * ?n",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Huffman.either_height_gt_0_imp_mergeSibling",
     "0 < Huffman.height ?t\<^sub>1 | 0 < Huffman.height ?t\<^sub>2 ==>
      mergeSibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
      Huffman.tree.Node ?w (mergeSibling ?t\<^sub>1 ?a)
       (mergeSibling ?t\<^sub>2 ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 3))),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Huffman.depth_swapSyms_neither",
     "[| consistent ?t; ?c ~= ?a; ?c ~= ?b |]
      ==> depth (swapSyms ?t ?a ?b) ?c = depth ?t ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 2)))),
    ("Huffman.alphabet_mergeSibling",
     "[| consistent ?t; ?a : alphabet ?t |]
      ==> alphabet (mergeSibling ?t ?a) =
          alphabet ?t - {sibling ?t ?a} Un {?a}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 7, template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0))),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Huffman.depth_swapLeaves_neither",
     "[| consistent ?t; ?c ~= ?a; ?c ~= ?b |]
      ==> depth (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) ?c =
          depth ?t ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1),
                   template_var 3),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 5),
           template_var 4)))),
    ("Huffman.sibling_swapSyms_sibling",
     "[| consistent ?t; sibling ?t ?b ~= ?b; ?a ~= ?b |]
      ==> sibling (swapSyms ?t ?a (sibling ?t ?b)) ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_var 0),
         template_var 1))),
    ("Huffman.either_height_gt_0_imp_sibling",
     "0 < Huffman.height ?t\<^sub>1 | 0 < Huffman.height ?t\<^sub>2 ==>
      sibling (Huffman.tree.Node ?w ?t\<^sub>1 ?t\<^sub>2) ?a =
      (if ?a : alphabet ?t\<^sub>1 then sibling ?t\<^sub>1 ?a
       else sibling ?t\<^sub>2 ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 3))),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app (template_hole 6, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("Huffman.cost_mergeSibling",
     "[| consistent ?t; sibling ?t ?a ~= ?a |]
      ==> cost (mergeSibling ?t ?a) + freq ?t ?a + freq ?t (sibling ?t ?a) =
          cost ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 1)))),
    ("Huffman.weight_splitLeaf",
     "[| consistent ?t; ?a : alphabet ?t;
         freq ?t ?a = ?w\<^sub>a + ?w\<^sub>b |]
      ==> weight (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) = weight ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 4)))),
    ("Huffman.depth_max_heightE_left",
     "[| depth ?t\<^sub>1 ?a =
         max (Huffman.height ?t\<^sub>1) (Huffman.height ?t\<^sub>2);
         [| depth ?t\<^sub>1 ?a = Huffman.height ?t\<^sub>1;
            Huffman.height ?t\<^sub>2 <= Huffman.height ?t\<^sub>1 |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 3)),
            template_app (template_hole 1, template_var 1))),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app (template_hole 2, template_var 3))],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 1, template_var 1),
               template_app (template_hole 2, template_var 3))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Huffman.depth_max_heightE_right",
     "[| depth ?t\<^sub>2 ?a =
         max (Huffman.height ?t\<^sub>1) (Huffman.height ?t\<^sub>2);
         [| depth ?t\<^sub>2 ?a = Huffman.height ?t\<^sub>2;
            Huffman.height ?t\<^sub>1 <= Huffman.height ?t\<^sub>2 |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 1, template_var 3))),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_app (template_hole 1, template_var 3))],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 3))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Huffman.sibling_swapLeaves_sibling",
     "[| consistent ?t; sibling ?t ?b ~= ?b; ?a ~= ?b |]
      ==> sibling (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>s (sibling ?t ?b))
           ?a =
          ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 2),
                 template_var 0),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3))),
           template_var 2),
         template_var 3))),
    ("Huffman.depth_height_imp_sibling_ne",
     "[| consistent ?t; depth ?t ?a = Huffman.height ?t;
         0 < Huffman.height ?t; ?a : alphabet ?t |]
      ==> sibling ?t ?a ~= ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 1), template_var 0),
          template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Huffman.cost_splitLeaf",
     "[| consistent ?t; ?a : alphabet ?t;
         freq ?t ?a = ?w\<^sub>a + ?w\<^sub>b |]
      ==> cost (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
          cost ?t + ?w\<^sub>a + ?w\<^sub>b",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)),
               template_var 2)),
           template_var 1)))),
    ("Huffman.alphabet_swapFourSyms",
     "[| ?a : alphabet ?t; ?b : alphabet ?t; ?c : alphabet ?t;
         ?d : alphabet ?t |]
      ==> alphabet (swapFourSyms ?t ?a ?b ?c ?d) = alphabet ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 3)))),
    ("Huffman.sibling_swapSyms_other_sibling",
     "[| consistent ?t; sibling ?t ?b ~= ?a; sibling ?t ?b ~= ?b;
         ?a ~= ?b |]
      ==> sibling (swapSyms ?t ?a ?b) (sibling ?t ?b) = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Huffman.freq_swapFourSyms",
     "[| consistent ?t; ?a : alphabet ?t; ?b : alphabet ?t;
         ?c : alphabet ?t; ?d : alphabet ?t |]
      ==> freq (swapFourSyms ?t ?a ?b ?c ?d) = freq ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 4))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 4)))),
    ("Huffman.freq_splitLeaf",
     "[| consistent ?t; ?b ~: alphabet ?t |]
      ==> freq (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
          (if ?a : alphabet ?t
           then %c. if c = ?a then ?w\<^sub>a
                    else if c = ?b then ?w\<^sub>b else freq ?t c
           else freq ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app (template_hole 6, template_var 4))),
             t_empty),
           template_app (template_hole 4, template_var 4))))),
    ("Huffman.splitLeaf_huffman_commute",
     "[| consistent\<^sub>F ?ts; ?ts ~= []; ?a : alphabet\<^sub>F ?ts;
         freq\<^sub>F ?ts ?a = ?w\<^sub>a + ?w\<^sub>b |]
      ==> splitLeaf (huffman ?ts) ?w\<^sub>a ?a ?w\<^sub>b ?b =
          huffman (splitLeaf\<^sub>F ?ts ?w\<^sub>a ?a ?w\<^sub>b ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)),
                 template_var 2),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Huffman.cost_swapSyms_le",
     "[| consistent ?t; ?a : alphabet ?t; ?b : alphabet ?t;
         freq ?t ?a <= freq ?t ?b; depth ?t ?a <= depth ?t ?b |]
      ==> cost (swapSyms ?t ?a ?b) <= cost ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Huffman.splitLeaf\<^sub>F_insortTree_when_in_alphabet_left",
     "[| ?a : alphabet ?t; consistent ?t; ?a ~: alphabet\<^sub>F ?ts;
         freq ?t ?a = ?w\<^sub>a + ?w\<^sub>b |]
      ==> splitLeaf\<^sub>F (insortTree ?t ?ts) ?w\<^sub>a ?a ?w\<^sub>b
           ?b =
          insortTree (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app (template_hole 7, template_var 3))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 5),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3)),
                 template_var 2),
               template_var 5),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 5),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("Huffman.splitLeaf\<^sub>F_insortTree_when_in_alphabet\<^sub>F_tail",
     "[| ?a : alphabet\<^sub>F ?ts; consistent\<^sub>F ?ts;
         ?a ~: alphabet ?t; freq\<^sub>F ?ts ?a = ?w\<^sub>a + ?w\<^sub>b |]
      ==> splitLeaf\<^sub>F (insortTree ?t ?ts) ?w\<^sub>a ?a ?w\<^sub>b
           ?b =
          insortTree ?t
           (splitLeaf\<^sub>F ?ts ?w\<^sub>a ?a ?w\<^sub>b ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app (template_hole 9, template_var 4))
            ),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_app (template_hole 6, template_var 3))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 4), template_var 5),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4)),
                 template_var 2),
               template_var 5),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 5),
               template_var 1),
             template_var 0))))),
    ("Huffman.freq_swapLeaves",
     "[| consistent ?t; ?a ~= ?b |]
      ==> freq (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
          (%c. if c = ?a then if ?b : alphabet ?t then ?w\<^sub>a else 0
               else if c = ?b
                    then if ?a : alphabet ?t then ?w\<^sub>b else 0
                    else freq ?t c)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1),
                 template_var 3),
               template_var 0),
             template_var 2)),
         t_empty))),
    ("Huffman.alphabet_swapLeaves",
     "alphabet (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
      (if ?a : alphabet ?t
       then if ?b : alphabet ?t then alphabet ?t
            else alphabet ?t - {?a} Un {?b}
       else if ?b : alphabet ?t then alphabet ?t - {?b} Un {?a}
            else alphabet ?t)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 7, template_var 4))),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app (template_hole 7, template_var 4))),
               template_app (template_hole 7, template_var 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 7, template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 4)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_app (template_hole 7, template_var 4))))),
    ("Huffman.freq_mergeSibling",
     "[| consistent ?t; ?a : alphabet ?t; sibling ?t ?a ~= ?a |]
      ==> freq (mergeSibling ?t ?a) =
          (%c. if c = ?a then freq ?t ?a + freq ?t (sibling ?t ?a)
               else if c = sibling ?t ?a then 0 else freq ?t c)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         t_empty))),
    ("Huffman.sibling_swapFourSyms_when_4th_is_sibling",
     "[| consistent ?t; ?a : alphabet ?t; ?b : alphabet ?t;
         ?c : alphabet ?t; ?a ~= ?b; sibling ?t ?c ~= ?c |]
      ==> sibling (swapFourSyms ?t ?a ?b ?c (sibling ?t ?c)) ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0))),
           template_var 2),
         template_var 1))),
    ("Huffman.optimum_splitLeaf",
     "[| consistent ?t; optimum ?t; ?a : alphabet ?t; ?b ~: alphabet ?t;
         freq ?t ?a = ?w\<^sub>a + ?w\<^sub>b;
         ALL c:alphabet ?t.
            ?w\<^sub>a <= freq ?t c & ?w\<^sub>b <= freq ?t c |]
      ==> optimum (splitLeaf ?t ?w\<^sub>a ?a ?w\<^sub>b ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app (template_hole 8, template_var 4))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 8, template_var 4)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1),
                   template_var 3),
                 template_var 0),
               template_var 2))
           ))),
    ("Huffman.cost_swapFourSyms_le",
     "[| consistent ?t; minima ?t ?a ?b; ?c : alphabet ?t; ?d : alphabet ?t;
         depth ?t ?c = Huffman.height ?t; depth ?t ?d = Huffman.height ?t;
         ?c ~= ?d |]
      ==> cost (swapFourSyms ?t ?a ?b ?c ?d) <= cost ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 1),
          template_app (template_hole 5, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 0),
          template_app (template_hole 5, template_var 4)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 4)))),
    ("Huffman.cost_swapSyms",
     "[| consistent ?t; ?a : alphabet ?t; ?b : alphabet ?t |]
      ==> cost (swapSyms ?t ?a ?b) + freq ?t ?a * depth ?t ?a +
          freq ?t ?b * depth ?t ?b =
          cost ?t + freq ?t ?a * depth ?t ?b + freq ?t ?b * depth ?t ?a",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Huffman.twice_freq_le_imp_minima",
     "[| ALL c:alphabet ?t.
            ?w\<^sub>a <= freq ?t c & ?w\<^sub>b <= freq ?t c;
         alphabet ?u = alphabet ?t Un {?b}; ?a : alphabet ?u; ?a ~= ?b;
         freq ?u =
         (%c. if c = ?a then ?w\<^sub>a
              else if c = ?b then ?w\<^sub>b else freq ?t c) |]
      ==> minima ?u ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 5)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 13, template_var 5)),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6))),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 13, template_var 2))
            ),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_equation
         (template_app (template_hole 10, template_var 2), t_empty)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Huffman.weight_swapLeaves",
     "[| consistent ?t; ?a ~= ?b |]
      ==> if ?a : alphabet ?t
          then if ?b : alphabet ?t
               then weight (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?a +
                    freq ?t ?b =
                    weight ?t + ?w\<^sub>a + ?w\<^sub>b
               else weight (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?a =
                    weight ?t + ?w\<^sub>b
          else if ?b : alphabet ?t
               then weight (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?b =
                    weight ?t + ?w\<^sub>a
               else weight (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
                    weight ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_app (template_hole 5, template_var 4))),
               template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app (template_hole 5, template_var 4))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 1, template_var 4), template_var 1),
 template_var 3),
                                     template_var 0),
                                   template_var 2))),
                             template_app
                              (template_app
                                (template_hole 0, template_var 4),
                               template_var 3))),
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 2))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 4)),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 1, template_var 4),
                                   template_var 1),
                                 template_var 3),
                               template_var 0),
                             template_var 2))),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 4)),
                     template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app (template_hole 5, template_var 4))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 1, template_var 4),
                                   template_var 1),
                                 template_var 3),
                               template_var 0),
                             template_var 2))),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 4)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 1, template_var 4),
                             template_var 1),
                           template_var 3),
                         template_var 0),
                       template_var 2))),
                 template_app (template_hole 2, template_var 4))))
           ))),
    ("Huffman.cost_swapLeaves",
     "[| consistent ?t; ?a ~= ?b |]
      ==> if ?a : alphabet ?t
          then if ?b : alphabet ?t
               then cost (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?a * depth ?t ?a +
                    freq ?t ?b * depth ?t ?b =
                    cost ?t + ?w\<^sub>a * depth ?t ?b +
                    ?w\<^sub>b * depth ?t ?a
               else cost (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?a * depth ?t ?a =
                    cost ?t + ?w\<^sub>b * depth ?t ?a
          else if ?b : alphabet ?t
               then cost (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) +
                    freq ?t ?b * depth ?t ?b =
                    cost ?t + ?w\<^sub>a * depth ?t ?b
               else cost (swapLeaves ?t ?w\<^sub>a ?a ?w\<^sub>b ?b) =
                    cost ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app (template_hole 7, template_var 4))),
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_app (template_hole 7, template_var 4))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_var 4), template_var 1),
 template_var 3),
                                     template_var 0),
                                   template_var 2))),
                             template_app
                              (template_app
                                (template_hole 2,
                                 template_app
                                  (template_app
                                    (template_hole 1, template_var 4),
                                   template_var 3)),
                               template_app
                                (template_app
                                  (template_hole 0, template_var 4),
                                 template_var 3)))),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 4),
                               template_var 2)),
                           template_app
                            (template_app (template_hole 0, template_var 4),
                             template_var 2)))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4, template_var 4)),
                           template_app
                            (template_app (template_hole 2, template_var 1),
                             template_app
                              (template_app
                                (template_hole 0, template_var 4),
                               template_var 2)))),
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3))))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_var 4),
                                   template_var 1),
                                 template_var 3),
                               template_var 0),
                             template_var 2))),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3)))))),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_app (template_hole 7, template_var 4))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_var 4),
                                   template_var 1),
                                 template_var 3),
                               template_var 0),
                             template_var 2))),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 4),
                             template_var 2)),
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 2)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 3, template_var 4),
                             template_var 1),
                           template_var 3),
                         template_var 0),
                       template_var 2))),
                 template_app (template_hole 4, template_var 4))))
           ))),
    ("Huffman.tree_induct_consistent",
     "[| consistent ?t;
         !!w\<^sub>b b a. ?P (Huffman.tree.Leaf w\<^sub>b b) a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               a : alphabet t\<^sub>1; a ~: alphabet t\<^sub>2;
               ?P t\<^sub>1 a; ?P t\<^sub>2 a |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               a ~: alphabet t\<^sub>1; a : alphabet t\<^sub>2;
               ?P t\<^sub>1 a; ?P t\<^sub>2 a |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               a ~: alphabet t\<^sub>1; a ~: alphabet t\<^sub>2;
               ?P t\<^sub>1 a; ?P t\<^sub>2 a |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a |]
      ==> ?P ?t ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           ))),
    ("Huffman.sibling_induct_consistent",
     "[| consistent ?t; !!w b a. ?P (Huffman.tree.Leaf w b) a;
         !!w w\<^sub>b b w\<^sub>c c a.
            b ~= c ==>
            ?P (Huffman.tree.Node w (Huffman.tree.Leaf w\<^sub>b b)
                 (Huffman.tree.Leaf w\<^sub>c c))
             a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               0 < Huffman.height t\<^sub>1 | 0 < Huffman.height t\<^sub>2;
               a : alphabet t\<^sub>1;
               sibling t\<^sub>1 a : alphabet t\<^sub>1;
               a ~: alphabet t\<^sub>2;
               sibling t\<^sub>1 a ~: alphabet t\<^sub>2; ?P t\<^sub>1 a |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               0 < Huffman.height t\<^sub>1 | 0 < Huffman.height t\<^sub>2;
               a ~: alphabet t\<^sub>1;
               sibling t\<^sub>2 a ~: alphabet t\<^sub>1;
               a : alphabet t\<^sub>2;
               sibling t\<^sub>2 a : alphabet t\<^sub>2; ?P t\<^sub>2 a |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a;
         !!w t\<^sub>1 t\<^sub>2 a.
            [| consistent t\<^sub>1; consistent t\<^sub>2;
               alphabet t\<^sub>1 Int alphabet t\<^sub>2 = {};
               0 < Huffman.height t\<^sub>1 | 0 < Huffman.height t\<^sub>2;
               a ~: alphabet t\<^sub>1; a ~: alphabet t\<^sub>2 |]
            ==> ?P (Huffman.tree.Node w t\<^sub>1 t\<^sub>2) a |]
      ==> ?P ?t ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.HuffmanMoreTemplates"
### 0.356s elapsed time, 0.448s cpu time, 0.000s GC time
val it = (): unit
